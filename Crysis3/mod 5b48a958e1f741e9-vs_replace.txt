// Water VS 1
// 9b3ac1b07bf3efc1 de67fe4f68dba921 

cbuffer cb3 : register(b3)
{
  float4 cb3[5];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[7];
}


cbuffer PER_BATCH : register(b0)
{
  float4 VS_SunColor : packoffset(c0);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_VS_WorldViewPos : packoffset(c6);
}

cbuffer PER_MATERIAL : register(b3)
{
  float4 MatSpecColor : packoffset(c1);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float2 __0Tilling__1DetailTilling__2__3 : packoffset(c4);
  float VertexWaveScale : packoffset(c6);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 1;
  r0.z = cb3[4].x;
  r0.xyzw = v1.xyxy * r0.xxzz;
  r0.xyzw = cb3[4].xxyy * r0.xyzw;
  o0.xyzw = float4(1,1,2,2) * r0.xyzw;
  o1.xyzw = float4(1,1,0.858578682,1);
  r0.xyz = v0.xyz;
  r0.w = 1;
  r1.x = dot(ObjWorldMatrix._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(ObjWorldMatrix._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(ObjWorldMatrix._m20_m21_m22_m23, r0.xyzw);
  r0.xyz = cb2[6].xyz + r1.xyz;
  r1.xyz = cb2[6].xyz + -r0.xyz;
  o4.xyz = r0.xyz;


  r0.x = 0 < r1.z;
  r0.y = r1.z < 0;
  o2.xyz = r1.xyz;
  r0.x = ((int)r0.x ? -1 : 0) + ((int)r0.y ? 1 : 0);
  o2.w = (int)r0.x;


// o2.xyz = r1.xyz;
// r0.x = 0 < r1.z;
// r0.y = r1.z < 0;
// r0.x = -((bool)r0.x ? -1 : 0) + ((bool)r0.y ? -1 : 0);
// o2.w = r0.x;
// r0.x = (0 < r1.z) ? asint(-1) : 0;
// r0.y = (r1.z < 0) ? asint(-1) : 0;
// r0.x = int(-r0.x) + int(r0.y);
// o2.w = r0.x;

  
// int x, y;  
// x = (0 < r1.z) ? -1 : 0;
// y = (r1.z < 0) ? -1 : 0;
// o2.xyz = r1.xyz;
// r0.x = y-x;
// o2.w = r0.x;
  
  r0.xyz = VS_SunColor.xyz * cb3[1].xyz;
  o3.xyz = VS_SunColor.www * r0.xyz;
  o3.w = 1;
  o4.w = v0.z;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.960.8229
//
//   using 3Dmigoto v1.1.34 on Thu Jul 23 18:56:25 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 VS_SunColor;                // Offset:    0 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatSpecColor;               // Offset:   16 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float2 __0Tilling__1DetailTilling__2__3;// Offset:   64 Size:     8
//   float VertexWaveScale;             // Offset:   96 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    2        1
// PER_MATERIAL                      cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb2[7], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 2
mov r0.x, l(1.000000)
mov r0.z, cb3[4].x
mul r0.xyzw, r0.xxzz, v1.xyxy
mul r0.xyzw, r0.xyzw, cb3[4].xxyy
mul o0.xyzw, r0.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000)
mov o1.xyzw, l(1.000000,1.000000,0.858579,1.000000)
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb1[0].xyzw, r0.xyzw
dp4 r1.y, cb1[1].xyzw, r0.xyzw
dp4 r1.z, cb1[2].xyzw, r0.xyzw
add r0.xyz, r1.xyzx, cb2[6].xyzx
add r1.xyz, -r0.xyzx, cb2[6].xyzx
mov o4.xyz, r0.xyzx
lt r0.x, l(0.000000), r1.z
lt r0.y, r1.z, l(0.000000)
mov o2.xyz, r1.xyzx
iadd r0.x, -r0.x, r0.y
itof o2.w, r0.x
mul r0.xyz, cb0[0].xyzx, cb3[1].xyzx
mul o3.xyz, r0.xyzx, cb0[0].wwww
mov o3.w, l(1.000000)
mov o4.w, v0.z
ret 
// Approximately 24 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
