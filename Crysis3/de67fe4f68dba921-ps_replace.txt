cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 mViewProjPrev : packoffset(c0);
  float4 PS_WorldViewPos : packoffset(c4);
  float4 vBBoxMin : packoffset(c5);
  float4 vBBoxMax : packoffset(c6);
  float4 PS_NearFarClipDist : packoffset(c7);
  float4 PS_HPosScale : packoffset(c8);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 mViewProj : packoffset(c0);
}

cbuffer PER_FRAME : register(b2)
{
  float4 g_PS_SunLightDir : packoffset(c2);
  float4 g_PS_ProjRatio : packoffset(c223);
}

cbuffer PER_MATERIAL : register(b3)
{
  float4 MatSpecColor : packoffset(c1);
  float2 __0RealtimeReflMul__1EnvCubeReflMul__2__3 : packoffset(c6);
  float2 __0DetailNormalsScale__1NormalsScale__2__3 : packoffset(c7);
  float4 __0__1__2__3EnvCubeScale : packoffset(c8);
  float4 __0SoftIntersectionFactor__1RainTilling__2DetailTilling__3Tilling : packoffset(c9);
}
SamplerState RefractionHalfResSampler_s : register(s0);
SamplerState ReflSamplerPrev_s : register(s1);
SamplerState envMapSamplerCUBE_s : register(s2);
SamplerState sceneDepthSamplerScaled_s : register(s3);
Texture2D<float4> sceneDepthSamplerScaled : register(t0);
TextureCube<float4> envMapSamplerCUBE : register(t1);
Texture2D<float4> RefractionHalfResSampler : register(t2);
Texture2D<float4> ReflSamplerPrev : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.z = PS_NearFarClipDist.w * v2.w;
  r1.xy = v2.xy / v2.ww;
  r1.x = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r1.xy).x;
  r1.x = -v2.w * PS_NearFarClipDist.w + r1.x;
  r1.x = r1.x < 0;
  if (r1.x != 0) discard;
  r1.xyz = PS_WorldViewPos.xyz + -v5.xyz;
  r1.xyz = r1.zzz * float3(-0,-0,-2) + r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = vBBoxMax.xyz + vBBoxMin.xyz;
  r3.xyz = float3(0.5,0.5,0.5) * r2.xyz;
  r4.xyz = -r2.xyz * float3(0.5,0.5,0.5) + vBBoxMax.xyz;
  r4.xyz = __0__1__2__3EnvCubeScale.www * r4.xyz + r3.xyz;
  r5.xyz = -r2.xyz * float3(0.5,0.5,0.5) + vBBoxMin.xyz;
  r3.xyz = __0__1__2__3EnvCubeScale.www * r5.xyz + r3.xyz;
  r4.xyz = -v5.xyz + r4.xyz;
  r4.xyz = r4.xyz / r1.xyz;
  r3.xyz = -v5.xyz + r3.xyz;
  r3.xyz = r3.xyz / r1.xyz;
  r5.xyz = float3(0,0,0) < r1.xyz;
  r3.xyz = r5.xyz ? r3.xyz : r4.xyz;
  r1.w = min(r3.x, r3.y);
  r1.w = min(r1.w, r3.z);
  r1.xyz = r1.xyz * r1.www + v5.xyz;
  r1.xyz = -r2.xyz * float3(0.5,0.5,0.5) + r1.xyz;
  r1.w = -MatSpecColor.w * 6 + 6;
  r1.xyzw = envMapSamplerCUBE.SampleLevel(envMapSamplerCUBE_s, r1.xyz, r1.w).xyzw;
  r1.w = r1.w * r1.w;
  r1.w = 16 * r1.w;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = MatSpecColor.xyz * r1.xyz;
  r1.w = 0.150000006 * PS_HPosScale.y;
  r2.xyz = -PS_WorldViewPos.xyz + v5.xyz;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r3.xyz = r2.zzz * float3(-0,-0,-2) + r2.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r3.xyz * r2.www;
  r4.xyz = v5.xyz;
  r4.w = 1;
  r5.x = dot(mViewProj._m00_m01_m02_m03, r4.xyzw);
  r5.y = dot(mViewProj._m10_m11_m12_m13, r4.xyzw);
  r0.w = dot(mViewProj._m30_m31_m32_m33, r4.xyzw);
  r2.w = 0.5 * r0.w;
  r5.xy = r5.xy * float2(0.5,-0.5) + r2.ww;
  r0.xy = PS_HPosScale.xy * r5.xy;
  r5.xyz = r3.xyz * float3(129,129,129) + v5.xyz;
  r5.w = 1;
  r6.x = dot(mViewProj._m00_m01_m02_m03, r5.xyzw);
  r6.y = dot(mViewProj._m10_m11_m12_m13, r5.xyzw);
  r2.w = dot(mViewProj._m30_m31_m32_m33, r5.xyzw);
  r3.w = 0.5 * r2.w;
  r5.xy = r6.xy * float2(0.5,-0.5) + r3.ww;
  r5.xy = PS_HPosScale.xy * r5.xy;
  r5.xy = r5.xy / r2.ww;
  r2.w = 1 + -r5.y;
  r2.w = min(r2.w, r5.y);
  r3.w = r1.w < r2.w;
  r2.w = saturate(r2.w / r1.w);
  r6.w = r3.w ? 1 : r2.w;
  r2.w = 3.1875 / PS_NearFarClipDist.y;
  r7.xyz = r3.xyz * float3(17,17,17) + v5.xyz;
  r7.w = 1;
  r8.x = dot(mViewProj._m00_m01_m02_m03, r7.xyzw);
  r8.y = dot(mViewProj._m10_m11_m12_m13, r7.xyzw);
  r3.w = dot(mViewProj._m20_m21_m22_m23, r7.xyzw);
  r7.w = dot(mViewProj._m30_m31_m32_m33, r7.xyzw);
  r3.w = r3.w / r7.w;
  r3.w = -g_PS_ProjRatio.x + r3.w;
  r7.z = g_PS_ProjRatio.y / r3.w;
  r3.w = 0.5 * r7.w;
  r5.zw = r8.xy * float2(0.5,-0.5) + r3.ww;
  r7.xy = PS_HPosScale.xy * r5.zw;
  r8.xyzw = r7.xyzw + -r0.xyzw;
  r9.xyzw = r8.xyzw * float4(0.125,0.125,0.125,0.125) + r0.xyzw;
  r5.zw = r9.xy / r9.ww;
  r3.w = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r5.zw).x;
  r3.w = r3.w + -r9.z;
  r3.w = abs(r3.w) >= r2.w;
  r9.xyzw = r8.xyzw * float4(0.25,0.25,0.25,0.25) + r0.xyzw;
  r5.zw = r9.xy / r9.ww;
  r5.z = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r5.zw).x;
  r10.xyzw = r8.xyzw * float4(0.375,0.375,0.375,0.375) + r0.xyzw;
  r9.xy = r10.xy / r10.ww;
  r5.w = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r9.xy).x;
  r11.xyzw = r8.xyzw * float4(0.5,0.5,0.5,0.5) + r0.xyzw;
  r9.xy = r11.xy / r11.ww;
  r9.x = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r9.xy).x;
  r12.xyzw = r8.xyzw * float4(0.625,0.625,0.625,0.625) + r0.xyzw;
  r9.yw = r12.xy / r12.ww;
  r9.y = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r9.yw).x;
  r13.xyzw = r8.xyzw * float4(0.75,0.75,0.75,0.75) + r0.xyzw;
  r10.xy = r13.xy / r13.ww;
  r9.w = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r10.xy).x;
  r14.xyzw = r8.xyzw * float4(0.875,0.875,0.875,0.875) + r0.xyzw;
  r10.xy = r14.xy / r14.ww;
  r0.z = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r10.xy).x;
  r7.xy = r7.xy / r7.ww;
  r7.x = sceneDepthSamplerScaled.Sample(sceneDepthSamplerScaled_s, r7.xy).x;
  if (r3.w != 0) {
    r3.w = r5.z + -r9.z;
    r3.w = abs(r3.w) >= r2.w;
    if (r3.w != 0) {
      r3.w = r5.w + -r10.z;
      r3.w = abs(r3.w) >= r2.w;
      if (r3.w != 0) {
        r3.w = r9.x + -r11.z;
        r3.w = abs(r3.w) >= r2.w;
        if (r3.w != 0) {
          r3.w = r9.y + -r12.z;
          r3.w = abs(r3.w) >= r2.w;
          if (r3.w != 0) {
            r3.w = r9.w + -r13.z;
            r3.w = abs(r3.w) >= r2.w;
            if (r3.w != 0) {
              r0.z = r0.z + -r14.z;
              r0.z = abs(r0.z) >= r2.w;
              if (r0.z != 0) {
                r0.z = r7.x + -r7.z;
                r0.z = abs(r0.z) >= r2.w;
                r0.z = r0.z ? 0 : 1;
              } else {
                r0.z = 0.875;
              }
            } else {
              r0.z = 0.75;
            }
          } else {
            r0.z = 0.625;
          }
        } else {
          r0.z = 0.5;
        }
      } else {
        r0.z = 0.375;
      }
    } else {
      r0.z = 0.25;
    }
  } else {
    r0.z = 0.125;
  }
  r2.w = 0 < r0.z;
  if (r2.w != 0) {
    r0.xyw = r8.xyw * r0.zzz + r0.xyw;
    r0.xy = r0.xy / r0.ww;
    r7.xyzw = RefractionHalfResSampler.SampleLevel(RefractionHalfResSampler_s, r0.xy, 0).xyzw;
    r0.x = 32 * r7.w;
    r6.xyz = r7.xyz * r0.xxx;
    r0.x = 1 + -r0.y;
    r0.x = min(r0.x, r0.y);
    r0.y = r1.w < r0.x;
    r0.x = saturate(r0.x / r1.w);
    r0.x = r0.y ? 1 : r0.x;
    r0.y = 1 + -r0.z;
    r6.w = r0.x * r0.y + r6.w;
  } else {
    r0.xyzw = RefractionHalfResSampler.SampleLevel(RefractionHalfResSampler_s, r5.xy, 0).xyzw;
    r0.w = 32 * r0.w;
    r6.xyz = r0.xyz * r0.www;
  }
  r0.x = dot(r2.xyz, r3.xyz);
  r0.x = saturate(0.5 + r0.x);
  r0.xyzw = r6.xyzw * r0.xxxx;
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz / g_PS_SunLightDir.www;
  r1.xyz = __0RealtimeReflMul__1EnvCubeReflMul__2__3.yyy * r1.xyz;
  r0.w = min(1, r0.w);
  r0.xyz = r0.xyz * __0RealtimeReflMul__1EnvCubeReflMul__2__3.xxx + -r1.xyz;
  r0.xyz = r0.www * r0.xyz + r1.xyz;
  r1.x = dot(mViewProjPrev._m00_m01_m02_m03, r4.xyzw);
  r1.y = dot(mViewProjPrev._m10_m11_m12_m13, r4.xyzw);
  r0.w = dot(mViewProjPrev._m30_m31_m32_m33, r4.xyzw);
  r1.xy = r1.xy * float2(1,-1) + r0.ww;
  r1.xy = float2(0.5,0.5) * r1.xy;
  r1.xy = r1.xy / r0.ww;
  r2.x = PS_HPosScale.z * r1.x;
  r0.w = 1 + -r1.y;
  r2.y = -r0.w * PS_HPosScale.w + 1;
  r1.xyzw = ReflSamplerPrev.Sample(ReflSamplerPrev_s, r2.xy).xyzw;
  r0.w = r1.w * r1.w;
  r0.w = 32 * r0.w;
  r1.xyz = r1.xyz * r0.www;
  r1.xyz = r1.xyz / g_PS_SunLightDir.www;
  r1.xyz = float3(0.25,0.25,0.25) * r1.xyz;
  r0.xyz = r0.xyz * float3(0.75,0.75,0.75) + r1.xyz;
  r0.xyz = g_PS_SunLightDir.www * r0.xyz;
  r0.w = 1;
  r0.w = saturate(dot(r0.xyzw, float4(0.03125,0.03125,0.03125,0.00392156886)));
  r0.w = 255 * r0.w;
  r0.w = ceil(r0.w);
  r1.xy = float2(0.00392156886,0.125490203) * r0.ww;
  o0.xyz = r0.xyz / r1.yyy;
  o0.w = sqrt(r1.x);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\GAMES\Crysis 3\wrapper1349(188,24-35): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
D:\GAMES\Crysis 3\wrapper1349(185,22-34): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
D:\GAMES\Crysis 3\wrapper1349(182,20-32): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
D:\GAMES\Crysis 3\wrapper1349(179,18-30): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
D:\GAMES\Crysis 3\wrapper1349(176,16-28): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
D:\GAMES\Crysis 3\wrapper1349(173,14-26): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
D:\GAMES\Crysis 3\wrapper1349(170,12-23): warning X4121: gradient-based operations must be moved out of flow control to prevent divergence. Performance may improve by using a non-gradient operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
