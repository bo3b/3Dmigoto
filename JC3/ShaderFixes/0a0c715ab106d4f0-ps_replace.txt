// Decals. Auto-fixed.
// ---- Created with 3Dmigoto v1.2.44 on Sun Sep 25 23:48:16 2016

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts[13] : packoffset(c0);
}

SamplerState DepthMap_s : register(s0);
SamplerState NormalMap_s : register(s2);
SamplerState MPM_s : register(s3);
SamplerState Tint_AlphaMask_s : register(s4);
Texture2D<float4> DepthMap : register(t0);
Texture2D<float4> NormalMap : register(t2);
Texture2D<float4> MPM : register(t3);
Texture2D<float4> Tint_AlphaMask : register(t4);


// 3Dmigoto declarations
#include <ShaderFixes/matrix.hlsl>
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = InstanceConsts[1].xyzw * r0.yyyy;
  r1.xyzw = r0.xxxx * InstanceConsts[0].xyzw + r1.xyzw;
  r0.xy = InstanceConsts[12].xy * r0.xy;
  r0.x = DepthMap.Sample(DepthMap_s, r0.xy).x;
  r0.xyzw = r0.xxxx * InstanceConsts[2].xyzw + r1.xyzw;
  r0.xyzw = InstanceConsts[3].xyzw + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  
matrix ivp = matrix(InstanceConsts[0], InstanceConsts[1], InstanceConsts[2], InstanceConsts[3]);
matrix vp = inverse(ivp);

float4 tmp = float4(r0.xyz, 1);
tmp = mul(tmp, vp);
float4 stereo = StereoParams.Load(0);
tmp.x -= stereo.x * (tmp.w - stereo.y) / 2;
r0.xyz = mul(tmp, ivp);

  r0.xyz = -InstanceConsts[4].xyz + r0.xyz;
  r1.xyz = InstanceConsts[5].yyy * v2.xyz;
  r1.x = dot(r0.xyz, r1.xyz);
  r2.xyz = InstanceConsts[5].xxx * v3.xyz;
  r1.y = dot(r0.xyz, r2.xyz);
  r2.xyz = InstanceConsts[5].zzz * v4.xyz;
  r1.z = dot(r0.xyz, r2.xyz);
  r0.xyz = r1.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.w = min(1, abs(r1.z));
  r0.w = InstanceConsts[5].w * -r0.w + 1;
  r1.xyz = cmp(r0.xyz < float3(0,0,0));
  r1.x = (int)r1.y | (int)r1.x;
  r1.x = (int)r1.z | (int)r1.x;
  if (r1.x != 0) discard;
  r1.xyz = float3(1,1,1) + -r0.xyz;
  r1.xyz = cmp(r1.xyz < float3(0,0,0));
  r0.z = (int)r1.y | (int)r1.x;
  r0.z = (int)r1.z | (int)r0.z;
  if (r0.z != 0) discard;
  r1.xy = r0.xy * InstanceConsts[10].xy + InstanceConsts[10].zw;
  r0.xy = r0.xy * InstanceConsts[6].xy + InstanceConsts[6].zw;
  r1.xyzw = Tint_AlphaMask.Sample(Tint_AlphaMask_s, r1.xy).xyzw;
  r0.z = r1.w + -r1.y;
  r0.z = InstanceConsts[8].w * r0.z + r1.y;
  r1.xyz = InstanceConsts[8].xyz * r1.xyz + -InstanceConsts[8].xyz;
  r0.z = 1 + -r0.z;
  r0.z = -InstanceConsts[9].w * r0.z + 1;
  r1.w = saturate(InstanceConsts[4].w);
  r0.z = r1.w * r0.z;
  r0.z = r0.w * r0.z;
  r2.xyz = InstanceConsts[9].xyz * r0.zzz;
  o3.w = r0.z;
  o0.w = saturate(r2.x);
  r0.z = InstanceConsts[9].w * InstanceConsts[8].w;
  o0.xyz = r0.zzz * r1.xyz + InstanceConsts[8].xyz;
  o1.w = saturate(r2.y);
  o2.w = saturate(r2.z);
  r1.xyz = NormalMap.Sample(NormalMap_s, r0.xy).xyz;
  r0.xyz = MPM.Sample(MPM_s, r0.xy).xyz;
  o2.xyz = r0.xyz;
  r0.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.xyz = v3.xyz * r0.yyy;
  r0.xyw = v2.xyz * r0.xxx + -r1.xyz;
  r0.xyz = v4.xyz * r0.zzz + r0.xyw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o3.x = InstanceConsts[11].w;
  o3.yz = float2(0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[13];         // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthMap                          sampler      NA          NA    0        1
// NormalMap                         sampler      NA          NA    2        1
// MPM                               sampler      NA          NA    3        1
// Tint_AlphaMask                    sampler      NA          NA    4        1
// DepthMap                          texture  float4          2d    0        1
// NormalMap                         texture  float4          2d    2        1
// MPM                               texture  float4          2d    3        1
// Tint_AlphaMask                    texture  float4          2d    4        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
div r0.xy, v1.xyxx, v1.wwww
mul r1.xyzw, r0.yyyy, cb1[1].xyzw
mad r1.xyzw, r0.xxxx, cb1[0].xyzw, r1.xyzw
mul r0.xy, r0.xyxx, cb1[12].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
mad r0.xyzw, r0.xxxx, cb1[2].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb1[3].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r0.xyz, r0.xyzx, -cb1[4].xyzx
mul r1.xyz, v2.xyzx, cb1[5].yyyy
dp3 r1.x, r0.xyzx, r1.xyzx
mul r2.xyz, v3.xyzx, cb1[5].xxxx
dp3 r1.y, r0.xyzx, r2.xyzx
mul r2.xyz, v4.xyzx, cb1[5].zzzz
dp3 r1.z, r0.xyzx, r2.xyzx
mad r0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
min r0.w, |r1.z|, l(1.000000)
mad r0.w, cb1[5].w, -r0.w, l(1.000000)
lt r1.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r1.x, r1.y, r1.x
or r1.x, r1.z, r1.x
discard_nz r1.x
add r1.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.z, r1.y, r1.x
or r0.z, r1.z, r0.z
discard_nz r0.z
mad r1.xy, r0.xyxx, cb1[10].xyxx, cb1[10].zwzz
mad r0.xy, r0.xyxx, cb1[6].xyxx, cb1[6].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t4.xyzw, s4
add r0.z, -r1.y, r1.w
mad r0.z, cb1[8].w, r0.z, r1.y
mad r1.xyz, cb1[8].xyzx, r1.xyzx, -cb1[8].xyzx
add r0.z, -r0.z, l(1.000000)
mad r0.z, -cb1[9].w, r0.z, l(1.000000)
mov_sat r1.w, cb1[4].w
mul r0.z, r0.z, r1.w
mul r0.z, r0.z, r0.w
mul r2.xyz, r0.zzzz, cb1[9].xyzx
mov o3.w, r0.z
mov_sat o0.w, r2.x
mul r0.z, cb1[8].w, cb1[9].w
mad o0.xyz, r0.zzzz, r1.xyzx, cb1[8].xyzx
mov_sat o1.w, r2.y
mov_sat o2.w, r2.z
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t3.xyzw, s3
mov o2.xyz, r0.xyzx
mad r0.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r1.xyz, r0.yyyy, v3.xyzx
mad r0.xyw, v2.xyxz, r0.xxxx, -r1.xyxz
mad r0.xyz, v4.xyzx, r0.zzzz, r0.xywx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o3.x, cb1[11].w
mov o3.yz, l(0,0,0,0)
ret 
// Approximately 59 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.2.44 on Sun Sep 25 23:48:16 2016
//
//
// Buffer Definitions: 
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts[13];         // Offset:    0 Size:   208
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthMap_s                        sampler      NA          NA    0        1
// NormalMap_s                       sampler      NA          NA    2        1
// MPM_s                             sampler      NA          NA    3        1
// Tint_AlphaMask_s                  sampler      NA          NA    4        1
// DepthMap                          texture  float4          2d    0        1
// NormalMap                         texture  float4          2d    2        1
// MPM                               texture  float4          2d    3        1
// Tint_AlphaMask                    texture  float4          2d    4        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
div r0.xy, v1.xyxx, v1.wwww
mul r1.xyzw, r0.yyyy, cb1[1].xyzw
mad r1.xyzw, r0.xxxx, cb1[0].xyzw, r1.xyzw
mul r0.xy, r0.xyxx, cb1[12].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xyzw, s0
mad r0.xyzw, r0.xxxx, cb1[2].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb1[3].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r0.xyz, r0.xyzx, -cb1[4].xyzx
mul r1.xyz, v2.xyzx, cb1[5].yyyy
dp3 r1.x, r0.xyzx, r1.xyzx
mul r2.xyz, v3.xyzx, cb1[5].xxxx
dp3 r1.y, r0.xyzx, r2.xyzx
mul r2.xyz, v4.xyzx, cb1[5].zzzz
dp3 r1.z, r0.xyzx, r2.xyzx
mad r0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
lt r1.xyw, r0.xyxz, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r1.x, r1.y
or r0.w, r0.w, r1.w
itof r0.w, r0.w
ne r0.w, r0.w, l(0.000000)
discard_nz r0.w
add r1.xyw, -r0.xyxz, l(1.000000, 1.000000, 0.000000, 1.000000)
lt r1.xyw, r1.xyxw, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.z, r1.x, r1.y
or r0.z, r0.z, r1.w
itof r0.z, r0.z
ne r0.z, r0.z, l(0.000000)
discard_nz r0.z
min r0.z, |r1.z|, l(1.000000)
mad r0.z, cb1[5].w, -r0.z, l(1.000000)
mad r1.xy, r0.xyxx, cb1[10].xyxx, cb1[10].zwzz
mad r0.xy, r0.xyxx, cb1[6].xyxx, cb1[6].zwzz
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t4.xyzw, s4
add r0.w, -r1.y, r1.w
mad r0.w, cb1[8].w, r0.w, r1.y
mad r1.xyz, cb1[8].xyzx, r1.xyzx, -cb1[8].xyzx
add r0.w, -r0.w, l(1.000000)
mad r0.w, -cb1[9].w, r0.w, l(1.000000)
mov_sat r1.w, cb1[4].w
mul r0.w, r0.w, r1.w
mul r0.z, r0.w, r0.z
mul r2.xyz, r0.zzzz, cb1[9].xyzx
mov_sat o0.w, r2.x
mul r0.w, cb1[8].w, cb1[9].w
mad o0.xyz, r0.wwww, r1.xyzx, cb1[8].xyzx
mov_sat o1.w, r2.y
mov_sat o2.w, r2.z
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.xyw, r0.xyxx, t3.xywz, s3
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r2.xyz, r1.yyyy, v3.xyzx
mad r1.xyw, v2.xyxz, r1.xxxx, -r2.xyxz
mad r1.xyz, v4.xyzx, r1.zzzz, r1.xywx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mad o1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o2.xyz, r0.xywx
mov o3.x, cb1[11].w
mov o3.yz, l(0,0,0,0)
mov o3.w, r0.z
ret 
// Approximately 63 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
