// Soft Shadows

cbuffer PerInstanceConstants : register(b1)
{
  float Falloff : packoffset(c0);
  float MaxShadow : packoffset(c0.y);
  float2 unused_params : packoffset(c0.z);
  row_major float4x4 ScreenToLocal : packoffset(c1);
}

SamplerState PointClampSampler_s : register(s1);
Texture2D<float4> DepthMap : register(t1);
Texture2D<float4> WaterPlaneDepthMap : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  matrix ivp, vp;
ivp = ScreenToLocal;

// Work out the view-projection matrix from it's inverse:
vp[0].x = ivp[1].y*(ivp[2].z*ivp[3].w - ivp[2].w*ivp[3].z) + ivp[1].z*(ivp[2].w*ivp[3].y - ivp[2].y*ivp[3].w) + ivp[1].w*(ivp[2].y*ivp[3].z - ivp[2].z*ivp[3].y);
vp[0].y = ivp[0].y*(ivp[2].w*ivp[3].z - ivp[2].z*ivp[3].w) + ivp[0].z*(ivp[2].y*ivp[3].w - ivp[2].w*ivp[3].y) + ivp[0].w*(ivp[2].z*ivp[3].y - ivp[2].y*ivp[3].z);
vp[0].z = ivp[0].y*(ivp[1].z*ivp[3].w - ivp[1].w*ivp[3].z) + ivp[0].z*(ivp[1].w*ivp[3].y - ivp[1].y*ivp[3].w) + ivp[0].w*(ivp[1].y*ivp[3].z - ivp[1].z*ivp[3].y);
vp[0].w = ivp[0].y*(ivp[1].w*ivp[2].z - ivp[1].z*ivp[2].w) + ivp[0].z*(ivp[1].y*ivp[2].w - ivp[1].w*ivp[2].y) + ivp[0].w*(ivp[1].z*ivp[2].y - ivp[1].y*ivp[2].z);
vp[1].x = ivp[1].x*(ivp[2].w*ivp[3].z - ivp[2].z*ivp[3].w) + ivp[1].z*(ivp[2].x*ivp[3].w - ivp[2].w*ivp[3].x) + ivp[1].w*(ivp[2].z*ivp[3].x - ivp[2].x*ivp[3].z);
vp[1].y = ivp[0].x*(ivp[2].z*ivp[3].w - ivp[2].w*ivp[3].z) + ivp[0].z*(ivp[2].w*ivp[3].x - ivp[2].x*ivp[3].w) + ivp[0].w*(ivp[2].x*ivp[3].z - ivp[2].z*ivp[3].x);
vp[1].z = ivp[0].x*(ivp[1].w*ivp[3].z - ivp[1].z*ivp[3].w) + ivp[0].z*(ivp[1].x*ivp[3].w - ivp[1].w*ivp[3].x) + ivp[0].w*(ivp[1].z*ivp[3].x - ivp[1].x*ivp[3].z);
vp[1].w = ivp[0].x*(ivp[1].z*ivp[2].w - ivp[1].w*ivp[2].z) + ivp[0].z*(ivp[1].w*ivp[2].x - ivp[1].x*ivp[2].w) + ivp[0].w*(ivp[1].x*ivp[2].z - ivp[1].z*ivp[2].x);
vp[2].x = ivp[1].x*(ivp[2].y*ivp[3].w - ivp[2].w*ivp[3].y) + ivp[1].y*(ivp[2].w*ivp[3].x - ivp[2].x*ivp[3].w) + ivp[1].w*(ivp[2].x*ivp[3].y - ivp[2].y*ivp[3].x);
vp[2].y = ivp[0].x*(ivp[2].w*ivp[3].y - ivp[2].y*ivp[3].w) + ivp[0].y*(ivp[2].x*ivp[3].w - ivp[2].w*ivp[3].x) + ivp[0].w*(ivp[2].y*ivp[3].x - ivp[2].x*ivp[3].y);
vp[2].z = ivp[0].x*(ivp[1].y*ivp[3].w - ivp[1].w*ivp[3].y) + ivp[0].y*(ivp[1].w*ivp[3].x - ivp[1].x*ivp[3].w) + ivp[0].w*(ivp[1].x*ivp[3].y - ivp[1].y*ivp[3].x);
vp[2].w = ivp[0].x*(ivp[1].w*ivp[2].y - ivp[1].y*ivp[2].w) + ivp[0].y*(ivp[1].x*ivp[2].w - ivp[1].w*ivp[2].x) + ivp[0].w*(ivp[1].y*ivp[2].x - ivp[1].x*ivp[2].y);
vp[3].x = ivp[1].x*(ivp[2].z*ivp[3].y - ivp[2].y*ivp[3].z) + ivp[1].y*(ivp[2].x*ivp[3].z - ivp[2].z*ivp[3].x) + ivp[1].z*(ivp[2].y*ivp[3].x - ivp[2].x*ivp[3].y);
vp[3].y = ivp[0].x*(ivp[2].y*ivp[3].z - ivp[2].z*ivp[3].y) + ivp[0].y*(ivp[2].z*ivp[3].x - ivp[2].x*ivp[3].z) + ivp[0].z*(ivp[2].x*ivp[3].y - ivp[2].y*ivp[3].x);
vp[3].z = ivp[0].x*(ivp[1].z*ivp[3].y - ivp[1].y*ivp[3].z) + ivp[0].y*(ivp[1].x*ivp[3].z - ivp[1].z*ivp[3].x) + ivp[0].z*(ivp[1].y*ivp[3].x - ivp[1].x*ivp[3].y);
vp[3].w = ivp[0].x*(ivp[1].y*ivp[2].z - ivp[1].z*ivp[2].y) + ivp[0].y*(ivp[1].z*ivp[2].x - ivp[1].x*ivp[2].z) + ivp[0].z*(ivp[1].x*ivp[2].y - ivp[1].y*ivp[2].x);
vp /= determinant(ivp);
  
  r0.xy = v1.xy / v1.zz;
  r1.xyzw = ScreenToLocal._m10_m11_m12_m13 * r0.yyyy;
  r1.xyzw = r0.xxxx * ScreenToLocal._m00_m01_m02_m03 + r1.xyzw;
  r0.z = DepthMap.SampleLevel(PointClampSampler_s, r0.xy, 0).x;
  r0.x = WaterPlaneDepthMap.SampleLevel(PointClampSampler_s, r0.xy, 0).x;
  r2.xyzw = r0.xxxx * ScreenToLocal._m20_m21_m22_m23 + r1.xyzw;
  r0.xyzw = r0.zzzz * ScreenToLocal._m20_m21_m22_m23 + r1.xyzw;
  r0.xyzw = ScreenToLocal._m30_m31_m32_m33 + r0.xyzw;
  r0.xyz = r0.xyz / r0.www;
  
  float4 stereo = StereoParams.Load(0);
  float4 tmp = mul(float4(r0.xyz, 1), vp);
  tmp.x -= stereo.x * (tmp.w - stereo.y) / 2;
  r0.xyz = mul(tmp, ivp);
  
  r0.x = dot(r0.xyz, r0.xyz);
  r0.w = sqrt(r0.x);
  r1.xyzw = ScreenToLocal._m30_m31_m32_m33 + r2.xyzw;
  r1.xyz = r1.xyz / r1.www;
  r1.x = dot(r1.xyz, r1.xyz);
  r0.xyz = sqrt(r1.xxx);
  r0.xyzw = min(float4(1,1,1,1), r0.xyzw);
  r0.xyzw = log2(r0.xyzw);
  r0.xyzw = Falloff * r0.xyzw;
  r0.xyzw = exp2(r0.xyzw);
  r0.xyzw = MaxShadow + r0.xyzw;
  r1.x = 1 + MaxShadow;
  r0.xyzw = r0.xyzw / r1.xxxx;
  o0.xyzw = float4(0.5,0.5,0.5,0.5) * r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.27 on Thu Jan 28 13:05:45 2016
//
//
// Buffer Definitions: 
//
// cbuffer PerInstanceConstants
// {
//
//   float Falloff;                     // Offset:    0 Size:     4
//   float MaxShadow;                   // Offset:    4 Size:     4
//   float2 unused_params;              // Offset:    8 Size:     8 [unused]
//   row_major float4x4 ScreenToLocal;  // Offset:   16 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PointClampSampler                 sampler      NA          NA    1        1
// DepthMap                          texture  float4          2d    1        1
// WaterPlaneDepthMap                texture  float4          2d    2        1
// PerInstanceConstants              cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 3
div r0.xy, v1.xyxx, v1.zzzz
mul r1.xyzw, r0.yyyy, cb1[2].xyzw
mad r1.xyzw, r0.xxxx, cb1[1].xyzw, r1.xyzw
sample_l_indexable(texture2d)(float,float,float,float) r0.z, r0.xyxx, t1.yzxw, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
mad r2.xyzw, r0.xxxx, cb1[3].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb1[3].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb1[4].xyzw
div r0.xyz, r0.xyzx, r0.wwww
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.w, r0.x
add r1.xyzw, r2.xyzw, cb1[4].xyzw
div r1.xyz, r1.xyzx, r1.wwww
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r0.xyz, r1.xxxx
min r0.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
log r0.xyzw, r0.xyzw
mul r0.xyzw, r0.xyzw, cb1[0].xxxx
exp r0.xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb1[0].yyyy
add r1.x, cb1[0].y, l(1.000000)
div r0.xyzw, r0.xyzw, r1.xxxx
mul o0.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
ret 
// Approximately 24 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
