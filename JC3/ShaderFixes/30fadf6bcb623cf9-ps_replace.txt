// Lensflares PS

cbuffer GlobalConstants : register(b0)
{
  float4 Globals[95] : packoffset(c0);
}

cbuffer cbInstanceConsts : register(b1)
{
  float4 InstanceConsts : packoffset(c0);
}

SamplerState DiffuseTexture_s : register(s0);
SamplerState DepthTexture_s : register(s1);
Texture2D<float4> DiffuseTexture : register(t0);
Texture2D<float4> DepthTexture : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include <ShaderFixes/crosshair.hlsl>

void main( 
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  float depth = 1 / (InstanceConsts.z * 9.9999752 + 0.000025);
  float correction = stereo.x * (depth - stereo.y) / depth / 2;  
  
  r0.x = DepthTexture.Sample(DepthTexture_s, InstanceConsts.xy).x;
  r0.x = cmp(InstanceConsts.z >= r0.x);
  r0.x = r0.x ? 0.500000 : 0;
  r1.xyzw = Globals[8].zwzw * float4(-3,3.5,3.5,6) + InstanceConsts.xyxy;
  
  r1.x += correction;
  r1.z += correction;
  
  
  r0.y = DepthTexture.Sample(DepthTexture_s, r1.xy).x;
  r0.z = DepthTexture.Sample(DepthTexture_s, r1.zw).x;
  r0.yz = cmp(InstanceConsts.zz >= r0.yz);
  r0.yz = r0.yz ? float2(0.125000,0.125000) : 0;
  r0.x = r0.x + r0.y;
  r0.x = r0.x + r0.z;
  r1.xyzw = Globals[8].zwzw * float4(-5,-3.5,3,-3) + InstanceConsts.xyxy;
  
  r1.x += correction;
  r1.z += correction;
  
  r0.y = DepthTexture.Sample(DepthTexture_s, r1.xy).x;
  r0.z = DepthTexture.Sample(DepthTexture_s, r1.zw).x;
  r0.yz = cmp(InstanceConsts.zz >= r0.yz);
  r0.yz = r0.yz ? float2(0.125000,0.125000) : 0;
  r0.x = r0.x + r0.y;
  r0.x = r0.x + r0.z;
  r1.xyzw = DiffuseTexture.Sample(DiffuseTexture_s, v1.xy).xyzw;
  r1.xyzw = v2.xyzw * r1.xyzw;
  r0.y = log2(r1.w);
  r0.y = 1.17999995 * r0.y;
  r1.w = exp2(r0.y);
  o0.xyzw = r1.xyzw * r0.xxxx;
  
  
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.34 on Sat Mar 26 10:29:38 2016
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[95];                // Offset:    0 Size:  1520
//
// }
//
// cbuffer cbInstanceConsts
// {
//
//   float4 InstanceConsts;             // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DiffuseTexture                    sampler      NA          NA    0        1
// DepthTexture                      sampler      NA          NA    1        1
// DiffuseTexture                    texture  float4          2d    0        1
// DepthTexture                      texture  float4          2d    1        1
// GlobalConstants                   cbuffer      NA          NA    0        1
// cbInstanceConsts                  cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.x, cb1[0].xyxx, t1.xyzw, s1
ge r0.x, cb1[0].z, r0.x
and r0.x, r0.x, l(0x3f000000)
mad r1.xyzw, cb0[8].zwzw, l(-3.000000, 3.500000, 3.500000, 6.000000), cb1[0].xyxy
sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t1.yxzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.z, r1.zwzz, t1.yzxw, s1
ge r0.yz, cb1[0].zzzz, r0.yyzy
and r0.yz, r0.yyzy, l(0, 0x3e000000, 0x3e000000, 0)
add r0.x, r0.y, r0.x
add r0.x, r0.z, r0.x
mad r1.xyzw, cb0[8].zwzw, l(-5.000000, -3.500000, 3.000000, -3.000000), cb1[0].xyxy
sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t1.yxzw, s1
sample_indexable(texture2d)(float,float,float,float) r0.z, r1.zwzz, t1.yzxw, s1
ge r0.yz, cb1[0].zzzz, r0.yyzy
and r0.yz, r0.yyzy, l(0, 0x3e000000, 0x3e000000, 0)
add r0.x, r0.y, r0.x
add r0.x, r0.z, r0.x
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mul r1.xyzw, r1.xyzw, v2.xyzw
log r0.y, r1.w
mul r0.y, r0.y, l(1.180000)
exp r1.w, r0.y
mul o0.xyzw, r0.xxxx, r1.xyzw
ret 
// Approximately 24 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 