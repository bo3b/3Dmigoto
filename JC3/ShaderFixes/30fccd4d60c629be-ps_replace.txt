// Lights.  Especially blue light on shoulder.
// ---- Created with 3Dmigoto v1.2.44 on Mon Oct 10 23:48:01 2016

cbuffer cbConsts : register(b1)
{
  float4 Consts[17] : packoffset(c0);
}

SamplerState SceneTexture_s : register(s0);
SamplerState BlurredSceneTexture_s : register(s1);
SamplerState BloomTexture_s : register(s3);
SamplerState SecondaryBloomTexture_s : register(s4);
SamplerState EdgeFadeTexture_s : register(s9);
SamplerState LensDirtTexture_s : register(s10);
SamplerState ColorCorrectionTexture_s : register(s11);
Texture2D<float4> SceneTexture : register(t0);
Texture2D<float4> BlurredSceneTexture : register(t1);
Texture2D<float4> BloomTexture : register(t3);
Texture2D<float4> SecondaryBloomTexture : register(t4);
Texture2D<float4> EdgeFadeTexture : register(t9);
Texture2D<float4> LensDirtTexture : register(t10);
Texture3D<float4> ColorCorrectionTexture : register(t11);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = Consts[16].xy * v1.xy;
  r1.xyz = BlurredSceneTexture.Sample(BlurredSceneTexture_s, r0.xy).xyz;
  r2.xyz = BloomTexture.Sample(BloomTexture_s, r0.xy).xyz;
  r3.xyz = SecondaryBloomTexture.Sample(SecondaryBloomTexture_s, r0.xy).xyz;
  r0.xyz = SceneTexture.Sample(SceneTexture_s, r0.xy).xyz;
  r1.xyz = r1.xyz + -r0.xyz;
  r0.xyz = Consts[0].zzz * r1.xyz + r0.xyz;
  r1.xyz = LensDirtTexture.Sample(LensDirtTexture_s, v1.xy).xyz;
  r1.xyz = r1.xyz * Consts[3].zzz + Consts[3].yyy;
  r1.xyz = r3.xyz * r1.xyz;
  r1.xyz = r2.xyz * Consts[3].xxx + r1.xyz;
  r0.xyz = r0.xyz * Consts[2].xxx + r1.xyz;
  r0.w = cmp(Consts[13].z == 0.000000);
  if (r0.w != 0) {
    r1.xyz = EdgeFadeTexture.Sample(EdgeFadeTexture_s, v1.xy).xyz;
    r1.xyz = float3(-1,-1,-1) + r1.xyz;
    r1.xyz = Consts[2].yyy * r1.xyz + float3(1,1,1);
    r1.xyz = r1.xyz * r0.xyz;
  } else {
    r2.xy = v1.xy * float2(2,2) + float2(-1,-1);
    r2.xy = abs(r2.xy) * float2(0.5,0.5) + float2(0.5,0.5);
    r2.xy = float2(1,1) + -r2.xy;
    r2.xyz = EdgeFadeTexture.Sample(EdgeFadeTexture_s, r2.xy).xyz;
    r2.xyz = r2.xyz * r2.xyz + float3(-1,-1,-1);
    r2.xyz = Consts[2].yyy * r2.xyz + float3(1,1,1);
    r1.xyz = r2.xyz * r0.xyz;
  }
  r0.xyz = -Consts[10].xxx * r1.xyz;
  r0.xyz = exp2(r0.xyz);
  r0.xyz = float3(1,1,1) + -r0.xyz;
  r0.xyz = Consts[1].xyz * r0.xyz;
  r0.xyz = sqrt(r0.xyz);
  r0.xyz = min(float3(1,1,1), r0.xyz);
  r0.xyz = r0.xyz * float3(0.96875,0.96875,0.96875) + float3(0.015625,0.015625,0.015625);
  r0.xyz = ColorCorrectionTexture.Sample(ColorCorrectionTexture_s, r0.xyz).xyz;
  r0.xyz = r0.xyz * r0.xyz;
  r0.xyz = saturate(r0.xyz * Consts[12].xxx + Consts[12].yyy);
  r0.w = dot(r0.xyz, float3(0.298999995,0.587000012,0.114));
  o0.w = sqrt(r0.w);
  o0.xyz = r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//   using 3Dmigoto v1.2.44 on Mon Oct 10 23:48:01 2016
//
//
// Buffer Definitions: 
//
// cbuffer cbConsts
// {
//
//   float4 Consts[17];                 // Offset:    0 Size:   272
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// SceneTexture                      sampler      NA          NA    0        1
// BlurredSceneTexture               sampler      NA          NA    1        1
// BloomTexture                      sampler      NA          NA    3        1
// SecondaryBloomTexture             sampler      NA          NA    4        1
// EdgeFadeTexture                   sampler      NA          NA    9        1
// LensDirtTexture                   sampler      NA          NA   10        1
// ColorCorrectionTexture            sampler      NA          NA   11        1
// SceneTexture                      texture  float4          2d    0        1
// BlurredSceneTexture               texture  float4          2d    1        1
// BloomTexture                      texture  float4          2d    3        1
// SecondaryBloomTexture             texture  float4          2d    4        1
// EdgeFadeTexture                   texture  float4          2d    9        1
// LensDirtTexture                   texture  float4          2d   10        1
// ColorCorrectionTexture            texture  float4          3d   11        1
// cbConsts                          cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s11, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture3d (float,float,float,float) t11
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
mul r0.xy, v1.xyxx, cb1[16].xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xyxx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t3.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyxx, t4.xyzw, s4
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t0.xyzw, s0
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, cb1[0].zzzz, r1.xyzx, r0.xyzx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t10.xyzw, s10
mad r1.xyz, r1.xyzx, cb1[3].zzzz, cb1[3].yyyy
mul r1.xyz, r1.xyzx, r3.xyzx
mad r1.xyz, r2.xyzx, cb1[3].xxxx, r1.xyzx
mad r0.xyz, r0.xyzx, cb1[2].xxxx, r1.xyzx
eq r0.w, cb1[13].z, l(0.000000)
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t9.xyzw, s9
  add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r1.xyz, cb1[2].yyyy, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.xyz, r0.xyzx, r1.xyzx
else 
  mad r2.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mad r2.xy, |r2.xyxx|, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  add r2.xy, -r2.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t9.xyzw, s9
  mad r2.xyz, r2.xyzx, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r2.xyz, cb1[2].yyyy, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.xyz, r0.xyzx, r2.xyzx
endif 
mul r0.xyz, r1.xyzx, -cb1[10].xxxx
exp r0.xyz, r0.xyzx
add r0.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, cb1[1].xyzx
sqrt r0.xyz, r0.xyzx
min r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r0.xyz, r0.xyzx, l(0.968750, 0.968750, 0.968750, 0.000000), l(0.015625, 0.015625, 0.015625, 0.000000)
sample_indexable(texture3d)(float,float,float,float) r0.xyz, r0.xyzx, t11.xyzw, s11
mul r0.xyz, r0.xyzx, r0.xyzx
mad_sat r0.xyz, r0.xyzx, cb1[12].xxxx, cb1[12].yyyy
dp3 r0.w, r0.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
sqrt o0.w, r0.w
mov o0.xyz, r0.xyzx
ret 
// Approximately 41 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
