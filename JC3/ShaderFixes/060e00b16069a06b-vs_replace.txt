// Reflections on Water VS

cbuffer GlobalConstants : register(b0)
{
  float4 Globals[49] : packoffset(c0);
}

cbuffer cloudConstants : register(b1)
{
  row_major float4x4 ViewProj : packoffset(c0);
  float4 LightningPos[3] : packoffset(c4);
  float4 LightningColor[3] : packoffset(c7);
  float4 DiffuseLighting : packoffset(c10);
  float4 AmbientLighting : packoffset(c11);
  float2 Base_Height : packoffset(c12);
  float LightVector_Up : packoffset(c12.z);
  float Padding : packoffset(c12.w);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5)
  
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = float4(1,0.015625,0.000244140625,3.81469727e-006) * v0.wwww;
  r0.xyzw = frac(r0.xyzw);
  r1.xyz = -Globals[4].xyz + v0.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r2.xyz = float3(1,0,0) * r1.zxy;
  r2.xyz = r1.yzx * float3(0,0,1) + -r2.xyz;
  r1.w = dot(r2.xz, r2.xz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r3.xyz = r2.yzx * r1.zxy;
  r3.xyz = r1.yzx * r2.zxy + -r3.xyz;
  r4.xy = -Globals[9].xz + v0.xz;
  r1.w = dot(r4.xy, r4.xy);
  r1.w = sqrt(r1.w);
  r2.w = 0.075000003 / v1.x;
  r1.w = r1.w * r2.w + 2;
  r4.xyz = v1.xxx * r2.xyz;
  r0.xy = float2(-0.5,-0.5) + r0.xy;
  r4.xyz = r4.xyz * r0.xxx;
  r4.xyz = r4.xyz * r1.www + v0.xyz;
  r5.xyz = v1.xxx * r3.xyz;
  r5.xyz = v1.yyy * r5.xyz;
  r5.xyz = r5.xyz * r0.yyy;
  r4.xyz = r5.xyz * r1.www + r4.xyz;
  r0.x = 0.0399999991 + LightVector_Up;
  r0.x = saturate(20 * r0.x);
  r0.x = Base_Height.y * r0.x;
  r0.x = r0.x * 1.5 + Base_Height.x;
  r0.x = r0.x + -r4.y;
  r0.y = 0.333333343 * Base_Height.y;
  r0.x = saturate(r0.x / r0.y);
  r0.x = 1 + -r0.x;
  r2.yw = -Globals[9].xz + r4.xz;
  r0.y = dot(r2.yw, r2.yw);
  r0.y = sqrt(r0.y);
  r4.w = -r0.y * 0.00999999978 + r4.y;
  r5.xyzw = Globals[1].xyzw * r4.wwww;
  r5.xyzw = r4.xxxx * Globals[0].xyzw + r5.xyzw;
  r5.xyzw = r4.zzzz * Globals[2].xyzw + r5.xyzw;
  r5.xyzw = Globals[3].xyzw + r5.xyzw;
  o0.z = max(0, r5.z);
  r6.xyz = float3(0,0,0);
  r0.y = 0;
  while (true) {
    r2.y = cmp((int)r0.y >= 3);
    if (r2.y != 0) break;
    r2.yw = -LightningPos[r0.y].xz + r4.xz;
    r2.y = dot(r2.yw, r2.yw);
    r2.y = sqrt(r2.y);
    r2.y = 0.000500000024 * r2.y;
    r2.y = r2.y * r2.y;
    r2.y = min(1, r2.y);
    r2.y = 1 + -r2.y;
    r2.y = 8 * r2.y;
    r2.y = min(1, r2.y);
    r6.xyz = LightningColor[r0.y].xyz * r2.yyy + r6.xyz;
    r0.y = (int)r0.y + 1;
  }
  r6.xyz = float3(4,4,4) * r6.xyz;
  r0.y = saturate(0.00499999989 * v1.x);
  o2.x = r0.y * 0.5 + 0.5;
  r0.y = v1.x * r1.w;
  o2.y = saturate(0.000500000024 * r0.y);
  o2.z = -r0.z * r0.x + r0.x;
  o3.x = dot(-r2.xz, -Globals[8].xz);
  o3.y = dot(-r3.xyz, -Globals[8].xyz);
  o3.z = dot(r1.xyz, -Globals[8].xyz);
  o4.x = dot(-r2.xz, r1.xz);
  o4.y = dot(-r3.xyz, r1.xyz);
  o4.z = dot(r1.xyz, r1.xyz);
  r0.xyz = -Globals[4].xyz + r4.xwz;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.y = rsqrt(r1.x);
  r0.xyz = r1.yyy * r0.xyz;
  r1.x = sqrt(r1.x);
  r1.y = -Globals[6].z + r4.w;
  r1.z = -Globals[6].z + Globals[4].y;
  r1.z = r1.z * Globals[22].w + Globals[21].w;
  r1.y = r1.y * r1.z;
  r1.y = max(0, r1.y);
  r1.y = 1 + r1.y;
  r1.x = r1.x / r1.y;
  r0.x = dot(-Globals[8].xyz, r0.xyz);
  r0.y = saturate(r0.x * Globals[19].w + 1);
  r0.z = r0.x * r0.x + 1;
  r0.x = saturate(r0.x);
  r0.x = -Globals[17].z * r0.x + Globals[17].y;
  r1.y = rsqrt(r0.x);
  r0.x = 1 / r0.x;
  r0.x = r1.y * r0.x;
  r0.x = Globals[17].x * r0.x;
  r1.yzw = -Globals[16].xyz * r1.xxx;
  r1.yzw = float3(1.44269502,1.44269502,1.44269502) * r1.yzw;
  r1.yzw = exp2(r1.yzw);
  r2.xyz = -Globals[22].xyz * r1.xxx;
  r2.xyz = float3(1.44269502,1.44269502,1.44269502) * r2.xyz;
  o6.xyz = exp2(r2.xyz);
  r2.xyz = Globals[20].xyz * r0.xxx;
  r2.xyz = Globals[19].xyz * r0.zzz + r2.xyz;
  r2.xyz = Globals[21].xyz * r2.xyz;
  r1.xyz = float3(1,1,1) + -r1.yzw;
  r1.xyz = r2.xyz * r1.xyz;
  r2.xyz = Globals[24].xyz + -Globals[23].xyz;
  r0.xyz = r0.yyy * r2.xyz + Globals[23].xyz;
  o5.xyz = r1.xyz * r0.xyz;
  o0.xyw = r5.xyw;
  o1.xy = v2.xy;
  o1.zw = r6.xy;
  o2.w = r0.w;
  o3.w = r6.z;
  
  
  
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer GlobalConstants
// {
//
//   float4 Globals[49];                // Offset:    0 Size:   784
//
// }
//
// cbuffer cloudConstants
// {
//
//   row_major float4x4 ViewProj;       // Offset:    0 Size:    64 [unused]
//   float4 LightningPos[3];            // Offset:   64 Size:    48
//   float4 LightningColor[3];          // Offset:  112 Size:    48
//   float4 DiffuseLighting;            // Offset:  160 Size:    16 [unused]
//   float4 AmbientLighting;            // Offset:  176 Size:    16 [unused]
//   float2 Base_Height;                // Offset:  192 Size:     8
//   float LightVector_Up;              // Offset:  200 Size:     4
//   float Padding;                     // Offset:  204 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GlobalConstants                   cbuffer      NA          NA    0        1
// cloudConstants                    cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb1[13], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_temps 7
mul r0.xyzw, v0.wwww, l(1.000000, 0.015625, 0.000244, 0.000004)
frc r0.xyzw, r0.xyzw
add r1.xyz, v0.xyzx, -cb0[4].xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, r1.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000)
mad r2.xyz, r1.yzxy, l(0.000000, 0.000000, 1.000000, 0.000000), -r2.xyzx
dp2 r1.w, r2.xzxx, r2.xzxx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
mul r3.xyz, r1.zxyz, r2.yzxy
mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
add r4.xy, v0.xzxx, -cb0[9].xzxx
dp2 r1.w, r4.xyxx, r4.xyxx
sqrt r1.w, r1.w
div r2.w, l(0.075000), v1.x
mad r1.w, r1.w, r2.w, l(2.000000)
mul r4.xyz, r2.xyzx, v1.xxxx
add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r4.xyz, r0.xxxx, r4.xyzx
mad r4.xyz, r4.xyzx, r1.wwww, v0.xyzx
mul r5.xyz, r3.xyzx, v1.xxxx
mul r5.xyz, r5.xyzx, v1.yyyy
mul r5.xyz, r0.yyyy, r5.xyzx
mad r4.xyz, r5.xyzx, r1.wwww, r4.xyzx
add r0.x, cb1[12].z, l(0.040000)
mul_sat r0.x, r0.x, l(20.000000)
mul r0.x, r0.x, cb1[12].y
mad r0.x, r0.x, l(1.500000), cb1[12].x
add r0.x, -r4.y, r0.x
mul r0.y, cb1[12].y, l(0.333333)
div_sat r0.x, r0.x, r0.y
add r0.x, -r0.x, l(1.000000)
add r2.yw, r4.xxxz, -cb0[9].xxxz
dp2 r0.y, r2.ywyy, r2.ywyy
sqrt r0.y, r0.y
mad r4.w, -r0.y, l(0.010000), r4.y
mul r5.xyzw, r4.wwww, cb0[1].xyzw
mad r5.xyzw, r4.xxxx, cb0[0].xyzw, r5.xyzw
mad r5.xyzw, r4.zzzz, cb0[2].xyzw, r5.xyzw
add r5.xyzw, r5.xyzw, cb0[3].xyzw
max o0.z, r5.z, l(0.000000)
mov r6.xyz, l(0,0,0,0)
mov r0.y, l(0)
loop 
  ige r2.y, r0.y, l(3)
  breakc_nz r2.y
  add r2.yw, r4.xxxz, -cb1[r0.y + 4].xxxz
  dp2 r2.y, r2.ywyy, r2.ywyy
  sqrt r2.y, r2.y
  mul r2.y, r2.y, l(0.000500)
  mul r2.y, r2.y, r2.y
  min r2.y, r2.y, l(1.000000)
  add r2.y, -r2.y, l(1.000000)
  mul r2.y, r2.y, l(8.000000)
  min r2.y, r2.y, l(1.000000)
  mad r6.xyz, cb1[r0.y + 7].xyzx, r2.yyyy, r6.xyzx
  iadd r0.y, r0.y, l(1)
endloop 
mul r6.xyz, r6.xyzx, l(4.000000, 4.000000, 4.000000, 0.000000)
mul_sat r0.y, v1.x, l(0.005000)
mad o2.x, r0.y, l(0.500000), l(0.500000)
mul r0.y, r1.w, v1.x
mul_sat o2.y, r0.y, l(0.000500)
mad o2.z, -r0.z, r0.x, r0.x
dp2 o3.x, -r2.xzxx, -cb0[8].xzxx
dp3 o3.y, -r3.xyzx, -cb0[8].xyzx
dp3 o3.z, r1.xyzx, -cb0[8].xyzx
dp2 o4.x, -r2.xzxx, r1.xzxx
dp3 o4.y, -r3.xyzx, r1.xyzx
dp3 o4.z, r1.xyzx, r1.xyzx
add r0.xyz, r4.xwzx, -cb0[4].xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.y, r1.x
mul r0.xyz, r0.xyzx, r1.yyyy
sqrt r1.x, r1.x
add r1.y, r4.w, -cb0[6].z
add r1.z, cb0[4].y, -cb0[6].z
mad r1.z, r1.z, cb0[22].w, cb0[21].w
mul r1.y, r1.z, r1.y
max r1.y, r1.y, l(0.000000)
add r1.y, r1.y, l(1.000000)
div r1.x, r1.x, r1.y
dp3 r0.x, -cb0[8].xyzx, r0.xyzx
mad_sat r0.y, r0.x, cb0[19].w, l(1.000000)
mad r0.z, r0.x, r0.x, l(1.000000)
mov_sat r0.x, r0.x
mad r0.x, -cb0[17].z, r0.x, cb0[17].y
rsq r1.y, r0.x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.x, r0.x, r1.y
mul r0.x, r0.x, cb0[17].x
mul r1.yzw, r1.xxxx, -cb0[16].xxyz
mul r1.yzw, r1.yyzw, l(0.000000, 1.442695, 1.442695, 1.442695)
exp r1.yzw, r1.yyzw
mul r2.xyz, r1.xxxx, -cb0[22].xyzx
mul r2.xyz, r2.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp o6.xyz, r2.xyzx
mul r2.xyz, r0.xxxx, cb0[20].xyzx
mad r2.xyz, cb0[19].xyzx, r0.zzzz, r2.xyzx
mul r2.xyz, r2.xyzx, cb0[21].xyzx
add r1.xyz, -r1.yzwy, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r1.xyz, r1.xyzx, r2.xyzx
add r2.xyz, -cb0[23].xyzx, cb0[24].xyzx
mad r0.xyz, r0.yyyy, r2.xyzx, cb0[23].xyzx
mul o5.xyz, r0.xyzx, r1.xyzx
mov o0.xyw, r5.xyxw
mov o1.xy, v2.xyxx
mov o1.zw, r6.xxxy
mov o2.w, r0.w
mov o3.w, r6.z
ret 
// Approximately 113 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\GAMES\STEAM\steamapps\common\Just Cause 3\wrapper1349(36,14-15): warning X3578: Output value 'o4' is not completely initialized
D:\GAMES\STEAM\steamapps\common\Just Cause 3\wrapper1349(37,14-15): warning X3578: Output value 'o5' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
