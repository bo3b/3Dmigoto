Microsoft (R) Direct3D Shader Compiler 6.3.9600.16384
Copyright (C) 2013 Microsoft. All rights reserved.

//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//
// Buffer Definitions: 
//
// cbuffer cbPerScene
// {
//
//   row_major float4x4 g_mViewProj;    // Offset:    0 Size:    64 [unused]
//   row_major float4x4 g_mInvViewProj; // Offset:   64 Size:    64 [unused]
//   float3 g_vEye;                     // Offset:  128 Size:    12 [unused]
//   float g_FiberAlpha;                // Offset:  140 Size:     4 [unused]
//   float2 g_WinSize;                  // Offset:  144 Size:     8
//   float g_FiberRadius;               // Offset:  152 Size:     4 [unused]
//   float g_fvFov;                     // Offset:  156 Size:     4 [unused]
//   float2 g_zMinMax;                  // Offset:  160 Size:     8 [unused]
//   float g_zWriteValue;               // Offset:  168 Size:     4 [unused]
//   float g_NoiseScale;                // Offset:  172 Size:     4 [unused]
//   float4 g_ScreenExtents;            // Offset:  176 Size:    16
//   float3 g_dirtColor;                // Offset:  192 Size:    12
//   float g_dirtLevel;                 // Offset:  204 Size:     4
//   uint g_baseGroupId;                // Offset:  208 Size:     4 [unused]
//   uint g_dirtGroupId;                // Offset:  212 Size:     4
//   float g_widthCurveOverride;        // Offset:  216 Size:     4 [unused]
//   float g_alphaCurveOverride;        // Offset:  220 Size:     4 [unused]
//   float3 g_SlaveOffsetsReferencePosition;// Offset:  224 Size:    12 [unused]
//   float g_SlaveOffsetsScale;         // Offset:  236 Size:     4 [unused]
//
// }
//
// Resource bind info for GroupRenderData
// {
//
//   struct HairGroupRenderData
//   {
//       
//       float noiseFrequency;          // Offset:    0
//       float noiseIntensity;          // Offset:    4
//       
//       struct HairGroupRenderData::<unnamed>
//       {
//           
//           float4 samples03;          // Offset:    8
//           float4 samples47;          // Offset:   24
//
//       } thicknessCurve;              // Offset:    8
//       
//       struct HairGroupRenderData::<unnamed>
//       {
//           
//           float4 samples03;          // Offset:   40
//           float4 samples47;          // Offset:   56
//
//       } alphaCurve;                  // Offset:   40
//
//   } $Element;                        // Offset:    0 Size:    72
//
// }
//
// Resource bind info for HairElementsUAV
// {
//
//   struct ABufferNode
//   {
//       
//       uint uPackedData0;             // Offset:    0
//       uint uPackedData1;             // Offset:    4
//       uint uPackedData2_Next;        // Offset:    8
//       float fDepth;                  // Offset:   12
//
//   } $Element;                        // Offset:    0 Size:    16
//
// }
//
// Resource bind info for HairElementsCounterUAV
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_sTrilinear_s                    sampler      NA          NA    1        1
// g_txNoise                         texture   float          2d    3        1
// g_txDirt                          texture   float          2d    4        1
// GroupRenderData                   texture  struct         r/o    5        1
// HairPixelHeadUAV                      UAV    byte         r/w    1        1
// HairElementsUAV                       UAV  struct         r/w    2        1
// HairElementsCounterUAV                UAV  struct         r/w    3        1
// cbPerScene                        cbuffer      NA          NA    8        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyz 
// TANGENT                  0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb8[14], immediateIndexed
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_structured t5, 72 
dcl_uav_raw u1
dcl_uav_structured u2, 16
dcl_uav_structured u3, 4
dcl_input_ps_siv linear noperspective v0.xyz, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_output o0.xyzw
dcl_temps 3
dp2 r0.x, cb8[11].zzzz, v0.xxxx
add r0.xz, r0.xxxx, l(-1.000000, 0.000000, -1.000000, 0.000000)
dp2 r1.x, cb8[11].wwww, v0.yyyy
add r0.yw, -r1.xxxx, l(0.000000, 1.000000, 0.000000, 1.000000)
mul r1.xyzw, v2.xyzw, cb8[9].xyxy
mad r0.xyzw, -r0.xyzw, cb8[9].xyxy, r1.xyzw
dp2 r0.x, r0.xyxx, r0.xyxx
dp2 r0.y, r0.zwzz, r0.zwzz
mad r0.zw, cb8[9].xxxy, v2.xxxy, -r1.zzzw
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r1.xy, r0.xyxx
sqrt r0.x, r0.z
ge r0.xy, r1.xyxx, r0.xxxx
and r0.xy, r0.xyxx, l(0xbf800000, 0xbf800000, 0, 0)
ne r0.xy, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyxx
and r0.xy, r0.xyxx, l(0x3f800000, 0x3f800000, 0, 0)
dp2 r0.x, r0.xyxx, r0.xyxx
ne r0.x, r0.x, l(0.000000)
movc r0.x, r0.x, l(-1.000000), l(1.000000)
min r0.y, r1.y, r1.x
min r0.y, r0.y, l(1.000000)
mad r0.x, r0.x, r0.y, l(1.000000)
mul r0.x, r0.x, v3.z
lt r0.y, l(0.007765), r0.x
mov r1.x, v1.w
mov r1.y, l(0.500000)
sample_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t3.yzxw, s1
if_nz r0.y
  sample_indexable(texture2d)(float,float,float,float) r0.y, v3.xyxx, t4.yxzw, s1
  ftou r0.w, v4.w
  add r1.x, l(1.000000), -cb8[12].w
  add r0.y, r0.y, -r1.x
  add r1.x, l(0.001000), cb8[12].w
  div_sat r0.y, r0.y, r1.x
  mad r1.xyz, r0.yyyy, cb8[12].xyzx, -v4.xyzx
  mad_sat r1.xyz, r0.yyyy, r1.xyzx, v4.xyzx
  dp3 r1.w, v1.xyzx, v1.xyzx
  rsq r1.w, r1.w
  mul r2.xyz, r1.wwww, v1.xyzx
  ld_structured_indexable(structured_buffer, stride=72)(mixed,mixed,mixed,mixed) r0.w, r0.w, l(4), t5.xxxx
  mul r0.z, r0.z, r0.w
  lt r0.y, l(0.500000), r0.y
  utof r0.w, cb8[13].y
  add r1.w, r0.w, v4.w
  movc r0.y, r0.y, r0.w, r1.w
  mad_sat r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r2.xyz, r2.xyzx, l(255.000000, 255.000000, 255.000000, 0.000000)
  ftou r2.xyz, r2.xyzx
  utof r0.w, r2.x
  ishl r2.xy, r2.yzyy, l(16, 8, 0, 0)
  utof r2.xy, r2.xyxx
  ftoi r0.w, r0.w
  ftoi r2.xy, r2.xyxx
  imad r0.w, r0.w, l(0x01000000), r2.x
  utof r0.w, r0.w
  ftoi r0.w, r0.w
  iadd r0.w, r2.y, r0.w
  mad_sat r0.x, r0.x, l(-0.500000), l(1.000000)
  mul r0.x, r0.x, l(255.000000)
  ftou r0.xy, r0.xyxx
  utof r0.x, r0.x
  ftoi r0.x, r0.x
  iadd r0.x, r0.x, r0.w
  mul r1.xyz, r1.xyzx, l(127.000000, 127.000000, 63.000000, 0.000000)
  ftou r1.xyz, r1.xyzx
  utof r0.w, r1.x
  ishl r1.xy, r1.yzyy, l(18, 12, 0, 0)
  utof r1.xy, r1.xyxx
  ftoi r0.w, r0.w
  ftoi r1.xy, r1.xyxx
  imad r0.w, r0.w, l(0x02000000), r1.x
  utof r0.w, r0.w
  ftoi r0.w, r0.w
  iadd r0.w, r1.y, r0.w
  mul_sat r0.z, r0.z, l(4.000000)
  mul r0.z, r0.z, l(63.000000)
  ftou r0.z, r0.z
  ishl r0.z, r0.z, l(6)
  utof r0.z, r0.z
  ftoi r0.z, r0.z
  iadd r0.z, r0.z, r0.w
  itof r0.xz, r0.xxzx
  ftou r0.z, r0.z
  bfi r1.y, l(6), l(0), r0.y, r0.z
  ftou r0.yz, v0.yyxy
  imm_atomic_iadd r2.x, u3, l(0, 0, 0, 0), l(1)
  itof r0.w, r2.x
  utof r0.yz, r0.yyzy
  mad r0.y, r0.y, cb8[9].x, r0.z
  mul r0.y, r0.y, l(4.000000)
  ftou r0.y, r0.y
  imm_atomic_exch r2.x, u1, r0.y, r0.w
  ftou r0.y, r2.x
  bfi r1.z, l(26), l(0), r0.y, l(0xfc000000)
  ftou r0.y, r0.w
  ftou r1.x, r0.x
  mov r1.w, v0.z
  store_structured u2.xyzw, r0.y, l(0), r1.xyzw
endif 
mov o0.xyzw, l(1.000000,0,0,1.000000)
ret 
// Approximately 101 instruction slots used
