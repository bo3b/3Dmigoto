// HUD
cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[1];
}


// raw
// No resource bindings, so no names or other info, but ByteAddressBuffer
// is the right data type for raw.
ByteAddressBuffer RawBuffer : register(t0);

  
// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : CUSTOM0,
  float4 v1 : CUSTOM1,
  float4 v2 : CUSTOM2,
  float2 v3 : CUSTOM3,
  float2 v4 : CUSTOM4,
  float2 v5 : CUSTOM5,
  float2 v6 : CUSTOM6,
  out float4 o0 : IO0_unClippedPos0,
// float3 for real, but compiler packing bug. float4 pushes to next register.
out float4 o1 : IO1_edgeuv0,    
  out float o2 : IO2_UI_UserBig0,
  out float p2 : IO4_UI_UserSmall0,
// should be int, but compiler moves to new reg.  Make sure output is actually int.
out float q2 : IO6_UI_RenderType0,
  out float4 o3 : IO3_Gfx_ClipPosition0,
  out float2 o4 : IO5_Gfx_UV0,
  out float4 o5 : IO7_Gfx_Color0,
  out float4 o6 : SV_Position0)
{
// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_raw t0
float4 r0;
float4 r1;
uint4 r2;
float4 r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(255,255) * v2.zw;
  
//  r0.xy = (int2)r0.xy;
int2 tmp = (int2)r0.xy;
//  r1.x = (uint)r0.x << 6;
uint index = tmp.x << 6;

// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r1.x, t0.xyzw
// Tricky because it's a raw buffer load, so it's not using [] form.
r1.xyzw = asfloat(RawBuffer.Load4(index));

  bitmask.x = ((~(-1 << 26)) << 6) & 0xffffffff;
  r2.x = (((uint)r0.x << 6) & bitmask.x) | ((uint)16 & ~bitmask.x);
  bitmask.y = ((~(-1 << 26)) << 6) & 0xffffffff;
  r2.y = (((uint)r0.x << 6) & bitmask.y) | ((uint)32 & ~bitmask.y);
  bitmask.z = ((~(-1 << 26)) << 6) & 0xffffffff;
  r2.z = (((uint)r0.x << 6) & bitmask.z) | ((uint)48 & ~bitmask.z);
// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r2.x, t0.xyzw
r3.xyzw = asfloat(RawBuffer.Load4(r2.x));

  r3.xyzw = v0.yyyy * r3.xyzw;
  r1.xyzw = r1.xyzw * v0.xxxx + r3.xyzw;
// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r2.y, t0.xyzw
r3.xyzw = asfloat(RawBuffer.Load4(r2.y));

// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r2.z, t0.xyzw
//r2.xyzw = asfloat(RawBuffer.Load4(r2.z));
float4 tmp_float = asfloat(RawBuffer.Load4(r2.z));

  r1.xyzw = r3.xyzw * v0.zzzz + r1.xyzw;
  r1.xyzw = r1.xyzw + tmp_float.xyzw;
  o0.xyzw = r1.xyzw;
  r0.x = -1 + r1.w;
  r0.x = cb1[0].z * r0.x + 1;
  o1.xy = v6.xy * r0.xx;
  o1.z = r0.x;
  r0.z = v0.w;
  r0.w = v2.y;
//  o2.xyz = r0.zwy;
o2.x = r0.z;
p2.x = r0.w;
// This should be int, but we can't specify that in header because the
// compiler aggressively forces it to a different register.  So it's defined
// as float, but is actually an int output to be sent along.  Using the 'asfloat'
// intrinsic tells the compiler to not insert any conversions.
q2.x = asfloat(r0.y);

  r0.xyzw = cb0[0].xyzw * r1.xyww;
  r0.xy = r0.xy + r0.zw;
  r0.zw = cb0[1].xy * cb0[0].xy;
  r0.xy = r0.zw * r1.ww + r0.xy;
  r1.xy = float2(1,-1) * r0.xy;
  o3.xyzw = r1.xyzw;
  o6.xyzw = r1.xyzw;
  o4.xy = v3.xy;
  o5.xyzw = v1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.37 on Tue May 17 20:29:06 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// CUSTOM                   0   xyzw        0     NONE   float   xyzw
// CUSTOM                   1   xyzw        1     NONE   float   xyzw
// CUSTOM                   2   xyzw        2     NONE   float    yzw
// CUSTOM                   3   xy          3     NONE   float   xy  
// CUSTOM                   4   xy          4     NONE   float       
// CUSTOM                   5   xy          5     NONE   float       
// CUSTOM                   6   xy          6     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// IO0_unClippedPos         0   xyzw        0     NONE   float   xyzw
// IO1_edgeuv               0   xyz         1     NONE   float   xyz 
// IO2_UI_UserBig           0   x           2     NONE   float   x   
// IO4_UI_UserSmall         0    y          2     NONE   float    y  
// IO6_UI_RenderType        0     z         2     NONE     int     z 
// IO3_Gfx_ClipPosition     0   xyzw        3     NONE   float   xyzw
// IO5_Gfx_UV               0   xy          4     NONE   float   xy  
// IO7_Gfx_Color            0   xyzw        5     NONE   float   xyzw
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_resource_raw t0
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.yzw
dcl_input v3.xy
dcl_input v6.xy
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.x
dcl_output o2.y
dcl_output o2.z
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 4
mul r0.xy, v2.zwzz, l(255.000000, 255.000000, 0.000000, 0.000000)
ftoi r0.xy, r0.xyxx
ishl r1.x, r0.x, l(6)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r1.x, t0.xyzw
bfi r2.xyz, l(26, 26, 26, 0), l(6, 6, 6, 0), r0.xxxx, l(16, 32, 48, 0)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r2.x, t0.xyzw
mul r3.xyzw, r3.xyzw, v0.yyyy
mad r1.xyzw, r1.xyzw, v0.xxxx, r3.xyzw
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r3.xyzw, r2.y, t0.xyzw
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r2.z, t0.xyzw
mad r1.xyzw, r3.xyzw, v0.zzzz, r1.xyzw
add r1.xyzw, r2.xyzw, r1.xyzw
mov o0.xyzw, r1.xyzw
add r0.x, r1.w, l(-1.000000)
mad r0.x, cb1[0].z, r0.x, l(1.000000)
mul o1.xy, r0.xxxx, v6.xyxx
mov o1.z, r0.x
mov r0.z, v0.w
mov r0.w, v2.y
mov o2.xyz, r0.zwyz
mul r0.xyzw, r1.xyww, cb0[0].xyzw
add r0.xy, r0.zwzz, r0.xyxx
mul r0.zw, cb0[0].xxxy, cb0[1].xxxy
mad r0.xy, r0.zwzz, r1.wwww, r0.xyxx
mul r1.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov o3.xyzw, r1.xyzw
mov o6.xyzw, r1.xyzw
mov o4.xy, v3.xyxx
mov o5.xyzw, v1.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
