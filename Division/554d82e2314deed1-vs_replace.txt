// HUD Crosshair
cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[1];
}

// raw
// No resource bindings, so no names or other info, but ByteAddressBuffer
// is the right data type for raw.
ByteAddressBuffer RawBuffer : register(t0);



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : CUSTOM0,
  float4 v1 : CUSTOM1,
  float4 v2 : CUSTOM2,
  float2 v3 : CUSTOM3,
  float2 v4 : CUSTOM4,
  float2 v5 : CUSTOM5,
  float2 v6 : CUSTOM6,
  out float4 o0 : IO0_unClipPos0,
  out float4 o1 : IO1_color0,
  out float4 o2 : IO2_uv1,
  out float2 o3 : IO3_uv2,
  out float p3 : IO5_additive0,
  out float3 o4 : IO4_edgeuv0,
  out int o5 : IO6_renderType0,
  out float4 o6 : SV_Position0)
{
// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_raw t0
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(255,255) * v2.zw;
  
  r0.x = (int)r0.x;
  o5.x = (int)r0.y;
  
  // r0.y = (uint)r0.x << 6;
  
  // bitmask.x = ((~(-1 << 26)) << 6) & 0xffffffff;
  // r0.x = (((uint)r0.x << 6) & bitmask.x) | ((uint)16 & ~bitmask.x);
  // bitmask.z = ((~(-1 << 26)) << 6) & 0xffffffff;
  // r0.z = (((uint)r0.x << 6) & bitmask.z) | ((uint)32 & ~bitmask.z);
  // bitmask.w = ((~(-1 << 26)) << 6) & 0xffffffff;
  // r0.w = (((uint)r0.x << 6) & bitmask.w) | ((uint)48 & ~bitmask.w);

uint4 index;  
  index.y = (uint)r0.x << 6;
  
  bitmask.x = ((~(-1 << 26)) << 6) & 0xffffffff;
  index.x = (((uint)r0.x << 6) & bitmask.x) | ((uint)16 & ~bitmask.x);
  bitmask.z = ((~(-1 << 26)) << 6) & 0xffffffff;
  index.z = (((uint)r0.x << 6) & bitmask.z) | ((uint)32 & ~bitmask.z);
  bitmask.w = ((~(-1 << 26)) << 6) & 0xffffffff;
  index.w = (((uint)r0.x << 6) & bitmask.w) | ((uint)48 & ~bitmask.w);
  
// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, t0.xyzw
r1.xyzw = asfloat(RawBuffer.Load4(index.y));

// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, t0.xyzw
r2.xyzw = asfloat(RawBuffer.Load4(index.x));

  r2.xyzw = v0.yyyy * r2.xyzw;
  r1.xyzw = r1.xyzw * v0.xxxx + r2.xyzw;
  
// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r0.z, t0.xyzw
r2.xyzw = asfloat(RawBuffer.Load4(index.z));

// No code for instruction (needs manual fix):
//ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.xyzw, r0.w, t0.xyzw
r0.xyzw = asfloat(RawBuffer.Load4(index.w));

  r1.xyzw = r2.xyzw * v0.zzzz + r1.xyzw;
  r0.xyzw = r1.xyzw + r0.xyzw;
  o0.xyzw = r0.xyzw;
  o1.xyzw = v1.xyzw;
  o2.xy = v3.xy;
  o2.zw = v4.xy;
  o3.xy = v5.xy;
  p3.x = v2.x;
  r1.x = -1 + r0.w;
  r1.x = cb1[0].z * r1.x + 1;
  o4.xy = v6.xy * r1.xx;
  o4.z = r1.x;
  r1.xyzw = cb0[0].xyzw * r0.xyww;
  r0.xy = r1.xy + r1.zw;
  r1.xy = cb0[1].xy * cb0[0].xy;
  r0.xy = r1.xy * r0.ww + r0.xy;
  o6.zw = r0.zw;
  o6.xy = float2(1,-1) * r0.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.37 on Tue May 17 20:05:43 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// CUSTOM                   0   xyzw        0     NONE   float   xyz 
// CUSTOM                   1   xyzw        1     NONE   float   xyzw
// CUSTOM                   2   xyzw        2     NONE   float   x zw
// CUSTOM                   3   xy          3     NONE   float   xy  
// CUSTOM                   4   xy          4     NONE   float   xy  
// CUSTOM                   5   xy          5     NONE   float   xy  
// CUSTOM                   6   xy          6     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// IO0_unClipPos            0   xyzw        0     NONE   float   xyzw
// IO1_color                0   xyzw        1     NONE   float   xyzw
// IO2_uv                   1   xyzw        2     NONE   float   xyzw
// IO3_uv                   2   xy          3     NONE   float   xy  
// IO5_additive             0     z         3     NONE   float     z 
// IO4_edgeuv               0   xyz         4     NONE   float   xyz 
// IO6_renderType           0   x           5     NONE     int   x   
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_resource_raw t0
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xzw
dcl_input v3.xy
dcl_input v4.xy
dcl_input v5.xy
dcl_input v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o3.z
dcl_output o4.xyz
dcl_output o5.x
dcl_output_siv o6.xyzw, position
dcl_temps 3
mul r0.xy, v2.zwzz, l(255.000000, 255.000000, 0.000000, 0.000000)
ftoi r0.x, r0.x
ftoi o5.x, r0.y
ishl r0.y, r0.x, l(6)
bfi r0.xzw, l(26, 0, 26, 26), l(6, 0, 6, 6), r0.xxxx, l(16, 0, 32, 48)
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, t0.xyzw
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, t0.xyzw
mul r2.xyzw, r2.xyzw, v0.yyyy
mad r1.xyzw, r1.xyzw, v0.xxxx, r2.xyzw
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r2.xyzw, r0.z, t0.xyzw
ld_raw_indexable(raw_buffer)(mixed,mixed,mixed,mixed) r0.xyzw, r0.w, t0.xyzw
mad r1.xyzw, r2.xyzw, v0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
mov o1.xyzw, v1.xyzw
mov o2.xy, v3.xyxx
mov o2.zw, v4.xxxy
mov o3.xy, v5.xyxx
mov o3.z, v2.x
add r1.x, r0.w, l(-1.000000)
mad r1.x, cb1[0].z, r1.x, l(1.000000)
mul o4.xy, r1.xxxx, v6.xyxx
mov o4.z, r1.x
mul r1.xyzw, r0.xyww, cb0[0].xyzw
add r0.xy, r1.zwzz, r1.xyxx
mul r1.xy, cb0[0].xyxx, cb0[1].xyxx
mad r0.xy, r1.xyxx, r0.wwww, r0.xyxx
mov o6.zw, r0.zzzw
mul o6.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
