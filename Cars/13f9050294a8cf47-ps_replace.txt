//Shadows
cbuffer _Globals : register(b0)
{
  row_major float4x4 cShadowMatrices[4] : packoffset(c0);
  row_major float4x4 cShadowMatrix : packoffset(c16);
  float4 cShadowMapDim : packoffset(c20);
  float4 cShadowTransitions : packoffset(c21);
  float4 cShadowParamsA : packoffset(c22);
  row_major float4x4 cShadowViewMatrix : packoffset(c23);
  float frustumDepth : packoffset(c27);
  float cloudOpacity : packoffset(c27.y);
  float4 cloudScaleAndOffset : packoffset(c28);
}

cbuffer COMMON_BUFFER2 : register(b3)
{
  row_major float4x4 view : packoffset(c0);
  row_major float4x4 viewI : packoffset(c4);
  row_major float4x4 projMatrix : packoffset(c8);
  row_major float4x4 viewProj : packoffset(c12);
  row_major float4x4 viewProjI : packoffset(c16);
  float4 screenSpaceDimensions : packoffset(c20);
  float4 frustumDimensions : packoffset(c21);
  float4 cLightingTransitionValues : packoffset(c22);
  float4 treeAmbientBoost : packoffset(c23);
  float4 viewportPixelDimensions : packoffset(c24);
  float4 globalVector4 : packoffset(c25);
  float4 globalVector6 : packoffset(c26);
  float4 globalVector7 : packoffset(c27);
  float4 globalVector8 : packoffset(c28);
  float4 fog_colour_towards : packoffset(c29);
  float4 fog_colour_away : packoffset(c30);
  float4 fogLightDir : packoffset(c31);
  float4 keyLightDir : packoffset(c32);
  float4 fog_min_inv_fog1_fog2 : packoffset(c33);
  float4 keyLightColour : packoffset(c34);
  float4 msaaMode : packoffset(c35);
  float3 keyLightDirVS : packoffset(c36);
  float3 worldCameraPos : packoffset(c37);
  float emissiveTextureControl : packoffset(c37.w);
}

cbuffer COMMON_BUFFER3 : register(b4)
{
  float4 windDirectionAndStrength : packoffset(c0);
  float4 MSAAControlValues : packoffset(c1);
  float4 globalVector0 : packoffset(c2);
  float4 globalVector1 : packoffset(c3);
  float4 globalVector2 : packoffset(c4);
  float4 globalVector3 : packoffset(c5);
  float4 globalVector5 : packoffset(c6);
  float4 globalVector10 : packoffset(c7);
  float4 globalVector11 : packoffset(c8);
  row_major float4x4 globalMatrix0 : packoffset(c9);
  float4 SSAORenderWidthHeight : packoffset(c13);
  float4 distortionTextureWidthHeight : packoffset(c14);
  float currentTime : packoffset(c15);
}
SamplerState shadowRotationMap_s : register(s0);
SamplerState sCloudMap_s : register(s2);
SamplerState SSAOMap_s : register(s3);
SamplerState normalsAndGlossMap_s : register(s4);
SamplerState linearisedDepthMap_s : register(s5);
SamplerComparisonState sShadowMap_f1_0_s : register(s1);
Texture2D<float4> linearisedDepthMap : register(t0);
Texture2D<float4> normalsAndGlossMap : register(t1);
Texture2D<float4> shadowRotationMap : register(t2);
Texture2D<float4> sCloudMap : register(t3);
Texture2D<float4> SSAOMap : register(t4);
Texture2D<float4> tShadowTexture_f1_0 : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = linearisedDepthMap.Sample(linearisedDepthMap_s, v1.xy).xyzw;
  r0.w = 2.550000000e+002 * r0.w;
  r0.w = round(r0.w);
  r1.xyz = normalsAndGlossMap.Sample(normalsAndGlossMap_s, v1.xy).xyz;
  r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r0.x = dot(r0.xyz, float3(1.000000e+000,3.921569e-003,1.537870e-005));
  r0.x = frustumDepth * r0.x;
  r0.xyz = v2.xyz * r0.xxx;
  r2.xy = float2(1.000000e+000,1.000000e+000) / screenSpaceDimensions.zw;
  r2.xy = v1.xy * r2.xy;
  r1.w =  5.0 * cShadowMapDim.z ;
  r2.z =  -5.0 * cShadowMapDim.z  + 1.0;
  r2.w = saturate(dot(r1.xyz, cShadowParamsA.yzw));
  r2.w = 1.000000000e+000 + -r2.w;
  r2.w = r2.w * r2.w;
  r2.w = cShadowParamsA.x * r2.w;
  r1.xyz = r1.xyz * r2.www + r0.xyz;
  
 // float4 stereo = StereoParams.Load(0);  
// r1.x -= stereo.x * (r1.z - stereo.y)/projMatrix._m00;  //Puts shadows back at depth
  
  r3.xyz = cShadowMatrices[0]._m10_m11_m12 * r1.yyy;
  r3.xyz = r1.xxx * cShadowMatrices[0]._m00_m01_m02 + r3.xyz;
  r3.xyz = r1.zzz * cShadowMatrices[0]._m20_m21_m22 + r3.xyz;
  r3.xyz = cShadowMatrices[0]._m30_m31_m32 + r3.xyz;
  r2.w = min( r3.x, r3.y);
  r2.w = bool(r1.w < r2.w);
  r4.x = max(r3.x, r3.y);
  r4.x = bool(r4.x < r2.z);
  
  r2.w = r2.w ? r4.x : 0;//(uint)r4.x & (uint)r2.w;// r2.w ? r4.x : 0; //r4.x && r2.w;
  
  if (r2.w != 0) {
    r3.w = 2.500000000e-001 * r3.y;
    r2.w = 1.000000000e+000;
    r3.xyz = r3.xwz;
    r4.y = cShadowTransitions.x;
    r4.z = 0.000000000e+000;
  } else {
    r5.xyz = cShadowMatrices[1]._m10_m11_m12 * r1.yyy;
    r5.xyz = r1.xxx * cShadowMatrices[1]._m00_m01_m02 + r5.xyz;
    r5.xyz = r1.zzz * cShadowMatrices[1]._m20_m21_m22 + r5.xyz;
    r3.xyz = cShadowMatrices[1]._m30_m31_m32 + r5.xyz;
    r4.w = min(r3.x, r3.y);
    r4.w = r1.w < r4.w;
    r5.x = max(r3.x, r3.y);
    r5.x = r5.x < r2.z;
    r4.w = r4.w ? r5.x : 0;
    if (r4.w != 0) {
      r3.w = r3.y * 2.500000000e-001 + 2.500000000e-001;
      r2.w = 1.000000000e+000;
      r3.xyz = r3.xwz;
      r4.y = cShadowTransitions.y;
      r4.z = 0.000000000e+000;
    } else {
      r5.xyz = cShadowMatrices[2]._m10_m11_m12 * r1.yyy;
      r5.xyz = r1.xxx * cShadowMatrices[2]._m00_m01_m02 + r5.xyz;
      r5.xyz = r1.zzz * cShadowMatrices[2]._m20_m21_m22 + r5.xyz;
      r3.xyz = cShadowMatrices[2]._m30_m31_m32 + r5.xyz;
      r4.w = min(r3.x, r3.y);
      r4.w = r1.w < r4.w;
      r5.x = max(r3.x, r3.y);
      r5.x = r5.x < r2.z;
      r4.w = r4.w ? r5.x : 0;
      r5.x = r3.z < 1.000000000e+000;
      r4.w = r4.w ? r5.x : 0;
      r5.x = r3.z >= 0.000000000e+000;
      r4.w = r4.w ? r5.x : 0;
      if (r4.w != 0) {
        r3.w = r3.y * 2.500000000e-001 + 5.000000000e-001;
        r2.w = 1.000000000e+000;
        r3.xyz = r3.xwz;
        r4.y = cShadowTransitions.z;
        r4.z = 0.000000000e+000;
      } else {
        r5.xyz = cShadowMatrices[3]._m10_m11_m12 * r1.yyy;
        r5.xyz = r1.xxx * cShadowMatrices[3]._m00_m01_m02 + r5.xyz;
        r1.xyz = r1.zzz * cShadowMatrices[3]._m20_m21_m22 + r5.xyz;
        r3.xyz = cShadowMatrices[3]._m30_m31_m32 + r1.xyz;
        r1.x = min(r3.x, r3.y);
        r1.x = r1.w < r1.x;
        r1.y = max(r3.x, r3.y);
        r1.y = r1.y < r2.z;
        r1.x = (bool)r1.y ? (bool)r1.x : 0;//bool(r1.x && r1.y);//
        r1.y = bool(r3.z < 1.000000000e+000);
        r1.x = (bool)r1.y ? (bool)r1.x : 0;//bool(r1.x && r1.y);//
        r1.y = bool(r3.z >= 0.000000000e+000);
        
        r1.x = (bool)r1.y ? (bool)r1.x : 0;//r1.x && r1.y;//
        
        r4.z = !(bool)r1.x;//~(int)r1.x;//(bool)r1.x;//
        
        
        if (r1.x != 0) {
          r1.x = r3.y * 2.500000000e-001 + 7.500000000e-001;
          r1.yz = float2(1.000000e+000,1.000000e+000) / cLightingTransitionValues.xy;
          r3.w = r3.y * 2.500000000e-001 + 7.500000000e-001;
          r1.yz = saturate(r3.xw * r1.yz);
          r5.xy = r1.yz * float2(-2.000000e+000,-2.000000e+000) + float2(3.000000e+000,3.000000e+000);
          r1.yz = r1.yz * r1.yz;
          r1.yz = r5.xy * r1.yz;
          r5.xy = float2(1.000000e+000,1.000000e+000) + -cLightingTransitionValues.zw;
          r5.zw = -cLightingTransitionValues.zw + r3.xw;
          r5.xy = float2(1.000000e+000,1.000000e+000) / r5.xy;
          r5.xy = saturate(r5.zw * r5.xy);
          r5.zw = r5.xy * float2(-2.000000e+000,-2.000000e+000) + float2(3.000000e+000,3.000000e+000);
          r5.xy = r5.xy * r5.xy;
          r5.xy = -r5.zw * r5.xy + float2(1.000000e+000,1.000000e+000);
          r1.y = min(r1.y, r1.z);
          r1.z = min(r5.x, r5.y);
          r2.w = min(r1.y, r1.z);
          r3.y = r1.x;
          r4.y = cShadowTransitions.w;
        } else {
          r2.w = 1.000000000e+000;
          r4.x = 1.000000000e+000;
        }
      }
    }
  }
  r1.xy = float2(3.125000e-002,3.125000e-002) * r2.xy;
  r1.xy = shadowRotationMap.Sample(shadowRotationMap_s, r1.xy).xy;
  if (r4.z == 0) {
    r1.xyzw = r1.xyyx * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
    r2.x = min(r3.z, 9.990000129e-001);
    r2.yz = cShadowMapDim.zw * r4.yy;
    r3.z = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r3.xy, r2.x).x;
    r5.xyzw = float4(5.278370e-001,5.278370e-001,8.586800e-002,-8.586800e-002) * r1.wzzw;
    r4.yz = r5.xy + r5.zw;
    r4.yz = r4.yz * r2.yz + r3.xy;
    r3.w = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r4.yz, r2.x).x;
    r3.z = r3.z + r3.w;
    r5.xyzw = float4(-4.008800e-002,-4.008800e-002,-5.360870e-001,5.360870e-001) * r1.wzzw;
    r4.yz = r5.xy + r5.zw;
    r4.yz = r4.yz * r2.yz + r3.xy;
    r3.w = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r4.yz, r2.x).x;
    r3.z = r3.z + r3.w;
    r5.xyzw = float4(-6.704450e-001,-6.704450e-001,1.799490e-001,-1.799490e-001) * r1.wzzw;
    r4.yz = r5.xy + r5.zw;
    r4.yz = r4.yz * r2.yz + r3.xy;
    r3.w = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r4.yz, r2.x).x;
    r3.z = r3.z + r3.w;
    r5.xyzw = float4(-4.194180e-001,-4.194180e-001,6.160390e-001,-6.160390e-001) * r1.wzzw;
    r4.yz = r5.xy + r5.zw;
    r4.yz = r4.yz * r2.yz + r3.xy;
    r3.w = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r4.yz, r2.x).x;
    r3.z = r3.z + r3.w;
    r5.xyzw = float4(4.404530e-001,4.404530e-001,6.393990e-001,-6.393990e-001) * r1.wzzw;
    r4.yz = r5.xy + r5.zw;
    r4.yz = r4.yz * r2.yz + r3.xy;
    r3.w = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r4.yz, r2.x).x;
    r3.z = r3.z + r3.w;
    r5.xyzw = float4(-7.570880e-001,-7.570880e-001,-3.493340e-001,3.493340e-001) * r1.wzzw;
    r4.yz = r5.xy + r5.zw;
    r4.yz = r4.yz * r2.yz + r3.xy;
    r3.w = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r4.yz, r2.x).x;
    r3.z = r3.z + r3.w;
    r1.xyzw = float4(5.746190e-001,5.746190e-001,-6.858790e-001,6.858790e-001) * r1.xyzw;
    r1.xy = r1.xy + r1.zw;
    r1.xy = r1.xy * r2.yz + r3.xy;
    r1.x = tShadowTexture_f1_0.SampleCmpLevelZero(sShadowMap_f1_0_s, r1.xy, r2.x).x;
    r1.x = r3.z + r1.x;
    r1.x = r1.x * 1.250000000e-001 + -1.000000000e+000;
    r4.x = r2.w * r1.x + 1.000000000e+000;
  }
  
//Fix cloud shadows which are 2D
// r0.x -= stereo.x * (r0.z - stereo.y)/projMatrix._m00;
  
  r1.xy = viewI._m10_m12 * r0.yy;
  r0.xy = r0.xx * viewI._m00_m02 + r1.xy;
  r0.xy = r0.zz * viewI._m20_m22 + r0.xy;
  r0.xy = viewI._m30_m32 + r0.xy;
  r0.xy = r0.xy * cloudScaleAndOffset.xy + cloudScaleAndOffset.zw;

  r0.x = sCloudMap.Sample(sCloudMap_s, r0.xy).y;
  
  r0.y =  1 - cloudOpacity ;//1.000000000e+000 + -cloudOpacity;
  
  r0.x = saturate(r0.x * globalVector11.y + globalVector11.x);
  r0.x = cloudOpacity * r0.x + r0.y;
  r0.x = min(r4.x, r0.x);
  r0.yz = float2(3.125000e-002,6.250000e-002) * r0.ww;
  r0.yz = frac(r0.yz);
  r0.yz = r0.yz >= float2(5.000000e-001,5.000000e-001);
  r0.yz = r0.yz ? float2(1.0,1.0) : 0;
  r0.x = saturate(r0.x + r0.y);

  r0.y = SSAOMap.Sample(SSAOMap_s, v1.xy).x;
  
  r0.w = 1.000000000e+000  -r0.y;//1.000000000e+000 + -r0.y;
  
  r0.y = r0.z * r0.w + r0.y;
  r0.y = -1.000000000e+000 + r0.y;
  r0.y = SSAORenderWidthHeight.z * r0.y + 1.000000000e+000;
  o0.w = r0.x * r0.y;
  o0.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9821.0
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   row_major float4x4 cShadowMatrices[4];// Offset:    0 Size:   256
//   row_major float4x4 cShadowMatrix;  // Offset:  256 Size:    64 [unused]
//   float4 cShadowMapDim;              // Offset:  320 Size:    16
//   float4 cShadowTransitions;         // Offset:  336 Size:    16
//   float4 cShadowParamsA;             // Offset:  352 Size:    16
//   row_major float4x4 cShadowViewMatrix;// Offset:  368 Size:    64 [unused]
//   float frustumDepth;                // Offset:  432 Size:     4
//   float cloudOpacity;                // Offset:  436 Size:     4
//   float4 cloudScaleAndOffset;        // Offset:  448 Size:    16
//
// }
//
// cbuffer COMMON_BUFFER2
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewI;          // Offset:   64 Size:    64
//   row_major float4x4 projMatrix;     // Offset:  128 Size:    64 [unused]
//   row_major float4x4 viewProj;       // Offset:  192 Size:    64 [unused]
//   row_major float4x4 viewProjI;      // Offset:  256 Size:    64 [unused]
//   float4 screenSpaceDimensions;      // Offset:  320 Size:    16
//   float4 frustumDimensions;          // Offset:  336 Size:    16 [unused]
//   float4 cLightingTransitionValues;  // Offset:  352 Size:    16
//   float4 treeAmbientBoost;           // Offset:  368 Size:    16 [unused]
//   float4 viewportPixelDimensions;    // Offset:  384 Size:    16 [unused]
//   float4 globalVector4;              // Offset:  400 Size:    16 [unused]
//   float4 globalVector6;              // Offset:  416 Size:    16 [unused]
//   float4 globalVector7;              // Offset:  432 Size:    16 [unused]
//   float4 globalVector8;              // Offset:  448 Size:    16 [unused]
//   float4 fog_colour_towards;         // Offset:  464 Size:    16 [unused]
//   float4 fog_colour_away;            // Offset:  480 Size:    16 [unused]
//   float4 fogLightDir;                // Offset:  496 Size:    16 [unused]
//   float4 keyLightDir;                // Offset:  512 Size:    16 [unused]
//   float4 fog_min_inv_fog1_fog2;      // Offset:  528 Size:    16 [unused]
//   float4 keyLightColour;             // Offset:  544 Size:    16 [unused]
//   float4 msaaMode;                   // Offset:  560 Size:    16 [unused]
//   float3 keyLightDirVS;              // Offset:  576 Size:    12 [unused]
//   float3 worldCameraPos;             // Offset:  592 Size:    12 [unused]
//   float emissiveTextureControl;      // Offset:  604 Size:     4 [unused]
//
// }
//
// cbuffer COMMON_BUFFER3
// {
//
//   float4 windDirectionAndStrength;   // Offset:    0 Size:    16 [unused]
//   float4 MSAAControlValues;          // Offset:   16 Size:    16 [unused]
//   float4 globalVector0;              // Offset:   32 Size:    16 [unused]
//   float4 globalVector1;              // Offset:   48 Size:    16 [unused]
//   float4 globalVector2;              // Offset:   64 Size:    16 [unused]
//   float4 globalVector3;              // Offset:   80 Size:    16 [unused]
//   float4 globalVector5;              // Offset:   96 Size:    16 [unused]
//   float4 globalVector10;             // Offset:  112 Size:    16 [unused]
//   float4 globalVector11;             // Offset:  128 Size:    16
//   row_major float4x4 globalMatrix0;  // Offset:  144 Size:    64 [unused]
//   float4 SSAORenderWidthHeight;      // Offset:  208 Size:    16
//   float4 distortionTextureWidthHeight;// Offset:  224 Size:    16 [unused]
//   float currentTime;                 // Offset:  240 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// shadowRotationMap                 sampler      NA          NA    0        1
// sShadowMap_f1_0                 sampler_c      NA          NA    1        1
// sCloudMap                         sampler      NA          NA    2        1
// SSAOMap                           sampler      NA          NA    3        1
// normalsAndGlossMap                sampler      NA          NA    4        1
// linearisedDepthMap                sampler      NA          NA    5        1
// linearisedDepthMap                texture  float4          2d    0        1
// normalsAndGlossMap                texture  float4          2d    1        1
// shadowRotationMap                 texture  float4          2d    2        1
// sCloudMap                         texture  float4          2d    3        1
// SSAOMap                           texture  float4          2d    4        1
// tShadowTexture_f1_0               texture  float4          2d    5        1
// $Globals                          cbuffer      NA          NA    0        1
// COMMON_BUFFER2                    cbuffer      NA          NA    3        1
// COMMON_BUFFER3                    cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_1
undecipherable custom data
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[29], immediateIndexed
dcl_constantbuffer cb3[23], immediateIndexed
dcl_constantbuffer cb4[14], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 6
sample r0.xyzw, v1.xyxx, t0.xyzw, s5
mul r0.w, r0.w, l(255.000000)
round_ne r0.w, r0.w
sample r1.xyz, v1.xyxx, t1.xyzw, s4
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r0.x, r0.xyzx, l(1.000000, 0.003922, 0.000015, 0.000000)
mul r0.x, r0.x, cb0[27].x
mul r0.xyz, r0.xxxx, v2.xyzx
div r2.xy, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[20].zwzz
mul r2.xy, r2.xyxx, v1.xyxx
mul r1.w, cb0[20].z, l(5.000000)
mad r2.z, -cb0[20].z, l(5.000000), l(1.000000)
dp3_sat r2.w, r1.xyzx, cb0[22].yzwy
add r2.w, -r2.w, l(1.000000)
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, cb0[22].x
mad r1.xyz, r1.xyzx, r2.wwww, r0.xyzx
mul r3.xyz, r1.yyyy, cb0[1].xyzx
mad r3.xyz, r1.xxxx, cb0[0].xyzx, r3.xyzx
mad r3.xyz, r1.zzzz, cb0[2].xyzx, r3.xyzx
add r3.xyz, r3.xyzx, cb0[3].xyzx
min r2.w, r3.y, r3.x
lt r2.w, r1.w, r2.w
max r4.x, r3.y, r3.x
lt r4.x, r4.x, r2.z
and r2.w, r2.w, r4.x
if_nz r2.w
  mul r3.w, r3.y, l(0.250000)
  mov r2.w, l(1.000000)
  mov r3.xyz, r3.xwzx
  mov r4.y, cb0[21].x
  mov r4.z, l(0)
else 
  mul r5.xyz, r1.yyyy, cb0[5].xyzx
  mad r5.xyz, r1.xxxx, cb0[4].xyzx, r5.xyzx
  mad r5.xyz, r1.zzzz, cb0[6].xyzx, r5.xyzx
  add r3.xyz, r5.xyzx, cb0[7].xyzx
  min r4.w, r3.y, r3.x
  lt r4.w, r1.w, r4.w
  max r5.x, r3.y, r3.x
  lt r5.x, r5.x, r2.z
  and r4.w, r4.w, r5.x
  if_nz r4.w
    mad r3.w, r3.y, l(0.250000), l(0.250000)
    mov r2.w, l(1.000000)
    mov r3.xyz, r3.xwzx
    mov r4.y, cb0[21].y
    mov r4.z, l(0)
  else 
    mul r5.xyz, r1.yyyy, cb0[9].xyzx
    mad r5.xyz, r1.xxxx, cb0[8].xyzx, r5.xyzx
    mad r5.xyz, r1.zzzz, cb0[10].xyzx, r5.xyzx
    add r3.xyz, r5.xyzx, cb0[11].xyzx
    min r4.w, r3.y, r3.x
    lt r4.w, r1.w, r4.w
    max r5.x, r3.y, r3.x
    lt r5.x, r5.x, r2.z
    and r4.w, r4.w, r5.x
    lt r5.x, r3.z, l(1.000000)
    and r4.w, r4.w, r5.x
    ge r5.x, r3.z, l(0.000000)
    and r4.w, r4.w, r5.x
    if_nz r4.w
      mad r3.w, r3.y, l(0.250000), l(0.500000)
      mov r2.w, l(1.000000)
      mov r3.xyz, r3.xwzx
      mov r4.y, cb0[21].z
      mov r4.z, l(0)
    else 
      mul r5.xyz, r1.yyyy, cb0[13].xyzx
      mad r5.xyz, r1.xxxx, cb0[12].xyzx, r5.xyzx
      mad r1.xyz, r1.zzzz, cb0[14].xyzx, r5.xyzx
      add r3.xyz, r1.xyzx, cb0[15].xyzx
      min r1.x, r3.y, r3.x
      lt r1.x, r1.w, r1.x
      max r1.y, r3.y, r3.x
      lt r1.y, r1.y, r2.z
      and r1.x, r1.y, r1.x
      lt r1.y, r3.z, l(1.000000)
      and r1.x, r1.y, r1.x
      ge r1.y, r3.z, l(0.000000)
      and r1.x, r1.y, r1.x
      not r4.z, r1.x
      if_nz r1.x
        mad r1.x, r3.y, l(0.250000), l(0.750000)
        div r1.yz, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[22].xxyx
        mad r3.w, r3.y, l(0.250000), l(0.750000)
        mul_sat r1.yz, r1.yyzy, r3.xxwx
        mad r5.xy, r1.yzyy, l(-2.000000, -2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
        mul r1.yz, r1.yyzy, r1.yyzy
        mul r1.yz, r1.yyzy, r5.xxyx
        add r5.xy, -cb3[22].zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
        add r5.zw, r3.xxxw, -cb3[22].zzzw
        div r5.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r5.xyxx
        mul_sat r5.xy, r5.xyxx, r5.zwzz
        mad r5.zw, r5.xxxy, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
        mul r5.xy, r5.xyxx, r5.xyxx
        mad r5.xy, -r5.zwzz, r5.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
        min r1.y, r1.z, r1.y
        min r1.z, r5.y, r5.x
        min r2.w, r1.z, r1.y
        mov r3.y, r1.x
        mov r4.y, cb0[21].w
      else 
        mov r2.w, l(1.000000)
        mov r4.x, l(1.000000)
      endif 
    endif 
  endif 
endif 
mul r1.xy, r2.xyxx, l(0.031250, 0.031250, 0.000000, 0.000000)
sample r1.xy, r1.xyxx, t2.xyzw, s0
if_z r4.z
  mad r1.xyzw, r1.xyyx, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
  min r2.x, r3.z, l(0.999000)
  mul r2.yz, r4.yyyy, cb0[20].zzwz
  sample_c_lz r3.z, r3.xyxx, t5.xxxx, s1, r2.x
  mul r5.xyzw, r1.wzzw, l(0.527837, 0.527837, 0.085868, -0.085868)
  add r4.yz, r5.zzwz, r5.xxyx
  mad r4.yz, r4.yyzy, r2.yyzy, r3.xxyx
  sample_c_lz r3.w, r4.yzyy, t5.xxxx, s1, r2.x
  add r3.z, r3.w, r3.z
  mul r5.xyzw, r1.wzzw, l(-0.040088, -0.040088, -0.536087, 0.536087)
  add r4.yz, r5.zzwz, r5.xxyx
  mad r4.yz, r4.yyzy, r2.yyzy, r3.xxyx
  sample_c_lz r3.w, r4.yzyy, t5.xxxx, s1, r2.x
  add r3.z, r3.w, r3.z
  mul r5.xyzw, r1.wzzw, l(-0.670445, -0.670445, 0.179949, -0.179949)
  add r4.yz, r5.zzwz, r5.xxyx
  mad r4.yz, r4.yyzy, r2.yyzy, r3.xxyx
  sample_c_lz r3.w, r4.yzyy, t5.xxxx, s1, r2.x
  add r3.z, r3.w, r3.z
  mul r5.xyzw, r1.wzzw, l(-0.419418, -0.419418, 0.616039, -0.616039)
  add r4.yz, r5.zzwz, r5.xxyx
  mad r4.yz, r4.yyzy, r2.yyzy, r3.xxyx
  sample_c_lz r3.w, r4.yzyy, t5.xxxx, s1, r2.x
  add r3.z, r3.w, r3.z
  mul r5.xyzw, r1.wzzw, l(0.440453, 0.440453, 0.639399, -0.639399)
  add r4.yz, r5.zzwz, r5.xxyx
  mad r4.yz, r4.yyzy, r2.yyzy, r3.xxyx
  sample_c_lz r3.w, r4.yzyy, t5.xxxx, s1, r2.x
  add r3.z, r3.w, r3.z
  mul r5.xyzw, r1.wzzw, l(-0.757088, -0.757088, -0.349334, 0.349334)
  add r4.yz, r5.zzwz, r5.xxyx
  mad r4.yz, r4.yyzy, r2.yyzy, r3.xxyx
  sample_c_lz r3.w, r4.yzyy, t5.xxxx, s1, r2.x
  add r3.z, r3.w, r3.z
  mul r1.xyzw, r1.xyzw, l(0.574619, 0.574619, -0.685879, 0.685879)
  add r1.xy, r1.zwzz, r1.xyxx
  mad r1.xy, r1.xyxx, r2.yzyy, r3.xyxx
  sample_c_lz r1.x, r1.xyxx, t5.xxxx, s1, r2.x
  add r1.x, r1.x, r3.z
  mad r1.x, r1.x, l(0.125000), l(-1.000000)
  mad r4.x, r2.w, r1.x, l(1.000000)
endif 
mul r1.xy, r0.yyyy, cb3[5].xzxx
mad r0.xy, r0.xxxx, cb3[4].xzxx, r1.xyxx
mad r0.xy, r0.zzzz, cb3[6].xzxx, r0.xyxx
add r0.xy, r0.xyxx, cb3[7].xzxx
mad r0.xy, r0.xyxx, cb0[28].xyxx, cb0[28].zwzz
sample r0.x, r0.xyxx, t3.yxzw, s2
add r0.y, -cb0[27].y, l(1.000000)
mad_sat r0.x, r0.x, cb4[8].y, cb4[8].x
mad r0.x, cb0[27].y, r0.x, r0.y
min r0.x, r0.x, r4.x
mul r0.yz, r0.wwww, l(0.000000, 0.031250, 0.062500, 0.000000)
frc r0.yz, r0.yyzy
ge r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
and r0.yz, r0.yyzy, l(0, 0x3f800000, 0x3f800000, 0)
add_sat r0.x, r0.y, r0.x
sample r0.y, v1.xyxx, t4.yxzw, s3
add r0.w, -r0.y, l(1.000000)
mad r0.y, r0.z, r0.w, r0.y
add r0.y, r0.y, l(-1.000000)
mad r0.y, cb4[13].z, r0.y, l(1.000000)
mul o0.w, r0.y, r0.x
mov o0.xyz, l(1.000000,1.000000,1.000000,0)
ret 
undecipherable custom data
// Approximately 181 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/