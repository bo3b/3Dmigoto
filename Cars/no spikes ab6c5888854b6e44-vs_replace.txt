// modified master shader - no more spikes.

cbuffer _Globals : register(b0)
{
  float minSpecPower : packoffset(c0);
  float maxSpecPower : packoffset(c0.y);
  float globalSpecularFactor : packoffset(c0.z);
  float openTopped : packoffset(c0.w);
  float maxWetSpecPower : packoffset(c1);
  float globalWetSpecularFactor : packoffset(c1.y);
  float darkeningInterval : packoffset(c1.z);
  float globalEMapFactor : packoffset(c1.w);
  float fresnelFactor : packoffset(c2);
  float4 tint_tintR : packoffset(c3);
  float4 tint_tintG : packoffset(c4);
  float4 tint_tintB : packoffset(c5);
}

cbuffer COMMON_BUFFER1 : register(b1)
{
  row_major float4x4 worldViewProj : packoffset(c0);
  row_major float4x4 world : packoffset(c4);
  row_major float4x4 worldView : packoffset(c8);
  row_major float4x4 worldI : packoffset(c12);
}

cbuffer COMMON_BUFFER2 : register(b3)
{
  row_major float4x4 view : packoffset(c0);
  row_major float4x4 viewI : packoffset(c4);
  row_major float4x4 projMatrix : packoffset(c8);
  row_major float4x4 viewProj : packoffset(c12);
  row_major float4x4 viewProjI : packoffset(c16);
  float4 screenSpaceDimensions : packoffset(c20);
  float4 frustumDimensions : packoffset(c21);
  float4 cLightingTransitionValues : packoffset(c22);
  float4 treeAmbientBoost : packoffset(c23);
  float4 viewportPixelDimensions : packoffset(c24);
  float4 globalVector4 : packoffset(c25);
  float4 globalVector6 : packoffset(c26);
  float4 globalVector7 : packoffset(c27);
  float4 globalVector8 : packoffset(c28);
  float4 fog_colour_towards : packoffset(c29);
  float4 fog_colour_away : packoffset(c30);
  float4 fogLightDir : packoffset(c31);
  float4 keyLightDir : packoffset(c32);
  float4 fog_min_inv_fog1_fog2 : packoffset(c33);
  float4 keyLightColour : packoffset(c34);
  float4 msaaMode : packoffset(c35);
  float3 keyLightDirVS : packoffset(c36);
  float3 worldCameraPos : packoffset(c37);
  float emissiveTextureControl : packoffset(c37.w);
}

cbuffer Bones : register(b5)
{
  row_major float4x3 boneTransforms[66] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  float3 v3 : NORMAL0,
  float4 v4 : BLENDWEIGHT0,
  int4 v5 : BLENDINDICES0,
  float3 v6 : TANGENT0,
  float3 v7 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float4 o2 : COLOR1,
  out float4 o3 : TEXCOORD0,
  out float3 o4 : TEXCOORD1,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float3 o7 : TEXCOORD6,
  out float3 o8 : TEXCOORD7,
  out float3 o9 : TEXCOORD8)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = v4.x + v4.y;
  r0.x = v4.z + r0.x;
  r0.x = v4.w + r0.x;
  r0.x = 1.000000e+000 / r0.x;
//  r1.xyzw = (uint4)v5.xyzw << 2;
r1.xyzw = (uint4)v5.xyzw;
  r0.yzw = boneTransforms[r1.y]._m10_m11_m12 * v0.yyy;
  r0.yzw = v0.xxx * boneTransforms[r1.y]._m00_m01_m02 + r0.yzw;
  r0.yzw = v0.zzz * boneTransforms[r1.y]._m20_m21_m22 + r0.yzw;
  r0.yzw = boneTransforms[r1.y]._m30_m31_m32 + r0.yzw;
  r0.yzw = v4.yyy * r0.yzw;
  r2.xyz = boneTransforms[r1.x]._m10_m11_m12 * v0.yyy;
  r2.xyz = v0.xxx * boneTransforms[r1.x]._m00_m01_m02 + r2.xyz;
  r2.xyz = v0.zzz * boneTransforms[r1.x]._m20_m21_m22 + r2.xyz;
  r2.xyz = boneTransforms[r1.x]._m30_m31_m32 + r2.xyz;
  r0.yzw = r2.xyz * v4.xxx + r0.yzw;
  r2.xyz = boneTransforms[r1.z]._m10_m11_m12 * v0.yyy;
  r2.xyz = v0.xxx * boneTransforms[r1.z]._m00_m01_m02 + r2.xyz;
  r2.xyz = v0.zzz * boneTransforms[r1.z]._m20_m21_m22 + r2.xyz;
  r2.xyz = boneTransforms[r1.z]._m30_m31_m32 + r2.xyz;
  r0.yzw = r2.xyz * v4.zzz + r0.yzw;
  r2.xyz = boneTransforms[r1.w]._m10_m11_m12 * v0.yyy;
  r2.xyz = v0.xxx * boneTransforms[r1.w]._m00_m01_m02 + r2.xyz;
  r2.xyz = v0.zzz * boneTransforms[r1.w]._m20_m21_m22 + r2.xyz;
  r2.xyz = boneTransforms[r1.w]._m30_m31_m32 + r2.xyz;
  r0.yzw = r2.xyz * v4.www + r0.yzw;
  r0.yzw = r0.yzw * r0.xxx;
  r2.xyzw = worldViewProj._m10_m11_m12_m13 * r0.zzzz;
  r2.xyzw = r0.yyyy * worldViewProj._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = r0.wwww * worldViewProj._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = worldViewProj._m30_m31_m32_m33 + r2.xyzw;
  o0.xyzw = r2.xyzw;
  
  r3.xyz = -fog_colour_away.xyz + fog_colour_towards.xyz;
  r4.xyz = worldView._m10_m11_m12 * r0.zzz;
  r4.xyz = r0.yyy * worldView._m00_m01_m02 + r4.xyz; //?
  r4.xyz = r0.www * worldView._m20_m21_m22 + r4.xyz; 
  r4.xyz = worldView._m30_m31_m32 + r4.xyz;
  r5.xyz = viewI._m10_m11_m12 * r4.yyy;
  r5.xyz = r4.xxx * viewI._m00_m01_m02 + r5.xyz; //?
  r5.xyz = r4.zzz * viewI._m20_m21_m22 + r5.xyz;
  r5.xyz = viewI._m30_m31_m32 + r5.xyz;
  r5.xyz = -worldCameraPos.xyz + r5.xyz;
  r3.w = dot(r5.xyz, r5.xyz);
  r3.w = sqrt(r3.w);
  r5.xy = r5.xz / r3.ww;
  r3.w = -fog_min_inv_fog1_fog2.x + r3.w;
  r3.w = saturate(fog_min_inv_fog1_fog2.y * r3.w);
  r4.w = saturate(dot(r5.xy, fogLightDir.xz));
  r3.xyz = r4.www * r3.xyz + fog_colour_away.xyz;
  r4.w = fog_min_inv_fog1_fog2.z * r3.w;
  o1.w = -r3.w * fog_min_inv_fog1_fog2.z + 1.000000000e+000;
  o1.xyz = r4.www * r3.xyz;
  o2.xyzw = v1.xyzw;

//3DMigoto Fix;
float4 stereo = StereoParams.Load(0);
float4 r20;
r20.xyzw = r2.xyzw;
r20.x -= stereo.x * (r20.w - stereo.y);  
  
  r3.x = r2.x + r2.w;
  r3.y = r2.w + -r2.y;
  
  r3.xy = screenSpaceDimensions.xy * r3.xy;
  r2.xy = float2(5.000000e-001,5.000000e-001) * r3.xy;
  o3.xyzw = r2.xyzw;
  o5.xyz = r2.xyw;
  r2.xyz = boneTransforms[r1.y]._m10_m11_m12 * v3.yyy;
  r2.xyz = v3.xxx * boneTransforms[r1.y]._m00_m01_m02 + r2.xyz;
  r2.xyz = v3.zzz * boneTransforms[r1.y]._m20_m21_m22 + r2.xyz;
  r2.xyz = v4.yyy * r2.xyz;
  r3.xyz = boneTransforms[r1.x]._m10_m11_m12 * v3.yyy;
  r3.xyz = v3.xxx * boneTransforms[r1.x]._m00_m01_m02 + r3.xyz;
  r3.xyz = v3.zzz * boneTransforms[r1.x]._m20_m21_m22 + r3.xyz;
  r2.xyz = r3.xyz * v4.xxx + r2.xyz;
  r3.xyz = boneTransforms[r1.z]._m10_m11_m12 * v3.yyy;
  r3.xyz = v3.xxx * boneTransforms[r1.z]._m00_m01_m02 + r3.xyz;
  r3.xyz = v3.zzz * boneTransforms[r1.z]._m20_m21_m22 + r3.xyz;
  r2.xyz = r3.xyz * v4.zzz + r2.xyz;
  r3.xyz = boneTransforms[r1.w]._m10_m11_m12 * v3.yyy;
  r3.xyz = v3.xxx * boneTransforms[r1.w]._m00_m01_m02 + r3.xyz;
  r3.xyz = v3.zzz * boneTransforms[r1.w]._m20_m21_m22 + r3.xyz;
  r2.xyz = r3.xyz * v4.www + r2.xyz;
  r2.xyz = r2.xyz * r0.xxx;
  r3.xyz = worldView._m10_m11_m12 * r2.yyy;
  r3.xyz = r2.xxx * worldView._m00_m01_m02 + r3.xyz;
  r3.xyz = r2.zzz * worldView._m20_m21_m22 + r3.xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r2.w = rsqrt(r2.w);
  r3.xyz = r3.xyz * r2.www;
  r2.w = dot(r4.xyz, r4.xyz);
  r2.w = rsqrt(r2.w);
  r4.xyz = r4.xyz * r2.www;
  r2.w = saturate(dot(-r4.xyz, r3.xyz));
  r2.w = 1.000000000e+000 + -r2.w;
  r2.w = max(9.999999825e-015, r2.w);
  r3.x = r2.w * r2.w;
  r3.x = r3.x * r3.x;
  r2.w = r3.x * r2.w;
  r3.x = -fresnelFactor + 1.0;
  r3.y = 1.000000000e+000 + fresnelFactor;
  r3.x = r3.x / r3.y;
  r3.y = r3.x * r3.x;
  r3.x = -r3.x * r3.x + 1.000000000e+000;
  o4.z = r3.x * r2.w + r3.y;
  o4.xy = v2.xy;
  r3.xyz = world._m10_m11_m12 * r2.yyy;
  r2.xyw = r2.xxx * world._m00_m01_m02 + r3.xyz;
  r2.xyz = r2.zzz * world._m20_m21_m22 + r2.xyw;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  o6.xyz = r2.xyz * r2.www;
  r2.xyz = world._m10_m11_m12 * r0.zzz;
  r2.xyz = r0.yyy * world._m00_m01_m02 + r2.xyz;
  r0.yzw = r0.www * world._m20_m21_m22 + r2.xyz;
  r0.yzw = world._m30_m31_m32 + r0.yzw;
  o7.xyz = -worldCameraPos.xyz + r0.yzw;
  r0.yzw = boneTransforms[r1.y]._m10_m11_m12 * v6.yyy;
  r0.yzw = v6.xxx * boneTransforms[r1.y]._m00_m01_m02 + r0.yzw;
  r0.yzw = v6.zzz * boneTransforms[r1.y]._m20_m21_m22 + r0.yzw;
  r0.yzw = v4.yyy * r0.yzw;
  r2.xyz = boneTransforms[r1.x]._m10_m11_m12 * v6.yyy;
  r2.xyz = v6.xxx * boneTransforms[r1.x]._m00_m01_m02 + r2.xyz;
  r2.xyz = v6.zzz * boneTransforms[r1.x]._m20_m21_m22 + r2.xyz;
  r0.yzw = r2.xyz * v4.xxx + r0.yzw;
  r2.xyz = boneTransforms[r1.z]._m10_m11_m12 * v6.yyy;
  r2.xyz = v6.xxx * boneTransforms[r1.z]._m00_m01_m02 + r2.xyz;
  r2.xyz = v6.zzz * boneTransforms[r1.z]._m20_m21_m22 + r2.xyz;
  r0.yzw = r2.xyz * v4.zzz + r0.yzw;
  r2.xyz = boneTransforms[r1.w]._m10_m11_m12 * v6.yyy;
  r2.xyz = v6.xxx * boneTransforms[r1.w]._m00_m01_m02 + r2.xyz;
  r2.xyz = v6.zzz * boneTransforms[r1.w]._m20_m21_m22 + r2.xyz;
  r0.yzw = r2.xyz * v4.www + r0.yzw;
  r0.yzw = r0.yzw * r0.xxx;
  r2.xyz = world._m10_m11_m12 * r0.zzz;
  r2.xyz = r0.yyy * world._m00_m01_m02 + r2.xyz;
  o8.xyz = r0.www * world._m20_m21_m22 + r2.xyz;
  r0.yzw = boneTransforms[r1.y]._m10_m11_m12 * v7.yyy;
  r0.yzw = v7.xxx * boneTransforms[r1.y]._m00_m01_m02 + r0.yzw;
  r0.yzw = v7.zzz * boneTransforms[r1.y]._m20_m21_m22 + r0.yzw;
  r0.yzw = v4.yyy * r0.yzw;
  r2.xyz = boneTransforms[r1.x]._m10_m11_m12 * v7.yyy;
  r2.xyz = v7.xxx * boneTransforms[r1.x]._m00_m01_m02 + r2.xyz;
  r2.xyz = v7.zzz * boneTransforms[r1.x]._m20_m21_m22 + r2.xyz;
  r0.yzw = r2.xyz * v4.xxx + r0.yzw;
  r2.xyz = boneTransforms[r1.z]._m10_m11_m12 * v7.yyy;
  r2.xyz = v7.xxx * boneTransforms[r1.z]._m00_m01_m02 + r2.xyz;
  r1.xyz = v7.zzz * boneTransforms[r1.z]._m20_m21_m22 + r2.xyz;
  r0.yzw = r1.xyz * v4.zzz + r0.yzw;
  r1.xyz = boneTransforms[r1.w]._m10_m11_m12 * v7.yyy;
  r1.xyz = v7.xxx * boneTransforms[r1.w]._m00_m01_m02 + r1.xyz;
  r1.xyz = v7.zzz * boneTransforms[r1.w]._m20_m21_m22 + r1.xyz;
  r0.yzw = r1.xyz * v4.www + r0.yzw;
  r0.xyz = r0.yzw * r0.xxx;
  r1.xyz = world._m10_m11_m12 * r0.yyy;
  r0.xyw = r0.xxx * world._m00_m01_m02 + r1.xyz;
  o9.xyz = r0.zzz * world._m20_m21_m22 + r0.xyw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9821.0
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float minSpecPower;                // Offset:    0 Size:     4 [unused]
//   float maxSpecPower;                // Offset:    4 Size:     4 [unused]
//   float globalSpecularFactor;        // Offset:    8 Size:     4 [unused]
//   float openTopped;                  // Offset:   12 Size:     4 [unused]
//   float maxWetSpecPower;             // Offset:   16 Size:     4 [unused]
//   float globalWetSpecularFactor;     // Offset:   20 Size:     4 [unused]
//   float darkeningInterval;           // Offset:   24 Size:     4 [unused]
//   float globalEMapFactor;            // Offset:   28 Size:     4 [unused]
//   float fresnelFactor;               // Offset:   32 Size:     4
//   float4 tint_tintR;                 // Offset:   48 Size:    16 [unused]
//   float4 tint_tintG;                 // Offset:   64 Size:    16 [unused]
//   float4 tint_tintB;                 // Offset:   80 Size:    16 [unused]
//
// }
//
// cbuffer COMMON_BUFFER1
// {
//
//   row_major float4x4 worldViewProj;  // Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   row_major float4x4 worldView;      // Offset:  128 Size:    64
//   row_major float4x4 worldI;         // Offset:  192 Size:    64 [unused]
//
// }
//
// cbuffer COMMON_BUFFER2
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewI;          // Offset:   64 Size:    64
//   row_major float4x4 projMatrix;     // Offset:  128 Size:    64 [unused]
//   row_major float4x4 viewProj;       // Offset:  192 Size:    64 [unused]
//   row_major float4x4 viewProjI;      // Offset:  256 Size:    64 [unused]
//   float4 screenSpaceDimensions;      // Offset:  320 Size:    16
//   float4 frustumDimensions;          // Offset:  336 Size:    16 [unused]
//   float4 cLightingTransitionValues;  // Offset:  352 Size:    16 [unused]
//   float4 treeAmbientBoost;           // Offset:  368 Size:    16 [unused]
//   float4 viewportPixelDimensions;    // Offset:  384 Size:    16 [unused]
//   float4 globalVector4;              // Offset:  400 Size:    16 [unused]
//   float4 globalVector6;              // Offset:  416 Size:    16 [unused]
//   float4 globalVector7;              // Offset:  432 Size:    16 [unused]
//   float4 globalVector8;              // Offset:  448 Size:    16 [unused]
//   float4 fog_colour_towards;         // Offset:  464 Size:    16
//   float4 fog_colour_away;            // Offset:  480 Size:    16
//   float4 fogLightDir;                // Offset:  496 Size:    16
//   float4 keyLightDir;                // Offset:  512 Size:    16 [unused]
//   float4 fog_min_inv_fog1_fog2;      // Offset:  528 Size:    16
//   float4 keyLightColour;             // Offset:  544 Size:    16 [unused]
//   float4 msaaMode;                   // Offset:  560 Size:    16 [unused]
//   float3 keyLightDirVS;              // Offset:  576 Size:    12 [unused]
//   float3 worldCameraPos;             // Offset:  592 Size:    12
//   float emissiveTextureControl;      // Offset:  604 Size:     4 [unused]
//
// }
//
// cbuffer Bones
// {
//
//   row_major float4x3 boneTransforms[66];// Offset:    0 Size:  4220
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// COMMON_BUFFER1                    cbuffer      NA          NA    1        1
// COMMON_BUFFER2                    cbuffer      NA          NA    3        1
// Bones                             cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float   xyz 
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE     int   xyzw
// TANGENT                  0   xyz         6     NONE   float   xyz 
// BINORMAL                 0   xyz         7     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xyzw        3     NONE   float   xyzw
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
// TEXCOORD                 8   xyz         9     NONE   float   xyz 
//
vs_4_1
undecipherable custom data
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb3[38], immediateIndexed
dcl_constantbuffer cb5[264], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xyz
dcl_input v7.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output o8.xyz
dcl_output o9.xyz
dcl_temps 6
add r0.x, v4.y, v4.x
add r0.x, r0.x, v4.z
add r0.x, r0.x, v4.w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
ishl r1.xyzw, v5.xyzw, l(2)
mul r0.yzw, v0.yyyy, cb5[r1.y + 1].xxyz
mad r0.yzw, v0.xxxx, cb5[r1.y + 0].xxyz, r0.yyzw
mad r0.yzw, v0.zzzz, cb5[r1.y + 2].xxyz, r0.yyzw
add r0.yzw, r0.yyzw, cb5[r1.y + 3].xxyz
mul r0.yzw, r0.yyzw, v4.yyyy
mul r2.xyz, v0.yyyy, cb5[r1.x + 1].xyzx
mad r2.xyz, v0.xxxx, cb5[r1.x + 0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb5[r1.x + 2].xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb5[r1.x + 3].xyzx
mad r0.yzw, r2.xxyz, v4.xxxx, r0.yyzw
mul r2.xyz, v0.yyyy, cb5[r1.z + 1].xyzx
mad r2.xyz, v0.xxxx, cb5[r1.z + 0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb5[r1.z + 2].xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb5[r1.z + 3].xyzx
mad r0.yzw, r2.xxyz, v4.zzzz, r0.yyzw
mul r2.xyz, v0.yyyy, cb5[r1.w + 1].xyzx
mad r2.xyz, v0.xxxx, cb5[r1.w + 0].xyzx, r2.xyzx
mad r2.xyz, v0.zzzz, cb5[r1.w + 2].xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb5[r1.w + 3].xyzx
mad r0.yzw, r2.xxyz, v4.wwww, r0.yyzw
mul r0.yzw, r0.xxxx, r0.yyzw
mul r2.xyzw, r0.zzzz, cb1[1].xyzw
mad r2.xyzw, r0.yyyy, cb1[0].xyzw, r2.xyzw
mad r2.xyzw, r0.wwww, cb1[2].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[3].xyzw
mov o0.xyzw, r2.xyzw
add r3.xyz, cb3[29].xyzx, -cb3[30].xyzx
mul r4.xyz, r0.zzzz, cb1[9].xyzx
mad r4.xyz, r0.yyyy, cb1[8].xyzx, r4.xyzx
mad r4.xyz, r0.wwww, cb1[10].xyzx, r4.xyzx
add r4.xyz, r4.xyzx, cb1[11].xyzx
mul r5.xyz, r4.yyyy, cb3[5].xyzx
mad r5.xyz, r4.xxxx, cb3[4].xyzx, r5.xyzx
mad r5.xyz, r4.zzzz, cb3[6].xyzx, r5.xyzx
add r5.xyz, r5.xyzx, cb3[7].xyzx
add r5.xyz, r5.xyzx, -cb3[37].xyzx
dp3 r3.w, r5.xyzx, r5.xyzx
sqrt r3.w, r3.w
div r5.xy, r5.xzxx, r3.wwww
add r3.w, r3.w, -cb3[33].x
mul_sat r3.w, r3.w, cb3[33].y
dp2_sat r4.w, r5.xyxx, cb3[31].xzxx
mad r3.xyz, r4.wwww, r3.xyzx, cb3[30].xyzx
mul r4.w, r3.w, cb3[33].z
mad o1.w, -r3.w, cb3[33].z, l(1.000000)
mul o1.xyz, r3.xyzx, r4.wwww
mov o2.xyzw, v1.xyzw
add r3.x, r2.w, r2.x
add r3.y, -r2.y, r2.w
mul r3.xy, r3.xyxx, cb3[20].xyxx
mul r2.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o3.xyzw, r2.xyzw
mov o5.xyz, r2.xywx
mul r2.xyz, v3.yyyy, cb5[r1.y + 1].xyzx
mad r2.xyz, v3.xxxx, cb5[r1.y + 0].xyzx, r2.xyzx
mad r2.xyz, v3.zzzz, cb5[r1.y + 2].xyzx, r2.xyzx
mul r2.xyz, r2.xyzx, v4.yyyy
mul r3.xyz, v3.yyyy, cb5[r1.x + 1].xyzx
mad r3.xyz, v3.xxxx, cb5[r1.x + 0].xyzx, r3.xyzx
mad r3.xyz, v3.zzzz, cb5[r1.x + 2].xyzx, r3.xyzx
mad r2.xyz, r3.xyzx, v4.xxxx, r2.xyzx
mul r3.xyz, v3.yyyy, cb5[r1.z + 1].xyzx
mad r3.xyz, v3.xxxx, cb5[r1.z + 0].xyzx, r3.xyzx
mad r3.xyz, v3.zzzz, cb5[r1.z + 2].xyzx, r3.xyzx
mad r2.xyz, r3.xyzx, v4.zzzz, r2.xyzx
mul r3.xyz, v3.yyyy, cb5[r1.w + 1].xyzx
mad r3.xyz, v3.xxxx, cb5[r1.w + 0].xyzx, r3.xyzx
mad r3.xyz, v3.zzzz, cb5[r1.w + 2].xyzx, r3.xyzx
mad r2.xyz, r3.xyzx, v4.wwww, r2.xyzx
mul r2.xyz, r0.xxxx, r2.xyzx
mul r3.xyz, r2.yyyy, cb1[9].xyzx
mad r3.xyz, r2.xxxx, cb1[8].xyzx, r3.xyzx
mad r3.xyz, r2.zzzz, cb1[10].xyzx, r3.xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
rsq r2.w, r2.w
mul r3.xyz, r2.wwww, r3.xyzx
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r4.xyz, r2.wwww, r4.xyzx
dp3_sat r2.w, -r4.xyzx, r3.xyzx
add r2.w, -r2.w, l(1.000000)
max r2.w, r2.w, l(0.000000)
mul r3.x, r2.w, r2.w
mul r3.x, r3.x, r3.x
mul r2.w, r2.w, r3.x
add r3.x, -cb0[2].x, l(1.000000)
add r3.y, cb0[2].x, l(1.000000)
div r3.x, r3.x, r3.y
mul r3.y, r3.x, r3.x
mad r3.x, -r3.x, r3.x, l(1.000000)
mad o4.z, r3.x, r2.w, r3.y
mov o4.xy, v2.xyxx
mul r3.xyz, r2.yyyy, cb1[5].xyzx
mad r2.xyw, r2.xxxx, cb1[4].xyxz, r3.xyxz
mad r2.xyz, r2.zzzz, cb1[6].xyzx, r2.xywx
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul o6.xyz, r2.wwww, r2.xyzx
mul r2.xyz, r0.zzzz, cb1[5].xyzx
mad r2.xyz, r0.yyyy, cb1[4].xyzx, r2.xyzx
mad r0.yzw, r0.wwww, cb1[6].xxyz, r2.xxyz
add r0.yzw, r0.yyzw, cb1[7].xxyz
add o7.xyz, r0.yzwy, -cb3[37].xyzx
mul r0.yzw, v6.yyyy, cb5[r1.y + 1].xxyz
mad r0.yzw, v6.xxxx, cb5[r1.y + 0].xxyz, r0.yyzw
mad r0.yzw, v6.zzzz, cb5[r1.y + 2].xxyz, r0.yyzw
mul r0.yzw, r0.yyzw, v4.yyyy
mul r2.xyz, v6.yyyy, cb5[r1.x + 1].xyzx
mad r2.xyz, v6.xxxx, cb5[r1.x + 0].xyzx, r2.xyzx
mad r2.xyz, v6.zzzz, cb5[r1.x + 2].xyzx, r2.xyzx
mad r0.yzw, r2.xxyz, v4.xxxx, r0.yyzw
mul r2.xyz, v6.yyyy, cb5[r1.z + 1].xyzx
mad r2.xyz, v6.xxxx, cb5[r1.z + 0].xyzx, r2.xyzx
mad r2.xyz, v6.zzzz, cb5[r1.z + 2].xyzx, r2.xyzx
mad r0.yzw, r2.xxyz, v4.zzzz, r0.yyzw
mul r2.xyz, v6.yyyy, cb5[r1.w + 1].xyzx
mad r2.xyz, v6.xxxx, cb5[r1.w + 0].xyzx, r2.xyzx
mad r2.xyz, v6.zzzz, cb5[r1.w + 2].xyzx, r2.xyzx
mad r0.yzw, r2.xxyz, v4.wwww, r0.yyzw
mul r0.yzw, r0.xxxx, r0.yyzw
mul r2.xyz, r0.zzzz, cb1[5].xyzx
mad r2.xyz, r0.yyyy, cb1[4].xyzx, r2.xyzx
mad o8.xyz, r0.wwww, cb1[6].xyzx, r2.xyzx
mul r0.yzw, v7.yyyy, cb5[r1.y + 1].xxyz
mad r0.yzw, v7.xxxx, cb5[r1.y + 0].xxyz, r0.yyzw
mad r0.yzw, v7.zzzz, cb5[r1.y + 2].xxyz, r0.yyzw
mul r0.yzw, r0.yyzw, v4.yyyy
mul r2.xyz, v7.yyyy, cb5[r1.x + 1].xyzx
mad r2.xyz, v7.xxxx, cb5[r1.x + 0].xyzx, r2.xyzx
mad r2.xyz, v7.zzzz, cb5[r1.x + 2].xyzx, r2.xyzx
mad r0.yzw, r2.xxyz, v4.xxxx, r0.yyzw
mul r2.xyz, v7.yyyy, cb5[r1.z + 1].xyzx
mad r2.xyz, v7.xxxx, cb5[r1.z + 0].xyzx, r2.xyzx
mad r1.xyz, v7.zzzz, cb5[r1.z + 2].xyzx, r2.xyzx
mad r0.yzw, r1.xxyz, v4.zzzz, r0.yyzw
mul r1.xyz, v7.yyyy, cb5[r1.w + 1].xyzx
mad r1.xyz, v7.xxxx, cb5[r1.w + 0].xyzx, r1.xyzx
mad r1.xyz, v7.zzzz, cb5[r1.w + 2].xyzx, r1.xyzx
mad r0.yzw, r1.xxyz, v4.wwww, r0.yyzw
mul r0.xyz, r0.xxxx, r0.yzwy
mul r1.xyz, r0.yyyy, cb1[5].xyzx
mad r0.xyw, r0.xxxx, cb1[4].xyxz, r1.xyxz
mad o9.xyz, r0.zzzz, cb1[6].xyzx, r0.xywx
ret 
undecipherable custom data
undecipherable custom data
undecipherable custom data
// Approximately 149 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
