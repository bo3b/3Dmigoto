cbuffer _Globals : register(b0)
{
  float forwarddirlightscaler : packoffset(c0) = float(1.000000e+000);
  float forwardspotlightscaler : packoffset(c0.y) = float(1.000000e+000);
  float additionaldirLightingScaler : packoffset(c0.z) = float(1.000000e+000);
  float additionalspotLightingScaler : packoffset(c0.w) = float(1.000000e+000);
  float particleAlphaThreshold : packoffset(c1) = float(5.000000e-002);
  float startCamFadeDistToVertex : packoffset(c1.y) = float(0.000000e+000);
  float endCamFadeDistToVertex : packoffset(c1.z) = float(0.000000e+000);
  float maxTransmissive : packoffset(c1.w) = float(0.000000e+000);
  float maxSpecularCoef : packoffset(c2) = float(0.000000e+000);
  float4 nearFarClip : packoffset(c3);
  row_major float4x4 fadePointTransform : packoffset(c4);
  float4 fadePointInnerBoundsXYZ : packoffset(c8);
  float4 fadePointOuterBoundsXYZ : packoffset(c9);
  float4 fadePointRecipBoundsDiffXYZ : packoffset(c10);
  float4 c_texAnimMatrixScaleTrans : packoffset(c11);
  float2 c_numAnimFrames : packoffset(c12);
  float c_totalAnimFrames : packoffset(c12.z);
  float2 c_recipNumAnimFrames : packoffset(c13);
  row_major float4x4 c_uvArray : packoffset(c14);
}

cbuffer COMMON_BUFFER1 : register(b1)
{
  row_major float4x4 worldViewProj : packoffset(c0);
  row_major float4x4 world : packoffset(c4);
  row_major float4x4 worldView : packoffset(c8);
  row_major float4x4 worldI : packoffset(c12);
}

cbuffer COMMON_BUFFER2 : register(b3)
{
  row_major float4x4 view : packoffset(c0);
  row_major float4x4 viewI : packoffset(c4);
  row_major float4x4 projMatrix : packoffset(c8);
  row_major float4x4 viewProj : packoffset(c12);
  row_major float4x4 viewProjI : packoffset(c16);
  float4 screenSpaceDimensions : packoffset(c20);
  float4 frustumDimensions : packoffset(c21);
  float4 cLightingTransitionValues : packoffset(c22);
  float4 treeAmbientBoost : packoffset(c23);
  float4 viewportPixelDimensions : packoffset(c24);
  float4 globalVector4 : packoffset(c25);
  float4 globalVector6 : packoffset(c26);
  float4 globalVector7 : packoffset(c27);
  float4 globalVector8 : packoffset(c28);
  float4 fog_colour_towards : packoffset(c29);
  float4 fog_colour_away : packoffset(c30);
  float4 fogLightDir : packoffset(c31);
  float4 keyLightDir : packoffset(c32);
  float4 fog_min_inv_fog1_fog2 : packoffset(c33);
  float4 keyLightColour : packoffset(c34);
  float4 msaaMode : packoffset(c35);
  float3 keyLightDirVS : packoffset(c36);
  float3 worldCameraPos : packoffset(c37);
  float emissiveTextureControl : packoffset(c37.w);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : POSITION0,
  float2 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  float4 v3 : COLOR0,
  out float4 o0 : SV_Position0,
  out float3 o1 : NORMAL0,
  out float4 o2 : TEXCOORD0,
  out float2 o3 : TEXCOORD1,
  out float3 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD3,
  out float4 o6 : TEXCOORD4,
  out float4 o7 : TEXCOORD5)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  sincos(v2.x, r0.x, r1.x);
  r0.y = (int)v0.w;
  r2.x = -r0.x;
  r2.y = r1.x;
  r2.z = r0.x;
  r1.x = dot(v1.xy, r2.yz);
  r1.y = dot(v1.xy, r2.xy);
  r2.xyzw = worldView._m10_m11_m12_m13 * v0.yyyy;
  r2.xyzw = v0.xxxx * worldView._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = v0.zzzz * worldView._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = worldView._m30_m31_m32_m33 + r2.xyzw;
  r0.xz = r2.xy + r1.xy;
  r1.xyzw = viewI._m10_m11_m12_m13 * r0.zzzz;
  r1.xyzw = r0.xxxx * viewI._m00_m01_m02_m03 + r1.xyzw;
  r1.xyzw = r2.zzzz * viewI._m20_m21_m22_m23 + r1.xyzw;
  r1.xyzw = r2.wwww * viewI._m30_m31_m32_m33 + r1.xyzw;
  r3.xyzw = projMatrix._m10_m11_m12_m13 * r0.zzzz;
  r3.xyzw = r0.xxxx * projMatrix._m00_m01_m02_m03 + r3.xyzw;
  r3.xyzw = r2.zzzz * projMatrix._m20_m21_m22_m23 + r3.xyzw;
  r2.xyzw = r2.wwww * projMatrix._m33_m30_m31_m32 + r3.wxyz;
  
//3DMigoto Fix;
float4 stereo = StereoParams.Load(0);
float4 r20;
r20.xyzw = r2.xyzw;
r20.x += stereo.x * (r20.w - stereo.y);

  r0.x = dot(v1.xy, v1.xy);
  r0.x = sqrt(r0.x);
  o3.y = r0.x / nearFarClip.y;
  r0.z = c_totalAnimFrames * v2.y;
  r0.w = r0.z / c_numAnimFrames.x;
  r3.x = r0.w >= -r0.w;
  r0.w = frac(abs(r0.w));
  r0.w = r3.x ? r0.w : -r0.w;
  r0.w = c_numAnimFrames.x * r0.w;
  r3.x = v2.y * c_totalAnimFrames + -r0.w;
  r0.w = floor(r0.w);
  r3.y = v2.y * c_totalAnimFrames + 1.000000000e+000;
  r3.z = c_totalAnimFrames < r3.y;
  if (r3.z != 0) {
    r3.y = -c_totalAnimFrames + r3.y;
  }
  r3.z = r3.y / c_numAnimFrames.x;
  r3.w = r3.z >= -r3.z;
  r3.z = frac(abs(r3.z));
  r3.z = r3.w ? r3.z : -r3.z;
  r3.w = c_numAnimFrames.x * r3.z;
  r3.y = -r3.z * c_numAnimFrames.x + r3.y;
  r3.z = floor(r3.w);
  r3.xy = c_recipNumAnimFrames.xx * r3.xy;
  r4.y = r0.w * c_recipNumAnimFrames.x + c_texAnimMatrixScaleTrans.z;
  r4.w = r3.x * c_recipNumAnimFrames.y + c_texAnimMatrixScaleTrans.w;
  r5.y = r3.z * c_recipNumAnimFrames.x + c_texAnimMatrixScaleTrans.z;
  r5.w = r3.y * c_recipNumAnimFrames.y + c_texAnimMatrixScaleTrans.w;
  
  r3.xz = c_uvArray[r0.y].xy;  //<========================= COMPILER ERROR
  
  r3.yw = float2(1.000000e+000,1.000000e+000);
  r4.xz = c_texAnimMatrixScaleTrans.xy;
  o2.x = dot(r3.xy, r4.xy);
  o2.y = dot(r3.zw, r4.zw);
  r5.xz = c_texAnimMatrixScaleTrans.xy;
  o2.z = dot(r3.xy, r5.xy);
  o2.w = dot(r3.zw, r5.zw);
  r3.xyz = -worldCameraPos.xyz + r1.xyz;
  r0.y = dot(r3.xyz, r3.xyz);
  r0.y = sqrt(r0.y);
  r0.w = -endCamFadeDistToVertex + r0.y;
  r0.w = startCamFadeDistToVertex + -r0.w;
  r0.w = saturate(r0.w / startCamFadeDistToVertex);
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = v3.w * r0.w;
  o3.x = frac(r0.z);
  
  r0.z = 1.000000e+000 / r20.x;  //<-- 3d Fix
  
  r3.y = r2.y * r0.z;
  o4.x = r3.y * 5.000000000e-001 + 5.000000000e-001;
  r0.z = -r2.z * r0.z;
  o4.y = r0.z * 5.000000000e-001 + 5.000000000e-001;
  r0.z = view._m12 * r1.y;
  r0.z = r1.x * view._m02 + r0.z;
  r0.z = r1.z * view._m22 + r0.z;
  r0.z = r1.w * view._m32 + r0.z;
  o4.z = r0.z / nearFarClip.y;
  r0.z = r0.w < particleAlphaThreshold;
  if (r0.z != 0) {
    r2.x = -1.000000000e+000;
  }
  r0.z = -fog_min_inv_fog1_fog2.x + r0.y;
  r0.z = saturate(fog_min_inv_fog1_fog2.y * r0.z);
  r1.w = fog_min_inv_fog1_fog2.z * r0.z;
  r3.xy = r3.xz / r0.yy;
  r0.y = saturate(dot(r3.xy, fogLightDir.xz));
  r3.xyz = -fog_colour_away.xyz + fog_colour_towards.xyz;
  r3.xyz = r0.yyy * r3.xyz + fog_colour_away.xyz;
  o6.xyz = r3.xyz * r1.www;
  o6.w = -r0.z * fog_min_inv_fog1_fog2.z + 1.000000000e+000;
  o7.xyz = worldCameraPos.xyz + -r1.xyz;
  r0.y = dot(-viewI._m20_m21_m22, -viewI._m20_m21_m22);
  r0.y = rsqrt(r0.y);
  o1.xyz = -viewI._m20_m21_m22 * r0.yyy;
  o0.xyzw = r2.yzwx;
  o5.xyz = v3.xyz;
  o5.w = r0.w;
  o7.w = r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9821.0
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float forwarddirlightscaler;       // Offset:    0 Size:     4 [unused]
//      = 0x3f800000 
//   float forwardspotlightscaler;      // Offset:    4 Size:     4 [unused]
//      = 0x3f800000 
//   float additionaldirLightingScaler; // Offset:    8 Size:     4 [unused]
//      = 0x3f800000 
//   float additionalspotLightingScaler;// Offset:   12 Size:     4 [unused]
//      = 0x3f800000 
//   float particleAlphaThreshold;      // Offset:   16 Size:     4
//      = 0x3d4ccccd 
//   float startCamFadeDistToVertex;    // Offset:   20 Size:     4
//      = 0x00000000 
//   float endCamFadeDistToVertex;      // Offset:   24 Size:     4
//      = 0x00000000 
//   float maxTransmissive;             // Offset:   28 Size:     4 [unused]
//      = 0x00000000 
//   float maxSpecularCoef;             // Offset:   32 Size:     4 [unused]
//      = 0x00000000 
//   float4 nearFarClip;                // Offset:   48 Size:    16
//   row_major float4x4 fadePointTransform;// Offset:   64 Size:    64 [unused]
//   float4 fadePointInnerBoundsXYZ;    // Offset:  128 Size:    16 [unused]
//   float4 fadePointOuterBoundsXYZ;    // Offset:  144 Size:    16 [unused]
//   float4 fadePointRecipBoundsDiffXYZ;// Offset:  160 Size:    16 [unused]
//   float4 c_texAnimMatrixScaleTrans;  // Offset:  176 Size:    16
//   float2 c_numAnimFrames;            // Offset:  192 Size:     8
//   float c_totalAnimFrames;           // Offset:  200 Size:     4
//   float2 c_recipNumAnimFrames;       // Offset:  208 Size:     8
//   row_major float4x4 c_uvArray;      // Offset:  224 Size:    64
//
// }
//
// cbuffer COMMON_BUFFER1
// {
//
//   row_major float4x4 worldViewProj;  // Offset:    0 Size:    64 [unused]
//   row_major float4x4 world;          // Offset:   64 Size:    64 [unused]
//   row_major float4x4 worldView;      // Offset:  128 Size:    64
//   row_major float4x4 worldI;         // Offset:  192 Size:    64 [unused]
//
// }
//
// cbuffer COMMON_BUFFER2
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64
//   row_major float4x4 viewI;          // Offset:   64 Size:    64
//   row_major float4x4 projMatrix;     // Offset:  128 Size:    64
//   row_major float4x4 viewProj;       // Offset:  192 Size:    64 [unused]
//   row_major float4x4 viewProjI;      // Offset:  256 Size:    64 [unused]
//   float4 screenSpaceDimensions;      // Offset:  320 Size:    16 [unused]
//   float4 frustumDimensions;          // Offset:  336 Size:    16 [unused]
//   float4 cLightingTransitionValues;  // Offset:  352 Size:    16 [unused]
//   float4 treeAmbientBoost;           // Offset:  368 Size:    16 [unused]
//   float4 viewportPixelDimensions;    // Offset:  384 Size:    16 [unused]
//   float4 globalVector4;              // Offset:  400 Size:    16 [unused]
//   float4 globalVector6;              // Offset:  416 Size:    16 [unused]
//   float4 globalVector7;              // Offset:  432 Size:    16 [unused]
//   float4 globalVector8;              // Offset:  448 Size:    16 [unused]
//   float4 fog_colour_towards;         // Offset:  464 Size:    16
//   float4 fog_colour_away;            // Offset:  480 Size:    16
//   float4 fogLightDir;                // Offset:  496 Size:    16
//   float4 keyLightDir;                // Offset:  512 Size:    16 [unused]
//   float4 fog_min_inv_fog1_fog2;      // Offset:  528 Size:    16
//   float4 keyLightColour;             // Offset:  544 Size:    16 [unused]
//   float4 msaaMode;                   // Offset:  560 Size:    16 [unused]
//   float3 keyLightDirVS;              // Offset:  576 Size:    12 [unused]
//   float3 worldCameraPos;             // Offset:  592 Size:    12
//   float emissiveTextureControl;      // Offset:  604 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
// COMMON_BUFFER1                    cbuffer      NA          NA    1        1
// COMMON_BUFFER2                    cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xy          1     NONE   float   xy  
// TEXCOORD                 0   xy          2     NONE   float   xy  
// COLOR                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xy          3     NONE   float   xy  
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
// TEXCOORD                 3   xyzw        5     NONE   float   xyzw
// TEXCOORD                 4   xyzw        6     NONE   float   xyzw
// TEXCOORD                 5   xyzw        7     NONE   float   xyzw
//
vs_4_1
undecipherable custom data
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[18], dynamicIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb3[38], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_input v2.xy
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 6
sincos r0.x, r1.x, v2.x
ftoi r0.y, v0.w
mov r2.x, -r0.x
mov r2.y, r1.x
mov r2.z, r0.x
dp2 r1.x, v1.xyxx, r2.yzyy
dp2 r1.y, v1.xyxx, r2.xyxx
mul r2.xyzw, v0.yyyy, cb1[9].xyzw
mad r2.xyzw, v0.xxxx, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, v0.zzzz, cb1[10].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[11].xyzw
add r0.xz, r1.xxyx, r2.xxyx
mul r1.xyzw, r0.zzzz, cb3[5].xyzw
mad r1.xyzw, r0.xxxx, cb3[4].xyzw, r1.xyzw
mad r1.xyzw, r2.zzzz, cb3[6].xyzw, r1.xyzw
mad r1.xyzw, r2.wwww, cb3[7].xyzw, r1.xyzw
mul r3.xyzw, r0.zzzz, cb3[9].xyzw
mad r3.xyzw, r0.xxxx, cb3[8].xyzw, r3.xyzw
mad r3.xyzw, r2.zzzz, cb3[10].xyzw, r3.xyzw
mad r2.xyzw, r2.wwww, cb3[11].wxyz, r3.wxyz
dp2 r0.x, v1.xyxx, v1.xyxx
sqrt r0.x, r0.x
div o3.y, r0.x, cb0[3].y
mul r0.z, v2.y, cb0[12].z
div r0.w, r0.z, cb0[12].x
ge r3.x, r0.w, -r0.w
frc r0.w, |r0.w|
movc r0.w, r3.x, r0.w, -r0.w
mul r0.w, r0.w, cb0[12].x
mad r3.x, v2.y, cb0[12].z, -r0.w
round_ni r0.w, r0.w
mad r3.y, v2.y, cb0[12].z, l(1.000000)
lt r3.z, cb0[12].z, r3.y
if_nz r3.z
  add r3.y, r3.y, -cb0[12].z
endif 
div r3.z, r3.y, cb0[12].x
ge r3.w, r3.z, -r3.z
frc r3.z, |r3.z|
movc r3.z, r3.w, r3.z, -r3.z
mul r3.w, r3.z, cb0[12].x
mad r3.y, -r3.z, cb0[12].x, r3.y
round_ni r3.z, r3.w
mul r3.xy, r3.xyxx, cb0[13].xxxx
mad r4.y, r0.w, cb0[13].x, cb0[11].z
mad r4.w, r3.x, cb0[13].y, cb0[11].w
mad r5.y, r3.z, cb0[13].x, cb0[11].z
mad r5.w, r3.y, cb0[13].y, cb0[11].w
mov r3.xz, cb0[r0.y + 14].xxyx
mov r3.yw, l(0,1.000000,0,1.000000)
mov r4.xz, cb0[11].xxyx
dp2 o2.x, r3.xyxx, r4.xyxx
dp2 o2.y, r3.zwzz, r4.zwzz
mov r5.xz, cb0[11].xxyx
dp2 o2.z, r3.xyxx, r5.xyxx
dp2 o2.w, r3.zwzz, r5.zwzz
add r3.xyz, r1.xyzx, -cb3[37].xyzx
dp3 r0.y, r3.xyzx, r3.xyzx
sqrt r0.y, r0.y
add r0.w, r0.y, -cb0[1].z
add r0.w, -r0.w, cb0[1].y
div_sat r0.w, r0.w, cb0[1].y
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, v3.w
frc o3.x, r0.z
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r3.y, r0.z, r2.y
mad o4.x, r3.y, l(0.500000), l(0.500000)
mul r0.z, r0.z, -r2.z
mad o4.y, r0.z, l(0.500000), l(0.500000)
mul r0.z, r1.y, cb3[1].z
mad r0.z, r1.x, cb3[0].z, r0.z
mad r0.z, r1.z, cb3[2].z, r0.z
mad r0.z, r1.w, cb3[3].z, r0.z
div o4.z, r0.z, cb0[3].y
lt r0.z, r0.w, cb0[1].x
if_nz r0.z
  mov r2.x, l(-1.000000)
endif 
add r0.z, r0.y, -cb3[33].x
mul_sat r0.z, r0.z, cb3[33].y
mul r1.w, r0.z, cb3[33].z
div r3.xy, r3.xzxx, r0.yyyy
dp2_sat r0.y, r3.xyxx, cb3[31].xzxx
add r3.xyz, cb3[29].xyzx, -cb3[30].xyzx
mad r3.xyz, r0.yyyy, r3.xyzx, cb3[30].xyzx
mul o6.xyz, r1.wwww, r3.xyzx
mad o6.w, -r0.z, cb3[33].z, l(1.000000)
add o7.xyz, -r1.xyzx, cb3[37].xyzx
dp3 r0.y, -cb3[6].xyzx, -cb3[6].xyzx
rsq r0.y, r0.y
mul o1.xyz, r0.yyyy, -cb3[6].xyzx
mov o0.xyzw, r2.yzwx
mov o5.xyz, v3.xyzx
mov o5.w, r0.w
mov o7.w, r0.x
ret 
undecipherable custom data
undecipherable custom data
undecipherable custom data
// Approximately 97 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/