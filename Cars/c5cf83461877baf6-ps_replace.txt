// Spikes coming out of cars.  Human bodies stretched in cars.

cbuffer _Globals : register(b0)
{
  float minSpecPower : packoffset(c0);
  float maxSpecPower : packoffset(c0.y);
  float globalSpecularFactor : packoffset(c0.z);
  float openTopped : packoffset(c0.w);
  float maxWetSpecPower : packoffset(c1);
  float globalWetSpecularFactor : packoffset(c1.y);
  float darkeningInterval : packoffset(c1.z);
  float globalEMapFactor : packoffset(c1.w);
  float fresnelFactor : packoffset(c2);
  float4 tint_tintR : packoffset(c3);
  float4 tint_tintG : packoffset(c4);
  float4 tint_tintB : packoffset(c5);
}

cbuffer COMMON_BUFFER2 : register(b3)
{
  row_major float4x4 view : packoffset(c0);
  row_major float4x4 viewI : packoffset(c4);
  row_major float4x4 projMatrix : packoffset(c8);
  row_major float4x4 viewProj : packoffset(c12);
  row_major float4x4 viewProjI : packoffset(c16);
  float4 screenSpaceDimensions : packoffset(c20);
  float4 frustumDimensions : packoffset(c21);
  float4 cLightingTransitionValues : packoffset(c22);
  float4 treeAmbientBoost : packoffset(c23);
  float4 viewportPixelDimensions : packoffset(c24);
  float4 globalVector4 : packoffset(c25);
  float4 globalVector6 : packoffset(c26);
  float4 globalVector7 : packoffset(c27);
  float4 globalVector8 : packoffset(c28);
  float4 fog_colour_towards : packoffset(c29);
  float4 fog_colour_away : packoffset(c30);
  float4 fogLightDir : packoffset(c31);
  float4 keyLightDir : packoffset(c32);
  float4 fog_min_inv_fog1_fog2 : packoffset(c33);
  float4 keyLightColour : packoffset(c34);
  float4 msaaMode : packoffset(c35);
  float3 keyLightDirVS : packoffset(c36);
  float3 worldCameraPos : packoffset(c37);
  float emissiveTextureControl : packoffset(c37.w);
}

cbuffer COMMON_BUFFER3 : register(b4)
{
  float4 windDirectionAndStrength : packoffset(c0);
  float4 MSAAControlValues : packoffset(c1);
  float4 globalVector0 : packoffset(c2);
  float4 globalVector1 : packoffset(c3);
  float4 globalVector2 : packoffset(c4);
  float4 globalVector3 : packoffset(c5);
  float4 globalVector5 : packoffset(c6);
  float4 globalVector10 : packoffset(c7);
  float4 globalVector11 : packoffset(c8);
  row_major float4x4 globalMatrix0 : packoffset(c9);
  float4 SSAORenderWidthHeight : packoffset(c13);
  float4 distortionTextureWidthHeight : packoffset(c14);
  float currentTime : packoffset(c15);
}
SamplerState ambientAndBakedShadowsMap_s : register(s0);
SamplerState tint_maskMap_s : register(s1);
SamplerState diffuseMap_s : register(s2);
SamplerState specularMap_s : register(s3);
SamplerState normalMap_s : register(s4);
SamplerState environmentMap_s : register(s5);
SamplerState diffuseIrradianceMap_s : register(s6);
SamplerState diffuseIrradianceEnvMap_s : register(s7);
SamplerState specularIrradianceEnvMap_s : register(s8);
Texture2D<float4> diffuseMap : register(t0);
Texture2D<float4> tint_maskMap : register(t1);
Texture2D<float4> normalMap : register(t2);
Texture2D<float4> specularMap : register(t3);
Texture2D<float4> ambientAndBakedShadowsMap : register(t4);
Texture2D<float4> diffuseIrradianceMap : register(t5);
TextureCube<float4> diffuseIrradianceEnvMap : register(t6);
TextureCube<float4> specularIrradianceEnvMap : register(t7);
TextureCube<float4> environmentMap : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : COLOR0,
  float4 v2 : COLOR1,
  centroid float4 v3 : TEXCOORD0,
  centroid float3 v4 : TEXCOORD1,
  float3 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  float3 v7 : TEXCOORD6,
  float3 v8 : TEXCOORD7,
  float3 v9 : TEXCOORD8,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = diffuseMap.Sample(diffuseMap_s, v4.xy).xyz;
  r1.xyz = tint_maskMap.Sample(tint_maskMap_s, v4.xy).xyz;
  r1.xyz = float3(-2.000000e-001,-2.000000e-001,-2.000000e-001) + r1.xyz;
  r1.xyz = saturate(float3(1.000000e+003,1.000000e+003,1.000000e+003) * r1.xyz);
  r0.w = dot(r1.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r1.w = 9.999999747e-005 < r0.w;
  if (r1.w != 0) {
    r1.xyz = r1.xyz / r0.www;
  }
  r2.xyz = tint_tintR.xyz * r0.xyz;
  r3.xyz = tint_tintG.xyz * r0.xyz;
  r4.xyz = tint_tintB.xyz * r0.xyz;
  r3.xyz = r3.xyz * r1.yyy;
  r2.xyz = r1.xxx * r2.xyz + r3.xyz;
  r2.xyz = r1.zzz * r4.xyz + r2.xyz;
  r0.w = dot(r1.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r0.w = 1.000000000e+000 + -r0.w;
  r0.w = max(0.000000000e+000, r0.w);
  r0.xyz = r0.www * r0.xyz + r2.xyz;
  r0.xyz = v2.xyz * r0.xyz;
  r1.xy = v5.xy / v5.zz;
  r1.zw = v3.xy / v3.ww;
  r1.zw = r1.zw + -r1.xy;
  r1.xy = r1.zw * float2(2.100000e+000,2.100000e+000) + r1.xy;
  r0.w = dot(v6.xyz, v6.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = v6.xyz * r0.www;
  r0.w = globalVector6.x * openTopped;
  r0.w = saturate(5.000000000e+000 * r0.w);
  r1.z = -darkeningInterval * r0.w + 1.000000000e+000;
  r3.xyz = r1.zzz * r0.xyz;
  r4.xyz = normalMap.Sample(normalMap_s, v4.xy).xyz;
  r4.xyz = r4.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.w = dot(v9.xyz, v9.xyz);
  r1.w = rsqrt(r1.w);
  r5.xyz = v9.xyz * r1.www;
  r1.w = dot(v8.xyz, v8.xyz);
  r1.w = rsqrt(r1.w);
  r6.xyz = v8.xyz * r1.www;
  r6.xyz = r6.xyz * r4.yyy;
  r4.xyw = r4.xxx * r5.xyz + r6.xyz;
  r2.xyz = r4.zzz * r2.xyz + r4.xyw;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xzw = r2.xyz * r1.www;
  r4.xyzw = specularMap.Sample(specularMap_s, v4.xy).wxyz;
  r5.xy = globalWetSpecularFactor + -globalSpecularFactor;
  r5.xy = r0.ww * r5.xy + globalSpecularFactor;
  r0.w = -minSpecPower + r5.y;
  r0.w = r4.x * r0.w + minSpecPower;
  r3.w = dot(v7.xyz, v7.xyz);
  r3.w = rsqrt(r3.w);
  r5.yzw = v7.xyz * r3.www;
  r6.x = ambientAndBakedShadowsMap.Sample(ambientAndBakedShadowsMap_s, r1.xy).w;
  r6.y = saturate(dot(r2.xzw, keyLightDir.xyz));
  r6.yzw = keyLightColour.xyz * r6.yyy;
  r7.xyz = -v7.xyz * r3.www + keyLightDir.xyz;
  r3.w = dot(r7.xyz, r7.xyz);
  r3.w = rsqrt(r3.w);
  r7.xyz = r7.xyz * r3.www;
  r3.w = 8.000000000e+000 + r0.w;
  r3.w = 4.547284171e-002 * r3.w;
  r7.x = saturate(dot(r2.xzw, r7.xyz));
  r7.x = max(9.999999825e-015, r7.x);
  r7.x = log2(r7.x);
  r0.w = r7.x * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r3.w * r0.w;
  r0.w = r0.w * r6.x;
  r7.xyz = keyLightColour.xyz * r0.www;
  r0.w = saturate(v4.z);
  r8.xyz = diffuseIrradianceMap.Sample(diffuseIrradianceMap_s, r1.xy).xyz;
  r6.xyz = r6.yzw * r6.xxx + r8.xyz;
  r8.xyz = diffuseIrradianceEnvMap.Sample(diffuseIrradianceEnvMap_s, r2.xzw).xyz;
  r9.xyz = globalVector0.xxx * r8.xyz;
  r7.xyz = float3(1.000000e-003,1.000000e-003,1.000000e-003) * r7.xyz;
  r1.x = dot(r5.yzw, r2.xzw);
  r1.x = r1.x + r1.x;
  r2.xzw = r2.xzw * -r1.xxx + r5.yzw;
  r4.x = saturate(r4.x);
  r1.x = r4.x * r4.x;
  r5.yzw = specularIrradianceEnvMap.Sample(specularIrradianceEnvMap_s, r2.xzw).xyz;
  r1.y = -r4.x * r4.x + 1.000000000e+000;
  r1.y = 6.000000000e+000 * r1.y;
  r2.xzw = environmentMap.SampleLevel(environmentMap_s, r2.xzw, r1.y).xyz;
  r2.xzw = r2.xzw + -r5.yzw;
  r2.xzw = r1.xxx * r2.xzw + r5.yzw;
  r2.xzw = r2.xzw * r0.www;
  r5.yzw = r5.xxx * r4.yzw;
  r10.xyz = globalEMapFactor * r4.yzw;
  r11.xyz = float3(1.600000e+000,1.600000e+000,1.600000e+000) * r2.xzw;
  r0.w = r2.y * r1.w + 1.000000000e+000;
  r1.xy = r0.ww * float2(2.500000e-001,2.500000e-001) + float2(5.000000e-001,-5.000000e-001);
  r1.yw = globalVector1.yz * r1.yy + float2(1.000000e+000,1.000000e+000);
  r12.xyz = r3.xyz * r1.xxx;
  r9.xyz = r12.xyz * r9.xyz;
  r3.xyz = r6.xyz * r3.xyz;
  r3.xyz = r3.xyz * r1.yyy;
  r3.xyz = globalVector0.zzz * r3.xyz;
  r5.yzw = r5.yzw * r7.xyz;
  r5.yzw = r5.yzw * r1.yyy;
  r6.xyz = r11.xyz * r10.xyz;
  r6.xyz = r6.xyz * r1.www;
  r3.xyz = r9.xyz * globalVector0.yyy + r3.xyz;
  r3.xyz = r5.yzw * globalVector0.www + r3.xyz;
  r3.xyz = r6.xyz * globalVector1.xxx + r3.xyz;
  r5.yzw = globalVector0.xxx * r8.xyz + -r3.xyz;
  r3.xyz = globalVector1.www * r5.yzw + r3.xyz;
  r2.xyz = r2.xzw * float3(1.600000e+000,1.600000e+000,1.600000e+000) + -r3.xyz;
  r2.xyz = globalVector2.xxx * r2.xyz + r3.xyz;
  r1.xyw = -r2.xyz + r1.xxx;
  r1.xyw = globalVector2.yyy * r1.xyw + r2.xyz;
  r0.xyz = r0.xyz * r1.zzz + -r1.xyw;
  r0.xyz = globalVector2.zzz * r0.xyz + r1.xyw;
  r1.xyz = r4.yzw * r5.xxx + -r0.xyz;
  r0.xyz = globalVector2.www * r1.xyz + r0.xyz;
  o0.xyz = r0.xyz * v1.www + v1.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9821.0
//
//   using 3Dmigoto v1.1.14 on Mon Jun 01 22:32:36 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float minSpecPower;                // Offset:    0 Size:     4
//   float maxSpecPower;                // Offset:    4 Size:     4
//   float globalSpecularFactor;        // Offset:    8 Size:     4
//   float openTopped;                  // Offset:   12 Size:     4
//   float maxWetSpecPower;             // Offset:   16 Size:     4
//   float globalWetSpecularFactor;     // Offset:   20 Size:     4
//   float darkeningInterval;           // Offset:   24 Size:     4
//   float globalEMapFactor;            // Offset:   28 Size:     4
//   float fresnelFactor;               // Offset:   32 Size:     4 [unused]
//   float4 tint_tintR;                 // Offset:   48 Size:    16
//   float4 tint_tintG;                 // Offset:   64 Size:    16
//   float4 tint_tintB;                 // Offset:   80 Size:    16
//
// }
//
// cbuffer COMMON_BUFFER2
// {
//
//   row_major float4x4 view;           // Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewI;          // Offset:   64 Size:    64 [unused]
//   row_major float4x4 projMatrix;     // Offset:  128 Size:    64 [unused]
//   row_major float4x4 viewProj;       // Offset:  192 Size:    64 [unused]
//   row_major float4x4 viewProjI;      // Offset:  256 Size:    64 [unused]
//   float4 screenSpaceDimensions;      // Offset:  320 Size:    16 [unused]
//   float4 frustumDimensions;          // Offset:  336 Size:    16 [unused]
//   float4 cLightingTransitionValues;  // Offset:  352 Size:    16 [unused]
//   float4 treeAmbientBoost;           // Offset:  368 Size:    16 [unused]
//   float4 viewportPixelDimensions;    // Offset:  384 Size:    16 [unused]
//   float4 globalVector4;              // Offset:  400 Size:    16 [unused]
//   float4 globalVector6;              // Offset:  416 Size:    16
//   float4 globalVector7;              // Offset:  432 Size:    16 [unused]
//   float4 globalVector8;              // Offset:  448 Size:    16 [unused]
//   float4 fog_colour_towards;         // Offset:  464 Size:    16 [unused]
//   float4 fog_colour_away;            // Offset:  480 Size:    16 [unused]
//   float4 fogLightDir;                // Offset:  496 Size:    16 [unused]
//   float4 keyLightDir;                // Offset:  512 Size:    16
//   float4 fog_min_inv_fog1_fog2;      // Offset:  528 Size:    16 [unused]
//   float4 keyLightColour;             // Offset:  544 Size:    16
//   float4 msaaMode;                   // Offset:  560 Size:    16 [unused]
//   float3 keyLightDirVS;              // Offset:  576 Size:    12 [unused]
//   float3 worldCameraPos;             // Offset:  592 Size:    12 [unused]
//   float emissiveTextureControl;      // Offset:  604 Size:     4 [unused]
//
// }
//
// cbuffer COMMON_BUFFER3
// {
//
//   float4 windDirectionAndStrength;   // Offset:    0 Size:    16 [unused]
//   float4 MSAAControlValues;          // Offset:   16 Size:    16 [unused]
//   float4 globalVector0;              // Offset:   32 Size:    16
//   float4 globalVector1;              // Offset:   48 Size:    16
//   float4 globalVector2;              // Offset:   64 Size:    16
//   float4 globalVector3;              // Offset:   80 Size:    16 [unused]
//   float4 globalVector5;              // Offset:   96 Size:    16 [unused]
//   float4 globalVector10;             // Offset:  112 Size:    16 [unused]
//   float4 globalVector11;             // Offset:  128 Size:    16 [unused]
//   row_major float4x4 globalMatrix0;  // Offset:  144 Size:    64 [unused]
//   float4 SSAORenderWidthHeight;      // Offset:  208 Size:    16 [unused]
//   float4 distortionTextureWidthHeight;// Offset:  224 Size:    16 [unused]
//   float currentTime;                 // Offset:  240 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ambientAndBakedShadowsMap         sampler      NA          NA    0        1
// tint_maskMap                      sampler      NA          NA    1        1
// diffuseMap                        sampler      NA          NA    2        1
// specularMap                       sampler      NA          NA    3        1
// normalMap                         sampler      NA          NA    4        1
// environmentMap                    sampler      NA          NA    5        1
// diffuseIrradianceMap              sampler      NA          NA    6        1
// diffuseIrradianceEnvMap           sampler      NA          NA    7        1
// specularIrradianceEnvMap          sampler      NA          NA    8        1
// diffuseMap                        texture  float4          2d    0        1
// tint_maskMap                      texture  float4          2d    1        1
// normalMap                         texture  float4          2d    2        1
// specularMap                       texture  float4          2d    3        1
// ambientAndBakedShadowsMap         texture  float4          2d    4        1
// diffuseIrradianceMap              texture  float4          2d    5        1
// diffuseIrradianceEnvMap           texture  float4        cube    6        1
// specularIrradianceEnvMap          texture  float4        cube    7        1
// environmentMap                    texture  float4        cube    8        1
// $Globals                          cbuffer      NA          NA    0        1
// COMMON_BUFFER2                    cbuffer      NA          NA    3        1
// COMMON_BUFFER3                    cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 0   xyzw        3     NONE   float   xy w
// TEXCOORD                 1   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
// TEXCOORD                 7   xyz         8     NONE   float   xyz 
// TEXCOORD                 8   xyz         9     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_1
undecipherable custom data
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[6], immediateIndexed
dcl_constantbuffer cb3[35], immediateIndexed
dcl_constantbuffer cb4[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texturecube (float,float,float,float) t6
dcl_resource_texturecube (float,float,float,float) t7
dcl_resource_texturecube (float,float,float,float) t8
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear centroid v3.xyw
dcl_input_ps linear centroid v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_input_ps linear v9.xyz
dcl_output o0.xyzw
dcl_temps 13
sample r0.xyz, v4.xyxx, t0.xyzw, s2
sample r1.xyz, v4.xyxx, t1.xyzw, s1
add r1.xyz, r1.xyzx, l(-0.200000, -0.200000, -0.200000, 0.000000)
mul_sat r1.xyz, r1.xyzx, l(1000.000000, 1000.000000, 1000.000000, 0.000000)
dp3 r0.w, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
lt r1.w, l(0.000100), r0.w
if_nz r1.w
  div r1.xyz, r1.xyzx, r0.wwww
endif 
mul r2.xyz, r0.xyzx, cb0[3].xyzx
mul r3.xyz, r0.xyzx, cb0[4].xyzx
mul r4.xyz, r0.xyzx, cb0[5].xyzx
mul r3.xyz, r1.yyyy, r3.xyzx
mad r2.xyz, r1.xxxx, r2.xyzx, r3.xyzx
mad r2.xyz, r1.zzzz, r4.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000000)
mad r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
mul r0.xyz, r0.xyzx, v2.xyzx
div r1.xy, v5.xyxx, v5.zzzz
div r1.zw, v3.xxxy, v3.wwww
add r1.zw, -r1.xxxy, r1.zzzw
mad r1.xy, r1.zwzz, l(2.100000, 2.100000, 0.000000, 0.000000), r1.xyxx
dp3 r0.w, v6.xyzx, v6.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, v6.xyzx
mul r0.w, cb0[0].w, cb3[26].x
mul_sat r0.w, r0.w, l(5.000000)
mad r1.z, -cb0[1].z, r0.w, l(1.000000)
mul r3.xyz, r0.xyzx, r1.zzzz
sample r4.xyz, v4.xyxx, t2.xyzw, s4
mad r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, v9.xyzx, v9.xyzx
rsq r1.w, r1.w
mul r5.xyz, r1.wwww, v9.xyzx
dp3 r1.w, v8.xyzx, v8.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, v8.xyzx
mul r6.xyz, r4.yyyy, r6.xyzx
mad r4.xyw, r4.xxxx, r5.xyxz, r6.xyxz
mad r2.xyz, r4.zzzz, r2.xyzx, r4.xywx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xzw, r1.wwww, r2.xxyz
sample r4.xyzw, v4.xyxx, t3.wxyz, s3
add r5.xy, -cb0[0].zyzz, cb0[1].yxyy
mad r5.xy, r0.wwww, r5.xyxx, cb0[0].zyzz
add r0.w, r5.y, -cb0[0].x
mad r0.w, r4.x, r0.w, cb0[0].x
dp3 r3.w, v7.xyzx, v7.xyzx
rsq r3.w, r3.w
mul r5.yzw, r3.wwww, v7.xxyz
sample r6.x, r1.xyxx, t4.wxyz, s0
dp3_sat r6.y, r2.xzwx, cb3[32].xyzx
mul r6.yzw, r6.yyyy, cb3[34].xxyz
mad r7.xyz, -v7.xyzx, r3.wwww, cb3[32].xyzx
dp3 r3.w, r7.xyzx, r7.xyzx
rsq r3.w, r3.w
mul r7.xyz, r3.wwww, r7.xyzx
add r3.w, r0.w, l(8.000000)
mul r3.w, r3.w, l(0.045473)
dp3_sat r7.x, r2.xzwx, r7.xyzx
max r7.x, r7.x, l(0.000000)
log r7.x, r7.x
mul r0.w, r0.w, r7.x
exp r0.w, r0.w
mul r0.w, r0.w, r3.w
mul r0.w, r6.x, r0.w
mul r7.xyz, r0.wwww, cb3[34].xyzx
mov_sat r0.w, v4.z
sample r8.xyz, r1.xyxx, t5.xyzw, s6
mad r6.xyz, r6.yzwy, r6.xxxx, r8.xyzx
sample r8.xyz, r2.xzwx, t6.xyzw, s7
mul r9.xyz, r8.xyzx, cb4[2].xxxx
mul r7.xyz, r7.xyzx, l(0.001000, 0.001000, 0.001000, 0.000000)
dp3 r1.x, r5.yzwy, r2.xzwx
add r1.x, r1.x, r1.x
mad r2.xzw, r2.xxzw, -r1.xxxx, r5.yyzw
mov_sat r4.x, r4.x
mul r1.x, r4.x, r4.x
sample r5.yzw, r2.xzwx, t7.wxyz, s8
mad r1.y, -r4.x, r4.x, l(1.000000)
mul r1.y, r1.y, l(6.000000)
sample_l r2.xzw, r2.xzwx, t8.xwyz, s5, r1.y
add r2.xzw, -r5.yyzw, r2.xxzw
mad r2.xzw, r1.xxxx, r2.xxzw, r5.yyzw
mul r2.xzw, r0.wwww, r2.xxzw
mul r5.yzw, r4.yyzw, r5.xxxx
mul r10.xyz, r4.yzwy, cb0[1].wwww
mul r11.xyz, r2.xzwx, l(1.600000, 1.600000, 1.600000, 0.000000)
mad r0.w, r2.y, r1.w, l(1.000000)
mad r1.xy, r0.wwww, l(0.250000, 0.250000, 0.000000, 0.000000), l(0.500000, -0.500000, 0.000000, 0.000000)
mad r1.yw, cb4[3].yyyz, r1.yyyy, l(0.000000, 1.000000, 0.000000, 1.000000)
mul r12.xyz, r1.xxxx, r3.xyzx
mul r9.xyz, r9.xyzx, r12.xyzx
mul r3.xyz, r3.xyzx, r6.xyzx
mul r3.xyz, r1.yyyy, r3.xyzx
mul r3.xyz, r3.xyzx, cb4[2].zzzz
mul r5.yzw, r7.xxyz, r5.yyzw
mul r5.yzw, r1.yyyy, r5.yyzw
mul r6.xyz, r10.xyzx, r11.xyzx
mul r6.xyz, r1.wwww, r6.xyzx
mad r3.xyz, r9.xyzx, cb4[2].yyyy, r3.xyzx
mad r3.xyz, r5.yzwy, cb4[2].wwww, r3.xyzx
mad r3.xyz, r6.xyzx, cb4[3].xxxx, r3.xyzx
mad r5.yzw, cb4[2].xxxx, r8.xxyz, -r3.xxyz
mad r3.xyz, cb4[3].wwww, r5.yzwy, r3.xyzx
mad r2.xyz, r2.xzwx, l(1.600000, 1.600000, 1.600000, 0.000000), -r3.xyzx
mad r2.xyz, cb4[4].xxxx, r2.xyzx, r3.xyzx
add r1.xyw, r1.xxxx, -r2.xyxz
mad r1.xyw, cb4[4].yyyy, r1.xyxw, r2.xyxz
mad r0.xyz, r0.xyzx, r1.zzzz, -r1.xywx
mad r0.xyz, cb4[4].zzzz, r0.xyzx, r1.xywx
mad r1.xyz, r4.yzwy, r5.xxxx, -r0.xyzx
mad r0.xyz, cb4[4].wwww, r1.xyzx, r0.xyzx
mad o0.xyz, r0.xyzx, v1.wwww, v1.xyzx
mov o0.w, l(1.000000)
ret 
undecipherable custom data
// Approximately 119 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
