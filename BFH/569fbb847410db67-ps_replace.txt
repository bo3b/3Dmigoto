
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float4 g_keyColor : packoffset(c9);
  float4 g_keyTranslucencyParams : packoffset(c10);
  float4 g_subParams : packoffset(c11);
  float4 g_envmapParams : packoffset(c12);
  float g_skyEnvmap8BitTexInvScale : packoffset(c13);
  float g_colorScale : packoffset(c13.y);
  float4 g_envmapsMipmapCount : packoffset(c14);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_customSampler_s : register(s2);
SamplerState g_ssaoSampler_s : register(s3);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
TextureCube<float4> g_customEnvmap : register(t2);
Texture2D<float4> g_ssaoTexture : register(t3);
Texture2DMS<float4,4> g_depthTexture : register(t4);
Texture2DMS<float4,4> g_gbufferTexture0 : register(t5);
Texture2DMS<float4,4> g_gbufferTexture1 : register(t6);
Texture2DMS<float4,4> g_gbufferTexture2 : register(t7);
Texture2DMS<float4,4> g_gbufferTexture3 : register(t8);
Texture2DMS<float4,4> g_gbufferTexture4 : register(t9);
Texture2DMS<float4,4> g_gbufferTexture5 : register(t10);
Texture2DMS<float4> g_shadowAccumTexture : register(t11);
Texture2D<float> g_msaaClassifyTexture : register(t12);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  const float4 icb[] = { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r1.z = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.z = 0 < r1.z;
//r1.z = (0 < r1.z)? -1:0;
//  r1.zw = r1.zz ? float2(5.60519386e-045,0.249999747) : float2(1.40129846e-045,0.999998987);
r1.zw = r1.zz ? float2(4.0,0.25) : float2(1.0,0.999998987);
  r2.x = 1 + -g_envmapParams.w;
  r2.yz = trunc(g_envmapsMipmapCount.xy);
  r3.w = 1;
  r4.xyz = float3(0,0,0);
  r5.xyz = float3(0,0,0);
  r2.w = 0;
//  while (asint(r2.w) < asint(r1.z)) {
  while (true) {
    r4.w = (int)r2.w >= (int)r1.z;
    if (r4.w != 0) break;
    r6.xy = icb[r2.w+0].xy * g_invScreenSize.xy + r1.xy;
    r7.xyzw = g_gbufferTexture0.Load(r0.xy, r2.w).xyzw;
    r8.xyzw = g_gbufferTexture1.Load(r0.xy, r2.w).xyzw;
    r9.xyzw = g_gbufferTexture2.Load(r0.xy, r2.w).yxzw;
    r10.xyz = g_gbufferTexture3.Load(r0.xy, r2.w).xyz;
    r3.z = g_depthTexture.Load(r0.xy, r2.w).x;
    r4.w = 255 * r9.w;
    r4.w = round(r4.w);
    r4.w = (int)r4.w;
    r11.xyzw = r8.xyzw * r8.xyzw;
    r12.xyzw = (int4)r4.wwww == int4(1,5,6,4);
    if (r12.x != 0) {
      r13.xyz = r11.www * r11.xyz;
    } else {
      r13.xyz = r11.www;
    }
    r5.w = 0 < r13.x;
    r5.w = r5.w ? r7.w : 0;
    r6.z = (int)r12.z | (int)r12.y;
    r6.w = (int)r9.x & (int)r6.z;
    r7.w = log2(abs(r9.y));
    r7.w = g_envmapParams.z * r7.w;
    r7.w = exp2(r7.w);
    r7.xyz = r7.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r8.w = dot(r7.xyz, r7.xyz);
    r8.w = rsqrt(r8.w);
    r7.xyz = r8.www * r7.xyz;
    r6.xy = r6.xy * float2(2,2) + float2(-1,-1);
    r3.xy = float2(1,-1) * r6.xy;
    r14.x = dot(r3.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r14.y = dot(r3.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r14.z = dot(r3.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r3.x = dot(r3.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r3.x = 1 / r3.x;
    r14.xzw = r14.xzy * r3.xxx;
    r3.y = dot(-r14.xzw, -r14.xzw);
    r3.y = rsqrt(r3.y);
    r15.xyz = -r14.xwz * r3.yyy;
    r3.z = g_shadowAccumTexture.Load(r0.xy, r2.w).x;
    r3.x = r14.y * r3.x + g_cameraPos.y;
    r6.xy = g_lightDir.xz * r3.xx;
    r6.xy = r6.xy * g_cloudOffsetAndScale.ww + r14.xz;
    r6.xy = r6.xy * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
    r3.x = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r6.xy, 0).x;
    r3.x = saturate(g_cloudCoverageExponentAndFade.x + r3.x);
    r3.x = log2(r3.x);
    r3.x = g_cloudCoverageExponentAndFade.y * r3.x;
    r3.x = exp2(r3.x);
    r6.x = dot(r14.xzw, r14.xzw);
    r6.x = sqrt(r6.x);
    r6.x = -g_cloudCoverageExponentAndFade.z + r6.x;
    r6.x = saturate(g_cloudCoverageExponentAndFade.w * r6.x);
    r6.x = r6.x * r6.x;
    r6.y = 1 + -r3.x;
    r3.x = r6.x * r6.y + r3.x;
    r3.x = r3.z * r3.x;
    r3.z = dot(r7.xyz, g_lightDir.xyz);
    r6.x = saturate(r3.z);
    r16.xyz = g_keyColor.xyz * r6.xxx;
    r17.xyz = r16.xyz * r3.xxx;
    if (r12.w != 0) {
      r18.xyzw = g_gbufferTexture4.Load(r0.xy, r2.w).xyzw;
      r19.xyzw = g_gbufferTexture5.Load(r0.xy, r2.w).xyzw;
      r6.y = r5.w * 12 + 1;
      r6.y = exp2(r6.y);
      r12.yw = r6.yy * float2(1.44299996,1.44299996) + float2(1.44299996,9.44299984);
      r18.xyz = r18.xyz * float3(2,2,2) + float3(-1,-1,-1);
      r6.y = dot(r18.xyz, r18.xyz);
      r6.y = rsqrt(r6.y);
      r18.xyz = r18.xyz * r6.yyy;
      r6.y = 65535 * r18.w;
      r6.y = round(r6.y);
      r8.w = 0.00390625 * r6.y;
      r8.w = trunc(r8.w);
      r6.y = r6.y * 0.00390625 + -r8.w;
      r6.y = 256 * r6.y;
      r6.y = round(r6.y);
      r19.xyz = r19.xyz * r19.xyz;
      r8.w = r19.w * 12 + 1;
      r8.w = exp2(r8.w);
      r20.xy = r8.ww * float2(1.44299996,1.44299996) + float2(1.44299996,9.44299984);
      r3.z = saturate(r3.z * 0.699999988 + 0.300000012);
      r21.xyz = -r14.xwz * r3.yyy + g_lightDir.xyz;
      r8.w = dot(r21.xyz, r21.xyz);
      r8.w = rsqrt(r8.w);
      r21.xyz = r21.xyz * r8.www;
      r8.w = dot(r15.xyz, r18.xyz);
      r8.w = r8.w + r8.w;
      r22.xyz = r18.xyz * -r8.www + r15.xyz;
      r20.zw = r6.yy * float2(0.000392156886,0.000392156886) + float2(0.299999982,0.0699999928);
      r22.xyz = -r20.zzz * r18.xyz + r22.xyz;
      r23.xyz = r18.xyz * r15.yzx;
      r23.xyz = r15.xyz * r18.yzx + -r23.xyz;
      r24.xyz = r23.xyz * r18.yzx;
      r23.xyz = r23.zxy * r18.zxy + -r24.xyz;
      r8.w = dot(r21.xyz, r18.xyz);
      r9.y = r20.w + -r8.w;
      r9.y = -r9.y * r9.y + 1;
      r9.y = max(0, r9.y);
      r9.y = log2(r9.y);
      r9.y = r12.y * r9.y;
      r9.y = exp2(r9.y);
      r9.y = r12.w * r9.y;
      r9.y = 0.125 * r9.y;
      r10.w = dot(g_lightDir.xyz, r15.xyz);
      r10.w = 1 + -r10.w;
      r11.w = r10.w * r10.w;
      r11.w = r11.w * r11.w;
      r10.w = r11.w * r10.w;
      r10.w = r10.w * 0.150000006 + 1;
      r9.y = r10.w * r9.y;
      r21.xyz = g_lightDir.xyz + -r22.xyz;
      r10.w = dot(r21.xyz, r21.xyz);
      r10.w = rsqrt(r10.w);
      r21.xyz = r21.xyz * r10.www;
      r10.w = dot(r21.xyz, r18.xyz);
      r10.w = -0.150000006 + r10.w;
      r10.w = -r10.w * r10.w + 1;
      r10.w = max(0, r10.w);
      r10.w = log2(r10.w);
      r10.w = r20.x * r10.w;
      r10.w = exp2(r10.w);
      r11.w = 0.125 * r20.y;
      r10.w = r11.w * r10.w;
      r12.y = saturate(dot(r23.xyz, g_lightDir.xyz));
      r12.y = r12.y * r12.y;
      r10.w = r12.y * r10.w;
      r6.y = r6.y * 0.000392156886 + r8.w;
      r6.y = 0.13000001 + r6.y;
      r6.y = -r6.y * r6.y + 1;
      r6.y = max(0, r6.y);
      r6.y = log2(r6.y);
      r6.y = r20.x * r6.y;
      r6.y = exp2(r6.y);
      r6.y = r6.y * r11.w;
      r8.w = saturate(dot(r7.xyz, r15.xyz));
      r8.w = r8.w * r8.w;
      r8.w = r8.w * r8.w;
      r6.y = r6.y * r8.w + r10.w;
      r8.w = r9.y * r3.z;
      r18.xyz = g_keyColor.xyz * r8.www;
      r18.xyz = g_keyColor.www * r18.xyz;
      r18.xyz = r18.xyz * r3.xxx;
      r3.z = r6.y * r3.z;
      r20.xyz = g_keyColor.xyz * r3.zzz;
      r20.xyz = g_keyColor.www * r20.xyz;
      r20.xyz = r20.xyz * r3.xxx;
      r19.xyz = r20.xyz * r19.xyz;
      r18.xyz = r18.xyz * r11.xyz + r19.xyz;
    } else {
      r17.xyz = r17.xyz * r13.xyz;
      if (r6.z != 0) {
        r3.z = -r5.w * 0.746999979 + 0.837000012;
        r3.z = r3.z * r3.z;
        r19.xyz = -r14.xwz * r3.yyy + g_lightDir.xyz;
        r6.y = dot(r19.xyz, r19.xyz);
        r6.y = rsqrt(r6.y);
        r19.xyz = r19.xyz * r6.yyy;
        r6.y = saturate(dot(r15.xyz, r19.xyz));
        r6.z = saturate(dot(r7.xyz, r19.xyz));
        r8.w = saturate(dot(r7.xyz, r15.xyz));
        r9.y = saturate(r6.w);
        r19.xyz = r8.xyz * r8.xyz + float3(-0.0799999982,-0.0799999982,-0.0799999982);
        r19.xyz = r9.yyy * r19.xyz + float3(0.0799999982,0.0799999982,0.0799999982);
        r6.z = r6.z * r6.z;
        r9.y = r3.z * r3.z;
        r10.w = r3.z * r3.z + -1;
        r10.w = r6.z * r10.w + 1;
        r10.w = r10.w * r10.w;
        r10.w = 3.14159274 * r10.w;
        r9.y = r9.y / r10.w;
        r20.xyz = float3(1,1,1) + -r19.xyz;
        r6.y = 1.00100005 + -r6.y;
        r10.w = r6.y * r6.y;
        r10.w = r10.w * r10.w;
        r6.y = r10.w * r6.y;
        r19.xyz = r20.xyz * r6.yyy + r19.xyz;
        r10.w = 0.797884583 * r3.z;
        r3.z = -r3.z * 0.797884583 + 1;
        r11.w = r6.x * r3.z + r10.w;
        r3.z = r8.w * r3.z + r10.w;
        r3.z = r11.w * r3.z;
        r3.z = 1 / r3.z;
        r19.xyz = r19.xyz * r9.yyy;
        r19.xyz = r19.xyz * r3.zzz;
        r19.xyz = float3(0.785398185,0.785398185,0.785398185) * r19.xyz;
        if (r12.z != 0) {
          r3.z = r6.z * -0.999934375 + 1;
          r3.z = r3.z * r3.z;
          r3.z = 3.14159274 * r3.z;
          r3.z = 6.56100965e-005 / r3.z;
          r6.y = r6.y * 0.920000017 + 0.0799999982;
          r6.z = r6.x * 0.993537128 + 0.0064628697;
          r8.w = r8.w * 0.993537128 + 0.0064628697;
          r6.z = r8.w * r6.z;
          r6.z = 1 / r6.z;
          r3.z = r6.y * r3.z;
          r3.z = r3.z * r6.z;
          r19.xyz = r3.zzz * float3(0.785398185,0.785398185,0.785398185) + r19.xyz;
        }
      } else {
        r3.z = -r5.w * 0.746999979 + 0.837000012;
        r3.z = r3.z * r3.z;
        r14.xyz = -r14.xwz * r3.yyy + g_lightDir.xyz;
        r3.y = dot(r14.xyz, r14.xyz);
        r3.y = rsqrt(r3.y);
        r14.xyz = r14.xyz * r3.yyy;
        r3.y = saturate(dot(r15.xyz, r14.xyz));
        r6.y = saturate(dot(r7.xyz, r14.xyz));
        r6.z = saturate(dot(r7.xyz, r15.xyz));
        r6.y = r6.y * r6.y;
        r8.w = r3.z * r3.z;
        r9.y = r3.z * r3.z + -1;
        r6.y = r6.y * r9.y + 1;
        r6.y = r6.y * r6.y;
        r6.y = 3.14159274 * r6.y;
        r6.y = r8.w / r6.y;
        r3.y = 1.00100005 + -r3.y;
        r8.w = r3.y * r3.y;
        r8.w = r8.w * r8.w;
        r3.y = r8.w * r3.y;
        r3.y = r3.y * 0.920000017 + 0.0799999982;
        r8.w = 0.797884583 * r3.z;
        r3.z = -r3.z * 0.797884583 + 1;
        r6.x = r6.x * r3.z + r8.w;
        r3.z = r6.z * r3.z + r8.w;
        r3.yz = r6.yx * r3.yz;
        r3.z = 1 / r3.z;
        r3.y = r3.y * r3.z;
        r19.xyz = float3(0.785398185,0.785398185,0.785398185) * r3.yyy;
      }
      r6.xyz = r19.xyz * r17.xyz;
      r18.xyz = g_keyColor.www * r6.xyz;
    }
    r3.y = dot(-r15.xyz, r7.xyz);
    r3.y = r3.y + r3.y;
    r6.xyz = r7.xyz * -r3.yyy + -r15.xyz;
    r14.xyz = r16.xyz * r3.xxx + r10.xyz;
    r16.xyzw = r9.zzzz == float4(0,0.00392200006,0.00784299988,0.0117650004);
    r16.xyzw = r16.xyzw ? g_envmapParams.xxxx : 0;
    r3.y = r3.x * r2.x + g_envmapParams.w;
    r3.y = r3.y * r7.w;
    r3.z = dot(r7.xyz, r15.xyz);
    r8.w = r5.w * r5.w;
    r8.w = r8.w * r5.w;
    r9.yz = r5.ww * float2(0.649999976,0.0399999991) + float2(0.349999994,0.0399999991);
    r12.yw = r8.ww * float2(0.399999976,0.899999976) + float2(0.300000012,0.100000001);
    r17.xyz = r9.yyy * r11.xyz;
    r8.xyz = -r8.xyz * r8.xyz + float3(1,1,1);
    r8.xyz = r5.www * r8.xyz + r11.xyz;
    r3.z = 1 + -r3.z;
    r3.z = r3.z * r3.z;
    r3.z = r3.z * r3.z;
    r3.z = min(1, r3.z);
    r8.w = r12.w + -r9.z;
    r8.w = r3.z * r8.w + r9.z;
    r8.xyz = r12.yyy * r8.xyz + -r17.xyz;
    r8.xyz = r3.zzz * r8.xyz + r17.xyz;
    r8.xyz = r8.xyz + -r8.www;
    r8.xyz = r6.www * r8.xyz + r8.www;
    r8.xyz = r13.xyz * r8.xyz;
    r8.xyz = r12.xxx ? float3(1,1,1) : r8.xyz;
    r9.yz = (int2)r4.ww != int2(4,1);
    if (r9.y != 0) {
      r3.z = 1 + -r5.w;
      r3.z = log2(r3.z);
      r12.xy = r3.zz + r2.yz;
      r12.xy = float2(-1,-1) + r12.xy;
      r12.xy = max(float2(0,0), r12.xy);
      r17.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r6.xyz, r12.y).xyzw;
      r3.z = dot(r16.xyzw, r17.xyzw);
      r12.xyw = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r6.xyz, r12.x).xyz;
      r12.xyw = r12.xyw * r8.xyz;
      r12.xyw = r12.xyw * r3.yyy;
      r18.xyz = r12.xyw * g_skyEnvmap8BitTexInvScale + r18.xyz;
    } else {
      r3.z = 0;
    }
    r8.xyz = r8.xyz * r3.zzz;
    r10.xyz = g_envmapParams.yyy + r10.xyz;
    r8.xyz = r10.xyz * r8.xyz;
    r3.z = 1 + -r7.w;
    r8.xyz = r8.xyz * r3.zzz + r18.xyz;
    if (r12.z != 0) {
      r5.w = dot(r7.xyz, r15.xyz);
      r5.w = 1 + -r5.w;
      r5.w = r5.w * r5.w;
      r5.w = r5.w * r5.w;
      r5.w = min(1, r5.w);
      r5.w = r5.w * 0.920000017 + 0.0799999982;
      r12.xyz = r13.xyz * r5.www;
      r17.xyz = -r13.xyz * r5.www + float3(1,1,1);
      r18.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r6.xyz, 0).xyzw;
      r5.w = dot(r16.xyzw, r18.xyzw);
      r6.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r6.xyz, 0).xyz;
      r6.xyz = r12.xyz * r6.xyz;
      r6.xyz = r6.xyz * r3.yyy;
      r6.xyz = g_skyEnvmap8BitTexInvScale * r6.xyz;
      r6.xyz = r8.xyz * r17.xyz + r6.xyz;
      r12.xyz = r12.xyz * r5.www;
      r10.xyz = r12.xyz * r10.xyz;
      r8.xyz = r10.xyz * r3.zzz + r6.xyz;
    }
    r3.y = (int)r4.w >= 7;
    if (r3.y != 0) {
      r3.y = saturate(-0.0274509806 + r9.w);
      r9.x = saturate(r9.x);
      r6.x = 1 + -r9.x;
      r6.y = 1 + -r3.y;
      r7.xyz = r7.xyz * g_keyTranslucencyParams.www + g_lightDir.xyz;
      r3.y = saturate(dot(r15.xyz, -r7.xyz));
      r6.xy = g_keyTranslucencyParams.yy * r6.xy;
      r6.xy = float2(-1.44269502,-1.44269502) * r6.xy;
      r6.xy = exp2(r6.xy);
      r3.y = r3.y * g_keyTranslucencyParams.z + g_keyTranslucencyParams.x;
      r3.y = dot(r3.yy, r6.xy);
      r3.x = r3.y * r3.x;
      r14.xyz = r3.xxx * g_keyColor.xyz + r14.xyz;
    }
    r3.x = r9.y ? r9.z : 0;
    if (r3.x != 0) {
      r3.x = saturate(1 + -r6.w);
      r11.xyz = r11.xyz * r3.xxx;
      r13.xyz = float3(1,1,1);
    }
    r3.xyz = r11.xyz * r14.xyz + r5.xyz;
    r6.xyz = r13.xyz * r8.xyz;
    r4.xyz = r13.xyz * r8.xyz + r4.xyz;
    r4.w = (int)r4.w == 2;
    r4.w = r4.w ? 0 : 1;
    r5.xyz = r6.xyz * r4.www + r3.xyz;
    r2.w = (int)r2.w + 1;
  }
  r0.xyzw = g_ssaoTexture.Gather(g_ssaoSampler_s, r1.xy).xyzw;
  r0.x = min(r0.x, r0.y);
  r0.x = min(r0.x, r0.z);
  o0.w = min(r0.x, r0.w);
  o0.xyz = r5.xyz * r1.www;
  o1.xyz = r4.xyz * r1.www;
  o1.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.1 on Sat Oct 10 09:40:44 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float4 g_keyColor;                 // Offset:  144 Size:    16
//   float4 g_keyTranslucencyParams;    // Offset:  160 Size:    16
//   float4 g_subParams;                // Offset:  176 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  192 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  208 Size:     4
//   float g_colorScale;                // Offset:  212 Size:     4 [unused]
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_customSampler                   sampler      NA          NA    2        1
// g_ssaoSampler                     sampler      NA          NA    3        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_customEnvmap                    texture  float4        cube    2        1
// g_ssaoTexture                     texture  float4          2d    3        1
// g_depthTexture                    texture  float4       2dMS4    4        1
// g_gbufferTexture0                 texture  float4       2dMS4    5        1
// g_gbufferTexture1                 texture  float4       2dMS4    6        1
// g_gbufferTexture2                 texture  float4       2dMS4    7        1
// g_gbufferTexture3                 texture  float4       2dMS4    8        1
// g_gbufferTexture4                 texture  float4       2dMS4    9        1
// g_gbufferTexture5                 texture  float4       2dMS4   10        1
// g_shadowAccumTexture              texture  float4        2dMS   11        1
// g_msaaClassifyTexture             texture   float          2d   12        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2dms(4) (float,float,float,float) t4
dcl_resource_texture2dms(4) (float,float,float,float) t5
dcl_resource_texture2dms(4) (float,float,float,float) t6
dcl_resource_texture2dms(4) (float,float,float,float) t7
dcl_resource_texture2dms(4) (float,float,float,float) t8
dcl_resource_texture2dms(4) (float,float,float,float) t9
dcl_resource_texture2dms(4) (float,float,float,float) t10
dcl_resource_texture2dms(0) (float,float,float,float) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 25
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[1].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r0.xyww, t12.yzxw
lt r1.z, l(0.000000), r1.z
movc r1.zw, r1.zzzz, l(0,0,4,0.250000), l(0,0,1,0.999999)
add r2.x, -cb0[12].w, l(1.000000)
round_z r2.yz, cb0[14].xxyx
mov r3.w, l(1.000000)
mov r4.xyz, l(0,0,0,0)
mov r5.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r4.w, r2.w, r1.z
  breakc_nz r4.w
  mad r6.xy, icb[r2.w + 0].xyxx, cb0[1].xyxx, r1.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyzw, r0.xyww, t5.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r0.xyww, t6.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyzw, r0.xyww, t7.yxzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r0.xyww, t8.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r3.z, r0.xyww, t4.yzxw, r2.w
  mul r4.w, r9.w, l(255.000000)
  round_ne r4.w, r4.w
  ftoi r4.w, r4.w
  mul r11.xyzw, r8.xyzw, r8.xyzw
  ieq r12.xyzw, r4.wwww, l(1, 5, 6, 4)
  if_nz r12.x
    mul r13.xyz, r11.xyzx, r11.wwww
  else 
    mov r13.xyz, r11.wwww
  endif 
  lt r5.w, l(0.000000), r13.x
  and r5.w, r7.w, r5.w
  or r6.z, r12.z, r12.y
  and r6.w, r9.x, r6.z
  log r7.w, |r9.y|
  mul r7.w, r7.w, cb0[12].z
  exp r7.w, r7.w
  mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r8.w, r7.xyzx, r7.xyzx
  rsq r8.w, r8.w
  mul r7.xyz, r7.xyzx, r8.wwww
  mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r3.xy, r6.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r14.x, r3.xyzw, cb0[2].xyzw
  dp4 r14.y, r3.xyzw, cb0[3].xyzw
  dp4 r14.z, r3.xyzw, cb0[4].xyzw
  dp4 r3.x, r3.xyzw, cb0[5].xyzw
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  mul r14.xzw, r3.xxxx, r14.xxzy
  dp3 r3.y, -r14.xzwx, -r14.xzwx
  rsq r3.y, r3.y
  mul r15.xyz, r3.yyyy, -r14.xwzx
  ldms_indexable(texture2dms)(float,float,float,float) r3.z, r0.xyww, t11.yzxw, r2.w
  mad r3.x, r14.y, r3.x, cb0[0].y
  mul r6.xy, r3.xxxx, cb0[8].xzxx
  mad r6.xy, r6.xyxx, cb0[6].wwww, r14.xzxx
  mad r6.xy, r6.xyxx, cb0[6].zzzz, cb0[6].xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r3.x, r6.xyxx, t0.xyzw, s0, l(0.000000)
  add_sat r3.x, r3.x, cb0[7].x
  log r3.x, r3.x
  mul r3.x, r3.x, cb0[7].y
  exp r3.x, r3.x
  dp3 r6.x, r14.xzwx, r14.xzwx
  sqrt r6.x, r6.x
  add r6.x, r6.x, -cb0[7].z
  mul_sat r6.x, r6.x, cb0[7].w
  mul r6.x, r6.x, r6.x
  add r6.y, -r3.x, l(1.000000)
  mad r3.x, r6.x, r6.y, r3.x
  mul r3.x, r3.x, r3.z
  dp3 r3.z, r7.xyzx, cb0[8].xyzx
  mov_sat r6.x, r3.z
  mul r16.xyz, r6.xxxx, cb0[9].xyzx
  mul r17.xyz, r3.xxxx, r16.xyzx
  if_nz r12.w
    ldms_indexable(texture2dms)(float,float,float,float) r18.xyzw, r0.xyww, t9.xyzw, r2.w
    ldms_indexable(texture2dms)(float,float,float,float) r19.xyzw, r0.xyzw, t10.xyzw, r2.w
    mad r6.y, r5.w, l(12.000000), l(1.000000)
    exp r6.y, r6.y
    mad r12.yw, r6.yyyy, l(0.000000, 1.443000, 0.000000, 1.443000), l(0.000000, 1.443000, 0.000000, 9.443000)
    mad r18.xyz, r18.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r6.y, r18.xyzx, r18.xyzx
    rsq r6.y, r6.y
    mul r18.xyz, r6.yyyy, r18.xyzx
    mul r6.y, r18.w, l(65535.000000)
    round_ne r6.y, r6.y
    mul r8.w, r6.y, l(0.003906)
    round_z r8.w, r8.w
    mad r6.y, r6.y, l(0.003906), -r8.w
    mul r6.y, r6.y, l(256.000000)
    round_ne r6.y, r6.y
    mul r19.xyz, r19.xyzx, r19.xyzx
    mad r8.w, r19.w, l(12.000000), l(1.000000)
    exp r8.w, r8.w
    mad r20.xy, r8.wwww, l(1.443000, 1.443000, 0.000000, 0.000000), l(1.443000, 9.443000, 0.000000, 0.000000)
    mad_sat r3.z, r3.z, l(0.700000), l(0.300000)
    mad r21.xyz, -r14.xwzx, r3.yyyy, cb0[8].xyzx
    dp3 r8.w, r21.xyzx, r21.xyzx
    rsq r8.w, r8.w
    mul r21.xyz, r8.wwww, r21.xyzx
    dp3 r8.w, r15.xyzx, r18.xyzx
    add r8.w, r8.w, r8.w
    mad r22.xyz, r18.xyzx, -r8.wwww, r15.xyzx
    mad r20.zw, r6.yyyy, l(0.000000, 0.000000, 0.000392, 0.000392), l(0.000000, 0.000000, 0.300000, 0.070000)
    mad r22.xyz, -r20.zzzz, r18.xyzx, r22.xyzx
    mul r23.xyz, r15.yzxy, r18.xyzx
    mad r23.xyz, r15.xyzx, r18.yzxy, -r23.xyzx
    mul r24.xyz, r18.yzxy, r23.xyzx
    mad r23.xyz, r23.zxyz, r18.zxyz, -r24.xyzx
    dp3 r8.w, r21.xyzx, r18.xyzx
    add r9.y, -r8.w, r20.w
    mad r9.y, -r9.y, r9.y, l(1.000000)
    max r9.y, r9.y, l(0.000000)
    log r9.y, r9.y
    mul r9.y, r9.y, r12.y
    exp r9.y, r9.y
    mul r9.y, r9.y, r12.w
    mul r9.y, r9.y, l(0.125000)
    dp3 r10.w, cb0[8].xyzx, r15.xyzx
    add r10.w, -r10.w, l(1.000000)
    mul r11.w, r10.w, r10.w
    mul r11.w, r11.w, r11.w
    mul r10.w, r10.w, r11.w
    mad r10.w, r10.w, l(0.150000), l(1.000000)
    mul r9.y, r9.y, r10.w
    add r21.xyz, -r22.xyzx, cb0[8].xyzx
    dp3 r10.w, r21.xyzx, r21.xyzx
    rsq r10.w, r10.w
    mul r21.xyz, r10.wwww, r21.xyzx
    dp3 r10.w, r21.xyzx, r18.xyzx
    add r10.w, r10.w, l(-0.150000)
    mad r10.w, -r10.w, r10.w, l(1.000000)
    max r10.w, r10.w, l(0.000000)
    log r10.w, r10.w
    mul r10.w, r10.w, r20.x
    exp r10.w, r10.w
    mul r11.w, r20.y, l(0.125000)
    mul r10.w, r10.w, r11.w
    dp3_sat r12.y, r23.xyzx, cb0[8].xyzx
    mul r12.y, r12.y, r12.y
    mul r10.w, r10.w, r12.y
    mad r6.y, r6.y, l(0.000392), r8.w
    add r6.y, r6.y, l(0.130000)
    mad r6.y, -r6.y, r6.y, l(1.000000)
    max r6.y, r6.y, l(0.000000)
    log r6.y, r6.y
    mul r6.y, r6.y, r20.x
    exp r6.y, r6.y
    mul r6.y, r11.w, r6.y
    dp3_sat r8.w, r7.xyzx, r15.xyzx
    mul r8.w, r8.w, r8.w
    mul r8.w, r8.w, r8.w
    mad r6.y, r6.y, r8.w, r10.w
    mul r8.w, r3.z, r9.y
    mul r18.xyz, r8.wwww, cb0[9].xyzx
    mul r18.xyz, r18.xyzx, cb0[9].wwww
    mul r18.xyz, r3.xxxx, r18.xyzx
    mul r3.z, r3.z, r6.y
    mul r20.xyz, r3.zzzz, cb0[9].xyzx
    mul r20.xyz, r20.xyzx, cb0[9].wwww
    mul r20.xyz, r3.xxxx, r20.xyzx
    mul r19.xyz, r19.xyzx, r20.xyzx
    mad r18.xyz, r18.xyzx, r11.xyzx, r19.xyzx
  else 
    mul r17.xyz, r13.xyzx, r17.xyzx
    if_nz r6.z
      mad r3.z, -r5.w, l(0.747000), l(0.837000)
      mul r3.z, r3.z, r3.z
      mad r19.xyz, -r14.xwzx, r3.yyyy, cb0[8].xyzx
      dp3 r6.y, r19.xyzx, r19.xyzx
      rsq r6.y, r6.y
      mul r19.xyz, r6.yyyy, r19.xyzx
      dp3_sat r6.y, r15.xyzx, r19.xyzx
      dp3_sat r6.z, r7.xyzx, r19.xyzx
      dp3_sat r8.w, r7.xyzx, r15.xyzx
      mov_sat r9.y, r6.w
      mad r19.xyz, r8.xyzx, r8.xyzx, l(-0.080000, -0.080000, -0.080000, 0.000000)
      mad r19.xyz, r9.yyyy, r19.xyzx, l(0.080000, 0.080000, 0.080000, 0.000000)
      mul r6.z, r6.z, r6.z
      mul r9.y, r3.z, r3.z
      mad r10.w, r3.z, r3.z, l(-1.000000)
      mad r10.w, r6.z, r10.w, l(1.000000)
      mul r10.w, r10.w, r10.w
      mul r10.w, r10.w, l(3.141593)
      div r9.y, r9.y, r10.w
      add r20.xyz, -r19.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      add r6.y, -r6.y, l(1.001000)
      mul r10.w, r6.y, r6.y
      mul r10.w, r10.w, r10.w
      mul r6.y, r6.y, r10.w
      mad r19.xyz, r20.xyzx, r6.yyyy, r19.xyzx
      mul r10.w, r3.z, l(0.797885)
      mad r3.z, -r3.z, l(0.797885), l(1.000000)
      mad r11.w, r6.x, r3.z, r10.w
      mad r3.z, r8.w, r3.z, r10.w
      mul r3.z, r3.z, r11.w
      div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.z
      mul r19.xyz, r9.yyyy, r19.xyzx
      mul r19.xyz, r3.zzzz, r19.xyzx
      mul r19.xyz, r19.xyzx, l(0.785398, 0.785398, 0.785398, 0.000000)
      if_nz r12.z
        mad r3.z, r6.z, l(-0.999934), l(1.000000)
        mul r3.z, r3.z, r3.z
        mul r3.z, r3.z, l(3.141593)
        div r3.z, l(0.000066), r3.z
        mad r6.y, r6.y, l(0.920000), l(0.080000)
        mad r6.z, r6.x, l(0.993537), l(0.006463)
        mad r8.w, r8.w, l(0.993537), l(0.006463)
        mul r6.z, r6.z, r8.w
        div r6.z, l(1.000000, 1.000000, 1.000000, 1.000000), r6.z
        mul r3.z, r3.z, r6.y
        mul r3.z, r6.z, r3.z
        mad r19.xyz, r3.zzzz, l(0.785398, 0.785398, 0.785398, 0.000000), r19.xyzx
      endif 
    else 
      mad r3.z, -r5.w, l(0.747000), l(0.837000)
      mul r3.z, r3.z, r3.z
      mad r14.xyz, -r14.xwzx, r3.yyyy, cb0[8].xyzx
      dp3 r3.y, r14.xyzx, r14.xyzx
      rsq r3.y, r3.y
      mul r14.xyz, r3.yyyy, r14.xyzx
      dp3_sat r3.y, r15.xyzx, r14.xyzx
      dp3_sat r6.y, r7.xyzx, r14.xyzx
      dp3_sat r6.z, r7.xyzx, r15.xyzx
      mul r6.y, r6.y, r6.y
      mul r8.w, r3.z, r3.z
      mad r9.y, r3.z, r3.z, l(-1.000000)
      mad r6.y, r6.y, r9.y, l(1.000000)
      mul r6.y, r6.y, r6.y
      mul r6.y, r6.y, l(3.141593)
      div r6.y, r8.w, r6.y
      add r3.y, -r3.y, l(1.001000)
      mul r8.w, r3.y, r3.y
      mul r8.w, r8.w, r8.w
      mul r3.y, r3.y, r8.w
      mad r3.y, r3.y, l(0.920000), l(0.080000)
      mul r8.w, r3.z, l(0.797885)
      mad r3.z, -r3.z, l(0.797885), l(1.000000)
      mad r6.x, r6.x, r3.z, r8.w
      mad r3.z, r6.z, r3.z, r8.w
      mul r3.yz, r3.yyzy, r6.yyxy
      div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.z
      mul r3.y, r3.z, r3.y
      mul r19.xyz, r3.yyyy, l(0.785398, 0.785398, 0.785398, 0.000000)
    endif 
    mul r6.xyz, r17.xyzx, r19.xyzx
    mul r18.xyz, r6.xyzx, cb0[9].wwww
  endif 
  dp3 r3.y, -r15.xyzx, r7.xyzx
  add r3.y, r3.y, r3.y
  mad r6.xyz, r7.xyzx, -r3.yyyy, -r15.xyzx
  mad r14.xyz, r16.xyzx, r3.xxxx, r10.xyzx
  eq r16.xyzw, r9.zzzz, l(0.000000, 0.003922, 0.007843, 0.011765)
  and r16.xyzw, r16.xyzw, cb0[12].xxxx
  mad r3.y, r3.x, r2.x, cb0[12].w
  mul r3.y, r7.w, r3.y
  dp3 r3.z, r7.xyzx, r15.xyzx
  mul r8.w, r5.w, r5.w
  mul r8.w, r5.w, r8.w
  mad r9.yz, r5.wwww, l(0.000000, 0.650000, 0.040000, 0.000000), l(0.000000, 0.350000, 0.040000, 0.000000)
  mad r12.yw, r8.wwww, l(0.000000, 0.400000, 0.000000, 0.900000), l(0.000000, 0.300000, 0.000000, 0.100000)
  mul r17.xyz, r11.xyzx, r9.yyyy
  mad r8.xyz, -r8.xyzx, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r8.xyz, r5.wwww, r8.xyzx, r11.xyzx
  add r3.z, -r3.z, l(1.000000)
  mul r3.z, r3.z, r3.z
  mul r3.z, r3.z, r3.z
  min r3.z, r3.z, l(1.000000)
  add r8.w, -r9.z, r12.w
  mad r8.w, r3.z, r8.w, r9.z
  mad r8.xyz, r12.yyyy, r8.xyzx, -r17.xyzx
  mad r8.xyz, r3.zzzz, r8.xyzx, r17.xyzx
  add r8.xyz, -r8.wwww, r8.xyzx
  mad r8.xyz, r6.wwww, r8.xyzx, r8.wwww
  mul r8.xyz, r8.xyzx, r13.xyzx
  movc r8.xyz, r12.xxxx, l(1.000000,1.000000,1.000000,0), r8.xyzx
  ine r9.yz, r4.wwww, l(0, 4, 1, 0)
  if_nz r9.y
    add r3.z, -r5.w, l(1.000000)
    log r3.z, r3.z
    add r12.xy, r2.yzyy, r3.zzzz
    add r12.xy, r12.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
    max r12.xy, r12.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
    sample_l_indexable(texturecube)(float,float,float,float) r17.xyzw, r6.xyzx, t2.xyzw, s2, r12.y
    dp4 r3.z, r16.xyzw, r17.xyzw
    sample_l_indexable(texturecube)(float,float,float,float) r12.xyw, r6.xyzx, t1.xywz, s1, r12.x
    mul r12.xyw, r8.xyxz, r12.xyxw
    mul r12.xyw, r3.yyyy, r12.xyxw
    mad r18.xyz, r12.xywx, cb0[13].xxxx, r18.xyzx
  else 
    mov r3.z, l(0)
  endif 
  mul r8.xyz, r3.zzzz, r8.xyzx
  add r10.xyz, r10.xyzx, cb0[12].yyyy
  mul r8.xyz, r8.xyzx, r10.xyzx
  add r3.z, -r7.w, l(1.000000)
  mad r8.xyz, r8.xyzx, r3.zzzz, r18.xyzx
  if_nz r12.z
    dp3 r5.w, r7.xyzx, r15.xyzx
    add r5.w, -r5.w, l(1.000000)
    mul r5.w, r5.w, r5.w
    mul r5.w, r5.w, r5.w
    min r5.w, r5.w, l(1.000000)
    mad r5.w, r5.w, l(0.920000), l(0.080000)
    mul r12.xyz, r5.wwww, r13.xyzx
    mad r17.xyz, -r13.xyzx, r5.wwww, l(1.000000, 1.000000, 1.000000, 0.000000)
    sample_l_indexable(texturecube)(float,float,float,float) r18.xyzw, r6.xyzx, t2.xyzw, s2, l(0.000000)
    dp4 r5.w, r16.xyzw, r18.xyzw
    sample_l_indexable(texturecube)(float,float,float,float) r6.xyz, r6.xyzx, t1.xyzw, s1, l(0.000000)
    mul r6.xyz, r6.xyzx, r12.xyzx
    mul r6.xyz, r3.yyyy, r6.xyzx
    mul r6.xyz, r6.xyzx, cb0[13].xxxx
    mad r6.xyz, r8.xyzx, r17.xyzx, r6.xyzx
    mul r12.xyz, r5.wwww, r12.xyzx
    mul r10.xyz, r10.xyzx, r12.xyzx
    mad r8.xyz, r10.xyzx, r3.zzzz, r6.xyzx
  endif 
  ige r3.y, r4.w, l(7)
  if_nz r3.y
    add_sat r3.y, r9.w, l(-0.027451)
    mov_sat r9.x, r9.x
    add r6.x, -r9.x, l(1.000000)
    add r6.y, -r3.y, l(1.000000)
    mad r7.xyz, r7.xyzx, cb0[10].wwww, cb0[8].xyzx
    dp3_sat r3.y, r15.xyzx, -r7.xyzx
    mul r6.xy, r6.xyxx, cb0[10].yyyy
    mul r6.xy, r6.xyxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r6.xy, r6.xyxx
    mad r3.y, r3.y, cb0[10].z, cb0[10].x
    dp2 r3.y, r3.yyyy, r6.xyxx
    mul r3.x, r3.x, r3.y
    mad r14.xyz, r3.xxxx, cb0[9].xyzx, r14.xyzx
  endif 
  and r3.x, r9.y, r9.z
  if_nz r3.x
    add_sat r3.x, -r6.w, l(1.000000)
    mul r11.xyz, r3.xxxx, r11.xyzx
    mov r13.xyz, l(1.000000,1.000000,1.000000,0)
  endif 
  mad r3.xyz, r11.xyzx, r14.xyzx, r5.xyzx
  mul r6.xyz, r8.xyzx, r13.xyzx
  mad r4.xyz, r13.xyzx, r8.xyzx, r4.xyzx
  ieq r4.w, r4.w, l(2)
  movc r4.w, r4.w, l(0), l(1.000000)
  mad r5.xyz, r6.xyzx, r4.wwww, r3.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r1.xyxx, t3.xyzw, s3.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
mul o0.xyz, r1.wwww, r5.xyzx
mul o1.xyz, r1.wwww, r4.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 356 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
