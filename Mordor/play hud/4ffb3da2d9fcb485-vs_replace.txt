// Small arrow icon on hud targets

cbuffer _Globals : register(b0)
{
  float DefaultHeight : packoffset(c0) = float(1.000000e+002);
  float DefaultWidth : packoffset(c0.y) = float(1.000000e+002);

  struct
  {
    float3 m_Position;
    float2 m_TexCoord;
    float4 m_Color;
  } MaterialVertexDef_Rigid : packoffset(c1);


  struct
  {
    float3 m_Position;
    float2 m_TexCoord;
    float4 m_Color;
    float4 m_Weights;
    float4 m_Indices;
  } MaterialVertexDef_Skeletal : packoffset(c4);

  row_major float4x4 k_mDrawPrimToClip : packoffset(c9);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float3 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_POSITION0,
  out float2 o1 : TEXCOORD0,
  out float4 o2 : COLOR0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  o0.x = dot(k_mDrawPrimToClip._m00_m01_m02_m03, r0.xyzw);
  o0.y = dot(k_mDrawPrimToClip._m10_m11_m12_m13, r0.xyzw);
  o0.z = dot(k_mDrawPrimToClip._m20_m21_m22_m23, r0.xyzw);
  o0.w = dot(k_mDrawPrimToClip._m30_m31_m32_m33, r0.xyzw);
  o1.xy = v1.xy;
  o2.xyzw = v2.xyzw;
  
  
float4 params = IniParams.Load(0);
float4 stereo = StereoParams.Load(0);
bool aimMode = (params.w == 1);
bool playMode = (params.z == 1);

// Let's try to see if we can move just the on-screen icons by bounding the
// edges of the screen where the status icons are.

// if (o3.x > -0.08 && o3.x < 0.08 && o3.y > -0.1 && o3.y < 0.1)
// {
// }

// Text in game mode (z=1) will be pushed into screen per usual.
// When in menu-mode (z=0), we'll skip that push.

if (playMode)
{
  o0.x += stereo.x * params.x;
}

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float DefaultHeight;               // Offset:    0 Size:     4 [unused]
//      = 0x42c80000 
//   float DefaultWidth;                // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   
//   struct MaterialVertex_Rigid
//   {
//       
//       float3 m_Position;             // Offset:   16
//       float2 m_TexCoord;             // Offset:   32
//       float4 m_Color;                // Offset:   48
//
//   } MaterialVertexDef_Rigid;         // Offset:   16 Size:    48 [unused]
//   
//   struct MaterialVertex_Skeletal
//   {
//       
//       float3 m_Position;             // Offset:   64
//       float2 m_TexCoord;             // Offset:   80
//       float4 m_Color;                // Offset:   96
//       float4 m_Weights;              // Offset:  112
//       float4 m_Indices;              // Offset:  128
//
//   } MaterialVertexDef_Skeletal;      // Offset:   64 Size:    80 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  144 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[13], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyzw
dcl_temps 1
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 o0.x, cb0[9].xyzw, r0.xyzw
dp4 o0.y, cb0[10].xyzw, r0.xyzw
dp4 o0.z, cb0[11].xyzw, r0.xyzw
dp4 o0.w, cb0[12].xyzw, r0.xyzw
mov o1.xy, v1.xyxx
mov o2.xyzw, v2.xyzw
ret 
// Approximately 9 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 