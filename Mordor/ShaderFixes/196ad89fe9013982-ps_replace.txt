// Cliff face highlight in very last fight.

cbuffer _Globals : register(b0)
{
  float k_fInvLightRadius : packoffset(c0);
  row_major float3x4 k_mCubeProjector_LightTransform : packoffset(c1);
  row_major float3x4 k_mDirectional_ObjectToTex : packoffset(c4);
  row_major float4x4 k_mSpotProjector_LightTransform : packoffset(c7);
  float4 k_vSpotProjector_TanXYRadiusZW : packoffset(c11);
  row_major float3x4 k_mWorldToVolume : packoffset(c12);
  float3 k_vDirectional_Dir : packoffset(c15);
  float4 k_vObjectLightColor : packoffset(c16);
  float3 k_vObjectSpaceLightPos : packoffset(c17);
  float4 k_vSpecularColor : packoffset(c18);
  float4 k_vSpotProjector_ClipFar : packoffset(c19);
  float4 k_vSpotProjector_ClipNear : packoffset(c20);
  float3 k_vHalfDims : packoffset(c21);
  float4 k_vShadowMapParams : packoffset(c22);
  float4 k_vShadowMapParams2 : packoffset(c23);
  row_major float4x4 k_mShadowMapMatrix : packoffset(c24);
  float4 k_vShadowCascadeOffsetX : packoffset(c28);
  float4 k_vShadowCascadeOffsetZ : packoffset(c29);
  float k_fStaticLightVolume_Mip : packoffset(c30);
  float4 k_vShadowSplitDistSquared : packoffset(c31);
  float4 k_vShadowSplitDistSelect : packoffset(c32);
  float4 k_vShadowMoveX : packoffset(c33);
  float4 k_vShadowMoveY : packoffset(c34);
  float4 k_vShadowMoveZ : packoffset(c35);
  float4 k_vShadowScaleXY : packoffset(c36);
  float4 k_vShadowScaleX : packoffset(c37);
  float4 k_vShadowScaleY : packoffset(c38);
  float4 k_vShadowScaleZ : packoffset(c39);
  float3 k_vLightBleed_Offset : packoffset(c40);
  float4 k_vStaticLightVolume_PivotContrast : packoffset(c41);
  float k_fLightLayer : packoffset(c42);
  row_major float3x4 k_mViewToLight : packoffset(c43);
  row_major float4x4 k_mObjectToClip : packoffset(c46);
  row_major float3x4 k_mObjectToView : packoffset(c50);
  row_major float3x4 k_mObjectToWorld : packoffset(c53);
  float4 k_vObjectColor : packoffset(c56);
  float3 k_vObjectSpaceEyePos : packoffset(c57);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c58);
  row_major float3x4 k_mPrevObjectToView : packoffset(c62);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c65);
  float3 k_vLightDirection : packoffset(c68) = float3(0,1,0);
  float k_fDiffuseAlpha : packoffset(c68.w) = float(1);
  float k_fAshBlendWidth : packoffset(c69) = float(1);
  float k_fMaxSpecularPower : packoffset(c69.y) = float(64);
  float k_fSpecularScale : packoffset(c69.z) = float(1);
  float k_fFresnelTerm : packoffset(c69.w) = float(1);
  int k_bRendersEmissive : packoffset(c70) = int(1);
}


SamplerState sPoint_CLAMPCLAMPCLAMP_Sampler_s : register(s0);
SamplerState sAniso8X_WRAPWRAPCLAMP_Sampler_s : register(s1);
Texture2D<float4> tCurFrameMap : register(t0);
Texture2D<float4> tDepthMap : register(t1);
Texture2D<float4> tDiffuseMap : register(t2);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
float4 v4 : TEXCOORD3,  
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  
  o0.xyzw = float4(0,0,0,0);
  r0.x = dot(k_vLightDirection.xyz, k_vLightDirection.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = k_vLightDirection.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyz = tCurFrameMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r1.xy).xyz;
  r1.z = tDepthMap.Sample(sPoint_CLAMPCLAMPCLAMP_Sampler_s, r1.xy).x;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.x = dot(r2.xyz, r0.xyz);
  r0.x = r0.x * -0.5 + 0.5;
  r0.yz = v2.xy / v1.ww;
  r1.xy = r1.zz * r0.yz;
  r1.w = 1;

float4 stereo = StereoParams.Load(0);
r1.x -= stereo.x * (r1.z - stereo.y)*v4.z/2; //k_vFullViewPlane.z/2; //*0.187; 

  r2.x = dot(k_mDirectional_ObjectToTex._m00_m01_m02_m03, r1.xyzw);
  r2.y = dot(k_mDirectional_ObjectToTex._m10_m11_m12_m13, r1.xyzw);
  r1.xyzw = tDiffuseMap.Sample(sAniso8X_WRAPWRAPCLAMP_Sampler_s, r2.xy).xyzw;
//r1.x -= stereo.x * (r1.z - stereo.y)*v4.z/2; //k_vFullViewPlane.z/2; //*0.187; 
  r0.y = k_fDiffuseAlpha * r1.w;
  o2.xyz = k_vObjectColor.xyz * r1.xyz;
  r0.y = k_vObjectColor.w * r0.y;
  r0.z = 1 + k_fAshBlendWidth;
  r0.x = r0.y * r0.z + r0.x;
  r0.x = -1 + r0.x;
  r0.x = saturate(r0.x / k_fAshBlendWidth);
  o1.w = r0.x;
  o1.xyz = float3(0.5,0,0.5);
  o2.w = r0.x;
  o3.w = 0.200000003 * r0.x;
  o3.xyz = k_fMaxSpecularPower;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.1.36 on Fri Aug 14 23:54:33 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float k_fInvLightRadius;           // Offset:    0 Size:     4 [unused]
//   row_major float3x4 k_mCubeProjector_LightTransform;// Offset:   16 Size:    48 [unused]
//   row_major float3x4 k_mDirectional_ObjectToTex;// Offset:   64 Size:    48
//   row_major float4x4 k_mSpotProjector_LightTransform;// Offset:  112 Size:    64 [unused]
//   float4 k_vSpotProjector_TanXYRadiusZW;// Offset:  176 Size:    16 [unused]
//   row_major float3x4 k_mWorldToVolume;// Offset:  192 Size:    48 [unused]
//   float3 k_vDirectional_Dir;         // Offset:  240 Size:    12 [unused]
//   float4 k_vObjectLightColor;        // Offset:  256 Size:    16 [unused]
//   float3 k_vObjectSpaceLightPos;     // Offset:  272 Size:    12 [unused]
//   float4 k_vSpecularColor;           // Offset:  288 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipFar;   // Offset:  304 Size:    16 [unused]
//   float4 k_vSpotProjector_ClipNear;  // Offset:  320 Size:    16 [unused]
//   float3 k_vHalfDims;                // Offset:  336 Size:    12 [unused]
//   float4 k_vShadowMapParams;         // Offset:  352 Size:    16 [unused]
//   float4 k_vShadowMapParams2;        // Offset:  368 Size:    16 [unused]
//   row_major float4x4 k_mShadowMapMatrix;// Offset:  384 Size:    64 [unused]
//   float4 k_vShadowCascadeOffsetX;    // Offset:  448 Size:    16 [unused]
//   float4 k_vShadowCascadeOffsetZ;    // Offset:  464 Size:    16 [unused]
//   float k_fStaticLightVolume_Mip;    // Offset:  480 Size:     4 [unused]
//   float4 k_vShadowSplitDistSquared;  // Offset:  496 Size:    16 [unused]
//   float4 k_vShadowSplitDistSelect;   // Offset:  512 Size:    16 [unused]
//   float4 k_vShadowMoveX;             // Offset:  528 Size:    16 [unused]
//   float4 k_vShadowMoveY;             // Offset:  544 Size:    16 [unused]
//   float4 k_vShadowMoveZ;             // Offset:  560 Size:    16 [unused]
//   float4 k_vShadowScaleXY;           // Offset:  576 Size:    16 [unused]
//   float4 k_vShadowScaleX;            // Offset:  592 Size:    16 [unused]
//   float4 k_vShadowScaleY;            // Offset:  608 Size:    16 [unused]
//   float4 k_vShadowScaleZ;            // Offset:  624 Size:    16 [unused]
//   float3 k_vLightBleed_Offset;       // Offset:  640 Size:    12 [unused]
//   float4 k_vStaticLightVolume_PivotContrast;// Offset:  656 Size:    16 [unused]
//   float k_fLightLayer;               // Offset:  672 Size:     4 [unused]
//   row_major float3x4 k_mViewToLight; // Offset:  688 Size:    48 [unused]
//   row_major float4x4 k_mObjectToClip;// Offset:  736 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:  800 Size:    48 [unused]
//   row_major float3x4 k_mObjectToWorld;// Offset:  848 Size:    48 [unused]
//   float4 k_vObjectColor;             // Offset:  896 Size:    16
//   float3 k_vObjectSpaceEyePos;       // Offset:  912 Size:    12 [unused]
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  928 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  992 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset: 1040 Size:    48 [unused]
//   float3 k_vLightDirection;          // Offset: 1088 Size:    12
//      = 0x00000000 0x3f800000 0x00000000 
//   float k_fDiffuseAlpha;             // Offset: 1100 Size:     4
//      = 0x3f800000 
//   float k_fAshBlendWidth;            // Offset: 1104 Size:     4
//      = 0x3f800000 
//   float k_fMaxSpecularPower;         // Offset: 1108 Size:     4
//      = 0x42800000 
//   float k_fSpecularScale;            // Offset: 1112 Size:     4
//      = 0x3f800000 
//   float k_fFresnelTerm;              // Offset: 1116 Size:     4
//      = 0x3f800000 
//   int k_bRendersEmissive;            // Offset: 1120 Size:     4 [unused]
//      = 0x00000001 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sPoint_CLAMPCLAMPCLAMP_Sampler    sampler      NA          NA    0        1
// sAniso8X_WRAPWRAPCLAMP_Sampler    sampler      NA          NA    1        1
// tCurFrameMap                      texture  float4          2d    0        1
// tDepthMap                         texture  float4          2d    1        1
// tDiffuseMap                       texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[70], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
mov o0.xyzw, l(0,0,0,0)
dp3 r0.x, cb0[68].xyzx, cb0[68].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, cb0[68].xyzx
div r1.xy, v1.xyxx, v1.wwww
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.z, r1.xyxx, t1.yzxw, s0
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3 r0.x, r2.xyzx, r0.xyzx
mad r0.x, r0.x, l(-0.500000), l(0.500000)
div r0.yz, v2.xxyx, v1.wwww
mul r1.xy, r0.yzyy, r1.zzzz
mov r1.w, l(1.000000)
dp4 r2.x, cb0[4].xyzw, r1.xyzw
dp4 r2.y, cb0[5].xyzw, r1.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r2.xyxx, t2.xyzw, s1
mul r0.y, r1.w, cb0[68].w
mul o2.xyz, r1.xyzx, cb0[56].xyzx
mul r0.y, r0.y, cb0[56].w
add r0.z, cb0[69].x, l(1.000000)
mad r0.x, r0.y, r0.z, r0.x
add r0.x, r0.x, l(-1.000000)
div_sat r0.x, r0.x, cb0[69].x
mov o1.w, r0.x
mov o1.xyz, l(0.500000,0,0.500000,0)
mov o2.w, r0.x
mul o3.w, r0.x, l(0.200000)
mov o3.xyz, cb0[69].yzwy
ret 
// Approximately 32 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
