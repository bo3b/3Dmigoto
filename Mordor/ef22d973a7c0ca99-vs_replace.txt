// Example ld_structured_indexable manual fix.

cbuffer _Globals : register(b0)
{
  float3 k_vParticleScale : packoffset(c0) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fPeakVelocity : packoffset(c0.w) = float(5.000000e+002);
  float k_fFlatVelocity : packoffset(c1) = float(2.500000e+001);
  float k_fStreakLength : packoffset(c1.y) = float(2.500000e+001);
  float k_fFadeTime : packoffset(c1.z) = float(5.000000e-001);
  row_major float4x4 k_mObjectToClip : packoffset(c2);
  row_major float3x4 k_mObjectToView : packoffset(c6);
  row_major float3x4 k_mObjectToWorld : packoffset(c9);
  float4 k_vObjectColor : packoffset(c12);
  float3 k_vObjectSpaceEyePos : packoffset(c13);
  row_major float4x4 k_mPrevObjectToClip : packoffset(c14);
  row_major float3x4 k_mPrevObjectToView : packoffset(c18);
  row_major float3x4 k_mPrevObjectToWorld : packoffset(c21);
  float3 k_cTintColor : packoffset(c24) = float3(1.000000e+000,1.000000e+000,1.000000e+000);
  float k_fAlphaAmount : packoffset(c24.w) = float(1.000000e+000);
}

cbuffer CBuffer_View : register(b12)
{
  row_major float4x4 k_mWorldToClip : packoffset(c0);
  row_major float3x4 k_mViewToWorld : packoffset(c4);
  row_major float3x4 k_mWorldToView : packoffset(c7);
  row_major float4x4 k_mDrawPrimToClip : packoffset(c10);
  float4 k_vFogRayleigh : packoffset(c14);
  float4 k_vFogMieA : packoffset(c15);
  float4 k_vFogMieB : packoffset(c16);
  float4 k_vFogMieC : packoffset(c17);
  float4 k_vFogSky : packoffset(c18);
  float4 k_vFogSunColor : packoffset(c19);
  float3 k_vFogSunDir : packoffset(c20);
  float4 k_vFullViewPlane : packoffset(c21);
  float2 k_vPerspOrthoMask : packoffset(c22);
  float2 k_vScene_ScreenRes : packoffset(c23);
  float2 k_vScene_TexCoordScale : packoffset(c24);
  float3 k_vScene_ZRange : packoffset(c25);
  float3 k_vWorldSpaceCameraDir : packoffset(c26);
  float4 k_vHDRLuminanceWeights : packoffset(c27);
  float4 k_vHDRBloomParams : packoffset(c28);
  float4 k_vHDRBloomParams2 : packoffset(c29);
  float4 k_vWindDirection : packoffset(c30);
  float4 k_vVegetationForce1 : packoffset(c31);
  float4 k_vVegetationForce2 : packoffset(c32);
  float4 k_vVegetationRadius : packoffset(c33);
  row_major float4x4 k_mSkyShadowMapMatrix : packoffset(c34);
  float4 k_vSkyShadowParams : packoffset(c38);
  float4 k_vParaboloidShadowParams : packoffset(c39);
  row_major float4x4 k_mPrevWorldToClip : packoffset(c40);
  row_major float3x4 k_mPrevViewToWorld : packoffset(c44);
  row_major float3x4 k_mPrevWorldToView : packoffset(c47);
  float4 k_vMotionBlurParams : packoffset(c50);
}

// Manually added struct from ASM.
struct ResourceStruct
{
    float3 vPosition;              // Offset:    0
    float3 vVelocity;              // Offset:   12
    float fTime;                   // Offset:   24
    float fUserData;               // Offset:   28
};                                 // Offset:    0 Size:    32

// Manually changed to BufferSrc for use below.
StructuredBuffer<ResourceStruct> BufferSrc : register(t0);

Texture2D<float4> StereoParams : register(t125);

void main(
  uint v0 : SV_VertexID0,
  out float3 o0 : WORLDPOS0,
  out float3 o1 : TEXCOORD0,
  out float2 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask;
  

// Manual fix for struct addressing.
//ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r0.xyzw, v0.x, l(0), t0.wxyz
r0.x = BufferSrc[v0.x].vVelocity.x;
r0.y = BufferSrc[v0.x].vPosition.x;
r0.z = BufferSrc[v0.x].vPosition.y;
r0.w = BufferSrc[v0.x].vPosition.z;

  r1.xyz = r0.yzw;
  r1.w = 1.000000000e+000;
  o0.x = dot(k_mObjectToView._m00_m01_m02_m03, r1.xyzw);
  o0.y = dot(k_mObjectToView._m10_m11_m12_m13, r1.xyzw);
  r2.x = dot(k_mObjectToView._m20_m21_m22_m23, r1.xyzw);
  r1.x = dot(k_mObjectToWorld._m10_m11_m12_m13, r1.xyzw);
  r1.x = k_vFogSky.w + r1.x;
  o0.z = r2.x;
  r1.yzw = k_vObjectSpaceEyePos.xyz + -r0.yzw;
  
// Seems like it needs unrolling for that mid-struct offset.  
// Manual fix for struct addressing.
//ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.xyzw, v0.x, l(16), t0.xyzw
r3.x = BufferSrc[v0.x].vVelocity.y;
r3.y = BufferSrc[v0.x].vVelocity.z;
r3.z = BufferSrc[v0.x].fTime.x;
r3.w = BufferSrc[v0.x].fUserData.x;
  r0.yz = r3.xy;
  o2.xy = r3.zw;
  o1.x = dot(k_mObjectToView._m00_m01_m02, r0.xyz);
  o1.y = dot(k_mObjectToView._m10_m11_m12, r0.xyz);
  o1.z = dot(k_mObjectToView._m20_m21_m22, r0.xyz);
  r0.x = dot(k_mObjectToWorld._m00_m01_m02, r1.yzw);
  r0.z = dot(k_mObjectToWorld._m20_m21_m22, r1.yzw);
  r0.y = dot(k_mObjectToWorld._m10_m11_m12, r1.yzw);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r1.yzw = r0.xyz * r0.www;
  r0.x = -r0.y * r0.w + -1.500000060e-001;
  r0.x = saturate(1.000000000e+000 + -r0.x);
  r0.x = r0.x * r0.x;
  r0.y = dot(-r1.yzw, k_vFogSunDir.xyz);
  r0.z = -k_vFogMieB.y * r0.y + k_vFogMieB.x;
  r0.y = r0.y * r0.y + 1.000000000e+000;
  r0.z = log2(abs(r0.z));
  r0.yz = float2(5.968310e-002,-1.500000e+000) * r0.yz;
  r0.z = exp2(r0.z);
  r0.w = k_vFogMieB.z * r0.z + -k_vFogMieA.z;
  r0.z = k_vFogMieB.z * r0.z;
  r0.w = max(r0.w, 0.000000000e+000);
  r1.y = 1.999999949e-005 * abs(r2.x);
  r1.y = min(r1.y, 1.000000000e+000);
  r1.y = 1.000000000e+000 + -r1.y;
  r0.z = -r0.w * r1.y + r0.z;
  r0.z = max(r0.z, k_vFogSunColor.w);
  r0.w = max(r1.x, 0.000000000e+000);
  r1.x = k_vFogSky.z + -r1.x;
  r1.x = r1.x / k_vFogMieA.y;
  r1.y = -r0.w / k_vFogMieA.x;
  r0.w = -r0.w / k_vFogRayleigh.w;
  r0.w = 1.442695022e+000 * r0.w;
  r0.w = exp2(r0.w);
  r1.y = 1.442695022e+000 * r1.y;
  r1.y = exp2(r1.y);
  r1.y = k_vFogMieB.w + r1.y;
  r1.y = k_vFogMieC.y * r1.y;
  r1.y = 5.000000000e-001 * r1.y;
  r0.x = r1.y * r0.x;
  r0.x = min(r0.x, k_vFogMieA.w);
  r0.x = max(r0.x, k_vFogMieC.x);
  r0.z = r0.z * r0.x;
  r1.yzw = k_vFogRayleigh.xyz * r0.www + r0.xxx;
  r2.yzw = k_vFogRayleigh.xyz * r0.www;
  r0.xyz = r2.yzw * r0.yyy + r0.zzz;
  r0.xyz = r0.xyz / r1.yzw;
  r2.yzw = -r1.yzw * r1.xxx;
  r1.xyz = -r1.yzw * abs(r2.xxx);
  r1.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r2.xyz = float3(1.442695e+000,1.442695e+000,1.442695e+000) * r2.yzw;
  r2.xyz = exp2(r2.xyz);
  r3.xyz = log2(k_vFogSunColor.xyz);
  r3.xyz = float3(4.545455e-001,4.545455e-001,4.545455e-001) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r2.xyz = r3.xyz * r2.xyz;
  r0.xyz = r2.xyz * r0.xyz;
  r2.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r1.xyz;
  o4.xyz = r1.xyz;
  r0.xyz = r0.xyz * r2.xyz + float3(-4.000000e-003,-4.000000e-003,-4.000000e-003);
  r0.xyz = max(r0.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
  r1.xyz = r1.xyz * r0.xyz;
  r2.xyz = r0.xyz * float3(6.200000e+000,6.200000e+000,6.200000e+000) + float3(1.700000e+000,1.700000e+000,1.700000e+000);
  r0.xyz = r0.xyz * r2.xyz + float3(6.000000e-002,6.000000e-002,6.000000e-002);
  o3.xyz = r1.xyz / r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 k_vParticleScale;           // Offset:    0 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fPeakVelocity;             // Offset:   12 Size:     4 [unused]
//      = 0x43fa0000 
//   float k_fFlatVelocity;             // Offset:   16 Size:     4 [unused]
//      = 0x41c80000 
//   float k_fStreakLength;             // Offset:   20 Size:     4 [unused]
//      = 0x41c80000 
//   float k_fFadeTime;                 // Offset:   24 Size:     4 [unused]
//      = 0x3f000000 
//   row_major float4x4 k_mObjectToClip;// Offset:   32 Size:    64 [unused]
//   row_major float3x4 k_mObjectToView;// Offset:   96 Size:    48
//   row_major float3x4 k_mObjectToWorld;// Offset:  144 Size:    48
//   float4 k_vObjectColor;             // Offset:  192 Size:    16 [unused]
//   float3 k_vObjectSpaceEyePos;       // Offset:  208 Size:    12
//   row_major float4x4 k_mPrevObjectToClip;// Offset:  224 Size:    64 [unused]
//   row_major float3x4 k_mPrevObjectToView;// Offset:  288 Size:    48 [unused]
//   row_major float3x4 k_mPrevObjectToWorld;// Offset:  336 Size:    48 [unused]
//   float3 k_cTintColor;               // Offset:  384 Size:    12 [unused]
//      = 0x3f800000 0x3f800000 0x3f800000 
//   float k_fAlphaAmount;              // Offset:  396 Size:     4 [unused]
//      = 0x3f800000 
//
// }
//
// cbuffer CBuffer_View
// {
//
//   row_major float4x4 k_mWorldToClip; // Offset:    0 Size:    64 [unused]
//   row_major float3x4 k_mViewToWorld; // Offset:   64 Size:    48 [unused]
//   row_major float3x4 k_mWorldToView; // Offset:  112 Size:    48 [unused]
//   row_major float4x4 k_mDrawPrimToClip;// Offset:  160 Size:    64 [unused]
//   float4 k_vFogRayleigh;             // Offset:  224 Size:    16
//   float4 k_vFogMieA;                 // Offset:  240 Size:    16
//   float4 k_vFogMieB;                 // Offset:  256 Size:    16
//   float4 k_vFogMieC;                 // Offset:  272 Size:    16
//   float4 k_vFogSky;                  // Offset:  288 Size:    16
//   float4 k_vFogSunColor;             // Offset:  304 Size:    16
//   float3 k_vFogSunDir;               // Offset:  320 Size:    12
//   float4 k_vFullViewPlane;           // Offset:  336 Size:    16 [unused]
//   float2 k_vPerspOrthoMask;          // Offset:  352 Size:     8 [unused]
//   float2 k_vScene_ScreenRes;         // Offset:  368 Size:     8 [unused]
//   float2 k_vScene_TexCoordScale;     // Offset:  384 Size:     8 [unused]
//   float3 k_vScene_ZRange;            // Offset:  400 Size:    12 [unused]
//   float3 k_vWorldSpaceCameraDir;     // Offset:  416 Size:    12 [unused]
//   float4 k_vHDRLuminanceWeights;     // Offset:  432 Size:    16 [unused]
//   float4 k_vHDRBloomParams;          // Offset:  448 Size:    16 [unused]
//   float4 k_vHDRBloomParams2;         // Offset:  464 Size:    16 [unused]
//   float4 k_vWindDirection;           // Offset:  480 Size:    16 [unused]
//   float4 k_vVegetationForce1;        // Offset:  496 Size:    16 [unused]
//   float4 k_vVegetationForce2;        // Offset:  512 Size:    16 [unused]
//   float4 k_vVegetationRadius;        // Offset:  528 Size:    16 [unused]
//   row_major float4x4 k_mSkyShadowMapMatrix;// Offset:  544 Size:    64 [unused]
//   float4 k_vSkyShadowParams;         // Offset:  608 Size:    16 [unused]
//   float4 k_vParaboloidShadowParams;  // Offset:  624 Size:    16 [unused]
//   row_major float4x4 k_mPrevWorldToClip;// Offset:  640 Size:    64 [unused]
//   row_major float3x4 k_mPrevViewToWorld;// Offset:  704 Size:    48 [unused]
//   row_major float3x4 k_mPrevWorldToView;// Offset:  752 Size:    48 [unused]
//   float4 k_vMotionBlurParams;        // Offset:  800 Size:    16 [unused]
//
// }
//
// Resource bind info for BufferSrc
// {
//
//   struct ResourceStruct
//   {
//       
//       float3 vPosition;              // Offset:    0
//       float3 vVelocity;              // Offset:   12
//       float fTime;                   // Offset:   24
//       float fUserData;               // Offset:   28
//
//   } $Element;                        // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// BufferSrc                         texture  struct         r/o    0        1
// $Globals                          cbuffer      NA          NA    0        1
// CBuffer_View                      cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_VertexID              0   x           0   VERTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// WORLDPOS                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xy          2     NONE   float   xy  
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[14], immediateIndexed
dcl_constantbuffer cb12[21], immediateIndexed
dcl_resource_structured t0, 32 
dcl_input_sgv v0.x, vertex_id
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output o2.xy
dcl_output o3.xyz
dcl_output o4.xyz
dcl_temps 4
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r0.xyzw, v0.x, l(0), t0.wxyz
mov r1.xyz, r0.yzwy
mov r1.w, l(1.000000)
dp4 o0.x, cb0[6].xyzw, r1.xyzw
dp4 o0.y, cb0[7].xyzw, r1.xyzw
dp4 r2.x, cb0[8].xyzw, r1.xyzw
dp4 r1.x, cb0[10].xyzw, r1.xyzw
add r1.x, r1.x, cb12[18].w
mov o0.z, r2.x
add r1.yzw, -r0.yyzw, cb0[13].xxyz
ld_structured_indexable(structured_buffer, stride=32)(mixed,mixed,mixed,mixed) r3.xyzw, v0.x, l(16), t0.xyzw
mov r0.yz, r3.xxyx
mov o2.xy, r3.zwzz
dp3 o1.x, cb0[6].xyzx, r0.xyzx
dp3 o1.y, cb0[7].xyzx, r0.xyzx
dp3 o1.z, cb0[8].xyzx, r0.xyzx
dp3 r0.x, cb0[9].xyzx, r1.yzwy
dp3 r0.z, cb0[11].xyzx, r1.yzwy
dp3 r0.y, cb0[10].xyzx, r1.yzwy
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r1.yzw, r0.wwww, r0.xxyz
mad r0.x, -r0.y, r0.w, l(-0.150000)
add_sat r0.x, -r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
dp3 r0.y, -r1.yzwy, cb12[20].xyzx
mad r0.z, -cb12[16].y, r0.y, cb12[16].x
mad r0.y, r0.y, r0.y, l(1.000000)
log r0.z, |r0.z|
mul r0.yz, r0.yyzy, l(0.000000, 0.059683, -1.500000, 0.000000)
exp r0.z, r0.z
mad r0.w, cb12[16].z, r0.z, -cb12[15].z
mul r0.z, r0.z, cb12[16].z
max r0.w, r0.w, l(0.000000)
mul r1.y, |r2.x|, l(0.000020)
min r1.y, r1.y, l(1.000000)
add r1.y, -r1.y, l(1.000000)
mad r0.z, -r0.w, r1.y, r0.z
max r0.z, r0.z, cb12[19].w
max r0.w, r1.x, l(0.000000)
add r1.x, -r1.x, cb12[18].z
div r1.x, r1.x, cb12[15].y
div r1.y, -r0.w, cb12[15].x
div r0.w, -r0.w, cb12[14].w
mul r0.w, r0.w, l(1.442695)
exp r0.w, r0.w
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
add r1.y, r1.y, cb12[16].w
mul r1.y, r1.y, cb12[17].y
mul r1.y, r1.y, l(0.500000)
mul r0.x, r0.x, r1.y
min r0.x, r0.x, cb12[15].w
max r0.x, r0.x, cb12[17].x
mul r0.z, r0.x, r0.z
mad r1.yzw, cb12[14].xxyz, r0.wwww, r0.xxxx
mul r2.yzw, r0.wwww, cb12[14].xxyz
mad r0.xyz, r2.yzwy, r0.yyyy, r0.zzzz
div r0.xyz, r0.xyzx, r1.yzwy
mul r2.yzw, r1.xxxx, -r1.yyzw
mul r1.xyz, |r2.xxxx|, -r1.yzwy
mul r1.xyz, r1.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r1.xyz, r1.xyzx
mul r2.xyz, r2.yzwy, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r2.xyz, r2.xyzx
log r3.xyz, cb12[19].xyzx
mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r3.xyz, r3.xyzx
mul r2.xyz, r2.xyzx, r3.xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
add r2.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mov o4.xyz, r1.xyzx
mad r0.xyz, r0.xyzx, r2.xyzx, l(-0.004000, -0.004000, -0.004000, 0.000000)
max r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mad r1.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mul r1.xyz, r0.xyzx, r1.xyzx
mad r2.xyz, r0.xyzx, l(6.200000, 6.200000, 6.200000, 0.000000), l(1.700000, 1.700000, 1.700000, 0.000000)
mad r0.xyz, r0.xyzx, r2.xyzx, l(0.060000, 0.060000, 0.060000, 0.000000)
div o3.xyz, r1.xyzx, r0.xyzx
ret 
// Approximately 80 instruction slots used
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
