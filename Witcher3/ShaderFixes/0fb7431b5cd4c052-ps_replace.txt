Texture2DArray<float4> t14 : register(t14);

Texture2DArray<float4> t1 : register(t1);

Texture2DArray<float4> t0 : register(t0);

SamplerState s14_s : register(s14);

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[4];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse  

  r0.xy = (uint2)v0.xy;
  r0.z = (uint)cb3[3].x;
  r0.w = 0.000000000e+000;
  r1.x = t1.Load(r0.xyzw).x;
  r1.y = r1.x * cb12[22].x + cb12[22].y;
  r1.y = r1.y < 1.000000000e+000;
  if (r1.y != 0) {
    r1.yz = r0.xy;
    r2.xyzw = cb12[211].xyzw * r1.zzzz;
    r2.xyzw = cb12[210].xyzw * r1.yyyy + r2.xyzw;
    r1.xyzw = cb12[212].xyzw * r1.xxxx + r2.xyzw;
    r1.xyzw = cb12[213].xyzw + r1.xyzw;
    r1.xyz = r1.xyz / r1.www;
	
float4 r20, r21;
r20.xyz = r1.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
r1.xyz = r20.xyz / r20.www; 	
	
    r0.xyzw = t0.Load(r0.xyzw).xyzw;
    r1.w = dot(cb3[0].xyzw, r0.xyzw);
    r1.w = (int)r1.w;
    r2.xy = (int2)cb3[2].xy;
    r1.w = (int)r1.w & (int)r2.x;
    r0.x = dot(cb3[1].xyzw, r0.xyzw);
    r0.x = (int)r0.x;
    r0.x = (int)r2.y & (int)r0.x;
    r0.x = r0.x ? 1.000000000e+000 : 0.000000000e+000;
    r0.yz = r1.ww ? float2(1.000000e+000,-1.000000e+000) : float2(0.000000e+000,-0.000000e+000);
    r0.x = r0.x + r0.z;
    r0.x = cb3[2].z * r0.x + r0.y;
    r0.y = 2.000000000e+001 * cb12[66].x;
    r2.zw = trunc(cb12[68].xy);
    r3.xyz = -cb12[0].xyz + r1.xyz;
    r0.z = dot(r3.xyz, r3.xyz);
    r0.z = sqrt(r0.z);
    r3.xy = cb12[67].xy;
    r3.z = 0.000000000e+000;
    r3.xyz = r3.xyz + r1.xyz;
    r3.xyz = float3(1.000000e-002,1.000000e-002,1.000000e-002) * r3.xyz;
    r3.xyz = r3.xyz / cb12[66].xxx;
    r4.xy = float2(2.000000e+001,2.000000e+001) * cb12[67].xy;
    r4.z = 0.000000000e+000;
    r1.xyz = r4.xyz + r1.xyz;
    r1.xyz = float3(1.000000e-002,1.000000e-002,1.000000e-002) * r1.xyz;
    r1.xyz = r1.xyz / r0.yyy;
    r0.yw = cb13[0].xy * r3.zz;
    r0.yw = r0.yw / cb13[0].zz;
    r2.xy = r3.xy + -r0.yw;
    r0.yw = cb13[0].xy * r1.zz;
    r0.yw = r0.yw / cb13[0].zz;
    r1.xy = r1.xy + -r0.yw;
    r0.y = t14.SampleLevel(s14_s, r2.xyz, 1.000000000e+000).x;
    r0.w = t14.SampleLevel(s14_s, r2.xyw, 1.000000000e+000).x;
    r0.w = r0.w + -r0.y;
    r0.y = cb12[66].w * r0.w + r0.y;
    r1.zw = r2.zw;
    r0.w = t14.SampleLevel(s14_s, r1.xyz, 1.000000000e+000).x;
    r1.x = t14.SampleLevel(s14_s, r1.xyw, 1.000000000e+000).x;
    r1.x = r1.x + -r0.w;
    r0.w = cb12[66].w * r1.x + r0.w;
    r1.x = -2.500000000e-001 + cb13[0].z;
    r1.x = saturate(1.000000000e+001 * r1.x);
    r0.z = -1.000000000e+002 + r0.z;
    r0.z = saturate(6.666666828e-003 * r0.z);
    r0.w = r0.w + -r0.y;
    r0.y = r0.z * r0.w + r0.y;
    r0.y = -r1.x * r0.y + 1.000000000e+000;
    r0.x = r0.x * r0.y;
  } else {
    r0.x = 1.000000000e+000;
  }
  r0.y = 1.000000000e+000;
  o0.xyzw = r0.yxyy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_sampler s14, mode_default
dcl_resource_texture2darray (float,float,float,float) t0
dcl_resource_texture2darray (float,float,float,float) t1
dcl_resource_texture2darray (float,float,float,float) t14
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 5
ftou r0.xy, v0.xyxx
ftou r0.z, cb3[3].x
mov r0.w, l(0)
ld_indexable(texture2darray)(float,float,float,float) r1.x, r0.xyzw, t1.xyzw
mad r1.y, r1.x, cb12[22].x, cb12[22].y
lt r1.y, r1.y, l(1.000000)
if_nz r1.y
  utof r1.yz, r0.xxyx
  mul r2.xyzw, r1.zzzz, cb12[211].xyzw
  mad r2.xyzw, cb12[210].xyzw, r1.yyyy, r2.xyzw
  mad r1.xyzw, cb12[212].xyzw, r1.xxxx, r2.xyzw
  add r1.xyzw, r1.xyzw, cb12[213].xyzw
  div r1.xyz, r1.xyzx, r1.wwww
  ld_indexable(texture2darray)(float,float,float,float) r0.xyzw, r0.xyzw, t0.xyzw
  dp4 r1.w, cb3[0].xyzw, r0.xyzw
  ftoi r1.w, r1.w
  ftoi r2.xy, cb3[2].xyxx
  and r1.w, r1.w, r2.x
  dp4 r0.x, cb3[1].xyzw, r0.xyzw
  ftoi r0.x, r0.x
  and r0.x, r2.y, r0.x
  movc r0.x, r0.x, l(1.000000), l(0)
  movc r0.yz, r1.wwww, l(0,1.000000,-1.000000,0), l(0,0,-0.000000,0)
  add r0.x, r0.z, r0.x
  mad r0.x, cb3[2].z, r0.x, r0.y
  mul r0.y, cb12[66].x, l(20.000000)
  round_z r2.zw, cb12[68].xxxy
  add r3.xyz, r1.xyzx, -cb12[0].xyzx
  dp3 r0.z, r3.xyzx, r3.xyzx
  sqrt r0.z, r0.z
  mov r3.xy, cb12[67].xyxx
  mov r3.z, l(0)
  add r3.xyz, r1.xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  div r3.xyz, r3.xyzx, cb12[66].xxxx
  mul r4.xy, cb12[67].xyxx, l(20.000000, 20.000000, 0.000000, 0.000000)
  mov r4.z, l(0)
  add r1.xyz, r1.xyzx, r4.xyzx
  mul r1.xyz, r1.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  div r1.xyz, r1.xyzx, r0.yyyy
  mul r0.yw, r3.zzzz, cb13[0].xxxy
  div r0.yw, r0.yyyw, cb13[0].zzzz
  add r2.xy, -r0.ywyy, r3.xyxx
  mul r0.yw, r1.zzzz, cb13[0].xxxy
  div r0.yw, r0.yyyw, cb13[0].zzzz
  add r1.xy, -r0.ywyy, r1.xyxx
  sample_l_indexable(texture2darray)(float,float,float,float) r0.y, r2.xyzx, t14.yxzw, s14, l(1.000000)
  sample_l_indexable(texture2darray)(float,float,float,float) r0.w, r2.xywx, t14.yzwx, s14, l(1.000000)
  add r0.w, -r0.y, r0.w
  mad r0.y, cb12[66].w, r0.w, r0.y
  mov r1.zw, r2.zzzw
  sample_l_indexable(texture2darray)(float,float,float,float) r0.w, r1.xyzx, t14.yzwx, s14, l(1.000000)
  sample_l_indexable(texture2darray)(float,float,float,float) r1.x, r1.xywx, t14.xyzw, s14, l(1.000000)
  add r1.x, -r0.w, r1.x
  mad r0.w, cb12[66].w, r1.x, r0.w
  add r1.x, cb13[0].z, l(-0.250000)
  mul_sat r1.x, r1.x, l(10.000000)
  add r0.z, r0.z, l(-100.000000)
  mul_sat r0.z, r0.z, l(0.006667)
  add r0.w, -r0.y, r0.w
  mad r0.y, r0.z, r0.w, r0.y
  mad r0.y, -r1.x, r0.y, l(1.000000)
  mul r0.x, r0.y, r0.x
else 
  mov r0.x, l(1.000000)
endif 
mov r0.y, l(1.000000)
mov o0.xyzw, r0.yxyy
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb13
// {
//
//   float4 cb13;                       // Offset:    0 Size:    16
//
// }
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[4];                     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s14_s                             sampler      NA          NA   14        1
// t0                                texture  float4     2darray    0        1
// t1                                texture  float4     2darray    1        1
// t14                               texture  float4     2darray   14        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
// cb13                              cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_sampler s14, mode_default
dcl_resource_texture2darray (float,float,float,float) t0
dcl_resource_texture2darray (float,float,float,float) t1
dcl_resource_texture2darray (float,float,float,float) t14
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 5
ftou r0.xy, v0.xyxx
ftou r0.z, cb3[3].x
utof r0.xyz, r0.xyzx
ftoi r1.xyz, r0.xyzx
mov r1.w, l(0)
ld_indexable(texture2darray)(float,float,float,float) r0.z, r1.xyzw, t1.yzxw
mad r0.w, r0.z, cb12[22].x, cb12[22].y
lt r0.w, r0.w, l(1.000000)
if_nz r0.w
  mul r2.xyzw, r0.yyyy, cb12[211].xyzw
  mad r2.xyzw, cb12[210].xyzw, r0.xxxx, r2.xyzw
  mad r0.xyzw, cb12[212].xyzw, r0.zzzz, r2.xyzw
  add r0.xyzw, r0.xyzw, cb12[213].xyzw
  div r0.xyz, r0.xyzx, r0.wwww
  ld_indexable(texture2darray)(float,float,float,float) r1.xyzw, r1.xyzw, t0.xyzw
  dp4 r0.w, cb3[0].xyzw, r1.xyzw
  round_z r0.w, r0.w
  round_z r2.xy, cb3[2].xyxx
  ftoi r0.w, r0.w
  ftoi r2.xy, r2.xyxx
  and r0.w, r0.w, r2.x
  itof r0.w, r0.w
  dp4 r1.x, cb3[1].xyzw, r1.xyzw
  round_z r1.x, r1.x
  ftoi r1.x, r1.x
  and r1.x, r1.x, r2.y
  itof r1.x, r1.x
  ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r1.x
  and r1.x, r1.x, l(0x3f800000)
  ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
  movc r1.yz, r0.wwww, l(0,1.000000,-1.000000,0), l(0,0,-0.000000,0)
  add r0.w, r1.z, r1.x
  mad r0.w, cb3[2].z, r0.w, r1.y
  mul r1.x, cb12[66].x, l(20.000000)
  round_z r2.zw, cb12[68].xxxy
  add r1.yzw, r0.xxyz, -cb12[0].xxyz
  dp3 r1.y, r1.yzwy, r1.yzwy
  sqrt r1.y, r1.y
  mov r3.xy, cb12[67].xyxx
  mov r3.z, l(0)
  add r3.xyz, r0.xyzx, r3.xyzx
  mul r3.xyz, r3.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  div r3.xyz, r3.xyzx, cb12[66].xxxx
  mul r4.xy, cb12[67].xyxx, l(20.000000, 20.000000, 0.000000, 0.000000)
  mov r4.z, l(0)
  add r0.xyz, r0.xyzx, r4.xyzx
  mul r0.xyz, r0.xyzx, l(0.010000, 0.010000, 0.010000, 0.000000)
  div r0.xyz, r0.xyzx, r1.xxxx
  mul r1.xz, r3.zzzz, cb13[0].xxyx
  div r1.xz, r1.xxzx, cb13[0].zzzz
  add r2.xy, -r1.xzxx, r3.xyxx
  mul r1.xz, r0.zzzz, cb13[0].xxyx
  div r1.xz, r1.xxzx, cb13[0].zzzz
  add r3.xy, r0.xyxx, -r1.xzxx
  sample_l_indexable(texture2darray)(float,float,float,float) r0.x, r2.xyzx, t14.xyzw, s14, l(1.000000)
  sample_l_indexable(texture2darray)(float,float,float,float) r0.y, r2.xywx, t14.yxzw, s14, l(1.000000)
  add r0.y, -r0.x, r0.y
  mad r0.x, cb12[66].w, r0.y, r0.x
  mov r3.zw, r2.zzzw
  sample_l_indexable(texture2darray)(float,float,float,float) r0.y, r3.xyzx, t14.yxzw, s14, l(1.000000)
  sample_l_indexable(texture2darray)(float,float,float,float) r0.z, r3.xywx, t14.yzxw, s14, l(1.000000)
  add r0.z, -r0.y, r0.z
  mad r0.y, cb12[66].w, r0.z, r0.y
  add r0.z, cb13[0].z, l(-0.250000)
  mul_sat r0.z, r0.z, l(10.000000)
  add r1.x, r1.y, l(-100.000000)
  mul_sat r1.x, r1.x, l(0.006667)
  add r0.y, -r0.x, r0.y
  mad r0.x, r1.x, r0.y, r0.x
  mad r0.x, -r0.z, r0.x, l(1.000000)
  mul r0.x, r0.x, r0.w
else 
  mov r0.x, l(1.000000)
endif 
mov r0.y, l(1.000000)
mov o0.xyzw, r0.yxyy
ret 
// Approximately 77 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
