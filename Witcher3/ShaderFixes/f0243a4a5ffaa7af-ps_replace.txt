//Some Lighting on Plants - NOT WORKING YET
cbuffer FrameCB : register(b0)
{
  row_major float4x4 m_mModelViewProj3d : packoffset(c0);
  row_major float4x4 m_mProjectionInverse3d : packoffset(c4);
  row_major float4x4 m_mModelViewProj2d : packoffset(c8);
  row_major float4x4 m_mCameraFacingMatrix : packoffset(c12);
  float3 m_vCameraPosition : packoffset(c16);
  float3 m_vCameraDirection : packoffset(c17);
  float3 m_vLodRefPosition : packoffset(c18);
  float2 m_vViewport : packoffset(c19);
  float2 m_vViewportInverse : packoffset(c19.z);
  float m_fFarClip : packoffset(c20);

  struct
  {
    float3 m_vAmbient;
    float3 m_vDiffuse;
    float3 m_vSpecular;
    float3 m_vTransmission;
    float3 m_vDir;
  } m_vDirLight : packoffset(c21);


  struct
  {
    float4 m_vShadowMapRanges;
    float m_fFadeStartPercent;
    float m_fFadeInverseDistance;
    float m_fTerrainAmbientOcclusion;
    float4 m_avShadowSmoothingTable[3];
    float m_fShadowMapWritingActive;
    float2 m_vShadowMapTexelOffset;
    row_major float4x4 m_amLightModelViewProjs[4];
  } m_sShadows : packoffset(c26);

  float m_fWallTime : packoffset(c48);
}

cbuffer BaseTreeCB : register(b1)
{
  float m_f3dLodHighDetailDist : packoffset(c0);
  float m_f3dLodRange : packoffset(c0.y);
  float m_f3dGrassStartDist : packoffset(c0.z);
  float m_f3dGrassRange : packoffset(c0.w);
  float m_fBillboardHorzFade : packoffset(c1);
  float m_fOneMinusBillboardHorzFade : packoffset(c1.y);
  float m_fBillboardStartDist : packoffset(c1.z);
  float m_fBillboardRange : packoffset(c1.w);
  float m_fHueVariationByPos : packoffset(c2);
  float m_fHueVariationByVertex : packoffset(c2.y);
  float3 m_vHueVariationColor : packoffset(c3);
  float m_fAmbientImageScalar : packoffset(c3.w);
  float m_fNumBillboards : packoffset(c4);
  float m_fRadiansPerImage : packoffset(c4.y);
  float4 m_avBillboardTexCoords[24] : packoffset(c5);
  float4 m_vLavaCustomBaseTreeParams : packoffset(c29);
}

cbuffer MaterialCB : register(b2)
{
  float3 m_vAmbientColor : packoffset(c0);
  float3 m_vDiffuseColor : packoffset(c1);
  float3 m_vSpecularColor : packoffset(c2);
  float3 m_vTransmissionColor : packoffset(c3);
  float m_fShininess : packoffset(c3.w);
  float m_fBranchSeamWeight : packoffset(c4);
  float m_fOneMinusAmbientContrastFactor : packoffset(c4.y);
  float m_fTransmissionShadowBrightness : packoffset(c4.z);
  float m_fTransmissionViewDependency : packoffset(c4.w);
  float m_fAlphaScalar : packoffset(c5);
  float4 m_avEffectConfigFlags[5] : packoffset(c6);
  float4 m_avWindConfigFlags[7] : packoffset(c11);
  float4 m_avWindLodFlags[3] : packoffset(c18);
  float4 m_vLavaCustomMaterialParams : packoffset(c21);
}

cbuffer SharedPixelConsts : register(b12)
{
  float4 cameraPosition : packoffset(c0);
  row_major float4x4 worldToView : packoffset(c1);
  row_major float4x4 screenToView_UNUSED : packoffset(c5);
  row_major float4x4 viewToWorld : packoffset(c9);
  row_major float4x4 projectionMatrix : packoffset(c13);
  row_major float4x4 screenToWorld : packoffset(c17);
  float4 cameraNearFar : packoffset(c21);
  float4 cameraDepthRange : packoffset(c22);
  float4 screenDimensions : packoffset(c23);
  float4 numTiles : packoffset(c24);
  row_major float4x4 lastFrameViewReprojectionMatrix : packoffset(c25);
  row_major float4x4 lastFrameProjectionMatrix : packoffset(c29);
  float4 localReflectionParam0 : packoffset(c33);
  float4 localReflectionParam1 : packoffset(c34);
  float4 speedTreeRandomColorFallback : packoffset(c35);
  float4 translucencyParams0 : packoffset(c36);
  float4 translucencyParams1 : packoffset(c37);
  float4 fogSunDir : packoffset(c38);
  float4 fogColorFront : packoffset(c39);
  float4 fogColorMiddle : packoffset(c40);
  float4 fogColorBack : packoffset(c41);
  float4 fogBaseParams : packoffset(c42);
  float4 fogDensityParamsScene : packoffset(c43);
  float4 fogDensityParamsSky : packoffset(c44);
  float4 aerialColorFront : packoffset(c45);
  float4 aerialColorMiddle : packoffset(c46);
  float4 aerialColorBack : packoffset(c47);
  float4 aerialParams : packoffset(c48);
  float4 speedTreeBillboardsParams : packoffset(c49);
  float4 speedTreeParams : packoffset(c50);
  float4 speedTreeRandomColorLumWeightsTrees : packoffset(c51);
  float4 speedTreeRandomColorParamsTrees0 : packoffset(c52);
  float4 speedTreeRandomColorParamsTrees1 : packoffset(c53);
  float4 speedTreeRandomColorParamsTrees2 : packoffset(c54);
  float4 speedTreeRandomColorLumWeightsBranches : packoffset(c55);
  float4 speedTreeRandomColorParamsBranches0 : packoffset(c56);
  float4 speedTreeRandomColorParamsBranches1 : packoffset(c57);
  float4 speedTreeRandomColorParamsBranches2 : packoffset(c58);
  float4 speedTreeRandomColorLumWeightsGrass : packoffset(c59);
  float4 speedTreeRandomColorParamsGrass0 : packoffset(c60);
  float4 speedTreeRandomColorParamsGrass1 : packoffset(c61);
  float4 speedTreeRandomColorParamsGrass2 : packoffset(c62);
  float4 terrainPigmentParams : packoffset(c63);
  float4 speedTreeBillboardsGrainParams0 : packoffset(c64);
  float4 speedTreeBillboardsGrainParams1 : packoffset(c65);
  float4 weatherAndPrescaleParams : packoffset(c66);
  float4 windParams : packoffset(c67);
  float4 skyboxShadingParams : packoffset(c68);
  float4 ssaoParams : packoffset(c69);
  float4 msaaParams : packoffset(c70);
  float4 localLightsExtraParams : packoffset(c71);
  float4 cascadesSize : packoffset(c72);
  float4 surfaceDimensions : packoffset(c73);
  int numCullingEnvProbeParams : packoffset(c74);

  struct
  {
    row_major float4x3 viewToLocal;
    float3 normalScale;
    uint probeIndex;
  } cullingEnvProbeParams[6] : packoffset(c75);


  struct
  {
    float weight;
    float3 probePos;
    float3 areaMarginScale;
    row_major float4x4 areaWorldToLocal;
    float4 intensities;
    row_major float4x4 parallaxWorldToLocal;
    uint slotIndex;
  } commonEnvProbeParams[7] : packoffset(c105);

  float4 pbrSimpleParams0 : packoffset(c189);
  float4 pbrSimpleParams1 : packoffset(c190);
  float4 cameraFOV : packoffset(c191);
  float4 ssaoClampParams0 : packoffset(c192);
  float4 ssaoClampParams1 : packoffset(c193);
  float4 fogCustomValuesEnv0 : packoffset(c194);
  float4 fogCustomRangesEnv0 : packoffset(c195);
  float4 fogCustomValuesEnv1 : packoffset(c196);
  float4 fogCustomRangesEnv1 : packoffset(c197);
  float4 mostImportantEnvsBlendParams : packoffset(c198);
  float4 fogDensityParamsClouds : packoffset(c199);
  float4 skyColor : packoffset(c200);
  float4 skyColorHorizon : packoffset(c201);
  float4 sunColorHorizon : packoffset(c202);
  float4 sunBackHorizonColor : packoffset(c203);
  float4 sunColorSky : packoffset(c204);
  float4 moonColorHorizon : packoffset(c205);
  float4 moonBackHorizonColor : packoffset(c206);
  float4 moonColorSky : packoffset(c207);
  float4 skyParams1 : packoffset(c208);
  float4 skyParamsSun : packoffset(c209);
  float4 skyParamsMoon : packoffset(c210);
  float4 skyParamsInfluence : packoffset(c211);
  row_major float4x4 screenToWorldRevProjAware : packoffset(c212);
  row_major float4x4 pixelCoordToWorldRevProjAware : packoffset(c216);
  row_major float4x4 pixelCoordToWorld : packoffset(c220);
  float4 lightColorParams : packoffset(c224);
  float4 halfScreenDimensions : packoffset(c225);
  float4 halfSurfaceDimensions : packoffset(c226);
  float4 colorGroups[40] : packoffset(c227);
}
SamplerState samStandard_s : register(s0);
Texture2D<float4> DiffuseMap : register(t0);
Texture2D<float4> NormalMap : register(t1);
Texture2D<float4> DetailDiffuseMap : register(t2);
Texture2D<float4> DetailNormalMap : register(t3);
Texture2D<float4> SpecularMaskMap : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  float3 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  
float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
// float4 a1, a2, a3, a4;
// float4 b1, b2, b3, b4;
// float det;
//...Original Matrix
// a1.xyzw = worldToView._m00_m01_m02_m03;
// a2.xyzw = worldToView._m10_m11_m12_m13;
// a3.xyzw = worldToView._m20_m21_m22_m23;
// a4.xyzw = worldToView._m30_m31_m32_m33;
//...Determinant
// det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
// det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
// det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
// det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
// b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
// b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
// b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
// b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
// b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
// b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
// b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
// b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
// b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
// b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
// b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
// b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
// b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
// b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
// b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
// b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
// b1.xyzw /= det;
// b2.xyzw /= det;
// b3.xyzw /= det;
// b4.xyzw /= det;
//End Inverse 




  r0.xyz = -m_vCameraPosition.xyz + v6.xyz;
  
  
// float4 r20, r21;
// r20.xyz = r0.xyz; 
// r20.w = 1.0;

// r21.xyzw = worldToView._m10_m11_m12_m13 * r20.yyyy;
// r21.xyzw = worldToView._m00_m01_m02_m03 * r20.xxxx + r21.xyzw;
// r21.xyzw = worldToView._m20_m21_m22_m23 * r20.zzzz + r21.xyzw;
// r21.xyzw = worldToView._m30_m31_m32_m33 + r21.xyzw;

// r21.xyzw /= r21.wwww;

// r21.x -= stereo.x*(r21.z - stereo.y)/projectionMatrix._m00; 

// r20.xyzw = b2.xyzw * r21.yyyy;
// r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
// r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
// r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
// r0.xyz = r20.xyz / r20.www;  
  

  
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r1.xyzw = DiffuseMap.Sample(samStandard_s, v1.xy).xyzw;
  
  // r1=0;
  
  r0.y = r1.w * v1.z + -1.000000015e-001;
  r0.y = r0.y < 0.000000000e+000;
  if (r0.y != 0) discard;
  r0.yzw = float3(5.000000e-001,5.000000e-001,1.500000e+000) < m_avEffectConfigFlags[1].yww;
  if (r0.y != 0) {
    r2.xyzw = DetailDiffuseMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).xyzw;
    
	// r2=0;
	
	r1.w = 1.500000000e+000 < m_avEffectConfigFlags[1].y;
    r3.x = v1.w * r2.w;
    r1.w = r1.w ? r3.x : r2.w;
    r2.xyz = r2.xyz + -r1.xyz;
    r1.xyz = r1.www * r2.xyz + r1.xyz;
  }
  r1.w = 5.000000000e-001 < m_avEffectConfigFlags[2].y;
  if (r1.w != 0) {
    r1.xyz = DiffuseMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).xyz;
    
	// r1=0;
	
	if (r0.y != 0) {
      r2.xyzw = DetailDiffuseMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).xyzw;
      
	  // r2=0;
	  
	  r0.y = 1.500000000e+000 < m_avEffectConfigFlags[1].y;
      r3.x = v1.w * r2.w;
      r0.y = r0.y ? r3.x : r2.w;
      r2.xyz = r2.xyz + -r1.xyz;
      r1.xyz = r0.yyy * r2.xyz + r1.xyz;
    }
  }
  r0.y = 5.000000000e-001 < m_avEffectConfigFlags[3].w;
  r2.xyz = v4.xyz + r1.xyz;
  r1.xyz = r0.yyy ? r2.xyz : r1.xyz;
  r2.xyz = float3(5.010000e-001,0.000000e+000,0.000000e+000) < m_vLavaCustomBaseTreeParams.zxw;
  r0.y = dot(speedTreeRandomColorLumWeightsGrass.xyz, r1.xyz);
  r3.xyzw = speedTreeRandomColorParamsGrass1.xyzw * v5.yyyy;
  r3.xyzw = v5.xxxx * speedTreeRandomColorParamsGrass0.xyzw + r3.xyzw;
  r3.xyzw = v5.zzzz * speedTreeRandomColorParamsGrass2.xyzw + r3.xyzw;
  r3.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r3.xyz;
  r3.xyz = max(r3.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r1.xyz = log2(r1.xyz);
  r1.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r4.xyz = r1.xyz + -r0.yyy;
  r4.xyz = r4.xyz * r3.www + r0.yyy;
  r4.xyz = max(r4.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r3.xyz = r4.xyz * r3.xyz;
  r3.xyz = log2(r3.xyz);
  r3.xyz = float3(4.545455e-001,4.545455e-001,4.545455e-001) * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r1.xyz = speedTreeRandomColorFallback.xyz * r1.xyz;
  r1.xyz = log2(r1.xyz);
  r1.xyz = float3(4.545455e-001,4.545455e-001,4.545455e-001) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r1.xyz = r2.xxx ? r3.xyz : r1.xyz;
  r1.xyz = m_vDiffuseColor.xyz * r1.xyz;
  r1.xyz = m_vDirLight.m_vDiffuse.xyz * r1.xyz;
  r0.y = 5.000000000e-001 < m_avEffectConfigFlags[0].w;
  r2.x = -1.000000000e+000 + v2.w;
  r2.x = saturate(speedTreeParams.x * r2.x + 1.000000000e+000);
  r3.xyz = r2.xxx * r1.xyz;
  r1.xyz = r0.yyy ? r3.xyz : r1.xyz;
  r0.x = -terrainPigmentParams.y + r0.x;
  r0.x = m_vLavaCustomBaseTreeParams.y * r0.x;
  r0.y = max(terrainPigmentParams.z, 9.999999747e-005);
  r0.x = saturate(r0.x / r0.y);
  r0.y = -m_vLavaCustomMaterialParams.x + v6.w;
  r2.x = max(m_vLavaCustomMaterialParams.y, 9.999999747e-005);
  r0.y = r0.y / r2.x;
  r0.y = saturate(1.000000000e+000 + -r0.y);
  r0.x = r0.x + r0.y;
  r0.x = v7.w * r0.x;
  r0.x = saturate(m_vLavaCustomBaseTreeParams.x * r0.x);
  r0.y = saturate(dot(r1.xyz, float3(3.000000e-001,5.000000e-001,2.000000e-001)));
  r0.y = terrainPigmentParams.x * r0.y;
  r3.xyz = r0.yyy * v7.xyz + -r1.xyz;
  r3.xyz = r0.xxx * r3.xyz + r1.xyz;
  o0.xyz = r2.yyy ? r3.xyz : r1.xyz;
  r0.xy = SpecularMaskMap.Sample(samStandard_s, v1.xy).yw;
  if (r2.z != 0) {
    o1.xyz = v2.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
    o0.w = 0.000000000e+000;
  } else {
    r1.xyz = NormalMap.Sample(samStandard_s, v1.xy).xyz;
    r2.x = 5.000000000e-001 < m_avEffectConfigFlags[1].z;
    if (r2.x != 0) {
      r2.y = DetailDiffuseMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).w;
      r2.z = 1.500000000e+000 < m_avEffectConfigFlags[1].y;
      r2.w = v1.w * r2.y;
      r2.y = r2.z ? r2.w : r2.y;
      r3.xyz = DetailNormalMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).xyz;
      r3.xyz = r3.xyz + -r1.xyz;
      r1.xyz = r2.yyy * r3.xyz + r1.xyz;
    }
    r1.xyz = r1.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    if (r1.w != 0) {
      r2.yzw = NormalMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).xyz;
      if (r2.x != 0) {
        r1.w = DetailDiffuseMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).w;
        r2.x = 1.500000000e+000 < m_avEffectConfigFlags[1].y;
        r3.x = v1.w * r1.w;
        r1.w = r2.x ? r3.x : r1.w;
        r3.xyz = DetailNormalMap.Sample(samStandard_s, float2(0.000000e+000,0.000000e+000)).xyz;
        r3.xyz = r3.xyz + -r2.yzw;
        r2.yzw = r1.www * r3.xyz + r2.yzw;
      }
      r1.xyz = r2.yzw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
    }
    r2.xyz = v3.yzx * v2.zxy;
    r2.xyz = v2.yzx * v3.zxy + -r2.xyz;
    r2.xyz = r2.xyz * r1.yyy;
    r1.xyw = v3.xyz * r1.xxx + r2.xyz;
    r1.xyz = v2.xyz * r1.zzz + r1.xyw;
    r1.w = dot(r1.xyz, r1.xyz);
    r1.w = rsqrt(r1.w);
    r1.xyz = r1.xyz * r1.www;
    o1.xyz = r1.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + float3(5.000000e-001,5.000000e-001,5.000000e-001);
	
    r0.y = m_vDirLight.m_vTransmission.x * r0.y;
    r0.y = m_vTransmissionColor.y * r0.y;
    r1.xy = float2(5.000000e-001,1.500000e+000) < m_avEffectConfigFlags[2].xx;
    r1.z = v1.w * r0.y;
    r0.y = r1.y ? r1.z : r0.y;
    o0.w = r1.x ? r0.y : 0;
  }
  r0.x = m_vDirLight.m_vSpecular.x * r0.x;
  r0.x = m_vSpecularColor.y * r0.x;
  r0.y = v1.w * r0.x;
  r0.x = r0.w ? r0.y : r0.x;
  o2.xyz = r0.zzz ? r0.xxx : 0;
  r0.x = r0.z ? m_fShininess : 3.000000000e+001;
  o1.w = 7.812500000e-003 * r0.x;
  o2.w = 5.882353056e-003;
  
  
  // o2=0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer FrameCB
// {
//
//   row_major float4x4 m_mModelViewProj3d;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 m_mProjectionInverse3d;// Offset:   64 Size:    64 [unused]
//   row_major float4x4 m_mModelViewProj2d;// Offset:  128 Size:    64 [unused]
//   row_major float4x4 m_mCameraFacingMatrix;// Offset:  192 Size:    64 [unused]
//   float3 m_vCameraPosition;          // Offset:  256 Size:    12
//   float3 m_vCameraDirection;         // Offset:  272 Size:    12 [unused]
//   float3 m_vLodRefPosition;          // Offset:  288 Size:    12 [unused]
//   float2 m_vViewport;                // Offset:  304 Size:     8 [unused]
//   float2 m_vViewportInverse;         // Offset:  312 Size:     8 [unused]
//   float m_fFarClip;                  // Offset:  320 Size:     4 [unused]
//   
//   struct SDirLight
//   {
//       
//       float3 m_vAmbient;             // Offset:  336
//       float3 m_vDiffuse;             // Offset:  352
//       float3 m_vSpecular;            // Offset:  368
//       float3 m_vTransmission;        // Offset:  384
//       float3 m_vDir;                 // Offset:  400
//
//   } m_vDirLight;                     // Offset:  336 Size:    76
//   
//   struct SShadows
//   {
//       
//       float4 m_vShadowMapRanges;     // Offset:  416
//       float m_fFadeStartPercent;     // Offset:  432
//       float m_fFadeInverseDistance;  // Offset:  436
//       float m_fTerrainAmbientOcclusion;// Offset:  440
//       float4 m_avShadowSmoothingTable[3];// Offset:  448
//       float m_fShadowMapWritingActive;// Offset:  496
//       float2 m_vShadowMapTexelOffset;// Offset:  500
//       row_major float4x4 m_amLightModelViewProjs[4];// Offset:  512
//
//   } m_sShadows;                      // Offset:  416 Size:   352 [unused]
//   float m_fWallTime;                 // Offset:  768 Size:     4 [unused]
//
// }
//
// cbuffer BaseTreeCB
// {
//
//   float m_f3dLodHighDetailDist;      // Offset:    0 Size:     4 [unused]
//   float m_f3dLodRange;               // Offset:    4 Size:     4 [unused]
//   float m_f3dGrassStartDist;         // Offset:    8 Size:     4 [unused]
//   float m_f3dGrassRange;             // Offset:   12 Size:     4 [unused]
//   float m_fBillboardHorzFade;        // Offset:   16 Size:     4 [unused]
//   float m_fOneMinusBillboardHorzFade;// Offset:   20 Size:     4 [unused]
//   float m_fBillboardStartDist;       // Offset:   24 Size:     4 [unused]
//   float m_fBillboardRange;           // Offset:   28 Size:     4 [unused]
//   float m_fHueVariationByPos;        // Offset:   32 Size:     4 [unused]
//   float m_fHueVariationByVertex;     // Offset:   36 Size:     4 [unused]
//   float3 m_vHueVariationColor;       // Offset:   48 Size:    12 [unused]
//   float m_fAmbientImageScalar;       // Offset:   60 Size:     4 [unused]
//   float m_fNumBillboards;            // Offset:   64 Size:     4 [unused]
//   float m_fRadiansPerImage;          // Offset:   68 Size:     4 [unused]
//   float4 m_avBillboardTexCoords[24]; // Offset:   80 Size:   384 [unused]
//   float4 m_vLavaCustomBaseTreeParams;// Offset:  464 Size:    16
//
// }
//
// cbuffer MaterialCB
// {
//
//   float3 m_vAmbientColor;            // Offset:    0 Size:    12 [unused]
//   float3 m_vDiffuseColor;            // Offset:   16 Size:    12
//   float3 m_vSpecularColor;           // Offset:   32 Size:    12
//   float3 m_vTransmissionColor;       // Offset:   48 Size:    12
//   float m_fShininess;                // Offset:   60 Size:     4
//   float m_fBranchSeamWeight;         // Offset:   64 Size:     4 [unused]
//   float m_fOneMinusAmbientContrastFactor;// Offset:   68 Size:     4 [unused]
//   float m_fTransmissionShadowBrightness;// Offset:   72 Size:     4 [unused]
//   float m_fTransmissionViewDependency;// Offset:   76 Size:     4 [unused]
//   float m_fAlphaScalar;              // Offset:   80 Size:     4 [unused]
//   float4 m_avEffectConfigFlags[5];   // Offset:   96 Size:    80
//   float4 m_avWindConfigFlags[7];     // Offset:  176 Size:   112 [unused]
//   float4 m_avWindLodFlags[3];        // Offset:  288 Size:    48 [unused]
//   float4 m_vLavaCustomMaterialParams;// Offset:  336 Size:    16
//
// }
//
// cbuffer SharedPixelConsts
// {
//
//   float4 cameraPosition;             // Offset:    0 Size:    16 [unused]
//   row_major float4x4 worldToView;    // Offset:   16 Size:    64 [unused]
//   row_major float4x4 screenToView_UNUSED;// Offset:   80 Size:    64 [unused]
//   row_major float4x4 viewToWorld;    // Offset:  144 Size:    64 [unused]
//   row_major float4x4 projectionMatrix;// Offset:  208 Size:    64 [unused]
//   row_major float4x4 screenToWorld;  // Offset:  272 Size:    64 [unused]
//   float4 cameraNearFar;              // Offset:  336 Size:    16 [unused]
//   float4 cameraDepthRange;           // Offset:  352 Size:    16 [unused]
//   float4 screenDimensions;           // Offset:  368 Size:    16 [unused]
//   float4 numTiles;                   // Offset:  384 Size:    16 [unused]
//   row_major float4x4 lastFrameViewReprojectionMatrix;// Offset:  400 Size:    64 [unused]
//   row_major float4x4 lastFrameProjectionMatrix;// Offset:  464 Size:    64 [unused]
//   float4 localReflectionParam0;      // Offset:  528 Size:    16 [unused]
//   float4 localReflectionParam1;      // Offset:  544 Size:    16 [unused]
//   float4 speedTreeRandomColorFallback;// Offset:  560 Size:    16
//   float4 translucencyParams0;        // Offset:  576 Size:    16 [unused]
//   float4 translucencyParams1;        // Offset:  592 Size:    16 [unused]
//   float4 fogSunDir;                  // Offset:  608 Size:    16 [unused]
//   float4 fogColorFront;              // Offset:  624 Size:    16 [unused]
//   float4 fogColorMiddle;             // Offset:  640 Size:    16 [unused]
//   float4 fogColorBack;               // Offset:  656 Size:    16 [unused]
//   float4 fogBaseParams;              // Offset:  672 Size:    16 [unused]
//   float4 fogDensityParamsScene;      // Offset:  688 Size:    16 [unused]
//   float4 fogDensityParamsSky;        // Offset:  704 Size:    16 [unused]
//   float4 aerialColorFront;           // Offset:  720 Size:    16 [unused]
//   float4 aerialColorMiddle;          // Offset:  736 Size:    16 [unused]
//   float4 aerialColorBack;            // Offset:  752 Size:    16 [unused]
//   float4 aerialParams;               // Offset:  768 Size:    16 [unused]
//   float4 speedTreeBillboardsParams;  // Offset:  784 Size:    16 [unused]
//   float4 speedTreeParams;            // Offset:  800 Size:    16
//   float4 speedTreeRandomColorLumWeightsTrees;// Offset:  816 Size:    16 [unused]
//   float4 speedTreeRandomColorParamsTrees0;// Offset:  832 Size:    16 [unused]
//   float4 speedTreeRandomColorParamsTrees1;// Offset:  848 Size:    16 [unused]
//   float4 speedTreeRandomColorParamsTrees2;// Offset:  864 Size:    16 [unused]
//   float4 speedTreeRandomColorLumWeightsBranches;// Offset:  880 Size:    16 [unused]
//   float4 speedTreeRandomColorParamsBranches0;// Offset:  896 Size:    16 [unused]
//   float4 speedTreeRandomColorParamsBranches1;// Offset:  912 Size:    16 [unused]
//   float4 speedTreeRandomColorParamsBranches2;// Offset:  928 Size:    16 [unused]
//   float4 speedTreeRandomColorLumWeightsGrass;// Offset:  944 Size:    16
//   float4 speedTreeRandomColorParamsGrass0;// Offset:  960 Size:    16
//   float4 speedTreeRandomColorParamsGrass1;// Offset:  976 Size:    16
//   float4 speedTreeRandomColorParamsGrass2;// Offset:  992 Size:    16
//   float4 terrainPigmentParams;       // Offset: 1008 Size:    16
//   float4 speedTreeBillboardsGrainParams0;// Offset: 1024 Size:    16 [unused]
//   float4 speedTreeBillboardsGrainParams1;// Offset: 1040 Size:    16 [unused]
//   float4 weatherAndPrescaleParams;   // Offset: 1056 Size:    16 [unused]
//   float4 windParams;                 // Offset: 1072 Size:    16 [unused]
//   float4 skyboxShadingParams;        // Offset: 1088 Size:    16 [unused]
//   float4 ssaoParams;                 // Offset: 1104 Size:    16 [unused]
//   float4 msaaParams;                 // Offset: 1120 Size:    16 [unused]
//   float4 localLightsExtraParams;     // Offset: 1136 Size:    16 [unused]
//   float4 cascadesSize;               // Offset: 1152 Size:    16 [unused]
//   float4 surfaceDimensions;          // Offset: 1168 Size:    16 [unused]
//   int numCullingEnvProbeParams;      // Offset: 1184 Size:     4 [unused]
//   
//   struct ShaderCullingEnvProbeParams
//   {
//       
//       row_major float4x3 viewToLocal;// Offset: 1200
//       float3 normalScale;            // Offset: 1264
//       uint probeIndex;               // Offset: 1276
//
//   } cullingEnvProbeParams[6];        // Offset: 1200 Size:   480 [unused]
//   
//   struct ShaderCommonEnvProbeParams
//   {
//       
//       float weight;                  // Offset: 1680
//       float3 probePos;               // Offset: 1684
//       float3 areaMarginScale;        // Offset: 1696
//       row_major float4x4 areaWorldToLocal;// Offset: 1712
//       float4 intensities;            // Offset: 1776
//       row_major float4x4 parallaxWorldToLocal;// Offset: 1792
//       uint slotIndex;                // Offset: 1856
//
//   } commonEnvProbeParams[7];         // Offset: 1680 Size:  1332 [unused]
//   float4 pbrSimpleParams0;           // Offset: 3024 Size:    16 [unused]
//   float4 pbrSimpleParams1;           // Offset: 3040 Size:    16 [unused]
//   float4 cameraFOV;                  // Offset: 3056 Size:    16 [unused]
//   float4 ssaoClampParams0;           // Offset: 3072 Size:    16 [unused]
//   float4 ssaoClampParams1;           // Offset: 3088 Size:    16 [unused]
//   float4 fogCustomValuesEnv0;        // Offset: 3104 Size:    16 [unused]
//   float4 fogCustomRangesEnv0;        // Offset: 3120 Size:    16 [unused]
//   float4 fogCustomValuesEnv1;        // Offset: 3136 Size:    16 [unused]
//   float4 fogCustomRangesEnv1;        // Offset: 3152 Size:    16 [unused]
//   float4 mostImportantEnvsBlendParams;// Offset: 3168 Size:    16 [unused]
//   float4 fogDensityParamsClouds;     // Offset: 3184 Size:    16 [unused]
//   float4 skyColor;                   // Offset: 3200 Size:    16 [unused]
//   float4 skyColorHorizon;            // Offset: 3216 Size:    16 [unused]
//   float4 sunColorHorizon;            // Offset: 3232 Size:    16 [unused]
//   float4 sunBackHorizonColor;        // Offset: 3248 Size:    16 [unused]
//   float4 sunColorSky;                // Offset: 3264 Size:    16 [unused]
//   float4 moonColorHorizon;           // Offset: 3280 Size:    16 [unused]
//   float4 moonBackHorizonColor;       // Offset: 3296 Size:    16 [unused]
//   float4 moonColorSky;               // Offset: 3312 Size:    16 [unused]
//   float4 skyParams1;                 // Offset: 3328 Size:    16 [unused]
//   float4 skyParamsSun;               // Offset: 3344 Size:    16 [unused]
//   float4 skyParamsMoon;              // Offset: 3360 Size:    16 [unused]
//   float4 skyParamsInfluence;         // Offset: 3376 Size:    16 [unused]
//   row_major float4x4 screenToWorldRevProjAware;// Offset: 3392 Size:    64 [unused]
//   row_major float4x4 pixelCoordToWorldRevProjAware;// Offset: 3456 Size:    64 [unused]
//   row_major float4x4 pixelCoordToWorld;// Offset: 3520 Size:    64 [unused]
//   float4 lightColorParams;           // Offset: 3584 Size:    16 [unused]
//   float4 halfScreenDimensions;       // Offset: 3600 Size:    16 [unused]
//   float4 halfSurfaceDimensions;      // Offset: 3616 Size:    16 [unused]
//   float4 colorGroups[40];            // Offset: 3632 Size:   640 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samStandard                       sampler      NA          NA    0        1
// DiffuseMap                        texture  float4          2d    0        1
// NormalMap                         texture  float4          2d    1        1
// DetailDiffuseMap                  texture  float4          2d    2        1
// DetailNormalMap                   texture  float4          2d    3        1
// SpecularMaskMap                   texture  float4          2d    4        1
// FrameCB                           cbuffer      NA          NA    0        1
// BaseTreeCB                        cbuffer      NA          NA    1        1
// MaterialCB                        cbuffer      NA          NA    2        1
// SharedPixelConsts                 cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb1[30], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb12[64], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 5
add r0.xyz, v6.xyzx, -cb0[16].xyzx
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
mad r0.y, r1.w, v1.z, l(-0.100000)
lt r0.y, r0.y, l(0.000000)
discard_nz r0.y
lt r0.yzw, l(0.000000, 0.500000, 0.500000, 1.500000), cb2[7].yyww
if_nz r0.y
  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), t2.xyzw, s0
  lt r1.w, l(1.500000), cb2[7].y
  mul r3.x, r2.w, v1.w
  movc r1.w, r1.w, r3.x, r2.w
  add r2.xyz, -r1.xyzx, r2.xyzx
  mad r1.xyz, r1.wwww, r2.xyzx, r1.xyzx
endif 
lt r1.w, l(0.500000), cb2[8].y
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), t0.xyzw, s0
  if_nz r0.y
    sample_indexable(texture2d)(float,float,float,float) r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), t2.xyzw, s0
    lt r0.y, l(1.500000), cb2[7].y
    mul r3.x, r2.w, v1.w
    movc r0.y, r0.y, r3.x, r2.w
    add r2.xyz, -r1.xyzx, r2.xyzx
    mad r1.xyz, r0.yyyy, r2.xyzx, r1.xyzx
  endif 
endif 
lt r0.y, l(0.500000), cb2[9].w
add r2.xyz, r1.xyzx, v4.xyzx
movc r1.xyz, r0.yyyy, r2.xyzx, r1.xyzx
lt r2.xyz, l(0.501000, 0.000000, 0.000000, 0.000000), cb1[29].zxwz
dp3 r0.y, cb12[59].xyzx, r1.xyzx
mul r3.xyzw, v5.yyyy, cb12[61].xyzw
mad r3.xyzw, v5.xxxx, cb12[60].xyzw, r3.xyzw
mad r3.xyzw, v5.zzzz, cb12[62].xyzw, r3.xyzw
add r3.xyz, -r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
max r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
log r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
exp r1.xyz, r1.xyzx
add r4.xyz, -r0.yyyy, r1.xyzx
mad r4.xyz, r4.xyzx, r3.wwww, r0.yyyy
max r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r3.xyz, r3.xyzx, r4.xyzx
log r3.xyz, r3.xyzx
mul r3.xyz, r3.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r3.xyz, r3.xyzx
mul r1.xyz, r1.xyzx, cb12[35].xyzx
log r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, l(0.454545, 0.454545, 0.454545, 0.000000)
exp r1.xyz, r1.xyzx
movc r1.xyz, r2.xxxx, r3.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, cb2[1].xyzx
mul r1.xyz, r1.xyzx, cb0[22].xyzx
lt r0.y, l(0.500000), cb2[6].w
add r2.x, v2.w, l(-1.000000)
mad_sat r2.x, cb12[50].x, r2.x, l(1.000000)
mul r3.xyz, r1.xyzx, r2.xxxx
movc r1.xyz, r0.yyyy, r3.xyzx, r1.xyzx
add r0.x, r0.x, -cb12[63].y
mul r0.x, r0.x, cb1[29].y
max r0.y, cb12[63].z, l(0.000100)
div_sat r0.x, r0.x, r0.y
add r0.y, v6.w, -cb2[21].x
max r2.x, cb2[21].y, l(0.000100)
div r0.y, r0.y, r2.x
add_sat r0.y, -r0.y, l(1.000000)
add r0.x, r0.y, r0.x
mul r0.x, r0.x, v7.w
mul_sat r0.x, r0.x, cb1[29].x
dp3_sat r0.y, r1.xyzx, l(0.300000, 0.500000, 0.200000, 0.000000)
mul r0.y, r0.y, cb12[63].x
mad r3.xyz, r0.yyyy, v7.xyzx, -r1.xyzx
mad r3.xyz, r0.xxxx, r3.xyzx, r1.xyzx
movc o0.xyz, r2.yyyy, r3.xyzx, r1.xyzx
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t4.ywxz, s0
if_nz r2.z
  mad o1.xyz, v2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mov o0.w, l(0)
else 
  sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xyzw, s0
  lt r2.x, l(0.500000), cb2[7].z
  if_nz r2.x
    sample_indexable(texture2d)(float,float,float,float) r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), t2.xwyz, s0
    lt r2.z, l(1.500000), cb2[7].y
    mul r2.w, r2.y, v1.w
    movc r2.y, r2.z, r2.w, r2.y
    sample_indexable(texture2d)(float,float,float,float) r3.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), t3.xyzw, s0
    add r3.xyz, -r1.xyzx, r3.xyzx
    mad r1.xyz, r2.yyyy, r3.xyzx, r1.xyzx
  endif 
  mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  if_nz r1.w
    sample_indexable(texture2d)(float,float,float,float) r2.yzw, l(0.000000, 0.000000, 0.000000, 0.000000), t1.wxyz, s0
    if_nz r2.x
      sample_indexable(texture2d)(float,float,float,float) r1.w, l(0.000000, 0.000000, 0.000000, 0.000000), t2.xyzw, s0
      lt r2.x, l(1.500000), cb2[7].y
      mul r3.x, r1.w, v1.w
      movc r1.w, r2.x, r3.x, r1.w
      sample_indexable(texture2d)(float,float,float,float) r3.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), t3.xyzw, s0
      add r3.xyz, -r2.yzwy, r3.xyzx
      mad r2.yzw, r1.wwww, r3.xxyz, r2.yyzw
    endif 
    mad r1.xyz, r2.yzwy, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  endif 
  mul r2.xyz, v2.zxyz, v3.yzxy
  mad r2.xyz, v2.yzxy, v3.zxyz, -r2.xyzx
  mul r2.xyz, r1.yyyy, r2.xyzx
  mad r1.xyw, v3.xyxz, r1.xxxx, r2.xyxz
  mad r1.xyz, v2.xyzx, r1.zzzz, r1.xywx
  dp3 r1.w, r1.xyzx, r1.xyzx
  rsq r1.w, r1.w
  mul r1.xyz, r1.wwww, r1.xyzx
  mad o1.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r0.y, r0.y, cb0[24].x
  mul r0.y, r0.y, cb2[3].y
  lt r1.xy, l(0.500000, 1.500000, 0.000000, 0.000000), cb2[8].xxxx
  mul r1.z, r0.y, v1.w
  movc r0.y, r1.y, r1.z, r0.y
  and o0.w, r0.y, r1.x
endif 
mul r0.x, r0.x, cb0[23].x
mul r0.x, r0.x, cb2[2].y
mul r0.y, r0.x, v1.w
movc r0.x, r0.w, r0.y, r0.x
and o2.xyz, r0.xxxx, r0.zzzz
movc r0.x, r0.z, cb2[3].w, l(30.000000)
mul o1.w, r0.x, l(0.007813)
mov o2.w, l(0.005882)
ret 
// Approximately 132 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
     