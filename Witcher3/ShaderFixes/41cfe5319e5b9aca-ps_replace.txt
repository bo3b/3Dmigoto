Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse 

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = t0.Load(r0.xyw).x;
  r2.xyzw = cb12[211].xyzw * v0.yyyy;
  r2.xyzw = cb12[210].xyzw * v0.xxxx + r2.xyzw;
  r1.xyzw = cb12[212].xyzw * r1.xxxx + r2.xyzw;
  r1.xyzw = cb12[213].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  
float4 r20, r21;
r20.xyz = r1.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
r1.xyz = r20.xyz / r20.www; 


  r1.xyz = v1.xyz + -r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r2.x = sqrt(r1.w);
  r2.y = v1.w * r2.x;
  r2.z = 9.900000095e-001 < r2.y;
  if (r2.z != 0) discard;
  r2.y = r2.y * r2.y;
  r2.y = -r2.y * r2.y + 1.000000000e+000;
  r2.y = r2.y * r2.y;
  r1.w = r1.w * v2.w + 1.000000000e+000;
  r1.w = r2.y / r1.w;
  r3.xy = (uint2)v0.xy;
  r3.zw = float2(0.000000e+000,0.000000e+000);
  r2.yzw = t1.Load(r3.xyz).xyz;
  r0.xyz = t2.Load(r0.xyz).xyz;
  r0.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = r1.xyz / r2.xxx;
  r0.x = dot(r1.xyz, r0.xyz);
  r0.x = max(r0.x, 0.000000000e+000);
  r0.yzw = log2(r2.yzw);
  r0.yzw = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r0.yzw;
  r0.yzw = exp2(r0.yzw);
  r0.yzw = v2.xyz * r0.yzw;
  r0.x = r0.x * r1.w;
  o0.xyz = r0.yzw * r0.xxx;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 4
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
mul r2.xyzw, v0.yyyy, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, v0.xxxx, r2.xyzw
mad r1.xyzw, cb12[212].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, -r1.xyzx, v1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r2.x, r1.w
mul r2.y, r2.x, v1.w
lt r2.z, l(0.990000), r2.y
discard_nz r2.z
mul r2.y, r2.y, r2.y
mad r2.y, -r2.y, r2.y, l(1.000000)
mul r2.y, r2.y, r2.y
mad r1.w, r1.w, v2.w, l(1.000000)
div r1.w, r2.y, r1.w
ftou r3.xy, v0.xyxx
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.yzw, r3.xyzw, t1.wxyz
ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t2.xyzw
add r0.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
div r1.xyz, r1.xyzx, r2.xxxx
dp3 r0.x, r1.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
log r0.yzw, r2.yyzw
mul r0.yzw, r0.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
exp r0.yzw, r0.yyzw
mul r0.yzw, r0.yyzw, v2.xxyz
mul r0.x, r1.w, r0.x
mul o0.xyz, r0.xxxx, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4          2d    2        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 4
round_z r0.xy, v0.xyxx
ftoi r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
mul r2.xyzw, v0.yyyy, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, v0.xxxx, r2.xyzw
mad r1.xyzw, cb12[212].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r1.xyz, r1.xyzx, r1.wwww
add r1.xyz, -r1.xyzx, v1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
sqrt r2.x, r1.w
mul r2.y, r2.x, v1.w
lt r2.z, l(0.990000), r2.y
discard_nz r2.z
mul r2.y, r2.y, r2.y
mad r2.y, -r2.y, r2.y, l(1.000000)
mul r2.y, r2.y, r2.y
mad r1.w, r1.w, v2.w, l(1.000000)
div r1.w, r2.y, r1.w
ftou r2.yz, v0.xxyx
utof r2.yz, r2.yyzy
ftoi r3.xy, r2.yzyy
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.yzw, r3.xyzw, t1.wxyz
ld_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyzw, t2.xyzw
add r0.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
div r1.xyz, r1.xyzx, r2.xxxx
dp3 r0.x, r1.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
log r0.yzw, r2.yyzw
mul r0.yzw, r0.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
exp r0.yzw, r0.yyzw
mul r0.yzw, r0.yyzw, v2.xxyz
mul r0.x, r1.w, r0.x
mul o0.xyz, r0.xxxx, r0.yzwy
mov o0.w, l(1.000000)
ret 
// Approximately 41 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
