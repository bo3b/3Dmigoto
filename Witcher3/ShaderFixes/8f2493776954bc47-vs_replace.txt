//HUD
cbuffer Constants : register(b0)
{
  float4 vfuniforms[144] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

#include <hud.hlsl>

void main(
  float4 v0 : COLOR0,
  float4 v1 : SV_Position0,
  uint v2 : SV_InstanceID0,
  out float4 o0 : COLOR0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float2 o3 : TEXCOORD2,
  out float4 o4 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xyzw = v0.xyzw;
  r0.x = (int)v2.x * 6;
  r0.y = mad((int)v2.x, 6, 1);
  r0.xy = r0.xy;
  r0.xy = float2(1.000000e-001,1.000000e-001) + r0.xy;
  r0.xy = (uint2)r0.xy;
  o2.xyzw = vfuniforms[r0.y].xyzw;
  o1.xyzw = vfuniforms[r0.x].xyzw;
  r0.xyzw = mad((int4)v2.xxxx, int4(6,6,6,6), int4(2,2,4,4));
  r0.xyzw = r0.xyzw;
  r0.xyzw = float4(1.000000e-001,1.100000e+000,1.000000e-001,1.100000e+000) + r0.xyzw;
  r0.xyzw = (uint4)r0.xyzw;
  o3.x = dot(v1.xyzw, vfuniforms[r0.z].xyzw);
  o3.y = dot(v1.xyzw, vfuniforms[r0.w].xyzw);
  o4.x = dot(v1.xyzw, vfuniforms[r0.x].xyzw);
  o4.y = dot(v1.xyzw, vfuniforms[r0.y].xyzw);
  o4.zw = float2(0.000000e+000,1.000000e+000);
  
float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (params.z >= 1.0)
{
	o4.x -= stereo.x* ( o4.z - stereo.y);
}
else
{
	o4.x += stereo.x* params.x;
}
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//
// Buffer Definitions: 
//
// cbuffer Constants
// {
//
//   float4 vfuniforms[144];            // Offset:    0 Size:  2304
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Constants                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// SV_Position              0   xyzw        1     NONE   float   xyzw
// SV_InstanceID            0   x           2   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xy          3     NONE   float   xy  
// SV_Position              0   xyzw        4      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[144], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input_sgv v2.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output_siv o4.xyzw, position
dcl_temps 1
mov o0.xyzw, v0.xyzw
imul null, r0.x, v2.x, l(6)
imad r0.y, v2.x, l(6), l(1)
utof r0.xy, r0.xyxx
add r0.xy, r0.xyxx, l(0.100000, 0.100000, 0.000000, 0.000000)
ftou r0.xy, r0.xyxx
mov o2.xyzw, cb0[r0.y + 0].xyzw
mov o1.xyzw, cb0[r0.x + 0].xyzw
imad r0.xyzw, v2.xxxx, l(6, 6, 6, 6), l(2, 2, 4, 4)
utof r0.xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, l(0.100000, 1.100000, 0.100000, 1.100000)
ftou r0.xyzw, r0.xyzw
dp4 o3.x, v1.xyzw, cb0[r0.z + 0].xyzw
dp4 o3.y, v1.xyzw, cb0[r0.w + 0].xyzw
dp4 o4.x, v1.xyzw, cb0[r0.x + 0].xyzw
dp4 o4.y, v1.xyzw, cb0[r0.y + 0].xyzw
mov o4.zw, l(0,0,0,1.000000)
ret 
// Approximately 18 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
