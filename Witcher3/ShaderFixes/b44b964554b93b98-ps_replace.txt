// Rain spots - Helifax 1.21

Texture2D<float4> t24 : register(t24);

Texture2D<float4> t15 : register(t15);

Texture2D<float4> t6 : register(t6);

Texture2DArray<float4> t4 : register(t4);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s0_s : register(s0);

cbuffer cb13 : register(b13)
{
  float4 cb13[35];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[12];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

    
float4 stereo = StereoParams.Load(0);  
  
//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;

//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse  
  
  
  r0.xy = (uint2)v0.xy;
  r1.xyz = t0.Sample(s0_s, v1.xy).xyz;
  r0.zw = float2(0,0);
  r0.z = t15.Load(r0.xyz).x;
  r2.xyzw = cb12[211].xyzw * v0.yyyy;
  r2.xyzw = cb12[210].xyzw * v0.xxxx + r2.xyzw;
  r2.xyzw = cb12[212].xyzw * r0.zzzz + r2.xyzw;
  r2.xyzw = cb12[213].xyzw + r2.xyzw;
  r2.xyz = r2.zxy / r2.www;
  
float4 r20, r21;
r20.xyz = r2.yzx;  // Order is weird, guessed from above assignment
r20.w = 1.0;

r21.xyzw = cb12[1].xyzw * r20.xxxx;
r21.xyzw = cb12[2].xyzw * r20.yyyy + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = cb12[9].xyzw * r21.xxxx;
r20.xyzw = cb12[10].xyzw * r21.yyyy + r20.xyzw;
r20.xyzw = cb12[11].xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = cb12[12].xyzw * r21.wwww + r20.xyzw;
r2.xyz = r20.zxy / r20.www;  // Restore weird order  
  
  r3.xyz = -cb1[8].xyz + r2.yzx;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = sqrt(r0.w);
  r0.w = 40 < r0.w;
  r3.xy = (int2)r0.xy ^ int2(2,2);
  r3.zw = max((int2)-r0.xy, (int2)r0.xy);
  r3.zw = (uint2)r3.zw >> int2(1,1);
  r4.xy = -(int2)r3.zw;
  r3.xy = (int2)r3.xy & int2(0,0);
  r3.xy = r3.xy ? r4.xy : r3.zw;
  r3.zw = float2(0,0);
  r3.xy = t24.Load(r3.xyz).xy;
  r4.xyz = -cb12[0].xyz + r2.yzx;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = sqrt(r1.w);
  r5.x = cb12[1].z;
  r5.y = cb12[2].z;
  r5.z = cb12[3].z;
  r3.z = dot(r5.xyz, r4.xyz);
  r3.w = 1 / cb12[21].y;
  r3.w = r3.w * r1.w;
  r3.z = r3.w / r3.z;
  r3.z = -r3.z + r1.w;
  r3.z = saturate(cb13[33].w * r3.z);
  r3.z = cb13[33].z * r3.z;
  r3.z = max(0.00100000005, r3.z);
  r1.w = r1.w / cb13[34].z;
  r3.w = r3.x < r3.y;
  if (r3.w != 0) {
    r3.w = r1.w < r3.x;
    r4.x = r3.y < r1.w;
    r4.y = cb13[34].z * r3.x + -cb13[34].x;
    r4.y = saturate(-r4.y * cb13[34].y + 1);
    r4.z = r1.w + -r3.x;
    r4.z = cb13[34].z * r4.z;
    r4.z = saturate(r4.z / r3.z);
    r5.y = r4.y * r4.z;
    r3.w = (int)r3.w | (int)r4.x;
    r5.x = 1;
    r4.xy = r3.ww ? float2(0,1) : r5.xy;
  } else {
    r3.w = r3.y < r3.x;
    r4.z = r1.w < r3.y;
    r4.w = r3.x < r1.w;
    r3.x = cb13[34].z * r3.x + -cb13[34].x;
    r5.y = saturate(-r3.x * cb13[34].y + 1);
    r1.w = r1.w + -r3.y;
    r1.w = cb13[34].z * r1.w;
    r1.w = saturate(r1.w / r3.z);
    r5.w = 1 + -r1.w;
    r5.xz = float2(1,1);
    r3.xy = r4.ww ? r5.xy : r5.zw;
    r3.xy = r4.zz ? float2(1,1) : r3.xy;
    r4.xy = r3.ww ? r3.xy : float2(0,1);
  }
  r3.x = -r4.y * r4.x + 1;
  r4.xyzw = (uint4)r0.xyxy;
  r5.xyzw = float4(4.5,0,-4.5,0) + r4.zwzw;
  r6.xyzw = (uint4)r5.zwxy;
  r7.xy = r6.zw;
  r7.zw = float2(0,0);
  r0.x = t15.Load(r7.xyz).x;
  r7.xyzw = cb12[211].xyzw * r5.yyyy;
  r7.xyzw = cb12[210].xyzw * r5.xxxx + r7.xyzw;
  r7.xyzw = cb12[212].xyzw * r0.xxxx + r7.xyzw;
  r7.xyzw = cb12[213].xyzw + r7.xyzw;
  r7.xyz = r7.zxy / r7.www;
  r6.zw = float2(0,0);
  r0.x = t15.Load(r6.xyz).x;
  r6.xyzw = cb12[211].xyzw * r5.wwww;
  r5.xyzw = cb12[210].xyzw * r5.zzzz + r6.xyzw;
  r5.xyzw = cb12[212].xyzw * r0.xxxx + r5.xyzw;
  r5.xyzw = cb12[213].xyzw + r5.xyzw;
  r5.xyz = r5.zxy / r5.www;
  r4.xyzw = float4(0,4.5,0,-4.5) + r4.xyzw;
  r6.xyzw = (uint4)r4.zwxy;
  r8.xy = r6.zw;
  r8.zw = float2(0,0);
  r0.x = t15.Load(r8.xyz).x;
  r8.xyzw = cb12[211].xyzw * r4.yyyy;
  r8.xyzw = cb12[210].xyzw * r4.xxxx + r8.xyzw;
  r8.xyzw = cb12[212].xyzw * r0.xxxx + r8.xyzw;
  r8.xyzw = cb12[213].xyzw + r8.xyzw;
  r8.xyz = r8.yzx / r8.www;
  r6.zw = float2(0,0);
  r0.x = t15.Load(r6.xyz).x;
  r6.xyzw = cb12[211].xyzw * r4.wwww;
  r4.xyzw = cb12[210].xyzw * r4.zzzz + r6.xyzw;
  r4.xyzw = cb12[212].xyzw * r0.xxxx + r4.xyzw;
  r4.xyzw = cb12[213].xyzw + r4.xyzw;
  r4.xyz = r4.yzx / r4.www;
  r5.xyz = r7.xyz + -r5.xyz;
  r4.xyz = r4.xyz + -r8.xyz;
  r6.xyz = r5.xyz * r4.xyz;
  r4.xyz = r5.zxy * r4.yzx + -r6.xyz;
  r0.x = dot(r4.xyz, r4.xyz);
  r0.x = rsqrt(r0.x);
  r4.xyz = r4.xyz * r0.xxx;
  r0.xy = float2(0.699999988,-0.600000024) < r4.zz;
  r4.zw = float2(5,5) * abs(r4.yx);
  r4.zw = trunc(r4.zw);
  r4.zw = float2(0.200000003,0.200000003) * r4.zw;
  r4.zw = rsqrt(r4.zw);
  r4.zw = float2(1,1) / r4.zw;
  r1.w = r4.w * r2.z;
  r3.w = r4.x * r4.y;
  r3.w = 0 < r3.w;
  r1.w = r3.w ? -r1.w : r1.w;
  r3.y = r2.y * r4.z + r1.w;
  r3.z = r2.x;
  r4.xyz = r0.yyy ? r3.xyz : 0;
  r2.x = r3.x;
  r2.w = 0;
  r4.w = 1;
  r3.xyzw = r0.xxxx ? r2.xyzw : r4.xyzw;
  r4.xy = r3.yz + r3.yz;
  r5.xz = float2(0,0);
  r5.y = cb0[0].x;
  r4.xy = float2(1.20000005,0.0780000016) * r5.xy + r4.xy;
  r6.xy = r2.yz + r2.yz;
  r6.z = 1;
  r6.xyzw = t4.Sample(s4_s, r6.xyz).xyzw;
  r2.yzw = float3(0.0500000007,0.0500000007,0.100000001) * r4.xyx;
  r7.xyw = cb0[0].xxx * float3(0.00324999983,0.0324999988,0.0519999973) + r2.wyz;
  r7.z = 0;
  r0.y = t4.Sample(s4_s, r7.ywz).z;
  r1.w = 0.0129999993 * cb0[0].x;
  r7.y = r4.y * 0.0199999996 + r1.w;
  r1.w = t4.Sample(s4_s, r7.xyz).z;
  r2.yz = float2(0.0199999996,0.0199999996) * r3.yz;
  r3.yz = r2.yz >= -r2.yz;
  r2.yz = frac(abs(r2.yz));
  r2.yz = r3.yz ? r2.yz : -r2.yz;
  r2.yz = float2(100,100) * r2.yz;
  r2.yz = floor(r2.yz);
  r2.yz = float2(0.00999999978,0.00999999978) * r2.yz;
  r2.y = dot(r2.yz, float2(12.9898005,78.2330017));
  r2.y = sin(r2.y);
  r2.y = 43758.5469 * r2.y;
  r2.y = frac(r2.y);
  r2.y = cb0[0].x * 0.5 + r2.y;
  r2.y = frac(r2.y);
  r2.y = r6.w + -r2.y;
  r2.z = r2.y * r2.y;
  r2.z = r2.z * -400 + 1;
  r2.y = 0.99000001 + r2.y;
  r2.y = r2.y * r2.y;
  r2.y = r2.y * -400 + 1;
  r2.yz = max(float2(0,0), r2.yz);
  r2.y = r2.z + r2.y;
  r2.y = r2.y * r6.z;
  r2.y = r2.y * r0.z;
  r2.z = 0.519999981 + r0.y;
  r2.z = 3 * r2.z;
  r2.z = floor(r2.z);
  r2.yz = saturate(float2(30,0.333333343) * r2.yz);
  r2.y = r2.y * r2.z;
  r2.zw = float2(-0.5,-0.5) + r6.xy;
  r2.zw = r2.zw * r2.yy;
  r6.xy = r2.zw + r2.zw;
  r1.w = r1.w * 0.0950000286 + 0.985000014;
  r5.w = 0.0649999976 * cb0[0].x;
  r4.xy = r4.xy * r1.ww + r5.zw;
  r4.z = 0;
  r4.xyz = t4.Sample(s4_s, r4.xyz).xyw;
  r6.z = 1;
  r1.w = dot(r6.xyz, r6.xyz);
  r1.w = rsqrt(r1.w);
  r2.zw = r6.xy * r1.ww;
  r5.xyz = float3(-0.5,-0.5,-0.5) + r4.xyz;
  r5.xyw = float3(2,2,2) * r5.xyz;
  r5.z = -1;
  r1.w = dot(r5.xyzw, r5.xyzw);
  r1.w = rsqrt(r1.w);
  r3.yz = r5.xy * r1.ww;
  r0.z = r0.z * cb12[22].x + cb12[22].y;
  r0.z = 1 + -r0.z;
  r2.zw = r2.zw * r0.zz;
  r4.xy = r4.xy * r0.yy;
  r3.yz = r4.xy * r3.yz;
  r3.yz = r3.yz * r0.zz;
  r2.zw = r2.zw * float2(0.200000003,0.200000003) + v1.xy;
  r4.xyw = t0.Sample(s0_s, r2.zw).xyz;
  r2.zw = r3.yz * float2(0.379999995,0.379999995) + v1.xy;
  r5.xyz = t0.Sample(s0_s, r2.zw).xyz;
  if (r0.w != 0) {
    o0.xyz = r1.xyz;
    o0.w = 1;
    return;
  }
  r0.z = r2.x < 0.00999999978;
  if (r0.z != 0) {
    o0.xyz = r1.xyz;
    o0.w = 1;
    return;
  }
  r0.z = saturate(cb3[2].x);
  r0.w = t6.SampleLevel(s0_s, v1.xy, 0).x;
  r0.w = 1 + -r0.w;
  r0.z = r0.z * r0.w;
  r0.w = r0.z < 0.00999999978;
  if (r0.w != 0) {
    o0.xyz = r1.xyz;
    o0.w = 1;
    return;
  }
  r0.x = r0.x ? 1.000000 : 0;
  r2.xzw = r4.xyw * float3(1.60000002,1.60000002,1.60000002) + float3(0.0199999996,0.0199999996,0.0199999996);
  r2.xzw = r2.xzw + -r4.xyw;
  r2.xyz = r2.yyy * r2.xzw + r4.xyw;
  r4.xyw = r5.xyz * float3(6.19999981,6.19999981,6.19999981) + float3(0.0199999996,0.0199999996,0.0199999996);
  r0.y = r4.z * r0.y;
  r4.xyz = r4.xyw + -r5.xyz;
  r4.xyz = r0.yyy * r4.xyz + r5.xyz;
  r0.y = r0.z * r3.w;
  r3.yzw = r4.xyz + -r1.xyz;
  r3.yzw = r0.yyy * r3.yzw + r1.xyz;
  r0.x = r0.z * r0.x;
  r0.yzw = -r3.yzw + r2.xyz;
  r0.xyz = r0.xxx * r0.yzw + r3.yzw;
  r0.w = saturate(1 + cb0[11].w);
  r0.w = r3.x * r0.w;
  r0.xyz = r0.xyz + -r1.xyz;
  o0.xyz = r0.www * r0.xyz + r1.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.1 on Mon May 30 16:44:55 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[12], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb13[35], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2darray (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 9
ftou r0.xy, v0.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t15.yzxw
mul r2.xyzw, v0.yyyy, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, v0.xxxx, r2.xyzw
mad r2.xyzw, cb12[212].xyzw, r0.zzzz, r2.xyzw
add r2.xyzw, r2.xyzw, cb12[213].xyzw
div r2.xyz, r2.zxyz, r2.wwww
add r3.xyz, r2.yzxy, -cb1[8].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
lt r0.w, l(40.000000), r0.w
xor r3.xy, r0.xyxx, l(2, 2, 0, 0)
imax r3.zw, r0.xxxy, -r0.xxxy
ushr r3.zw, r3.zzzw, l(0, 0, 1, 1)
ineg r4.xy, r3.zwzz
and r3.xy, r3.xyxx, l(0x80000000, 0x80000000, 0, 0)
movc r3.xy, r3.xyxx, r4.xyxx, r3.zwzz
mov r3.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyzw, t24.xyzw
add r4.xyz, r2.yzxy, -cb12[0].xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
sqrt r1.w, r1.w
mov r5.x, cb12[1].z
mov r5.y, cb12[2].z
mov r5.z, cb12[3].z
dp3 r3.z, r5.xyzx, r4.xyzx
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb12[21].y
mul r3.w, r1.w, r3.w
div r3.z, r3.w, r3.z
add r3.z, r1.w, -r3.z
mul_sat r3.z, r3.z, cb13[33].w
mul r3.z, r3.z, cb13[33].z
max r3.z, r3.z, l(0.001000)
div r1.w, r1.w, cb13[34].z
lt r3.w, r3.x, r3.y
if_nz r3.w
  lt r3.w, r1.w, r3.x
  lt r4.x, r3.y, r1.w
  mad r4.y, cb13[34].z, r3.x, -cb13[34].x
  mad_sat r4.y, -r4.y, cb13[34].y, l(1.000000)
  add r4.z, -r3.x, r1.w
  mul r4.z, r4.z, cb13[34].z
  div_sat r4.z, r4.z, r3.z
  mul r5.y, r4.z, r4.y
  or r3.w, r3.w, r4.x
  mov r5.x, l(1.000000)
  movc r4.xy, r3.wwww, l(0,1.000000,0,0), r5.xyxx
else 
  lt r3.w, r3.y, r3.x
  lt r4.z, r1.w, r3.y
  lt r4.w, r3.x, r1.w
  mad r3.x, cb13[34].z, r3.x, -cb13[34].x
  mad_sat r5.y, -r3.x, cb13[34].y, l(1.000000)
  add r1.w, -r3.y, r1.w
  mul r1.w, r1.w, cb13[34].z
  div_sat r1.w, r1.w, r3.z
  add r5.w, -r1.w, l(1.000000)
  mov r5.xz, l(1.000000,0,1.000000,0)
  movc r3.xy, r4.wwww, r5.xyxx, r5.zwzz
  movc r3.xy, r4.zzzz, l(1.000000,1.000000,0,0), r3.xyxx
  movc r4.xy, r3.wwww, r3.xyxx, l(0,1.000000,0,0)
endif 
mad r3.x, -r4.y, r4.x, l(1.000000)
utof r4.xyzw, r0.xyxy
add r5.xyzw, r4.zwzw, l(4.500000, 0.000000, -4.500000, 0.000000)
ftou r6.xyzw, r5.zwxy
mov r7.xy, r6.zwzz
mov r7.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r7.xyzw, t15.xyzw
mul r7.xyzw, r5.yyyy, cb12[211].xyzw
mad r7.xyzw, cb12[210].xyzw, r5.xxxx, r7.xyzw
mad r7.xyzw, cb12[212].xyzw, r0.xxxx, r7.xyzw
add r7.xyzw, r7.xyzw, cb12[213].xyzw
div r7.xyz, r7.zxyz, r7.wwww
mov r6.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r6.xyzw, t15.xyzw
mul r6.xyzw, r5.wwww, cb12[211].xyzw
mad r5.xyzw, cb12[210].xyzw, r5.zzzz, r6.xyzw
mad r5.xyzw, cb12[212].xyzw, r0.xxxx, r5.xyzw
add r5.xyzw, r5.xyzw, cb12[213].xyzw
div r5.xyz, r5.zxyz, r5.wwww
add r4.xyzw, r4.xyzw, l(0.000000, 4.500000, 0.000000, -4.500000)
ftou r6.xyzw, r4.zwxy
mov r8.xy, r6.zwzz
mov r8.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r8.xyzw, t15.xyzw
mul r8.xyzw, r4.yyyy, cb12[211].xyzw
mad r8.xyzw, cb12[210].xyzw, r4.xxxx, r8.xyzw
mad r8.xyzw, cb12[212].xyzw, r0.xxxx, r8.xyzw
add r8.xyzw, r8.xyzw, cb12[213].xyzw
div r8.xyz, r8.yzxy, r8.wwww
mov r6.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r6.xyzw, t15.xyzw
mul r6.xyzw, r4.wwww, cb12[211].xyzw
mad r4.xyzw, cb12[210].xyzw, r4.zzzz, r6.xyzw
mad r4.xyzw, cb12[212].xyzw, r0.xxxx, r4.xyzw
add r4.xyzw, r4.xyzw, cb12[213].xyzw
div r4.xyz, r4.yzxy, r4.wwww
add r5.xyz, -r5.xyzx, r7.xyzx
add r4.xyz, -r8.xyzx, r4.xyzx
mul r6.xyz, r4.xyzx, r5.xyzx
mad r4.xyz, r5.zxyz, r4.yzxy, -r6.xyzx
dp3 r0.x, r4.xyzx, r4.xyzx
rsq r0.x, r0.x
mul r4.xyz, r0.xxxx, r4.xyzx
lt r0.xy, l(0.700000, -0.600000, 0.000000, 0.000000), r4.zzzz
mul r4.zw, |r4.yyyx|, l(0.000000, 0.000000, 5.000000, 5.000000)
round_z r4.zw, r4.zzzw
mul r4.zw, r4.zzzw, l(0.000000, 0.000000, 0.200000, 0.200000)
rsq r4.zw, r4.zzzw
div r4.zw, l(1.000000, 1.000000, 1.000000, 1.000000), r4.zzzw
mul r1.w, r2.z, r4.w
mul r3.w, r4.y, r4.x
lt r3.w, l(0.000000), r3.w
movc r1.w, r3.w, -r1.w, r1.w
mad r3.y, r2.y, r4.z, r1.w
mov r3.z, r2.x
and r4.xyz, r0.yyyy, r3.xyzx
mov r2.x, r3.x
mov r2.w, l(0)
mov r4.w, l(1.000000)
movc r3.xyzw, r0.xxxx, r2.xyzw, r4.xyzw
add r4.xy, r3.yzyy, r3.yzyy
mov r5.xz, l(0,0,0,0)
mov r5.y, cb0[0].x
mad r4.xy, l(1.200000, 0.078000, 0.000000, 0.000000), r5.xyxx, r4.xyxx
add r6.xy, r2.yzyy, r2.yzyy
mov r6.z, l(1.000000)
sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t4.xyzw, s4
mul r2.yzw, r4.xxyx, l(0.000000, 0.050000, 0.050000, 0.100000)
mad r7.xyw, cb0[0].xxxx, l(0.003250, 0.032500, 0.000000, 0.052000), r2.wywz
mov r7.z, l(0)
sample_indexable(texture2darray)(float,float,float,float) r0.y, r7.ywzy, t4.xzyw, s4
mul r1.w, cb0[0].x, l(0.013000)
mad r7.y, r4.y, l(0.020000), r1.w
sample_indexable(texture2darray)(float,float,float,float) r1.w, r7.xyzx, t4.xywz, s4
mul r2.yz, r3.yyzy, l(0.000000, 0.020000, 0.020000, 0.000000)
ge r3.yz, r2.yyzy, -r2.yyzy
frc r2.yz, |r2.yyzy|
movc r2.yz, r3.yyzy, r2.yyzy, -r2.yyzy
mul r2.yz, r2.yyzy, l(0.000000, 100.000000, 100.000000, 0.000000)
round_ni r2.yz, r2.yyzy
mul r2.yz, r2.yyzy, l(0.000000, 0.010000, 0.010000, 0.000000)
dp2 r2.y, r2.yzyy, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r2.y, null, r2.y
mul r2.y, r2.y, l(43758.546875)
frc r2.y, r2.y
mad r2.y, cb0[0].x, l(0.500000), r2.y
frc r2.y, r2.y
add r2.y, -r2.y, r6.w
mul r2.z, r2.y, r2.y
mad r2.z, r2.z, l(-400.000000), l(1.000000)
add r2.y, r2.y, l(0.990000)
mul r2.y, r2.y, r2.y
mad r2.y, r2.y, l(-400.000000), l(1.000000)
max r2.yz, r2.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
add r2.y, r2.y, r2.z
mul r2.y, r6.z, r2.y
mul r2.y, r0.z, r2.y
add r2.z, r0.y, l(0.520000)
mul r2.z, r2.z, l(3.000000)
round_ni r2.z, r2.z
mul_sat r2.yz, r2.yyzy, l(0.000000, 30.000000, 0.333333, 0.000000)
mul r2.y, r2.z, r2.y
add r2.zw, r6.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r2.zw, r2.yyyy, r2.zzzw
add r6.xy, r2.zwzz, r2.zwzz
mad r1.w, r1.w, l(0.095000), l(0.985000)
mul r5.w, cb0[0].x, l(0.065000)
mad r4.xy, r4.xyxx, r1.wwww, r5.zwzz
mov r4.z, l(0)
sample_indexable(texture2darray)(float,float,float,float) r4.xyz, r4.xyzx, t4.xywz, s4
mov r6.z, l(1.000000)
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r2.zw, r1.wwww, r6.xxxy
add r5.xyz, r4.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mul r5.xyw, r5.xyxz, l(2.000000, 2.000000, 0.000000, 2.000000)
mov r5.z, l(-1.000000)
dp4 r1.w, r5.xyzw, r5.xyzw
rsq r1.w, r1.w
mul r3.yz, r1.wwww, r5.xxyx
mad r0.z, r0.z, cb12[22].x, cb12[22].y
add r0.z, -r0.z, l(1.000000)
mul r2.zw, r0.zzzz, r2.zzzw
mul r4.xy, r0.yyyy, r4.xyxx
mul r3.yz, r3.yyzy, r4.xxyx
mul r3.yz, r0.zzzz, r3.yyzy
mad r2.zw, r2.zzzw, l(0.000000, 0.000000, 0.200000, 0.200000), v1.xxxy
sample_indexable(texture2d)(float,float,float,float) r4.xyw, r2.zwzz, t0.xywz, s0
mad r2.zw, r3.yyyz, l(0.000000, 0.000000, 0.380000, 0.380000), v1.xxxy
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r2.zwzz, t0.xyzw, s0
if_nz r0.w
  mov o0.xyz, r1.xyzx
  mov o0.w, l(1.000000)
  ret 
endif 
lt r0.z, r2.x, l(0.010000)
if_nz r0.z
  mov o0.xyz, r1.xyzx
  mov o0.w, l(1.000000)
  ret 
endif 
mov_sat r0.z, cb3[2].x
sample_l_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t6.yzwx, s0, l(0.000000)
add r0.w, -r0.w, l(1.000000)
mul r0.z, r0.w, r0.z
lt r0.w, r0.z, l(0.010000)
if_nz r0.w
  mov o0.xyz, r1.xyzx
  mov o0.w, l(1.000000)
  ret 
endif 
and r0.x, r0.x, l(0x3f800000)
mad r2.xzw, r4.xxyw, l(1.600000, 0.000000, 1.600000, 1.600000), l(0.020000, 0.000000, 0.020000, 0.020000)
add r2.xzw, -r4.xxyw, r2.xxzw
mad r2.xyz, r2.yyyy, r2.xzwx, r4.xywx
mad r4.xyw, r5.xyxz, l(6.200000, 6.200000, 0.000000, 6.200000), l(0.020000, 0.020000, 0.000000, 0.020000)
mul r0.y, r0.y, r4.z
add r4.xyz, -r5.xyzx, r4.xywx
mad r4.xyz, r0.yyyy, r4.xyzx, r5.xyzx
mul r0.y, r3.w, r0.z
add r3.yzw, -r1.xxyz, r4.xxyz
mad r3.yzw, r0.yyyy, r3.yyzw, r1.xxyz
mul r0.x, r0.x, r0.z
add r0.yzw, r2.xxyz, -r3.yyzw
mad r0.xyz, r0.xxxx, r0.yzwy, r3.yzwy
add_sat r0.w, cb0[11].w, l(1.000000)
mul r0.w, r0.w, r3.x
add r0.xyz, -r1.xyzx, r0.xyzx
mad o0.xyz, r0.wwww, r0.xyzx, r1.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
