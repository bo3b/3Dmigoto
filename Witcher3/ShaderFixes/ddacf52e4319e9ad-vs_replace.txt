//HUD MENUS
cbuffer Constants : register(b0)
{
  float4 vfuniforms[96] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

#include <hud.hlsl>

void main(
  float2 v0 : TEXCOORD0,
  float4 v1 : SV_Position0,
  uint v2 : COLOR1,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float2 o2 : TEXCOORD2,
  out float4 o3 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = (uint)v2.x << 2;
  r0.x = r0.x;
  r0.x = 1.000000015e-001 + r0.x;
  r0.x = (uint)r0.x;
  o0.xyzw = vfuniforms[r0.x].xyzw;
  bitmask.x = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.x = (((uint)v2.x << 2) & bitmask.x) | ((uint)2 & ~bitmask.x);
  bitmask.y = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.y = (((uint)v2.x << 2) & bitmask.y) | ((uint)2 & ~bitmask.y);
  bitmask.z = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.z = (((uint)v2.x << 2) & bitmask.z) | ((uint)1 & ~bitmask.z);
  r0.xyz = r0.xyz;
  r0.xyz = float3(1.000000e-001,1.100000e+000,1.000000e-001) + r0.xyz;
  r0.xyz = (uint3)r0.xyz;
  o1.xyzw = vfuniforms[r0.z].xyzw;
  o2.xy = v0.xy;
  o3.x = dot(v1.xyzw, vfuniforms[r0.x].xyzw);
  o3.y = dot(v1.xyzw, vfuniforms[r0.y].xyzw);
  o3.zw = float2(0.000000e+000,1.000000e+000);
  
float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (params.z >= 1.0)
{
	o3.x -= stereo.x* ( o3.z - stereo.y);
}
else
{
	o3.x += stereo.x* params.x;
}
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//
// Buffer Definitions: 
//
// cbuffer Constants
// {
//
//   float4 vfuniforms[96];             // Offset:    0 Size:  1536
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Constants                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// SV_Position              0   xyzw        1     NONE   float   xyzw
// COLOR                    1   x           2     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xy          2     NONE   float   xy  
// SV_Position              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[96], dynamicIndexed
dcl_input v0.xy
dcl_input v1.xyzw
dcl_input v2.x
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output_siv o3.xyzw, position
dcl_temps 1
ishl r0.x, v2.x, l(2)
utof r0.x, r0.x
add r0.x, r0.x, l(0.100000)
ftou r0.x, r0.x
mov o0.xyzw, cb0[r0.x + 0].xyzw
bfi r0.xyz, l(30, 30, 30, 0), l(2, 2, 2, 0), v2.xxxx, l(2, 2, 1, 0)
utof r0.xyz, r0.xyzx
add r0.xyz, r0.xyzx, l(0.100000, 1.100000, 0.100000, 0.000000)
ftou r0.xyz, r0.xyzx
mov o1.xyzw, cb0[r0.z + 0].xyzw
mov o2.xy, v0.xyxx
dp4 o3.x, v1.xyzw, cb0[r0.x + 0].xyzw
dp4 o3.y, v1.xyzw, cb0[r0.y + 0].xyzw
mov o3.zw, l(0,0,0,1.000000)
ret 
// Approximately 15 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 