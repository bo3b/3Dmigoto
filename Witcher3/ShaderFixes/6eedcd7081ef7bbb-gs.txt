// Hairworks geometry shader. Fix for glitch at depth W==1

//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.1.23 on Fri Jun 26 00:03:17 2015
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   struct TessellationConstantBuffer
//   {
//       
//       row_major float4x4 viewProjection;// Offset:    0
//       row_major float4x4 viewMatrix; // Offset:   64
//       row_major float4x4 inverseViewMatrix;// Offset:  128
//       row_major float4x4 modelToWorld;// Offset:  192
//       row_major float4x4 cullSphereInvTransform;// Offset:  256
//       
//       struct HairTessellationMaterial
//       {
//           
//           float width;               // Offset:  320
//           float widthNoiseScale;     // Offset:  324
//           float rootWidthScale;      // Offset:  328
//           float tipWidthScale;       // Offset:  332
//           float density;             // Offset:  336
//           float clumpScale;          // Offset:  340
//           float clumpNoise;          // Offset:  344
//           float clumpRoundness;      // Offset:  348
//           float lengthNoise;         // Offset:  352
//           float lengthScale;         // Offset:  356
//           float waveScale;           // Offset:  360
//           float waveFreq;            // Offset:  364
//           float waveScaleNoise;      // Offset:  368
//           float waveFreqNoise;       // Offset:  372
//           float waveCutoff;          // Offset:  376
//           float waveClump;           // Offset:  380
//           float waveStrand;          // Offset:  384
//           float volumeSpread;        // Offset:  388
//           float __reserved2__;       // Offset:  392
//           float __reserved3__;       // Offset:  396
//
//       } material;                    // Offset:  320
//       uint shaderMask;               // Offset:  400
//       int depthFuncLess;             // Offset:  404
//       float densityPass;             // Offset:  408
//       int usePixelDensity;           // Offset:  412
//       float useBackfaceCulling;      // Offset:  416
//       float backfaceCullingThreshold;// Offset:  420
//       int useViewfrustrumCulling;    // Offset:  424
//       int useCullSphere;             // Offset:  428
//       int vertexClumping;            // Offset:  432
//       int useDensityTexture;         // Offset:  436
//       int useRootWidthTexture;       // Offset:  440
//       int useTipWidthTexture;        // Offset:  444
//       int useClumpScaleTexture;      // Offset:  448
//       int useClumpNoiseTexture;      // Offset:  452
//       int useClumpRoundnessTexture;  // Offset:  456
//       int useWaveScaleTexture;       // Offset:  460
//       int useWaveFreqTexture;        // Offset:  464
//       int useLengthTexture;          // Offset:  468
//       int strandPointCount;          // Offset:  472
//       int masterCVCount;             // Offset:  476
//       int densityTextureChan;        // Offset:  480
//       int rootWidthTextureChan;      // Offset:  484
//       int tipWidthTextureChan;       // Offset:  488
//       int _reserved3_;               // Offset:  492
//       int clumpScaleTextureChan;     // Offset:  496
//       int clumpNoiseTextureChan;     // Offset:  500
//       int clumpRoundnessTextureChan; // Offset:  504
//       int _reserved4_;               // Offset:  508
//       int waveScaleTextureChan;      // Offset:  512
//       int waveFreqTextureChan;       // Offset:  516
//       int lengthTextureChan;         // Offset:  520
//       int _reserved5_;               // Offset:  524
//
//   } g_buffer;                        // Offset:    0 Size:   528
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbPerFrame                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// Width                    0      w        0     NONE   float      w
// Tangent                  0   xyz         1     NONE   float   xyz 
// SCALPTEX                 0   xy          2     NONE   float   xy  
// HAIRTEX                  0     z         2     NONE   float     z 
// PRIMITIVE_ID             0   x           3     NONE    uint   x   
// COORDS                   0   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COMP_TEX_COORD           0   x           1     NONE   float   x   
// PRIMITIVE_ID             0    y          1     NONE    uint    y  
// COORDS                   0     z         1     NONE   float     z 
// HAIR_TEX                 0   x           2     NONE   float   x   
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[26], immediateIndexed
dcl_input v[2][0].xyz
dcl_input v[2][0].w
dcl_input v[2][1].xyz
dcl_input v[2][2].xy
dcl_input v[2][2].z
dcl_input v[2][3].x
dcl_input v[2][4].xy
dcl_temps 7
dcl_inputprimitive line 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_output o1.y
dcl_output o1.z
dcl_output o2.x
dcl_maxout 4
dcl_resource_texture2d (float,float,float,float) t125
eq r0.x, l(0.000000), v[0][0].w
eq r0.y, l(0.000000), v[1][0].w
and r0.x, r0.y, r0.x
if_nz r0.x
  ret 
endif 
mul r0.x, l(2048.000000), v[0][4].y
round_ni r0.x, r0.x
add r0.x, r0.x, v[0][4].x
movc r0.yzw, cb0[25].yyyy, cb0[10].zzxy, -cb0[10].zzxy
mul r1.xyz, r0.yzwy, v[0][1].yzxy
mad r1.xyz, r0.wyzw, v[0][1].zxyz, -r1.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r2.xyz, r0.yzwy, v[1][1].yzxy
mad r0.yzw, r0.wwyz, v[1][1].zzxy, -r2.xxyz
dp3 r1.w, r0.yzwy, r0.yzwy
rsq r1.w, r1.w
mul r0.yzw, r0.yyzw, r1.wwww
mad r2.xyz, -v[0][0].wwww, r1.xyzx, v[0][0].xyzx
mad r1.xyz, v[0][0].wwww, r1.xyzx, v[0][0].xyzx
mad r3.xyz, -v[1][0].wwww, r0.yzwy, v[1][0].xyzx
mad r0.yzw, v[1][0].wwww, r0.yyzw, v[1][0].xxyz
and r4.xy, cb0[25].xxxx, l(4, 8, 0, 0)
mul r1.w, l(2048.000000), v[0][2].y
round_ni r1.w, r1.w
add r1.w, r1.w, v[0][2].x
movc r1.w, r4.x, r1.w, l(0)
movc r2.w, r4.y, v[0][2].z, l(0)
mul r5.xyzw, r2.yyyy, cb0[1].xyzw
mad r5.xyzw, r2.xxxx, cb0[0].xyzw, r5.xyzw
mad r5.xyzw, r2.zzzz, cb0[2].xyzw, r5.xyzw
add r5.xyzw, r5.xyzw, cb0[3].xyzw

// Hairworks glitches at depth W==1. Calculate the correction for that depth
// here and apply it to any of the below outputs that match that depth.
ld_indexable(texture2d)(float,float,float,float) r6.xyzw, l(0, 0, 0, 0), t125.xyzw
add r6.w, l(1.0), -r6.y
mul r6.w, r6.w, r6.x

eq r6.w, r5.w, l(1.0)
if_nz r6.w
  add r5.x, r5.x, r6.w
endif

mov o0.xyzw, r5.xyzw
mov o1.x, r1.w
mov o1.y, v[0][3].x
mov o1.z, r0.x
mov o2.x, r2.w
emit_stream m0
mul r5.xyzw, r1.yyyy, cb0[1].xyzw
mad r5.xyzw, r1.xxxx, cb0[0].xyzw, r5.xyzw
mad r5.xyzw, r1.zzzz, cb0[2].xyzw, r5.xyzw
add r5.xyzw, r5.xyzw, cb0[3].xyzw

eq r6.w, r5.w, l(1.0)
if_nz r6.w
  add r5.x, r5.x, r6.w
endif

mov o0.xyzw, r5.xyzw
mov o1.x, r1.w
mov o1.y, v[0][3].x
mov o1.z, r0.x
mov o2.x, r2.w
emit_stream m0
movc r1.x, r4.y, v[1][2].z, l(0)
mul r2.xyzw, r3.yyyy, cb0[1].xyzw
mad r2.xyzw, r3.xxxx, cb0[0].xyzw, r2.xyzw
mad r2.xyzw, r3.zzzz, cb0[2].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[3].xyzw

eq r6.w, r2.w, l(1.0)
if_nz r6.w
  add r2.x, r2.x, r6.w
endif

mov o0.xyzw, r2.xyzw
mov o1.x, r1.w
mov o1.y, v[0][3].x
mov o1.z, r0.x
mov o2.x, r1.x
emit_stream m0
mul r2.xyzw, r0.zzzz, cb0[1].xyzw
mad r2.xyzw, r0.yyyy, cb0[0].xyzw, r2.xyzw
mad r2.xyzw, r0.wwww, cb0[2].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb0[3].xyzw

eq r6.w, r2.w, l(1.0)
if_nz r6.w
  add r2.x, r2.x, r6.w
endif

mov o0.xyzw, r2.xyzw
mov o1.x, r1.w
mov o1.y, v[0][3].x
mov o1.z, r0.x
mov o2.x, r1.x
emit_stream m0
cut_stream m0
ret 
// Approximately 73 instruction slots used
