cbuffer cb3 : register(b3)
{
  float4 cb3[1];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[4];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  out float4 o0 : SV_Position0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = abs(v0.y) * -0.0187292993 + 0.0742610022;
  r0.x = r0.x * abs(v0.y) + -0.212114394;
  r0.x = r0.x * abs(v0.y) + 1.57072878;
  r0.y = 1 + -abs(v0.y);
  r0.y = sqrt(r0.y);
  r0.z = r0.x * r0.y;
  r0.z = r0.z * -2 + 3.14159274;
  r0.w = v0.y < -v0.y;
  r0.z = r0.w ? r0.z : 0;
  r0.x = r0.x * r0.y + r0.z;
  r0.x = cb3[0].x * r0.x;
  r0.x = 0.636619747 * r0.x;
  sincos(r0.x, r0.x, r1.x);
  r2.y = r1.x;
  r0.xy = v0.xz * r0.xx;
  r1.y = min(0, r1.x);
  r0.z = dot(v0.xyz, v0.xyz);
  r0.z = sqrt(r0.z);
  r0.w = max(0.00100000005, r0.z);
  r2.xz = r0.xy / r0.ww;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyw = r2.xyz * r0.xxx;
  r0.xyw = r0.zzz * r0.xyw;
  r0.z = 0 < r0.z;
  r1.xz = v0.xz;
  r0.xyz = r0.zzz ? r0.xyw : r1.xyz;
  r0.w = 1;
  r1.x = dot(r0.xyzw, cb2[0].xyzw);
  r1.y = dot(r0.xyzw, cb2[1].xyzw);
  r1.z = dot(r0.xyzw, cb2[2].xyzw);
  r1.w = dot(r0.xyzw, cb2[3].xyzw);
  o0.x = dot(r1.xyzw, cb1[0].xyzw);
  o0.y = dot(r1.xyzw, cb1[1].xyzw);
  o0.z = dot(r1.xyzw, cb1[2].xyzw);
  o0.w = dot(r1.xyzw, cb1[3].xyzw);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.1 on Tue May 31 01:02:29 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_constantbuffer cb3[1], immediateIndexed
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_temps 3
mad r0.x, |v0.y|, l(-0.018729), l(0.074261)
mad r0.x, r0.x, |v0.y|, l(-0.212114)
mad r0.x, r0.x, |v0.y|, l(1.570729)
add r0.y, -|v0.y|, l(1.000000)
sqrt r0.y, r0.y
mul r0.z, r0.y, r0.x
mad r0.z, r0.z, l(-2.000000), l(3.141593)
lt r0.w, v0.y, -v0.y
and r0.z, r0.w, r0.z
mad r0.x, r0.x, r0.y, r0.z
mul r0.x, r0.x, cb3[0].x
mul r0.x, r0.x, l(0.636620)
sincos r0.x, r1.x, r0.x
mov r2.y, r1.x
mul r0.xy, r0.xxxx, v0.xzxx
min r1.y, r1.x, l(0.000000)
dp3 r0.z, v0.xyzx, v0.xyzx
sqrt r0.z, r0.z
max r0.w, r0.z, l(0.001000)
div r2.xz, r0.xxyx, r0.wwww
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyw, r0.xxxx, r2.xyxz
mul r0.xyw, r0.xyxw, r0.zzzz
lt r0.z, l(0.000000), r0.z
mov r1.xz, v0.xxzx
movc r0.xyz, r0.zzzz, r0.xywx, r1.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb2[0].xyzw
dp4 r1.y, r0.xyzw, cb2[1].xyzw
dp4 r1.z, r0.xyzw, cb2[2].xyzw
dp4 r1.w, r0.xyzw, cb2[3].xyzw
dp4 o0.x, r1.xyzw, cb1[0].xyzw
dp4 o0.y, r1.xyzw, cb1[1].xyzw
dp4 o0.z, r1.xyzw, cb1[2].xyzw
dp4 o0.w, r1.xyzw, cb1[3].xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
