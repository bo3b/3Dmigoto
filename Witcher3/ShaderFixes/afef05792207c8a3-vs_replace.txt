// Witcher senses Bubbles - Helifax 1.32
cbuffer cb12 : register(b12)
{
  float4 cb12[193] : packoffset(c0);
}

cbuffer cb2 : register(b2)
{
  float4 cb2[3] : packoffset(c0);
}

cbuffer cb1 : register(b1)
{
  float4 cb1[12] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

#include <hud.hlsl>

void main( 
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float2 v4 : TEXCOORD2,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r0.w = 1;
  r1.x = dot(r0.xyzw, cb2[0].xyzw);
  r1.y = dot(r0.xyzw, cb2[1].xyzw);
  r1.z = dot(r0.xyzw, cb2[2].xyzw);
  r0.x = dot(v2.yx, v3.xy);
  r0.y = v3.y * v2.y;
  r0.y = v3.x * v2.x + -r0.y;
  r0.xzw = cb1[9].xyz * r0.xxx + r1.xyz;
  r0.xyz = cb1[11].xyz * r0.yyy + r0.xzw;
  r1.xyz = -cb1[8].xyz + r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  o2.xyzw = float4(1,1,1,1) / r0.wwww;
  r2.xyz = -cb12[0].xyz + r0.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = sqrt(r1.w);
  r2.xyz = r2.xyz / r1.www;
  r1.w = -cb12[22].z + r1.w;
  r1.w = max(0, r1.w);
  r1.w = min(cb12[42].z, r1.w);
  r2.x = dot(cb12[38].xyz, r2.xyz);
  r2.y = abs(r2.x) * abs(r2.x);
  r2.w = saturate(r1.w * 0.00200000009 + -0.300000012);
  r2.y = r2.y * r2.w;
  r2.w = 0 < r2.x;
  r3.xyz = r2.www ? cb12[39].xyz : cb12[41].xyz;
  r3.xyz = -cb12[40].xyz + r3.xyz;
  r3.xyz = r2.yyy * r3.xyz + cb12[40].xyz;
  r4.xyz = r2.www ? cb12[45].xyz : cb12[47].xyz;
  r4.xyz = -cb12[46].xyz + r4.xyz;
  o0.xyz = r2.yyy * r4.xyz + cb12[46].xyz;
  r2.y = r1.w >= cb12[48].y;
  if (r2.y != 0) {
    r2.y = r2.z * cb12[22].z + cb12[0].z;
    r4.x = r2.z * r1.w;
    r4.y = cb12[43].x * r1.w;
    r2.zw = float2(0.0625,0.0625) * r4.xy;
    r2.x = cb12[42].x + r2.x;
    r3.w = 1 + cb12[42].x;
    r2.x = saturate(r2.x / r3.w);
    r3.w = cb12[43].y + -cb12[43].z;
    r2.x = r2.x * r3.w + cb12[43].z;
    r2.y = cb12[42].y + r2.y;
    r3.w = r2.y * r2.x;
    r2.z = r2.z * r2.x;
    r4.xyzw = r2.zzzz * float4(16,15,14,13) + r3.wwww;
    r4.xyzw = max(float4(0,0,0,0), r4.xyzw);
    r4.xyzw = float4(1,1,1,1) + r4.xyzw;
    r4.xyzw = saturate(r2.wwww / r4.xyzw);
    r4.xyzw = float4(1,1,1,1) + -r4.xyzw;
    r4.x = r4.x * r4.y;
    r4.x = r4.x * r4.z;
    r4.x = r4.x * r4.w;
    r5.xyzw = r2.zzzz * float4(12,11,10,9) + r3.wwww;
    r5.xyzw = max(float4(0,0,0,0), r5.xyzw);
    r5.xyzw = float4(1,1,1,1) + r5.xyzw;
    r5.xyzw = saturate(r2.wwww / r5.xyzw);
    r5.xyzw = float4(1,1,1,1) + -r5.xyzw;
    r4.x = r5.x * r4.x;
    r4.x = r4.x * r5.y;
    r4.x = r4.x * r5.z;
    r4.x = r4.x * r5.w;
    r5.xyzw = r2.zzzz * float4(8,7,6,5) + r3.wwww;
    r5.xyzw = max(float4(0,0,0,0), r5.xyzw);
    r5.xyzw = float4(1,1,1,1) + r5.xyzw;
    r5.xyzw = saturate(r2.wwww / r5.xyzw);
    r5.xyzw = float4(1,1,1,1) + -r5.xyzw;
    r4.x = r5.x * r4.x;
    r4.x = r4.x * r5.y;
    r4.x = r4.x * r5.z;
    r4.x = r4.x * r5.w;
    r4.yz = r2.zz * float2(4,3) + r3.ww;
    r4.yz = max(float2(0,0), r4.yz);
    r4.yz = float2(1,1) + r4.yz;
    r4.yz = saturate(r2.ww / r4.yz);
    r4.yz = float2(1,1) + -r4.yz;
    r4.x = r4.x * r4.y;
    r4.x = r4.x * r4.z;
    r3.w = r2.z * 2 + r3.w;
    r3.w = max(0, r3.w);
    r3.w = 1 + r3.w;
    r3.w = saturate(r2.w / r3.w);
    r3.w = 1 + -r3.w;
    r3.w = r4.x * r3.w;
    r2.x = r2.y * r2.x + r2.z;
    r2.x = max(0, r2.x);
    r2.x = 1 + r2.x;
    r2.x = saturate(r2.w / r2.x);
    r2.x = 1 + -r2.x;
    r2.x = -r3.w * r2.x + 1;
    r1.w = -cb12[48].y + r1.w;
    r1.w = saturate(cb12[48].z * r1.w);
  } else {
    r1.w = 0;
    r2.x = 1;
  }
  r2.x = log2(r2.x);
  r2.y = cb12[42].w * r2.x;
  r2.y = exp2(r2.y);
  r2.y = r2.y * r1.w;
  r2.x = cb12[48].x * r2.x;
  r2.x = exp2(r2.x);
  o0.w = r2.x * r1.w;
  r2.xz = saturate(r2.yy * cb12[189].xz + cb12[189].yw);
  r4.xyz = cb12[188].xyz + -r3.xyz;
  r4.xyz = r2.xxx * r4.xyz + r3.xyz;
  r1.w = -1 + cb12[188].w;
  r1.w = r2.z * r1.w + 1;
  r4.w = saturate(r2.y * r1.w);
  r1.w = 0 < cb12[192].x;
  r2.xz = saturate(r2.yy * cb12[191].xz + cb12[191].yw);
  r5.xyz = cb12[190].xyz + -r3.xyz;
  r3.xyz = r2.xxx * r5.xyz + r3.xyz;
  r2.x = -1 + cb12[190].w;
  r2.x = r2.z * r2.x + 1;
  r3.w = saturate(r2.y * r2.x);
  r2.xyzw = r3.xyzw + -r4.xyzw;
  r2.xyzw = cb12[192].xxxx * r2.xyzw + r4.xyzw;
  o1.xyzw = r1.wwww ? r2.xyzw : r4.xyzw;
  r1.xyz = r1.xyz * r0.www + -r1.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = 1;
  o3.z = dot(r0.xyzw, cb1[6].xyzw);
  o5.x = dot(r0.xyzw, cb1[0].xyzw);
  o5.y = dot(r0.xyzw, cb1[1].xyzw);
  o5.z = dot(r0.xyzw, cb1[2].xyzw);
  o5.w = dot(r0.xyzw, cb1[3].xyzw);
  o4.xyzw = v1.xyzw;
  o3.xy = v4.xy;
    
float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
float depth = world_z_from_depth_buffer(0,0);

o5.x -= stereo.x * (o5.w - stereo.y) ;

if (depth != 0)
{
	o5.x += adjust_from_depth_buffer(0,0);
}
else
	o5.x += stereo.x*(params.x);
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.1 on Mon May 30 16:21:51 2016
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[193];                  // Offset:    0 Size:  3088
//
// }
//
// cbuffer cb2
// {
//
//   float4 cb2[3];                     // Offset:    0 Size:    48
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1[12];                    // Offset:    0 Size:   192
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cb1                               cbuffer      NA          NA    1        1
// cb2                               cbuffer      NA          NA    2        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xy  
// TEXCOORD                 2   xy          4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyz 
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// SV_Position              0   xyzw        5      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[193], immediateIndexed
dcl_constantbuffer cb2[3], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xy
dcl_input v4.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_temps 6
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb2[0].xyzw
dp4 r1.y, r0.xyzw, cb2[1].xyzw
dp4 r1.z, r0.xyzw, cb2[2].xyzw
dp2 r0.x, v2.yxyy, v3.xyxx
mul r0.y, v2.y, v3.y
mad r0.y, v3.x, v2.x, -r0.y
mad r0.xzw, cb1[9].xxyz, r0.xxxx, r1.xxyz
mad r0.xyz, cb1[11].xyzx, r0.yyyy, r0.xzwx
add r1.xyz, r0.xyzx, -cb1[8].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
div o2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.wwww
add r2.xyz, r0.xyzx, -cb12[0].xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
sqrt r1.w, r1.w
div r2.xyz, r2.xyzx, r1.wwww
add r1.w, r1.w, -cb12[22].z
max r1.w, r1.w, l(0.000000)
min r1.w, r1.w, cb12[42].z
dp3 r2.x, cb12[38].xyzx, r2.xyzx
mul r2.y, |r2.x|, |r2.x|
mad_sat r2.w, r1.w, l(0.002000), l(-0.300000)
mul r2.y, r2.w, r2.y
lt r2.w, l(0.000000), r2.x
movc r3.xyz, r2.wwww, cb12[39].xyzx, cb12[41].xyzx
add r3.xyz, r3.xyzx, -cb12[40].xyzx
mad r3.xyz, r2.yyyy, r3.xyzx, cb12[40].xyzx
movc r4.xyz, r2.wwww, cb12[45].xyzx, cb12[47].xyzx
add r4.xyz, r4.xyzx, -cb12[46].xyzx
mad o0.xyz, r2.yyyy, r4.xyzx, cb12[46].xyzx
ge r2.y, r1.w, cb12[48].y
if_nz r2.y
  mad r2.y, r2.z, cb12[22].z, cb12[0].z
  mul r4.x, r1.w, r2.z
  mul r4.y, r1.w, cb12[43].x
  mul r2.zw, r4.xxxy, l(0.000000, 0.000000, 0.062500, 0.062500)
  add r2.x, r2.x, cb12[42].x
  add r3.w, cb12[42].x, l(1.000000)
  div_sat r2.x, r2.x, r3.w
  add r3.w, -cb12[43].z, cb12[43].y
  mad r2.x, r2.x, r3.w, cb12[43].z
  add r2.y, r2.y, cb12[42].y
  mul r3.w, r2.x, r2.y
  mul r2.z, r2.x, r2.z
  mad r4.xyzw, r2.zzzz, l(16.000000, 15.000000, 14.000000, 13.000000), r3.wwww
  max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r4.xyzw, r2.wwww, r4.xyzw
  add r4.xyzw, -r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r4.x, r4.y, r4.x
  mul r4.x, r4.z, r4.x
  mul r4.x, r4.w, r4.x
  mad r5.xyzw, r2.zzzz, l(12.000000, 11.000000, 10.000000, 9.000000), r3.wwww
  max r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r5.xyzw, r2.wwww, r5.xyzw
  add r5.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r4.x, r4.x, r5.x
  mul r4.x, r5.y, r4.x
  mul r4.x, r5.z, r4.x
  mul r4.x, r5.w, r4.x
  mad r5.xyzw, r2.zzzz, l(8.000000, 7.000000, 6.000000, 5.000000), r3.wwww
  max r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r5.xyzw, r2.wwww, r5.xyzw
  add r5.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r4.x, r4.x, r5.x
  mul r4.x, r5.y, r4.x
  mul r4.x, r5.z, r4.x
  mul r4.x, r5.w, r4.x
  mad r4.yz, r2.zzzz, l(0.000000, 4.000000, 3.000000, 0.000000), r3.wwww
  max r4.yz, r4.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.yz, r4.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
  div_sat r4.yz, r2.wwww, r4.yyzy
  add r4.yz, -r4.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
  mul r4.x, r4.y, r4.x
  mul r4.x, r4.z, r4.x
  mad r3.w, r2.z, l(2.000000), r3.w
  max r3.w, r3.w, l(0.000000)
  add r3.w, r3.w, l(1.000000)
  div_sat r3.w, r2.w, r3.w
  add r3.w, -r3.w, l(1.000000)
  mul r3.w, r3.w, r4.x
  mad r2.x, r2.y, r2.x, r2.z
  max r2.x, r2.x, l(0.000000)
  add r2.x, r2.x, l(1.000000)
  div_sat r2.x, r2.w, r2.x
  add r2.x, -r2.x, l(1.000000)
  mad r2.x, -r3.w, r2.x, l(1.000000)
  add r1.w, r1.w, -cb12[48].y
  mul_sat r1.w, r1.w, cb12[48].z
else 
  mov r1.w, l(0)
  mov r2.x, l(1.000000)
endif 
log r2.x, r2.x
mul r2.y, r2.x, cb12[42].w
exp r2.y, r2.y
mul r2.y, r1.w, r2.y
mul r2.x, r2.x, cb12[48].x
exp r2.x, r2.x
mul o0.w, r1.w, r2.x
mad_sat r2.xz, r2.yyyy, cb12[189].xxzx, cb12[189].yywy
add r4.xyz, -r3.xyzx, cb12[188].xyzx
mad r4.xyz, r2.xxxx, r4.xyzx, r3.xyzx
add r1.w, cb12[188].w, l(-1.000000)
mad r1.w, r2.z, r1.w, l(1.000000)
mul_sat r4.w, r1.w, r2.y
lt r1.w, l(0.000000), cb12[192].x
mad_sat r2.xz, r2.yyyy, cb12[191].xxzx, cb12[191].yywy
add r5.xyz, -r3.xyzx, cb12[190].xyzx
mad r3.xyz, r2.xxxx, r5.xyzx, r3.xyzx
add r2.x, cb12[190].w, l(-1.000000)
mad r2.x, r2.z, r2.x, l(1.000000)
mul_sat r3.w, r2.x, r2.y
add r2.xyzw, -r4.xyzw, r3.xyzw
mad r2.xyzw, cb12[192].xxxx, r2.xyzw, r4.xyzw
movc o1.xyzw, r1.wwww, r2.xyzw, r4.xyzw
mad r1.xyz, r1.xyzx, r0.wwww, -r1.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mov r0.w, l(1.000000)
dp4 o3.z, r0.xyzw, cb1[6].xyzw
dp4 o5.x, r0.xyzw, cb1[0].xyzw
dp4 o5.y, r0.xyzw, cb1[1].xyzw
dp4 o5.z, r0.xyzw, cb1[2].xyzw
dp4 o5.w, r0.xyzw, cb1[3].xyzw
mov o4.xyzw, v1.xyzw
mov o3.xy, v4.xyxx
ret 
// Approximately 131 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
   