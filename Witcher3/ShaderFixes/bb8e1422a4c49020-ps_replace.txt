// WITCHER SENSES TRACKS 1.21 - HELIFAX

Texture2D<float4> t15 : register(t15);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb6 : register(b6)
{
  float4 cb6[8];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;
  
float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse   

  r0.x = cb6[6].w * 0.5 + -0.5;
  r1.xy = (uint2)v0.xy;
  r0.yz = (uint2)r1.xy;
  r2.xyzw = cb12[211].xyzw * r0.zzzz;
  r2.xyzw = cb12[210].xyzw * r0.yyyy + r2.xyzw;
  r1.zw = float2(0,0);
  r0.y = t15.Load(r1.xyw).x;
  r1.xyz = t2.Load(r1.xyz).xyz;
  r1.xyz = float3(-0.5,-0.5,-0.5) + r1.xyz;
  r2.xyzw = cb12[212].xyzw * r0.yyyy + r2.xyzw;
  r2.xyzw = cb12[213].xyzw + r2.xyzw;
  r2.xyz = r2.xyz / r2.www;

float4 r20, r21;
r20.xyz = r2.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
r2.xyz = r20.xyz / r20.www;   
  
  r2.w = 1;
  r3.x = dot(r2.xyzw, cb6[0].xyzw);
  r3.y = dot(r2.xyzw, cb6[1].xyzw);
  r3.z = dot(r2.xyzw, cb6[2].xyzw);
  r0.yzw = -cb3[1].xyz + r2.xyz;
  r0.y = dot(r0.yzw, r0.yzw);
  r2.x = sqrt(r0.y);
  r0.xyz = r3.xyz * cb6[6].www + -r0.xxx;
  r3.xy = -cb6[4].xy;
  r3.z = -0;
  r3.xyz = r3.xyz + r0.xyz;
  r3.xyz = r3.xyz < float3(0,0,0);
  r0.w = (int)r3.y | (int)r3.x;
  r0.w = (int)r3.z | (int)r0.w;
  if (r0.w != 0) discard;
  r3.xy = cb6[4].zw + -r0.xy;
  r3.z = 1 + -r0.z;
  r0.x = t0.Sample(s0_s, r0.xy).w;
  r0.x = cb6[7].w * r0.x;
  r0.x = cb6[6].y * r0.x;
  r0.yzw = r3.xyz < float3(0,0,0);
  r0.y = (int)r0.z | (int)r0.y;
  r0.y = (int)r0.w | (int)r0.y;
  if (r0.y != 0) discard;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = r1.xyz * r0.yyy;
  r1.x = dot(v1.xyz, v1.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = v1.xyz * r1.xxx;
  r0.y = dot(r0.yzw, r1.xyz);
  r0.y = -cb6[6].x + r0.y;
  r0.y = r0.y < 0;
  if (r0.y != 0) discard;
  r2.y = 0.119999997 * r2.x;
  r0.y = log2(abs(cb3[1].w));
  r0.yz = float2(2.79999995,0.800000012) * r0.yy;
  r0.yz = exp2(r0.yz);
  r2.zw = r0.yz * float2(120,120) + float2(1,1);
  r0.y = 0.0299999993 < cb3[1].w;
  r0.yz = r0.yy ? r2.yz : r2.xw;
  r0.y = r0.y / r0.z;
  r0.y = log2(r0.y);
  r0.y = 1.60000002 * r0.y;
  r0.y = exp2(r0.y);
  r0.y = 1 + -r0.y;
  r0.y = max(0, r0.y);
  o0.w = r0.y * r0.x;
  o0.xyz = cb3[0].xyz * r0.yyy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.1 on Wed Jun 01 00:06:51 2016
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[2], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb6[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 4
mad r0.x, cb6[6].w, l(0.500000), l(-0.500000)
ftou r1.xy, v0.xyxx
utof r0.yz, r1.xxyx
mul r2.xyzw, r0.zzzz, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, r0.yyyy, r2.xyzw
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.y, r1.xyww, t15.yxzw
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t2.xyzw
add r1.xyz, r1.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
mad r2.xyzw, cb12[212].xyzw, r0.yyyy, r2.xyzw
add r2.xyzw, r2.xyzw, cb12[213].xyzw
div r2.xyz, r2.xyzx, r2.wwww
mov r2.w, l(1.000000)
dp4 r3.x, r2.xyzw, cb6[0].xyzw
dp4 r3.y, r2.xyzw, cb6[1].xyzw
dp4 r3.z, r2.xyzw, cb6[2].xyzw
add r0.yzw, r2.xxyz, -cb3[1].xxyz
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r2.x, r0.y
mad r0.xyz, r3.xyzx, cb6[6].wwww, -r0.xxxx
mov r3.xy, -cb6[4].xyxx
mov r3.z, l(-0.000000)
add r3.xyz, r0.xyzx, r3.xyzx
lt r3.xyz, r3.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.w, r3.y, r3.x
or r0.w, r3.z, r0.w
discard_nz r0.w
add r3.xy, -r0.xyxx, cb6[4].zwzz
add r3.z, -r0.z, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.wxyz, s0
mul r0.x, r0.x, cb6[7].w
mul r0.x, r0.x, cb6[6].y
lt r0.yzw, r3.xxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
or r0.y, r0.z, r0.y
or r0.y, r0.w, r0.y
discard_nz r0.y
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, r1.xxyz
dp3 r1.x, v1.xyzx, v1.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, v1.xyzx
dp3 r0.y, r0.yzwy, r1.xyzx
add r0.y, r0.y, -cb6[6].x
lt r0.y, r0.y, l(0.000000)
discard_nz r0.y
mul r2.y, r2.x, l(0.120000)
log r0.y, |cb3[1].w|
mul r0.yz, r0.yyyy, l(0.000000, 2.800000, 0.800000, 0.000000)
exp r0.yz, r0.yyzy
mad r2.zw, r0.yyyz, l(0.000000, 0.000000, 120.000000, 120.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
lt r0.y, l(0.030000), cb3[1].w
movc r0.yz, r0.yyyy, r2.yyzy, r2.xxwx
div r0.y, r0.y, r0.z
log r0.y, r0.y
mul r0.y, r0.y, l(1.600000)
exp r0.y, r0.y
add r0.y, -r0.y, l(1.000000)
max r0.y, r0.y, l(0.000000)
mul o0.w, r0.x, r0.y
mul o0.xyz, r0.yyyy, cb3[0].xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
