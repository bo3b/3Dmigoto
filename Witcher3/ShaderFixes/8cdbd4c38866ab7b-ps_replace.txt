Texture2D<uint4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

cbuffer cb13 : register(b13)
{
  float4 cb13[2362];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[1];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse 

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.x = t0.Load(r0.xyw).x;
  r1.yz = trunc(v0.xy);
  r2.xyzw = cb12[211].xyzw * r1.zzzz;
  r2.xyzw = cb12[210].xyzw * r1.yyyy + r2.xyzw;
  r1.xyzw = cb12[212].xyzw * r1.xxxx + r2.xyzw;
  r1.xyzw = cb12[213].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  
float4 r20, r21;
r20.xyz = r1.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;r1.xyz = r20.xyz / r20.www; 

  r1.w = (int)cb3[0].x;
  r1.w = (int)r1.w * 9;
  r2.xyz = cb13[r1.w+58].xyz + -r1.xyz;
  r2.w = dot(r2.xyz, r2.xyz);
  r3.x = sqrt(r2.w);
  r3.y = r3.x < cb13[r1.w+58].w;
  if (r3.y != 0) {
    r3.yz = t4.Load(r0.xyw).xz;
    r4.xyzw = t1.Load(r0.xyw).xyzw;
    r5.xyzw = t2.Load(r0.xyw).xyzw;
    r6.xyz = t3.Load(r0.xyw).xyz;
    r3.w = r3.x / cb13[r1.w+58].w;
    r3.w = r3.w * r3.w;
    r3.w = -r3.w * r3.w + 1.000000000e+000;
    r3.w = max(0.000000000e+000, r3.w);
    r3.w = r3.w * r3.w;
    r2.w = r2.w * cb13[r1.w+63].x + 1.000000000e+000;
    r2.w = r3.w / r2.w;
    r7.xy = int2(2048,4096) & asint(cb13[r1.w+61].ww);
    r3.z = r3.z == 1.000000;
    r3.w = r3.z ? 1.000000 : 0;
    r3.z = r3.z ? 0.000000000e+000 : 1.000000000e+000;
    r3.zw = r7.yx ? float2(1.000000e+000,1.000000e+000) : r3.zw;
    r3.z = r3.w * r3.z;
    r2.w = r3.z * r2.w;
    r3.z = 0.000000000e+000 < r2.w;
    if (r3.z != 0) {
      r0.x = t5.Load(r0.xyz).y;
      r0.x = (int)r0.x & 2;
      r0.x = r0.x ? 1.000000000e+000 : cb12[71].x;
      r0.y = 0x80000000 & asint(cb13[r1.w+61].w);
      r0.x = r0.y ? r0.x : 1.000000000e+000;
      r0.x = r2.w * r0.x;
      r0.yzw = log2(r4.xyz);
      r0.yzw = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r0.yzw;
      r0.yzw = exp2(r0.yzw);
      r4.xyz = log2(r6.xyz);
      r4.xyz = float3(2.200000e+000,2.200000e+000,2.200000e+000) * r4.xyz;
      r4.xyz = exp2(r4.xyz);
      r5.xyz = float3(-5.000000e-001,-5.000000e-001,-5.000000e-001) + r5.xyz;
      r2.w = dot(r5.xyz, r5.xyz);
      r2.w = rsqrt(r2.w);
      r5.xyz = r5.xyz * r2.www;
      r2.xyz = r2.xyz / r3.xxx;
      r1.xyz = cb12[0].xyz + -r1.xyz;
      r2.w = dot(r1.xyz, r1.xyz);
      r2.w = rsqrt(r2.w);
      r3.xzw = r2.www * r1.xyz;
      r6.xy = cb12[183].zw * r0.xx;
      r0.x = dot(r5.xyz, r2.xyz);
      r6.z = saturate(r0.x);
      r1.xyz = r1.xyz * r2.www + r2.xyz;
      r2.w = dot(r1.xyz, r1.xyz);
      r2.w = rsqrt(r2.w);
      r1.xyz = r2.www * r1.xyz;
      r2.w = dot(r1.xyz, r3.xzw);
      r2.w = 1.000000000e+000 + -abs(r2.w);
      r2.w = max(0.000000000e+000, r2.w);
      r6.w = r2.w * r2.w;
      r6.w = r6.w * r6.w;
      r2.w = r6.w * r2.w;
      r6.w = 1.000000000e+000 + -r5.w;
      r7.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyz;
      r8.xyz = max(float3(0.000000e+000,0.000000e+000,0.000000e+000), r7.xyz);
      r8.xyz = cb13[56].xxx * r8.xyz;
      r8.xyz = r8.xyz * r2.www;
      r2.w = 1.000000000e+000 + cb13[56].z;
      r2.w = -cb13[56].z * r6.w + r2.w;
      r8.xyz = r8.xyz / r2.www;
      r4.xyz = r8.xyz + r4.xyz;
      r8.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyz;
      r8.xyz = r8.xyz * r6.zzz;
      r8.xyz = float3(3.183099e-001,3.183099e-001,3.183099e-001) * r8.xyz;
      r2.w = 0.000000000e+000 < r4.w;
      if (r2.w != 0) {
        r2.w = 1.000000000e+000 + r0.x;
        r2.x = dot(r2.xyz, -r3.xzw);
        r2.x = 1.000000000e+000 + r2.x;
        r2.xw = float2(5.000000e-001,5.000000e-001) * r2.xw;
        r2.y = dot(r5.xyz, -r3.xzw);
        r2.y = 1.000000000e+000 + r2.y;
        r2.y = cb12[36].w * r2.y;
        r2.x = r2.x * r2.x;
        r2.y = 5.000000000e-001 * r2.y;
        r2.x = r2.x * r2.x + -r2.w;
        r2.x = cb12[36].x * r2.x + r2.w;
        r2.x = r2.y * r2.x;
        r2.y = cb12[36].y * r4.w;
        r7.xyz = cb12[36].zzz * r7.xyz + -r8.xyz;
        r2.yzw = r2.yyy * r7.xyz + r8.xyz;
        r8.xyz = r2.xxx * r4.www + r2.yzw;
      }
      r2.xyz = cb13[r1.w+61].xyz * r8.xyz;
      r2.xyz = r6.xxx * r2.xyz;
      r0.x = 0.000000000e+000 < r0.x;
      if (r0.x != 0) {
        r0.x = saturate(dot(r5.xyz, r1.xyz));
        r1.x = dot(r5.xyz, r3.xzw);
        r1.y = r5.w * r5.w;
        r1.z = r1.y * r1.y;
        r0.x = r0.x * r0.x;
        r1.y = r1.y * r1.y + -1.000000000e+000;
        r0.x = r0.x * r1.y + 1.000000000e+000;
        r0.x = r0.x * r0.x;
        r0.x = 3.141520023e+000 * r0.x;
        r0.x = r1.z / r0.x;
        r1.y = 1.000000000e+000 + r5.w;
        r1.y = r1.y * r1.y;
        r1.z = 1.250000000e-001 * r1.y;
        r1.y = -r1.y * 1.250000000e-001 + 1.000000000e+000;
        r2.w = r6.z * r1.y + r1.z;
        r2.w = r6.z / r2.w;
        r1.y = abs(r1.x) * r1.y + r1.z;
        r1.y = abs(r1.x) / r1.y;
        r1.y = r2.w * r1.y;
        r0.x = r1.y * r0.x;
        r3.xzw = r0.xxx * r4.xyz;
        r0.x = r6.z * abs(r1.x);
        r0.x = 4.000000000e+000 * r0.x;
        r1.xyz = r3.xzw / r0.xxx;
        r1.xyz = r1.xyz * r6.zzz;
      } else {
        r1.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
      }
      r1.xyz = cb13[r1.w+61].xyz * r1.xyz;
      r1.xyz = r6.yyy * r1.xyz;
      r0.xyz = r0.yzw * r2.xyz + r1.xyz;
      r1.xyz = saturate(r3.yyy * cb12[186].xyz + cb12[187].xyz);
      r0.w = -1.000000000e+000 + cb12[69].z;
      r0.w = r4.w * r0.w + 1.000000000e+000;
      r1.xyz = float3(-1.000000e+000,-1.000000e+000,-1.000000e+000) + r1.xyz;
      r1.xyz = r0.www * r1.xyz + float3(1.000000e+000,1.000000e+000,1.000000e+000);
      r1.xyz = cb12[69].xxx * r1.xyz + cb12[69].yyy;
      r0.xyz = r1.xyz * r0.xyz;
    } else {
      r0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    }
  } else {
    r0.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  }
  o0.xyz = r0.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[1], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb13[2362], dynamicIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (uint,uint,uint,uint) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 9
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t0.xyzw
round_z r1.yz, v0.xxyx
mul r2.xyzw, r1.zzzz, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, r1.yyyy, r2.xyzw
mad r1.xyzw, cb12[212].xyzw, r1.xxxx, r2.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r1.xyz, r1.xyzx, r1.wwww
ftoi r1.w, cb3[0].x
imul null, r1.w, r1.w, l(9)
add r2.xyz, -r1.xyzx, cb13[r1.w + 58].xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
sqrt r3.x, r2.w
lt r3.y, r3.x, cb13[r1.w + 58].w
if_nz r3.y
  ld_indexable(texture2d)(float,float,float,float) r3.yz, r0.xyww, t4.yxzw
  ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyww, t1.xyzw
  ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r0.xyww, t2.xyzw
  ld_indexable(texture2d)(float,float,float,float) r6.xyz, r0.xyww, t3.xyzw
  div r3.w, r3.x, cb13[r1.w + 58].w
  mul r3.w, r3.w, r3.w
  mad r3.w, -r3.w, r3.w, l(1.000000)
  max r3.w, r3.w, l(0.000000)
  mul r3.w, r3.w, r3.w
  mad r2.w, r2.w, cb13[r1.w + 63].x, l(1.000000)
  div r2.w, r3.w, r2.w
  and r7.xy, l(2048, 4096, 0, 0), cb13[r1.w + 61].wwww
  eq r3.z, r3.z, l(1.000000)
  and r3.w, r3.z, l(0x3f800000)
  movc r3.z, r3.z, l(0), l(1.000000)
  movc r3.zw, r7.yyyx, l(0,0,1.000000,1.000000), r3.zzzw
  mul r3.z, r3.z, r3.w
  mul r2.w, r2.w, r3.z
  lt r3.z, l(0.000000), r2.w
  if_nz r3.z
    ld_indexable(texture2d)(uint,uint,uint,uint) r0.x, r0.xyzw, t5.yxzw
    and r0.x, r0.x, l(2)
    movc r0.x, r0.x, l(1.000000), cb12[71].x
    and r0.y, l(0x80000000), cb13[r1.w + 61].w
    movc r0.x, r0.y, r0.x, l(1.000000)
    mul r0.x, r0.x, r2.w
    log r0.yzw, r4.xxyz
    mul r0.yzw, r0.yyzw, l(0.000000, 2.200000, 2.200000, 2.200000)
    exp r0.yzw, r0.yyzw
    log r4.xyz, r6.xyzx
    mul r4.xyz, r4.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
    exp r4.xyz, r4.xyzx
    add r5.xyz, r5.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    dp3 r2.w, r5.xyzx, r5.xyzx
    rsq r2.w, r2.w
    mul r5.xyz, r2.wwww, r5.xyzx
    div r2.xyz, r2.xyzx, r3.xxxx
    add r1.xyz, -r1.xyzx, cb12[0].xyzx
    dp3 r2.w, r1.xyzx, r1.xyzx
    rsq r2.w, r2.w
    mul r3.xzw, r1.xxyz, r2.wwww
    mul r6.xy, r0.xxxx, cb12[183].zwzz
    dp3 r0.x, r5.xyzx, r2.xyzx
    mov_sat r6.z, r0.x
    mad r1.xyz, r1.xyzx, r2.wwww, r2.xyzx
    dp3 r2.w, r1.xyzx, r1.xyzx
    rsq r2.w, r2.w
    mul r1.xyz, r1.xyzx, r2.wwww
    dp3 r2.w, r1.xyzx, r3.xzwx
    add r2.w, -|r2.w|, l(1.000000)
    max r2.w, r2.w, l(0.000000)
    mul r6.w, r2.w, r2.w
    mul r6.w, r6.w, r6.w
    mul r2.w, r2.w, r6.w
    add r6.w, -r5.w, l(1.000000)
    add r7.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r8.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    mul r8.xyz, r8.xyzx, cb13[56].xxxx
    mul r8.xyz, r2.wwww, r8.xyzx
    add r2.w, cb13[56].z, l(1.000000)
    mad r2.w, -cb13[56].z, r6.w, r2.w
    div r8.xyz, r8.xyzx, r2.wwww
    add r4.xyz, r4.xyzx, r8.xyzx
    add r8.xyz, -r4.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r8.xyz, r6.zzzz, r8.xyzx
    mul r8.xyz, r8.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
    lt r2.w, l(0.000000), r4.w
    if_nz r2.w
      add r2.w, r0.x, l(1.000000)
      dp3 r2.x, r2.xyzx, -r3.xzwx
      add r2.x, r2.x, l(1.000000)
      mul r2.xw, r2.xxxw, l(0.500000, 0.000000, 0.000000, 0.500000)
      dp3 r2.y, r5.xyzx, -r3.xzwx
      add r2.y, r2.y, l(1.000000)
      mul r2.y, r2.y, cb12[36].w
      mul r2.x, r2.x, r2.x
      mul r2.y, r2.y, l(0.500000)
      mad r2.x, r2.x, r2.x, -r2.w
      mad r2.x, cb12[36].x, r2.x, r2.w
      mul r2.x, r2.x, r2.y
      mul r2.y, r4.w, cb12[36].y
      mad r7.xyz, cb12[36].zzzz, r7.xyzx, -r8.xyzx
      mad r2.yzw, r2.yyyy, r7.xxyz, r8.xxyz
      mad r8.xyz, r2.xxxx, r4.wwww, r2.yzwy
    endif 
    mul r2.xyz, r8.xyzx, cb13[r1.w + 61].xyzx
    mul r2.xyz, r2.xyzx, r6.xxxx
    lt r0.x, l(0.000000), r0.x
    if_nz r0.x
      dp3_sat r0.x, r5.xyzx, r1.xyzx
      dp3 r1.x, r5.xyzx, r3.xzwx
      mul r1.y, r5.w, r5.w
      mul r1.z, r1.y, r1.y
      mul r0.x, r0.x, r0.x
      mad r1.y, r1.y, r1.y, l(-1.000000)
      mad r0.x, r0.x, r1.y, l(1.000000)
      mul r0.x, r0.x, r0.x
      mul r0.x, r0.x, l(3.141520)
      div r0.x, r1.z, r0.x
      add r1.y, r5.w, l(1.000000)
      mul r1.y, r1.y, r1.y
      mul r1.z, r1.y, l(0.125000)
      mad r1.y, -r1.y, l(0.125000), l(1.000000)
      mad r2.w, r6.z, r1.y, r1.z
      div r2.w, r6.z, r2.w
      mad r1.y, |r1.x|, r1.y, r1.z
      div r1.y, |r1.x|, r1.y
      mul r1.y, r1.y, r2.w
      mul r0.x, r0.x, r1.y
      mul r3.xzw, r4.xxyz, r0.xxxx
      mul r0.x, |r1.x|, r6.z
      mul r0.x, r0.x, l(4.000000)
      div r1.xyz, r3.xzwx, r0.xxxx
      mul r1.xyz, r6.zzzz, r1.xyzx
    else 
      mov r1.xyz, l(0,0,0,0)
    endif 
    mul r1.xyz, r1.xyzx, cb13[r1.w + 61].xyzx
    mul r1.xyz, r1.xyzx, r6.yyyy
    mad r0.xyz, r0.yzwy, r2.xyzx, r1.xyzx
    mad_sat r1.xyz, r3.yyyy, cb12[186].xyzx, cb12[187].xyzx
    add r0.w, cb12[69].z, l(-1.000000)
    mad r0.w, r4.w, r0.w, l(1.000000)
    add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mad r1.xyz, r0.wwww, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r1.xyz, cb12[69].xxxx, r1.xyzx, cb12[69].yyyy
    mul r0.xyz, r0.xyzx, r1.xyzx
  else 
    mov r0.xyz, l(0,0,0,0)
  endif 
else 
  mov r0.xyz, l(0,0,0,0)
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb13
// {
//
//   float4 cb13[2362];                 // Offset:    0 Size: 37792
//
// }
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3;                        // Offset:    0 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4          2d    2        1
// t3                                texture  float4          2d    3        1
// t4                                texture  float4          2d    4        1
// t5                                texture   uint4          2d    5        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
// cb13                              cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[2362], dynamicIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb3[1], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (uint,uint,uint,uint) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 10
round_z r0.xy, v0.xyxx
ftoi r1.xy, r0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t0.yzxw
mul r2.xyzw, r0.yyyy, cb12[211].xyzw
mad r2.xyzw, cb12[210].xyzw, r0.xxxx, r2.xyzw
mad r0.xyzw, cb12[212].xyzw, r0.zzzz, r2.xyzw
add r0.xyzw, r0.xyzw, cb12[213].xyzw
div r0.xyz, r0.xyzx, r0.wwww
round_z r0.w, cb3[0].x
ftoi r0.w, r0.w
imul null, r0.w, r0.w, l(9)
itof r0.w, r0.w
add r2.x, r0.w, l(58.000000)
ftou r2.x, r2.x
add r2.yzw, -r0.xxyz, cb13[r2.x + 0].xxyz
dp3 r3.x, r2.yzwy, r2.yzwy
sqrt r3.y, r3.x
lt r3.z, r3.y, cb13[r2.x + 0].w
if_nz r3.z
  ld_indexable(texture2d)(float,float,float,float) r3.zw, r1.xyww, t4.ywxz
  div r2.x, r3.y, cb13[r2.x + 0].w
  mul r2.x, r2.x, r2.x
  mad r2.x, -r2.x, r2.x, l(1.000000)
  max r2.x, r2.x, l(0.000000)
  mul r2.x, r2.x, r2.x
  add r4.xy, r0.wwww, l(63.000000, 61.000000, 0.000000, 0.000000)
  ftou r4.xy, r4.xyxx
  mad r0.w, r3.x, cb13[r4.x + 0].x, l(1.000000)
  div r0.w, r2.x, r0.w
  and r4.xz, l(4096, 0, 2048, 0), cb13[r4.y + 0].wwww
  itof r4.xz, r4.xxzx
  eq r2.x, r3.w, l(1.000000)
  and r5.y, r2.x, l(0x3f800000)
  movc r5.x, r2.x, l(0), l(1.000000)
  ne r3.xw, l(0.000000, 0.000000, 0.000000, 0.000000), r4.xxxz
  movc r3.xw, r3.xxxw, l(1.000000,0,0,1.000000), r5.xxxy
  mul r2.x, r3.x, r3.w
  mul r0.w, r0.w, r2.x
  lt r2.x, l(0.000000), r0.w
  if_nz r2.x
    ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xyww, t1.xyzw
    ld_indexable(texture2d)(float,float,float,float) r6.xyzw, r1.xyww, t2.xyzw
    ld_indexable(texture2d)(float,float,float,float) r4.xzw, r1.xyww, t3.xwyz
    ld_indexable(texture2d)(uint,uint,uint,uint) r1.x, r1.xyzw, t5.yxzw
    utof r1.x, r1.x
    ftoi r1.x, r1.x
    and r1.x, r1.x, l(2)
    itof r1.x, r1.x
    ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), r1.x
    movc r1.x, r1.x, l(1.000000), cb12[71].x
    and r1.y, l(0x80000000), cb13[r4.y + 0].w
    utof r1.y, r1.y
    ne r1.y, l(0.000000, 0.000000, 0.000000, 0.000000), r1.y
    movc r1.x, r1.y, r1.x, l(1.000000)
    mul r0.w, r0.w, r1.x
    log r1.xyz, r5.xyzx
    mul r1.xyz, r1.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
    exp r1.xyz, r1.xyzx
    log r4.xzw, r4.xxzw
    mul r4.xzw, r4.xxzw, l(2.200000, 0.000000, 2.200000, 2.200000)
    exp r4.xzw, r4.xxzw
    add r7.xyzw, r6.xyzw, l(-0.500000, -0.500000, -0.500000, 1.000000)
    dp3 r1.w, r7.xyzx, r7.xyzx
    rsq r1.w, r1.w
    mul r5.xyz, r1.wwww, r7.xyzx
    div r2.xyz, r2.yzwy, r3.yyyy
    add r0.xyz, -r0.xyzx, cb12[0].xyzx
    dp3 r1.w, r0.xyzx, r0.xyzx
    rsq r1.w, r1.w
    mul r3.xyw, r0.xyxz, r1.wwww
    mul r6.xy, r0.wwww, cb12[183].zwzz
    dp3 r0.w, r5.xyzx, r2.xyzx
    mov_sat r2.w, r0.w
    mad r0.xyz, r1.wwww, r0.xyzx, r2.xyzx
    dp3 r1.w, r0.xyzx, r0.xyzx
    rsq r1.w, r1.w
    mul r0.xyz, r0.xyzx, r1.wwww
    dp3 r1.w, r0.xyzx, r3.xywx
    add r1.w, -|r1.w|, l(1.000000)
    max r1.w, r1.w, l(0.000000)
    mul r6.z, r1.w, r1.w
    mul r6.z, r6.z, r6.z
    mul r1.w, r1.w, r6.z
    add r6.z, -r6.w, l(1.000000)
    add r7.xyz, -r4.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r8.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    mul r8.xyz, r8.xyzx, cb13[56].xxxx
    mul r8.xyz, r1.wwww, r8.xyzx
    add r1.w, l(1.000000), cb13[56].z
    mad r1.w, -cb13[56].z, r6.z, r1.w
    div r8.xyz, r8.xyzx, r1.wwww
    add r4.xzw, r4.xxzw, r8.xxyz
    add r8.xyz, -r4.xzwx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r8.xyz, r2.wwww, r8.xyzx
    mul r8.xyz, r8.xyzx, l(0.318310, 0.318310, 0.318310, 0.000000)
    lt r1.w, l(0.000000), r5.w
    add r9.y, r0.w, l(1.000000)
    dp3 r2.x, r2.xyzx, -r3.xywx
    add r9.x, r2.x, l(1.000000)
    mul r2.xy, r9.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
    dp3 r2.z, r5.xyzx, -r3.xywx
    add r2.z, r2.z, l(1.000000)
    mul r2.z, r2.z, cb12[36].w
    mul r2.x, r2.x, r2.x
    mul r2.z, r2.z, l(0.500000)
    mad r2.x, r2.x, r2.x, -r2.y
    mad r2.x, cb12[36].x, r2.x, r2.y
    mul r2.x, r2.x, r2.z
    mul r2.y, r5.w, cb12[36].y
    mad r7.xyz, cb12[36].zzzz, r7.xyzx, -r8.xyzx
    mad r7.xyz, r2.yyyy, r7.xyzx, r8.xyzx
    mad r2.xyz, r2.xxxx, r5.wwww, r7.xyzx
    movc r2.xyz, r1.wwww, r2.xyzx, r8.xyzx
    mul r2.xyz, r2.xyzx, cb13[r4.y + 0].xyzx
    mul r2.xyz, r2.xyzx, r6.xxxx
    lt r0.w, l(0.000000), r0.w
    dp3_sat r0.x, r5.xyzx, r0.xyzx
    dp3 r0.y, r5.xyzx, r3.xywx
    mul r0.z, r6.w, r6.w
    mul r1.w, r0.z, r0.z
    mul r0.x, r0.x, r0.x
    mad r0.z, r0.z, r0.z, l(-1.000000)
    mad r0.x, r0.x, r0.z, l(1.000000)
    mul r0.x, r0.x, r0.x
    mul r0.x, r0.x, l(3.141520)
    div r0.x, r1.w, r0.x
    mul r0.z, r7.w, r7.w
    mul r1.w, r0.z, l(0.125000)
    mad r0.z, r0.z, l(-0.125000), l(1.000000)
    mad r3.x, r2.w, r0.z, r1.w
    div r3.x, r2.w, r3.x
    mad r0.z, |r0.y|, r0.z, r1.w
    div r0.z, |r0.y|, r0.z
    mul r0.z, r0.z, r3.x
    mul r0.x, r0.x, r0.z
    mul r3.xyw, r4.xzxw, r0.xxxx
    mul r0.x, |r0.y|, r2.w
    mul r0.x, r0.x, l(4.000000)
    div r0.xyz, r3.xywx, r0.xxxx
    mul r0.xyz, r2.wwww, r0.xyzx
    and r0.xyz, r0.xyzx, r0.wwww
    mul r0.xyz, r0.xyzx, cb13[r4.y + 0].xyzx
    mul r0.xyz, r0.xyzx, r6.yyyy
    mad r0.xyz, r1.xyzx, r2.xyzx, r0.xyzx
    mad_sat r1.xyz, r3.zzzz, cb12[186].xyzx, cb12[187].xyzx
    add r0.w, cb12[69].z, l(-1.000000)
    mad r0.w, r5.w, r0.w, l(1.000000)
    add r1.xyz, r1.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mad r1.xyz, r0.wwww, r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r1.xyz, cb12[69].xxxx, r1.xyzx, cb12[69].yyyy
    mul r0.xyz, r0.xyzx, r1.xyzx
  else 
    mov r0.xyz, l(0,0,0,0)
  endif 
else 
  mov r0.xyz, l(0,0,0,0)
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 161 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
