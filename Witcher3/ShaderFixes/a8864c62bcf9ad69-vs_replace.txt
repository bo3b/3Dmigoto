//UI elements - minimap
cbuffer Constants : register(b0)
{ 
  float4 vfuniforms[96] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

#include <hud.hlsl>

void main( 
  float4 v0 : COLOR0,
  float4 v1 : COLOR1,
  float4 v2 : SV_Position0,
  uint v3 : SV_InstanceID0,
  out float4 o0 : COLOR0,
  out float4 o1 : COLOR1,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : SV_Position0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xyzw = v0.xyzw;
  o1.xyzw = v1.xyzw;
  r0.x = (uint)v3.x << 2;
  r0.x = r0.x;
  r0.x = 1.000000015e-001 + r0.x;
  r0.x = (uint)r0.x;
  o2.xyzw = vfuniforms[r0.x].xyzw;
  bitmask.x = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.x = (((uint)v3.x << 2) & bitmask.x) | ((uint)2 & ~bitmask.x);
  bitmask.y = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.y = (((uint)v3.x << 2) & bitmask.y) | ((uint)2 & ~bitmask.y);
  bitmask.z = ((~(-1 << 30)) << 2) & 0xffffffff;
  r0.z = (((uint)v3.x << 2) & bitmask.z) | ((uint)1 & ~bitmask.z);
  r0.xyz = r0.xyz;
  r0.xyz = float3(1.000000e-001,1.100000e+000,1.000000e-001) + r0.xyz;
  r0.xyz = (uint3)r0.xyz;
  o3.xyzw = vfuniforms[r0.z].xyzw;
  o4.x = dot(v2.xyzw, vfuniforms[r0.x].xyzw);
  o4.y = dot(v2.xyzw, vfuniforms[r0.y].xyzw);
  o4.zw = float2(0.000000e+000,1.000000e+000);
  
float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
if (params.z >= 1.0)
{
	o4.x -= stereo.x* ( o4.z - stereo.y);
}
else
{
	o4.x += stereo.x* params.x;
} 
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.19 on Sun Jun 14 00:10:19 2015
//
//
// Buffer Definitions: 
//
// cbuffer Constants
// {
//
//   float4 vfuniforms[96];             // Offset:    0 Size:  1536
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// Constants                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// SV_Position              0   xyzw        2     NONE   float   xyzw
// SV_InstanceID            0   x           3   INSTID    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// SV_Position              0   xyzw        4      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[96], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input_sgv v3.x, instance_id
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output_siv o4.xyzw, position
dcl_temps 1
mov o0.xyzw, v0.xyzw
mov o1.xyzw, v1.xyzw
ishl r0.x, v3.x, l(2)
utof r0.x, r0.x
add r0.x, r0.x, l(0.100000)
ftou r0.x, r0.x
mov o2.xyzw, cb0[r0.x + 0].xyzw
bfi r0.xyz, l(30, 30, 30, 0), l(2, 2, 2, 0), v3.xxxx, l(2, 2, 1, 0)
utof r0.xyz, r0.xyzx
add r0.xyz, r0.xyzx, l(0.100000, 1.100000, 0.100000, 0.000000)
ftou r0.xyz, r0.xyzx
mov o3.xyzw, cb0[r0.z + 0].xyzw
dp4 o4.x, v2.xyzw, cb0[r0.x + 0].xyzw
dp4 o4.y, v2.xyzw, cb0[r0.y + 0].xyzw
mov o4.zw, l(0,0,0,1.000000)
ret 
// Approximately 16 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 
