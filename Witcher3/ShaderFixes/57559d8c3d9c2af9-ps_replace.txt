Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float2 v0 : TEXCOORD0,
  float4 v1 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse 

  r0.xy = cb3[6].xy * v1.xy;
  r0.x = t2.Sample(s2_s, r0.xy).x;
  r1.xyzw = float4(7.070000e-001,0.000000e+000,0.000000e+000,7.070000e-001) * cb3[6].zwzw;
  r2.xyzw = v1.xyxy * cb3[6].xyxy + r1.xyzw;
  r1.xyzw = v1.xyxy * cb3[6].xyxy + -r1.xyzw;
  r0.y = t2.Sample(s2_s, r2.xy).x;
  r0.z = t2.Sample(s2_s, r2.zw).x;
  r0.x = r0.x + r0.y;
  r0.y = t2.Sample(s2_s, r1.xy).x;
  r0.w = t2.Sample(s2_s, r1.zw).x;
  r0.x = r0.x + r0.y;
  r0.x = r0.x + r0.z;
  r0.x = r0.x + r0.w;
  r0.x = cb3[0].x * r0.x;
  r0.x = 2.000000030e-001 * r0.x;
  r1.xyzw = cb12[211].xyzw * v1.yyyy;
  r1.xyzw = cb12[210].xyzw * v1.xxxx + r1.xyzw;
  r0.yz = cb0[1].zw * v1.xy;
  r0.w = t1.Sample(s1_s, r0.yz).x;
  r2.xyz = t0.Sample(s0_s, r0.yz).xyz;
  r1.xyzw = cb12[212].xyzw * r0.wwww + r1.xyzw;
  r1.xyzw = cb12[213].xyzw + r1.xyzw;
  r0.yzw = r1.xyz / r1.www;
  
float4 r20, r21;
r20.xyz = r1.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
r1.xyz = r20.xyz / r20.www; 

  r0.yzw = -cb3[4].xyz + r0.yzw;
  r0.y = dot(r0.yzw, r0.yzw);
  r0.y = sqrt(r0.y);
  r0.z = 1.000000015e-001 * r0.y;
  r0.y = cb3[1].x * r0.y;
  r0.yz = min(r0.yz, float2(1.000000e+000,1.000000e+000));
  r0.z = r0.z * r0.z;
  r0.w = 1.000000000e+000 + -r0.y;
  r0.y = -r0.y * r0.y + 1.000000000e+000;
  r0.w = cb3[0].w * r0.w + cb3[0].w;
  r0.w = -cb3[0].w * 2.500000000e-001 + r0.w;
  r1.x = 2.500000000e-001 * cb3[0].w;
  r0.z = r0.z * r0.w + r1.x;
  r0.w = 2.000000030e-001 * r0.z;
  r1.xyz = cb3[3].xyz * r0.www;
  r3.xyz = cb3[2].xyz * r0.zzz + -r1.xyz;
  r0.yzw = r0.yyy * r3.xyz + r1.xyz;
  r1.x = dot(r2.xyz, float3(2.990000e-001,5.870000e-001,1.140000e-001));
  r0.yzw = r0.yzw * r1.xxx + -r2.xyz;
  r0.yzw = cb3[0].yyy * r0.yzw + r2.xyz;
  r0.xyz = cb3[5].xyz * r0.xxx + r0.yzw;
  r0.xyz = r0.xyz + -r2.xyz;
  r0.xyz = cb3[0].xxx * r0.xyz + r2.xyz;
  o0.xyz = min(r0.xyz, float3(1.100000e+000,1.100000e+000,1.100000e+000));
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_Position              0   xyzw        1      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v1.xy, position
dcl_output o0.xyzw
dcl_temps 4
mul r0.xy, v1.xyxx, cb3[6].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s2
mul r1.xyzw, cb3[6].zwzw, l(0.707000, 0.000000, 0.000000, 0.707000)
mad r2.xyzw, v1.xyxy, cb3[6].xyxy, r1.xyzw
mad r1.xyzw, v1.xyxy, cb3[6].xyxy, -r1.xyzw
sample_indexable(texture2d)(float,float,float,float) r0.y, r2.xyxx, t2.yxzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.z, r2.zwzz, t2.yzxw, s2
add r0.x, r0.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t2.yxzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s2
add r0.x, r0.y, r0.x
add r0.x, r0.z, r0.x
add r0.x, r0.w, r0.x
mul r0.x, r0.x, cb3[0].x
mul r0.x, r0.x, l(0.200000)
mul r1.xyzw, v1.yyyy, cb12[211].xyzw
mad r1.xyzw, cb12[210].xyzw, v1.xxxx, r1.xyzw
mul r0.yz, v1.xxyx, cb0[1].zzwz
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.yzyy, t1.yzwx, s1
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.yzyy, t0.xyzw, s0
mad r1.xyzw, cb12[212].xyzw, r0.wwww, r1.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r0.yzw, r1.xxyz, r1.wwww
add r0.yzw, r0.yyzw, -cb3[4].xxyz
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r0.y, r0.y
mul r0.z, r0.y, l(0.100000)
mul r0.y, r0.y, cb3[1].x
min r0.yz, r0.yyzy, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r0.z, r0.z, r0.z
add r0.w, -r0.y, l(1.000000)
mad r0.y, -r0.y, r0.y, l(1.000000)
mad r0.w, cb3[0].w, r0.w, cb3[0].w
mad r0.w, -cb3[0].w, l(0.250000), r0.w
mul r1.x, cb3[0].w, l(0.250000)
mad r0.z, r0.z, r0.w, r1.x
mul r0.w, r0.z, l(0.200000)
mul r1.xyz, r0.wwww, cb3[3].xyzx
mad r3.xyz, cb3[2].xyzx, r0.zzzz, -r1.xyzx
mad r0.yzw, r0.yyyy, r3.xxyz, r1.xxyz
dp3 r1.x, r2.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
mad r0.yzw, r0.yyzw, r1.xxxx, -r2.xxyz
mad r0.yzw, cb3[0].yyyy, r0.yyzw, r2.xxyz
mad r0.xyz, cb3[5].xyzx, r0.xxxx, r0.yzwy
add r0.xyz, -r2.xyzx, r0.xyzx
mad r0.xyz, cb3[0].xxxx, r0.xyzx, r2.xyzx
min o0.xyz, r0.xyzx, l(1.100000, 1.100000, 1.100000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[7];                     // Offset:    0 Size:   112
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[2];                     // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// s1_s                              sampler      NA          NA    1        1
// s2_s                              sampler      NA          NA    2        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4          2d    2        1
// cb0                               cbuffer      NA          NA    0        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float       
// SV_Position              0   xyzw        1      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps_siv linear noperspective v1.xy, position
dcl_output o0.xyzw
dcl_temps 4
mul r0.xy, v1.xyxx, cb3[6].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s2
mul r1.xyzw, cb3[6].zwzw, l(0.707000, 0.000000, 0.000000, 0.707000)
mad r2.xyzw, cb3[6].xyxy, v1.xyxy, r1.xyzw
mad r1.xyzw, cb3[6].xyxy, v1.xyxy, -r1.xyzw
sample_indexable(texture2d)(float,float,float,float) r0.y, r2.xyxx, t2.yxzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.z, r2.zwzz, t2.yzxw, s2
add r0.x, r0.y, r0.x
sample_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t2.yxzw, s2
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s2
add r0.x, r0.y, r0.x
add r0.x, r0.z, r0.x
add r0.x, r0.w, r0.x
mul r0.x, r0.x, cb3[0].x
mul r0.x, r0.x, l(0.200000)
mul r1.xyzw, v1.yyyy, cb12[211].xyzw
mad r1.xyzw, cb12[210].xyzw, v1.xxxx, r1.xyzw
mul r0.yz, v1.xxyx, cb0[1].zzwz
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.yzyy, t1.yzwx, s1
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.yzyy, t0.xyzw, s0
mad r1.xyzw, cb12[212].xyzw, r0.wwww, r1.xyzw
add r1.xyzw, r1.xyzw, cb12[213].xyzw
div r0.yzw, r1.xxyz, r1.wwww
add r0.yzw, r0.yyzw, -cb3[4].xxyz
dp3 r0.y, r0.yzwy, r0.yzwy
sqrt r0.y, r0.y
mul r1.y, r0.y, l(0.100000)
mul r1.x, r0.y, cb3[1].x
min r0.yz, r1.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
add r0.w, -r0.y, l(1.000000)
mad r0.w, cb3[0].w, r0.w, cb3[0].w
mad r0.w, cb3[0].w, l(-0.250000), r0.w
mul r0.z, r0.z, r0.z
mad r0.y, -r0.y, r0.y, l(1.000000)
mul r1.x, cb3[0].w, l(0.250000)
mad r0.z, r0.z, r0.w, r1.x
mul r0.w, r0.z, l(0.200000)
mul r1.xyz, r0.wwww, cb3[3].xyzx
mad r3.xyz, cb3[2].xyzx, r0.zzzz, -r1.xyzx
mad r0.yzw, r0.yyyy, r3.xxyz, r1.xxyz
dp3 r1.x, r2.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
mad r0.yzw, r0.yyzw, r1.xxxx, -r2.xxyz
mad r0.yzw, cb3[0].yyyy, r0.yyzw, r2.xxyz
mad r0.xyz, cb3[5].xyzx, r0.xxxx, r0.yzwy
add r0.xyz, -r2.xyzx, r0.xyzx
mad r0.xyz, cb3[0].xxxx, r0.xyzx, r2.xyzx
min o0.xyz, r0.xyzx, l(1.100000, 1.100000, 1.100000, 0.000000)
mov o0.w, l(1.000000)
ret 
// Approximately 49 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
