Texture2D<float4> t24 : register(t24);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

SamplerState s0_s : register(s0);

cbuffer cb13 : register(b13)
{
  float4 cb13[35];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[214];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb12[1].xyzw;
a2.xyzw = cb12[2].xyzw;
a3.xyzw = cb12[3].xyzw;
a4.xyzw = cb12[4].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (uint2)v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r1.xyzw = t1.Load(r0.xyw).xyzw;
  r2.xyzw = t2.Load(r0.xyw).xyzw;
  r0.z = t7.Load(r0.xyz).x;
  r0.w = r0.z * cb12[22].x + cb12[22].y;
  r0.w = r0.w >= 1.000000000e+000;
  if (r0.w != 0) {
    o0.xyzw = r2.xyzw;
    o1.xyzw = r1.xyzw;
    return;
  }
  r0.w = saturate(cb3[2].x);
  r0.w = 1.500000060e-001 * r0.w;
  r3.x = t6.SampleLevel(s0_s, v1.xy, 0.000000000e+000).x;
  r3.x = 1.000000000e+000 + -r3.x;
  r0.w = r3.x * r0.w;
  r4.xyzw = cb12[211].xyzw * v0.yyyy;
  r4.xyzw = cb12[210].xyzw * v0.xxxx + r4.xyzw;
  r4.xyzw = cb12[212].xyzw * r0.zzzz + r4.xyzw;
  r4.xyzw = cb12[213].xyzw + r4.xyzw;
  
  
r4.xyz = r4.xyz / r4.www;

float4 r20, r21;
r20.xyz = r4.xyz; 
r20.w = 1.0;

r21.xyzw = cb12[2].xyzw * r20.yyyy;
r21.xyzw = cb12[1].xyzw * r20.xxxx + r21.xyzw;
r21.xyzw = cb12[3].xyzw * r20.zzzz + r21.xyzw;
r21.xyzw = cb12[4].xyzw + r21.xyzw;

r21.xyzw /= r21.wwww;

r21.x -= stereo.x*(r21.z - stereo.y)/cb12[13].x; 

r20.xyzw = b2.xyzw * r21.yyyy;
r20.xyzw = b1.xyzw * r21.xxxx + r20.xyzw;
r20.xyzw = b3.xyzw * r21.zzzz + r20.xyzw;
r20.xyzw = b4.xyzw * r21.wwww + r20.xyzw;
r4.xyz = r20.xyz / r20.www;  
  
  
  
  r3.yzw = r4.xyz ; // / r4.www;
  r4.xy = (int2)r0.xy ^ int2(2,2);
  r0.xy = max(r0.xy, -r0.xy);
  r0.xy = (uint2)r0.xy >> int2(1,1);
  r4.zw = -(int2)r0.xy;
  r4.xy = (int2)r4.xy & int2(0,0);
  r4.xy = r4.xy ? r4.zw : r0.xy;
  r4.zw = float2(0.000000e+000,0.000000e+000);
  r0.xy = t24.Load(r4.xyz).xy;
  r3.yzw = -cb12[0].xyz + r3.yzw;
  r0.z = dot(r3.yzw, r3.yzw);
  r0.z = sqrt(r0.z);
  r4.x = cb12[1].z;
  r4.y = cb12[2].z;
  r4.z = cb12[3].z;
  r3.y = dot(r4.xyz, r3.yzw);
  r3.z = 1.000000e+000 / cb12[21].y;
  r3.z = r3.z * r0.z;
  r3.y = r3.z / r3.y;
  r3.y = -r3.y + r0.z;
  r3.y = saturate(cb13[33].w * r3.y);
  r3.y = cb13[33].z * r3.y;
  r3.y = max(r3.y, 1.000000047e-003);
  r0.z = r0.z / cb13[34].z;
  r3.z = r0.x < r0.y;
  if (r3.z != 0) {
    r3.zw = r0.zy < r0.xz;
    r4.x = cb13[34].z * r0.x + -cb13[34].x;
    r4.x = saturate(-r4.x * cb13[34].y + 1.000000000e+000);
    r4.y = r0.z + -r0.x;
    r4.y = cb13[34].z * r4.y;
    r4.y = saturate(r4.y / r3.y);
    r4.y = r4.x * r4.y;
    r3.z = (int)r3.z | (int)r3.w;
    r4.x = 1.000000000e+000;
    r3.zw = r3.zz ? float2(0.000000e+000,1.000000e+000) : r4.xy;
  } else {
    r4.xyz = r0.yzx < r0.xyz;
    r0.x = cb13[34].z * r0.x + -cb13[34].x;
    r5.y = saturate(-r0.x * cb13[34].y + 1.000000000e+000);
    r0.x = r0.z + -r0.y;
    r0.x = cb13[34].z * r0.x;
    r0.x = saturate(r0.x / r3.y);
    r5.w = 1.000000000e+000 + -r0.x;
    r5.xz = float2(1.000000e+000,1.000000e+000);
    r0.xy = r4.zz ? r5.xy : r5.zw;
    r0.xy = r4.yy ? float2(1.000000e+000,1.000000e+000) : r0.xy;
    r3.zw = r4.xx ? r0.xy : float2(0.000000e+000,1.000000e+000);
  }
  r0.x = -r3.w * r3.z + 1.000000000e+000;
  r0.y = dot(r2.xyz, float3(2.990000e-001,5.870000e-001,1.140000e-001));
  r0.z = 3.310000002e-001 * r2.y;
  r0.z = r2.x * -1.679999977e-001 + -r0.z;
  r0.z = r2.z * 5.000000000e-001 + r0.z;
  r4.y = saturate(5.000000000e-001 + r0.z);
  r0.z = 4.180000126e-001 * r2.y;
  r0.z = r2.x * 5.000000000e-001 + -r0.z;
  r0.z = -r2.z * 8.100000024e-002 + r0.z;
  r4.z = saturate(5.000000000e-001 + r0.z);
  r0.z = max(r3.x, 3.000000119e-001);
  r3.x = r0.y * r0.z;
  r0.x = r0.x * r0.w;
  r2.y = max(r2.z, r2.y);
  r2.y = max(r2.y, r2.x);
  r2.y = 2.000000030e-001 < r2.y;
  r2.y = r2.y ? r2.x : 1.199999973e-001;
  r2.y = r2.y + -r2.x;
  r2.x = r0.x * r2.y + r2.x;
  r0.y = -r0.y * r0.z + r2.x;
  r4.x = saturate(r0.w * r0.y + r3.x);
  r3.xyzw = float4(-5.000000e-001,-5.000000e-001,-5.000000e-001,-5.000000e-001) + r4.zyzy;
  r0.y = -r3.y * 3.440000117e-001 + r4.x;
  o0.y = saturate(-r3.z * 7.139999866e-001 + r0.y);
  o0.xz = saturate(r3.xw * float2(1.402000e+000,1.772000e+000) + r4.xx);
  r0.y = r1.w < 3.300000131e-001;
  r0.z = 9.499999881e-001 * r1.w;
  r0.y = r0.y ? r0.z : 3.300000131e-001;
  r0.y = r0.y + -r1.w;
  r0.x = r0.x * r0.y;
  o1.w = r0.w * r0.x + r1.w;
  o0.w = r2.w;
  o1.xyz = r1.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb13[35], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
ftou r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.xyzw, r0.xyww, t1.xyzw
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyww, t2.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t7.yzxw
mad r0.w, r0.z, cb12[22].x, cb12[22].y
ge r0.w, r0.w, l(1.000000)
if_nz r0.w
  mov o0.xyzw, r2.xyzw
  mov o1.xyzw, r1.xyzw
  ret 
endif 
mov_sat r0.w, cb3[2].x
mul r0.w, r0.w, l(0.150000)
sample_l_indexable(texture2d)(float,float,float,float) r3.x, v1.xyxx, t6.xyzw, s0, l(0.000000)
add r3.x, -r3.x, l(1.000000)
mul r0.w, r0.w, r3.x
mul r4.xyzw, v0.yyyy, cb12[211].xyzw
mad r4.xyzw, cb12[210].xyzw, v0.xxxx, r4.xyzw
mad r4.xyzw, cb12[212].xyzw, r0.zzzz, r4.xyzw
add r4.xyzw, r4.xyzw, cb12[213].xyzw
div r3.yzw, r4.xxyz, r4.wwww
xor r4.xy, r0.xyxx, l(2, 2, 0, 0)
imax r0.xy, r0.xyxx, -r0.xyxx
ushr r0.xy, r0.xyxx, l(1, 1, 0, 0)
ineg r4.zw, r0.xxxy
and r4.xy, r4.xyxx, l(0x80000000, 0x80000000, 0, 0)
movc r4.xy, r4.xyxx, r4.zwzz, r0.xyxx
mov r4.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.xy, r4.xyzw, t24.xyzw
add r3.yzw, r3.yyzw, -cb12[0].xxyz
dp3 r0.z, r3.yzwy, r3.yzwy
sqrt r0.z, r0.z
mov r4.x, cb12[1].z
mov r4.y, cb12[2].z
mov r4.z, cb12[3].z
dp3 r3.y, r4.xyzx, r3.yzwy
div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb12[21].y
mul r3.z, r0.z, r3.z
div r3.y, r3.z, r3.y
add r3.y, r0.z, -r3.y
mul_sat r3.y, r3.y, cb13[33].w
mul r3.y, r3.y, cb13[33].z
max r3.y, r3.y, l(0.001000)
div r0.z, r0.z, cb13[34].z
lt r3.z, r0.x, r0.y
if_nz r3.z
  lt r3.zw, r0.zzzy, r0.xxxz
  mad r4.x, cb13[34].z, r0.x, -cb13[34].x
  mad_sat r4.x, -r4.x, cb13[34].y, l(1.000000)
  add r4.y, -r0.x, r0.z
  mul r4.y, r4.y, cb13[34].z
  div_sat r4.y, r4.y, r3.y
  mul r4.y, r4.y, r4.x
  or r3.z, r3.z, r3.w
  mov r4.x, l(1.000000)
  movc r3.zw, r3.zzzz, l(0,0,0,1.000000), r4.xxxy
else 
  lt r4.xyz, r0.yzxy, r0.xyzx
  mad r0.x, cb13[34].z, r0.x, -cb13[34].x
  mad_sat r5.y, -r0.x, cb13[34].y, l(1.000000)
  add r0.x, -r0.y, r0.z
  mul r0.x, r0.x, cb13[34].z
  div_sat r0.x, r0.x, r3.y
  add r5.w, -r0.x, l(1.000000)
  mov r5.xz, l(1.000000,0,1.000000,0)
  movc r0.xy, r4.zzzz, r5.xyxx, r5.zwzz
  movc r0.xy, r4.yyyy, l(1.000000,1.000000,0,0), r0.xyxx
  movc r3.zw, r4.xxxx, r0.xxxy, l(0,0,0,1.000000)
endif 
mad r0.x, -r3.w, r3.z, l(1.000000)
dp3 r0.y, r2.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
mul r0.z, r2.y, l(0.331000)
mad r0.z, r2.x, l(-0.168000), -r0.z
mad r0.z, r2.z, l(0.500000), r0.z
add_sat r4.y, r0.z, l(0.500000)
mul r0.z, r2.y, l(0.418000)
mad r0.z, r2.x, l(0.500000), -r0.z
mad r0.z, -r2.z, l(0.081000), r0.z
add_sat r4.z, r0.z, l(0.500000)
max r0.z, r3.x, l(0.300000)
mul r3.x, r0.z, r0.y
mul r0.x, r0.w, r0.x
max r2.y, r2.z, r2.y
max r2.y, r2.y, r2.x
lt r2.y, l(0.200000), r2.y
movc r2.y, r2.y, r2.x, l(0.120000)
add r2.y, -r2.x, r2.y
mad r2.x, r0.x, r2.y, r2.x
mad r0.y, -r0.y, r0.z, r2.x
mad_sat r4.x, r0.w, r0.y, r3.x
add r3.xyzw, r4.zyzy, l(-0.500000, -0.500000, -0.500000, -0.500000)
mad r0.y, -r3.y, l(0.344000), r4.x
mad_sat o0.y, -r3.z, l(0.714000), r0.y
mad_sat o0.xz, r3.xxwx, l(1.402000, 0.000000, 1.772000, 0.000000), r4.xxxx
lt r0.y, r1.w, l(0.330000)
mul r0.z, r1.w, l(0.950000)
movc r0.y, r0.y, r0.z, l(0.330000)
add r0.y, -r1.w, r0.y
mul r0.x, r0.y, r0.x
mad o1.w, r0.w, r0.x, r1.w
mov o0.w, r2.w
mov o1.xyz, r1.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//
// Buffer Definitions: 
//
// cbuffer cb13
// {
//
//   float4 cb13[35];                   // Offset:    0 Size:   560
//
// }
//
// cbuffer cb12
// {
//
//   float4 cb12[214];                  // Offset:    0 Size:  3424
//
// }
//
// cbuffer cb3
// {
//
//   float4 cb3[3];                     // Offset:    0 Size:    48
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4          2d    2        1
// t6                                texture  float4          2d    6        1
// t7                                texture  float4          2d    7        1
// t24                               texture  float4          2d   24        1
// cb3                               cbuffer      NA          NA    3        1
// cb12                              cbuffer      NA          NA   12        1
// cb13                              cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[35], immediateIndexed
dcl_constantbuffer cb12[214], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
ftou r0.xy, v0.xyxx
utof r0.zw, r0.xxxy
ftoi r1.xy, r0.zwzz
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r1.xyww, t1.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.xyww, t2.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t7.yzxw
mad r0.w, r0.z, cb12[22].x, cb12[22].y
ge r0.w, r0.w, l(1.000000)
if_nz r0.w
  mov o0.xyzw, r3.xyzw
  mov o1.xyzw, r2.xyzw
  ret 
endif 
mov_sat r0.w, cb3[2].x
mul r0.w, r0.w, l(0.150000)
sample_l_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t6.xyzw, s0, l(0.000000)
add r1.x, -r1.x, l(1.000000)
mul r0.w, r0.w, r1.x
mul r4.xyzw, v0.yyyy, cb12[211].xyzw
mad r4.xyzw, cb12[210].xyzw, v0.xxxx, r4.xyzw
mad r4.xyzw, cb12[212].xyzw, r0.zzzz, r4.xyzw
add r4.xyzw, r4.xyzw, cb12[213].xyzw
div r1.yzw, r4.xxyz, r4.wwww
ushr r0.xy, r0.xyxx, l(1, 1, 0, 0)
utof r0.xy, r0.xyxx
ftoi r4.xy, r0.xyxx
mov r4.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.xz, r4.xyzw, t24.yzxw
add r1.yzw, r1.yyzw, -cb12[0].xxyz
dp3 r4.x, r1.yzwy, r1.yzwy
sqrt r4.x, r4.x
mov r5.x, cb12[1].z
mov r5.y, cb12[2].z
mov r5.z, cb12[3].z
dp3 r1.y, r5.xyzx, r1.yzwy
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb12[21].y
mul r1.z, r4.x, r1.z
div r1.y, r1.z, r1.y
add r1.y, r4.x, -r1.y
mul_sat r1.y, r1.y, cb13[33].w
mul r1.y, r1.y, cb13[33].z
max r1.y, r1.y, l(0.001000)
div r0.y, r4.x, cb13[34].z
lt r1.z, r0.z, r0.x
lt r4.xy, r0.yxyy, r0.zyzz
mad r1.w, cb13[34].z, r0.z, -cb13[34].x
mad_sat r5.w, -r1.w, cb13[34].y, l(1.000000)
add r4.zw, -r0.zzzx, r0.yyyy
mul r4.zw, r4.zzzw, cb13[34].zzzz
div_sat r1.yw, r4.zzzw, r1.yyyy
mul r5.y, r1.y, r5.w
or r1.y, r4.y, r4.x
mov r5.xz, l(1.000000,0,1.000000,0)
movc r4.xy, r1.yyyy, l(0,1.000000,0,0), r5.xyxx
lt r0.xyz, r0.xyzx, r0.zxyz
add r5.y, -r1.w, l(1.000000)
mov r5.x, l(1.000000)
movc r1.yw, r0.zzzz, r5.zzzw, r5.xxxy
movc r0.yz, r0.yyyy, l(0,1.000000,1.000000,0), r1.yywy
movc r0.xy, r0.xxxx, r0.yzyy, l(0,1.000000,0,0)
movc r0.xy, r1.zzzz, r4.xyxx, r0.xyxx
mad r0.x, -r0.y, r0.x, l(1.000000)
dp3 r0.y, r3.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
mul r1.yz, r3.yyyy, l(0.000000, 0.331000, 0.418000, 0.000000)
mad r0.z, r3.x, l(-0.168000), -r1.y
mad r0.z, r3.z, l(0.500000), r0.z
add r0.z, r0.z, l(0.500000)
mov_sat r4.xw, r0.zzzz
mad r0.z, r3.x, l(0.500000), -r1.z
mad r0.z, r3.z, l(-0.081000), r0.z
add r0.z, r0.z, l(0.500000)
mov_sat r4.yz, r0.zzzz
max r0.z, r1.x, l(0.300000)
mul r1.x, r0.z, r0.y
mul r0.x, r0.w, r0.x
max r1.y, r3.y, r3.z
max r1.y, r3.x, r1.y
lt r1.y, l(0.200000), r1.y
movc r1.y, r1.y, r3.x, l(0.120000)
add r1.y, -r3.x, r1.y
mad r1.y, r0.x, r1.y, r3.x
mad r0.y, -r0.y, r0.z, r1.y
mad_sat r0.y, r0.w, r0.y, r1.x
add r1.xyzw, r4.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
mad r1.xzw, r1.xxzw, l(-0.344000, 0.000000, 1.402000, 1.772000), r0.yyyy
mad_sat o0.y, r1.y, l(-0.714000), r1.x
mov_sat o0.xz, r1.zzwz
lt r0.y, r2.w, l(0.330000)
mul r0.z, r2.w, l(0.950000)
movc r0.y, r0.y, r0.z, l(0.330000)
add r0.y, -r2.w, r0.y
mul r0.x, r0.y, r0.x
mad o1.w, r0.w, r0.x, r2.w
mov o0.w, r3.w
mov o1.xyz, r2.xyzx
ret 
// Approximately 97 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
