// skybox - Moon

cbuffer cb12 : register(b12)
{
  float4 cb12[193];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[6];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[4];
}


Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float3 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float3 v2 : NORMAL0,
  float4 v3 : TANGENT0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float3 o5 : TEXCOORD5,
  out float4 o6 : SV_Position0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz * cb2[4].xyz + cb2[5].xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, cb2[0].xyzw);
  r1.y = dot(r0.xyzw, cb2[1].xyzw);
  r1.z = dot(r0.xyzw, cb2[2].xyzw);
  r2.xyzw = cb2[1].xyzw * cb1[0].yyyy;
  r2.xyzw = cb2[0].xyzw * cb1[0].xxxx + r2.xyzw;
  r2.xyzw = cb2[2].xyzw * cb1[0].zzzz + r2.xyzw;
  r2.xyzw = cb1[0].wwww * float4(0.000000e+000,0.000000e+000,0.000000e+000,1.000000e+000) + r2.xyzw;
  r3.xyzw = cb2[1].xyzw * cb1[1].yyyy;
  r3.xyzw = cb2[0].xyzw * cb1[1].xxxx + r3.xyzw;
  r3.xyzw = cb2[2].xyzw * cb1[1].zzzz + r3.xyzw;
  r3.xyzw = cb1[1].wwww * float4(0.000000e+000,0.000000e+000,0.000000e+000,1.000000e+000) + r3.xyzw;
  r4.xyzw = cb2[1].xyzw * cb1[2].yyyy;
  r4.xyzw = cb2[0].xyzw * cb1[2].xxxx + r4.xyzw;
  r4.xyzw = cb2[2].xyzw * cb1[2].zzzz + r4.xyzw;
  r4.xyzw = cb1[2].wwww * float4(0.000000e+000,0.000000e+000,0.000000e+000,1.000000e+000) + r4.xyzw;
  r5.xyzw = cb2[1].xyzw * cb1[3].yyyy;
  r5.xyzw = cb2[0].xyzw * cb1[3].xxxx + r5.xyzw;
  r5.xyzw = cb2[2].xyzw * cb1[3].zzzz + r5.xyzw;
  r5.xyzw = cb1[3].wwww * float4(0.000000e+000,0.000000e+000,0.000000e+000,1.000000e+000) + r5.xyzw;
  o6.x = dot(r0.xyzw, r2.xyzw);
  o6.y = dot(r0.xyzw, r3.xyzw);
  o6.z = dot(r0.xyzw, r4.xyzw);
  o6.w = dot(r0.xyzw, r5.xyzw);
  r0.xyz = v2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.xyzw = v3.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.xyz = r2.yzx * r0.zxy;
  r3.xyz = r0.yzx * r2.zxy + -r3.xyz;
  r3.xyz = r3.xyz * r2.www;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r4.x = dot(r0.xyz, cb2[0].xyz);
  r4.y = dot(r0.xyz, cb2[1].xyz);
  r4.z = dot(r0.xyz, cb2[2].xyz);
  r0.x = dot(r4.xyz, r4.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r4.xyz * r0.xxx;
  r4.x = dot(r3.xyz, cb2[0].xyz);
  r4.y = dot(r3.xyz, cb2[1].xyz);
  r4.z = dot(r3.xyz, cb2[2].xyz);
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  o3.xyz = r4.xyz * r0.www;
  r3.x = dot(r2.xyz, cb2[0].xyz);
  r3.y = dot(r2.xyz, cb2[1].xyz);
  r3.z = dot(r2.xyz, cb2[2].xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  o5.xyz = r3.xyz * r0.www;
  r2.xyz = -cb12[0].xyz + r1.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = sqrt(r0.w);
  r2.xyz = r2.xyz / r0.www;
  r0.w = -cb12[22].z + r0.w;
  r0.w = max(0.000000000e+000, r0.w);
  r0.w = min(cb12[42].z, r0.w);
  r1.w = dot(cb12[38].xyz, r2.xyz);
  r2.x = abs(r1.w) * abs(r1.w);
  r2.y = saturate(r0.w * 2.000000095e-003 + -3.000000119e-001);
  r2.x = r2.x * r2.y;
  r2.y = 0.000000000e+000 < r1.w;
  r3.xyz = r2.yyy ? cb12[39].xyz : cb12[41].xyz;
  r3.xyz = -cb12[40].xyz + r3.xyz;
  r3.xyz = r2.xxx * r3.xyz + cb12[40].xyz;
  r4.xyz = r2.yyy ? cb12[45].xyz : cb12[47].xyz;
  r4.xyz = -cb12[46].xyz + r4.xyz;
  o0.xyz = r2.xxx * r4.xyz + cb12[46].xyz;
  r2.x = r0.w >= cb12[48].y;
  if (r2.x != 0) {
    r2.x = r2.z * cb12[22].z + cb12[0].z;
    r2.y = r2.z * r0.w;
    r2.z = cb12[43].x * r0.w;
    r2.yz = float2(6.250000e-002,6.250000e-002) * r2.yz;
    r1.w = cb12[42].x + r1.w;
    r2.w = 1.000000000e+000 + cb12[42].x;
    r1.w = saturate(r1.w / r2.w);
    r2.w = cb12[43].y + -cb12[43].z;
    r1.w = r1.w * r2.w + cb12[43].z;
    r2.x = cb12[42].y + r2.x;
    r2.yw = r2.yx * r1.ww;
    r4.xyzw = r2.yyyy * float4(1.600000e+001,1.500000e+001,1.400000e+001,1.300000e+001) + r2.wwww;
    r4.xyzw = max(float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000), r4.xyzw);
    r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + r4.xyzw;
    r4.xyzw = saturate(r2.zzzz / r4.xyzw);
    r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyzw;
    r3.w = r4.x * r4.y;
    r3.w = r3.w * r4.z;
    r3.w = r3.w * r4.w;
    r4.xyzw = r2.yyyy * float4(1.200000e+001,1.100000e+001,1.000000e+001,9.000000e+000) + r2.wwww;
    r4.xyzw = max(float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000), r4.xyzw);
    r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + r4.xyzw;
    r4.xyzw = saturate(r2.zzzz / r4.xyzw);
    r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyzw;
    r3.w = r4.x * r3.w;
    r3.w = r3.w * r4.y;
    r3.w = r3.w * r4.z;
    r3.w = r3.w * r4.w;
    r4.xyzw = r2.yyyy * float4(8.000000e+000,7.000000e+000,6.000000e+000,5.000000e+000) + r2.wwww;
    r4.xyzw = max(float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000), r4.xyzw);
    r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + r4.xyzw;
    r4.xyzw = saturate(r2.zzzz / r4.xyzw);
    r4.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyzw;
    r3.w = r4.x * r3.w;
    r3.w = r3.w * r4.y;
    r3.w = r3.w * r4.z;
    r3.w = r3.w * r4.w;
    r4.xy = r2.yy * float2(4.000000e+000,3.000000e+000) + r2.ww;
    r4.xy = max(float2(0.000000e+000,0.000000e+000), r4.xy);
    r4.xy = float2(1.000000e+000,1.000000e+000) + r4.xy;
    r4.xy = saturate(r2.zz / r4.xy);
    r4.xy = float2(1.000000e+000,1.000000e+000) + -r4.xy;
    r3.w = r4.x * r3.w;
    r3.w = r3.w * r4.y;
    r2.w = r2.y * 2.000000000e+000 + r2.w;
    r2.w = max(0.000000000e+000, r2.w);
    r2.w = 1.000000000e+000 + r2.w;
    r2.w = saturate(r2.z / r2.w);
    r2.w = 1.000000000e+000 + -r2.w;
    r2.w = r3.w * r2.w;
    r1.w = r2.x * r1.w + r2.y;
    r1.w = max(0.000000000e+000, r1.w);
    r1.w = 1.000000000e+000 + r1.w;
    r1.w = saturate(r2.z / r1.w);
    r1.w = 1.000000000e+000 + -r1.w;
    r1.w = -r2.w * r1.w + 1.000000000e+000;
    r0.w = -cb12[48].y + r0.w;
    r0.w = saturate(cb12[48].z * r0.w);
  } else {
    r1.w = 1.000000000e+000;
    r0.w = 0.000000000e+000;
  }
  r1.w = log2(r1.w);
  r2.x = cb12[42].w * r1.w;
  r2.x = exp2(r2.x);
  r2.x = r2.x * r0.w;
  r1.w = cb12[48].x * r1.w;
  r1.w = exp2(r1.w);
  o0.w = r1.w * r0.w;
  r2.yz = saturate(r2.xx * cb12[189].xz + cb12[189].yw);
  r4.xyz = cb12[188].xyz + -r3.xyz;
  r4.xyz = r2.yyy * r4.xyz + r3.xyz;
  r0.w = -1.000000000e+000 + cb12[188].w;
  r0.w = r2.z * r0.w + 1.000000000e+000;
  r4.w = saturate(r2.x * r0.w);
  r0.w = 0.000000000e+000 < cb12[192].x;
  if (r0.w != 0) {
    r2.yz = saturate(r2.xx * cb12[191].xz + cb12[191].yw);
    r5.xyz = cb12[190].xyz + -r3.xyz;
    r3.xyz = r2.yyy * r5.xyz + r3.xyz;
    r0.w = -1.000000000e+000 + cb12[190].w;
    r0.w = r2.z * r0.w + 1.000000000e+000;
    r3.w = saturate(r2.x * r0.w);
    r2.xyzw = r3.xyzw + -r4.xyzw;
    o1.xyzw = cb12[192].xxxx * r2.xyzw + r4.xyzw;
  } else {
    o1.xyzw = r4.xyzw;
  }
  o2.xy = v1.xy;
  o2.zw = r0.xy;
  o3.w = r0.z;
  o4.xyz = r1.xyz;

// Move moon to infinity:
float4 stereo = StereoParams.Load(0);
o6.x += stereo.x * stereo.y;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyz         5     NONE   float   xyz 
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb12[193], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output_siv o6.xyzw, position
dcl_temps 6
mad r0.xyz, v0.xyzx, cb2[4].xyzx, cb2[5].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb2[0].xyzw
dp4 r1.y, r0.xyzw, cb2[1].xyzw
dp4 r1.z, r0.xyzw, cb2[2].xyzw
mul r2.xyzw, cb1[0].yyyy, cb2[1].xyzw
mad r2.xyzw, cb2[0].xyzw, cb1[0].xxxx, r2.xyzw
mad r2.xyzw, cb2[2].xyzw, cb1[0].zzzz, r2.xyzw
mad r2.xyzw, cb1[0].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r2.xyzw
mul r3.xyzw, cb1[1].yyyy, cb2[1].xyzw
mad r3.xyzw, cb2[0].xyzw, cb1[1].xxxx, r3.xyzw
mad r3.xyzw, cb2[2].xyzw, cb1[1].zzzz, r3.xyzw
mad r3.xyzw, cb1[1].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r3.xyzw
mul r4.xyzw, cb1[2].yyyy, cb2[1].xyzw
mad r4.xyzw, cb2[0].xyzw, cb1[2].xxxx, r4.xyzw
mad r4.xyzw, cb2[2].xyzw, cb1[2].zzzz, r4.xyzw
mad r4.xyzw, cb1[2].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r4.xyzw
mul r5.xyzw, cb1[3].yyyy, cb2[1].xyzw
mad r5.xyzw, cb2[0].xyzw, cb1[3].xxxx, r5.xyzw
mad r5.xyzw, cb2[2].xyzw, cb1[3].zzzz, r5.xyzw
mad r5.xyzw, cb1[3].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r5.xyzw
dp4 o6.x, r0.xyzw, r2.xyzw
dp4 o6.y, r0.xyzw, r3.xyzw
dp4 o6.z, r0.xyzw, r4.xyzw
dp4 o6.w, r0.xyzw, r5.xyzw
mad r0.xyz, v2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xyzw, v3.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r3.xyz, r0.zxyz, r2.yzxy
mad r3.xyz, r0.yzxy, r2.zxyz, -r3.xyzx
mul r3.xyz, r2.wwww, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r4.x, r0.xyzx, cb2[0].xyzx
dp3 r4.y, r0.xyzx, cb2[1].xyzx
dp3 r4.z, r0.xyzx, cb2[2].xyzx
dp3 r0.x, r4.xyzx, r4.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r4.xyzx
dp3 r4.x, r3.xyzx, cb2[0].xyzx
dp3 r4.y, r3.xyzx, cb2[1].xyzx
dp3 r4.z, r3.xyzx, cb2[2].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul o3.xyz, r0.wwww, r4.xyzx
dp3 r3.x, r2.xyzx, cb2[0].xyzx
dp3 r3.y, r2.xyzx, cb2[1].xyzx
dp3 r3.z, r2.xyzx, cb2[2].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul o5.xyz, r0.wwww, r3.xyzx
add r2.xyz, r1.xyzx, -cb12[0].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, r2.xyzx, r0.wwww
add r0.w, r0.w, -cb12[22].z
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, cb12[42].z
dp3 r1.w, cb12[38].xyzx, r2.xyzx
mul r2.x, |r1.w|, |r1.w|
mad_sat r2.y, r0.w, l(0.002000), l(-0.300000)
mul r2.x, r2.y, r2.x
lt r2.y, l(0.000000), r1.w
movc r3.xyz, r2.yyyy, cb12[39].xyzx, cb12[41].xyzx
add r3.xyz, r3.xyzx, -cb12[40].xyzx
mad r3.xyz, r2.xxxx, r3.xyzx, cb12[40].xyzx
movc r4.xyz, r2.yyyy, cb12[45].xyzx, cb12[47].xyzx
add r4.xyz, r4.xyzx, -cb12[46].xyzx
mad o0.xyz, r2.xxxx, r4.xyzx, cb12[46].xyzx
ge r2.x, r0.w, cb12[48].y
if_nz r2.x
  mad r2.x, r2.z, cb12[22].z, cb12[0].z
  mul r2.y, r0.w, r2.z
  mul r2.z, r0.w, cb12[43].x
  mul r2.yz, r2.yyzy, l(0.000000, 0.062500, 0.062500, 0.000000)
  add r1.w, r1.w, cb12[42].x
  add r2.w, cb12[42].x, l(1.000000)
  div_sat r1.w, r1.w, r2.w
  add r2.w, -cb12[43].z, cb12[43].y
  mad r1.w, r1.w, r2.w, cb12[43].z
  add r2.x, r2.x, cb12[42].y
  mul r2.yw, r1.wwww, r2.yyyx
  mad r4.xyzw, r2.yyyy, l(16.000000, 15.000000, 14.000000, 13.000000), r2.wwww
  max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r4.xyzw, r2.zzzz, r4.xyzw
  add r4.xyzw, -r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r3.w, r4.y, r4.x
  mul r3.w, r4.z, r3.w
  mul r3.w, r4.w, r3.w
  mad r4.xyzw, r2.yyyy, l(12.000000, 11.000000, 10.000000, 9.000000), r2.wwww
  max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r4.xyzw, r2.zzzz, r4.xyzw
  add r4.xyzw, -r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r3.w, r3.w, r4.x
  mul r3.w, r4.y, r3.w
  mul r3.w, r4.z, r3.w
  mul r3.w, r4.w, r3.w
  mad r4.xyzw, r2.yyyy, l(8.000000, 7.000000, 6.000000, 5.000000), r2.wwww
  max r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r4.xyzw, r2.zzzz, r4.xyzw
  add r4.xyzw, -r4.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r3.w, r3.w, r4.x
  mul r3.w, r4.y, r3.w
  mul r3.w, r4.z, r3.w
  mul r3.w, r4.w, r3.w
  mad r4.xy, r2.yyyy, l(4.000000, 3.000000, 0.000000, 0.000000), r2.wwww
  max r4.xy, r4.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.xy, r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  div_sat r4.xy, r2.zzzz, r4.xyxx
  add r4.xy, -r4.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  mul r3.w, r3.w, r4.x
  mul r3.w, r4.y, r3.w
  mad r2.w, r2.y, l(2.000000), r2.w
  max r2.w, r2.w, l(0.000000)
  add r2.w, r2.w, l(1.000000)
  div_sat r2.w, r2.z, r2.w
  add r2.w, -r2.w, l(1.000000)
  mul r2.w, r2.w, r3.w
  mad r1.w, r2.x, r1.w, r2.y
  max r1.w, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  div_sat r1.w, r2.z, r1.w
  add r1.w, -r1.w, l(1.000000)
  mad r1.w, -r2.w, r1.w, l(1.000000)
  add r0.w, r0.w, -cb12[48].y
  mul_sat r0.w, r0.w, cb12[48].z
else 
  mov r1.w, l(1.000000)
  mov r0.w, l(0)
endif 
log r1.w, r1.w
mul r2.x, r1.w, cb12[42].w
exp r2.x, r2.x
mul r2.x, r0.w, r2.x
mul r1.w, r1.w, cb12[48].x
exp r1.w, r1.w
mul o0.w, r0.w, r1.w
mad_sat r2.yz, r2.xxxx, cb12[189].xxzx, cb12[189].yywy
add r4.xyz, -r3.xyzx, cb12[188].xyzx
mad r4.xyz, r2.yyyy, r4.xyzx, r3.xyzx
add r0.w, cb12[188].w, l(-1.000000)
mad r0.w, r2.z, r0.w, l(1.000000)
mul_sat r4.w, r0.w, r2.x
lt r0.w, l(0.000000), cb12[192].x
if_nz r0.w
  mad_sat r2.yz, r2.xxxx, cb12[191].xxzx, cb12[191].yywy
  add r5.xyz, -r3.xyzx, cb12[190].xyzx
  mad r3.xyz, r2.yyyy, r5.xyzx, r3.xyzx
  add r0.w, cb12[190].w, l(-1.000000)
  mad r0.w, r2.z, r0.w, l(1.000000)
  mul_sat r3.w, r0.w, r2.x
  add r2.xyzw, -r4.xyzw, r3.xyzw
  mad o1.xyzw, cb12[192].xxxx, r2.xyzw, r4.xyzw
else 
  mov o1.xyzw, r4.xyzw
endif 
mov o2.xy, v1.xyxx
mov o2.zw, r0.xxxy
mov o3.w, r0.z
mov o4.xyz, r1.xyzx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.12 on Sat May 30 15:50:46 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb12
// {
//
//   float4 cb12[193];                  // Offset:    0 Size:  3088
//
// }
//
// cbuffer cb2
// {
//
//   float4 cb2[6];                     // Offset:    0 Size:    96
//
// }
//
// cbuffer cb1
// {
//
//   float4 cb1[4];                     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cb1                               cbuffer      NA          NA    1        1
// cb2                               cbuffer      NA          NA    2        1
// cb12                              cbuffer      NA          NA   12        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// NORMAL                   0   xyz         2     NONE   float   xyz 
// TANGENT                  0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyz         5     NONE   float   xyz 
// SV_Position              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[193], immediateIndexed
dcl_constantbuffer cb2[6], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output_siv o6.xyzw, position
dcl_temps 6
mad r0.xyz, v0.xyzx, cb2[4].xyzx, cb2[5].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb2[0].xyzw
dp4 r1.y, r0.xyzw, cb2[1].xyzw
dp4 r1.z, r0.xyzw, cb2[2].xyzw
mul r2.xyzw, cb2[1].xyzw, cb1[0].yyyy
mad r2.xyzw, cb2[0].xyzw, cb1[0].xxxx, r2.xyzw
mad r2.xyzw, cb2[2].xyzw, cb1[0].zzzz, r2.xyzw
mad r2.xyzw, cb1[0].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r2.xyzw
mul r3.xyzw, cb2[1].xyzw, cb1[1].yyyy
mad r3.xyzw, cb2[0].xyzw, cb1[1].xxxx, r3.xyzw
mad r3.xyzw, cb2[2].xyzw, cb1[1].zzzz, r3.xyzw
mad r3.xyzw, cb1[1].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r3.xyzw
mul r4.xyzw, cb2[1].xyzw, cb1[2].yyyy
mad r4.xyzw, cb2[0].xyzw, cb1[2].xxxx, r4.xyzw
mad r4.xyzw, cb2[2].xyzw, cb1[2].zzzz, r4.xyzw
mad r4.xyzw, cb1[2].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r4.xyzw
mul r5.xyzw, cb2[1].xyzw, cb1[3].yyyy
mad r5.xyzw, cb2[0].xyzw, cb1[3].xxxx, r5.xyzw
mad r5.xyzw, cb2[2].xyzw, cb1[3].zzzz, r5.xyzw
mad r5.xyzw, cb1[3].wwww, l(0.000000, 0.000000, 0.000000, 1.000000), r5.xyzw
dp4 o6.x, r0.xyzw, r2.xyzw
dp4 o6.y, r0.xyzw, r3.xyzw
dp4 o6.z, r0.xyzw, r4.xyzw
dp4 o6.w, r0.xyzw, r5.xyzw
mad r0.xyz, v2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xyzw, v3.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r3.xyz, r0.zxyz, r2.yzxy
mad r3.xyz, r0.yzxy, r2.zxyz, -r3.xyzx
mul r3.xyz, r2.wwww, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3 r4.x, r0.xyzx, cb2[0].xyzx
dp3 r4.y, r0.xyzx, cb2[1].xyzx
dp3 r4.z, r0.xyzx, cb2[2].xyzx
dp3 r0.x, r4.xyzx, r4.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r4.xyzx
dp3 r4.x, r3.xyzx, cb2[0].xyzx
dp3 r4.y, r3.xyzx, cb2[1].xyzx
dp3 r4.z, r3.xyzx, cb2[2].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul o3.xyz, r0.wwww, r4.xyzx
dp3 r3.x, r2.xyzx, cb2[0].xyzx
dp3 r3.y, r2.xyzx, cb2[1].xyzx
dp3 r3.z, r2.xyzx, cb2[2].xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul o5.xyz, r0.wwww, r3.xyzx
add r2.xyz, r1.xyzx, -cb12[0].xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
sqrt r0.w, r0.w
div r2.xyz, r2.xyzx, r0.wwww
add r0.w, r0.w, -cb12[22].z
max r0.w, r0.w, l(0.000000)
min r0.w, r0.w, cb12[42].z
dp3 r1.w, cb12[38].xyzx, r2.xyzx
mul r2.x, |r1.w|, |r1.w|
mad_sat r2.y, r0.w, l(0.002000), l(-0.300000)
mul r2.x, r2.y, r2.x
lt r2.y, l(0.000000), r1.w
movc r3.xyz, r2.yyyy, cb12[39].xyzx, cb12[41].xyzx
add r3.xyz, r3.xyzx, -cb12[40].xyzx
mad r3.xyz, r2.xxxx, r3.xyzx, cb12[40].xyzx
movc r4.xyz, r2.yyyy, cb12[45].xyzx, cb12[47].xyzx
add r4.xyz, r4.xyzx, -cb12[46].xyzx
mad o0.xyz, r2.xxxx, r4.xyzx, cb12[46].xyzx
ge r2.x, r0.w, cb12[48].y
if_nz r2.x
  mad r2.x, r2.z, cb12[22].z, cb12[0].z
  mul r4.x, r0.w, r2.z
  mul r4.y, r0.w, cb12[43].x
  mul r4.xy, r4.xyxx, l(0.062500, 0.062500, 0.000000, 0.000000)
  add r1.w, r1.w, cb12[42].x
  add r2.y, cb12[42].x, l(1.000000)
  div_sat r1.w, r1.w, r2.y
  add r2.y, -cb12[43].z, cb12[43].y
  mad r1.w, r1.w, r2.y, cb12[43].z
  add r4.z, r2.x, cb12[42].y
  mul r2.xy, r1.wwww, r4.xzxx
  mad r5.xyzw, r2.xxxx, l(16.000000, 15.000000, 14.000000, 13.000000), r2.yyyy
  max r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r5.xyzw, r4.yyyy, r5.xyzw
  add r5.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r2.z, r5.y, r5.x
  mul r2.z, r5.z, r2.z
  mul r2.z, r5.w, r2.z
  mad r5.xyzw, r2.xxxx, l(12.000000, 11.000000, 10.000000, 9.000000), r2.yyyy
  max r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r5.xyzw, r4.yyyy, r5.xyzw
  add r5.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r2.z, r2.z, r5.x
  mul r2.z, r5.y, r2.z
  mul r2.z, r5.z, r2.z
  mul r2.z, r5.w, r2.z
  mad r5.xyzw, r2.xxxx, l(8.000000, 7.000000, 6.000000, 5.000000), r2.yyyy
  max r5.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r5.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div_sat r5.xyzw, r4.yyyy, r5.xyzw
  add r5.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r2.z, r2.z, r5.x
  mul r2.z, r5.y, r2.z
  mul r2.z, r5.z, r2.z
  mul r2.z, r5.w, r2.z
  mad r4.xw, r2.xxxx, l(4.000000, 0.000000, 0.000000, 3.000000), r2.yyyy
  max r4.xw, r4.xxxw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r4.xw, r4.xxxw, l(1.000000, 0.000000, 0.000000, 1.000000)
  div_sat r4.xw, r4.yyyy, r4.xxxw
  add r4.xw, -r4.xxxw, l(1.000000, 0.000000, 0.000000, 1.000000)
  mul r2.z, r2.z, r4.x
  mul r2.z, r4.w, r2.z
  add r2.xy, r2.xxxx, r2.xyxx
  mad r1.w, r4.z, r1.w, r2.x
  max r1.w, r1.w, l(0.000000)
  add r1.w, r1.w, l(1.000000)
  div_sat r1.w, r4.y, r1.w
  add r1.w, -r1.w, l(1.000000)
  mul r1.w, r1.w, r2.z
  max r2.x, r2.y, l(0.000000)
  add r2.x, r2.x, l(1.000000)
  div_sat r2.x, r4.y, r2.x
  add r2.x, -r2.x, l(1.000000)
  mad r1.w, -r1.w, r2.x, l(1.000000)
  add r0.w, r0.w, -cb12[48].y
  mul_sat r0.w, r0.w, cb12[48].z
else 
  mov r0.w, l(0)
  mov r1.w, l(1.000000)
endif 
log r1.w, r1.w
mul r2.x, r1.w, cb12[42].w
exp r2.x, r2.x
mul r2.x, r0.w, r2.x
mul r1.w, r1.w, cb12[48].x
exp r1.w, r1.w
mul o0.w, r0.w, r1.w
mad_sat r2.yz, r2.xxxx, cb12[189].xxzx, cb12[189].yywy
add r4.xyz, -r3.xyzx, cb12[188].xyzx
mad r4.xyz, r2.yyyy, r4.xyzx, r3.xyzx
add r0.w, cb12[188].w, l(-1.000000)
mad r0.w, r2.z, r0.w, l(1.000000)
mul_sat r4.w, r0.w, r2.x
lt r0.w, l(0.000000), cb12[192].x
mad_sat r2.yz, r2.xxxx, cb12[191].xxzx, cb12[191].yywy
add r5.xyz, -r3.xyzx, cb12[190].xyzx
mad r3.xyz, r2.yyyy, r5.xyzx, r3.xyzx
add r1.w, cb12[190].w, l(-1.000000)
mad r1.w, r2.z, r1.w, l(1.000000)
mul_sat r3.w, r1.w, r2.x
add r2.xyzw, -r4.xyzw, r3.xyzw
mad r2.xyzw, cb12[192].xxxx, r2.xyzw, r4.xyzw
movc o1.xyzw, r0.wwww, r2.xyzw, r4.xyzw
mov o2.xy, v1.xyxx
mov o2.zw, r0.xxxy
mov o3.w, r0.z
mov o4.xyz, r1.xyzx
ret 
// Approximately 161 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
