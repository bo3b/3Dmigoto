// ---- Created with 3Dmigoto v1.2.43 on Fri Sep 30 16:06:01 2016
// https://s3.amazonaws.com/dhr/Test/53a20a1570726154-cs_replace.txt


cbuffer cbLocalIBLLightInfo : register(b5)
{

  struct
  {
    float3 pos;
    float sqrAttenuationRadius;
    float4x4 invTransform;
    float3 extend;
    float textureIndex;
    float3 sideFadePositive;
    float influenceFadeDistance;
    float3 sideFadeNegative;
    float IBLType;
    float3 localOffset;
    float influenceExpandDistance;
    float3 influenceFadeNormal;
    float skipSkyVisibilityAsAO;
    float skipSkyVisibilityAsMask;
    float3 unused;
  } g_lightInfoLocalIBL[128] : packoffset(c0);

}

cbuffer cb0 : register(b0)
{
  float4x4 invViewProjectionMatrix : packoffset(c0);
  float4 g_exposureMultipliers : packoffset(c4);
  float localIblMipmapBias : packoffset(c5);
  float screenAspectRatio : packoffset(c5.y);
  float2 invResolution : packoffset(c5.z);
  float4 shadowMapSizeAndInvSize : packoffset(c6);
  uint forceSplitLighting : packoffset(c7);
  uint sssScatteringEnables : packoffset(c7.y);
  float volumetricShadowmapHalfTexelOffset : packoffset(c7.z);
  float volumetricShadowmapOneMinusHalfTexelOffset : packoffset(c7.w);
  float volumetricShadowmapInvMaxCount : packoffset(c8);
  float dynamicAOFactor : packoffset(c8.y);
  uint tileCountX : packoffset(c8.z);
  uint pad1 : packoffset(c8.w);
  float4x3 g_normalBasisTransforms[6] : packoffset(c9);
}

SamplerState g_linearSampler_s : register(s0);
SamplerState g_linearMipmapSampler_s : register(s1);
Texture2D<float4> g_gbufferTexture0 : register(t0);
Texture2D<float4> g_gbufferTexture1 : register(t1);
Texture2D<float4> g_gbufferTexture2 : register(t2);
Texture2D<float> g_depthTexture : register(t6);
TextureCubeArray<float4> g_specularLocalIBLsTexture : register(t7);
Texture2D<float4> g_preIntegratedFGTexture : register(t8);
Texture2D<float> g_diffuseOcclusionTexture : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


// Hand fixed for structured buffers. 

// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_structured t19, 16 
// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_structured t20, 4 
// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_structured t24, 4 

//StructuredBuffer<g_lightCullInput> g_lightCullInput : register(t19);
// Resource bind info for g_lightCullInput
// {
//
//   uint4 $Element;                    // Offset:    0 Size:    16
//
// }
struct g_lightCullInput_res
{
	uint4 g_lightCullInput_uint4;
};
StructuredBuffer<g_lightCullInput_res> g_lightCullInput : register(t19);

//StructuredBuffer<g_lightIndexInput> g_lightIndexInput : register(t20);
// Resource bind info for g_lightIndexInput
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
struct g_lightIndexInput_res
{
	uint g_lightIndexInput_uint;
};
StructuredBuffer<g_lightIndexInput_res> g_lightIndexInput : register(t20);

//StructuredBuffer<g_compactTileGridBuffer> g_compactTileGridBuffer : register(t24);
// Resource bind info for g_compactTileGridBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
struct g_compactTileGridBuffer_res
{
	uint g_compactTileGridBuffer_uint;
};
StructuredBuffer<g_compactTileGridBuffer_res> g_compactTileGridBuffer : register(t24);


// Manual fix for
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
RWTexture2D<float4> g_outputTexture0 : register(u0); 


// Manual fix for group shared registers
// unknown dcl_: dcl_tgsm_raw g0, 4
// unknown dcl_: dcl_tgsm_raw g1, 4
groupshared uint g0;
groupshared uint g1;


// Manual fix for
// unknown dcl_: dcl_thread_group 16, 16, 1
[numthreads(16, 16, 1)]  

void main(
uint3 vThreadGroupID : SV_GroupID,
uint3 vThreadIDInGroup : SV_GroupThreadID,
uint vThreadIDInGroupFlattened : SV_GroupIndex
)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;
  uint4 bitmask, uiDest;
  float4 fDest;

	uint4 threading = g_compactTileGridBuffer[vThreadGroupID.x].g_compactTileGridBuffer_uint; // ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, vThreadGroupID.x, l(0), t24.xxxx

  uint4 threadshift = threading.x >> 16; //  r1.x = (uint)r0.x >> 16;
  
  // r1.yzw = (int3)r0.xxx & int3(0,0,0);
  threadshift.yzw  =   threading.xxx & int3(0x0000ffff, 0x0000ffff, 0x0000ffff); // r1.yzw = (int3)r0.xxx & int3(0x0000ffff, 0x0000ffff, 0x0000ffff);
  
  threading.xyzw = mad((int4)threadshift.xyzw, int4(16,16,16,16), (int4)vThreadIDInGroup.xyyy); // r0.xyzw = mad((int4)r1.xyzw, int4(16,16,16,16), (int4)vThreadIDInGroup.xyyy);

  if (vThreadIDInGroupFlattened.x == 0) {
    threadshift.x = mad((int)threadshift.w, tileCountX, (int)threadshift.x); // r1.x = mad((int)r1.w, tileCountX, (int)r1.x);

// r1.xy = g_lightCullInput[r1.x].g_lightCullInput_uint4.xy;
    threadshift.xy = g_lightCullInput[threadshift.x].g_lightCullInput_uint4.xy;  // ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xy, r1.x, l(0), t19.xyxx

    uiDest.xy = threadshift.yz >> int2(16,16);  // r2.xy = (uint2)r1.yz >> int2(16,16);
    threadshift.yzw = threadshift.yzw & int3(0x0000ffff, 0x0000ffff, 0x0000ffff);  // r1.yzw = (int3)r1.yzw & int3(0,0,0);
    
    g1.x = threadshift.w;     // store_raw g1.x, l(0), r1.w
    
    threadshift.y = (int)uiDest.x + threadshift.y;            // r1.y = (int)r2.x + (int)r1.y;
    threadshift.y = (int)threadshift.z + (int)threadshift.y;  // r1.y = (int)r1.z + (int)r1.y;
    threadshift.y = (int)uiDest.y + (int)threadshift.y;       // r1.y = (int)r2.y + (int)r1.y;
    threadshift.x = (int)threadshift.y + (int)threadshift.x;  // r1.x = (int)r1.y + (int)r1.x;
    
    g0.x = threadshift.x;      // store_raw g0.x, l(0), r1.x
  }
  
  GroupMemoryBarrierWithGroupSync();
  
  r1.xy = (uint2)threading.xw;  // r1.xy = (uint2)r0.xw;
  
  r1.zw = float2(0.5,0.5) + r1.xy;
  r1.zw = invResolution.xy * r1.zw;
  r2.xy = (int2)r1.xy;
  r2.zw = float2(0,0);
  r3.xyzw = g_gbufferTexture0.Load(r2.xyw).xyzw;
  r4.xyzw = g_gbufferTexture1.Load(r2.xyw).xyzw;
  r5.xyz = g_gbufferTexture2.Load(r2.xyw).yzw;
  r2.z = g_depthTexture.Load(r2.xyz).x;
  r1.x = 6 * r4.w;
  r1.x = round(r1.x);
  r1.x = (uint)r1.x;
  r6.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r1.y = dot(r6.xy, r6.xy);
  r1.y = min(1, r1.y);
  r1.y = 1 + -r1.y;
  r6.z = sqrt(r1.y);
  r1.x = (int)r1.x * 3;
  r7.x = dot(r6.xyz, g_normalBasisTransforms[r1.x]._m00_m10_m20);
  r7.y = dot(r6.xyz, g_normalBasisTransforms[r1.x]._m01_m11_m21);
  r7.z = dot(r6.xyz, g_normalBasisTransforms[r1.x]._m02_m12_m22);
  r1.x = 1 + -r3.z;
  r1.y = 3 * r3.w;
  r1.y = round(r1.y);
  r1.y = (int)r1.y;
  r1.y = cmp((int)r1.y == 1);
  r1.y = r1.y ? 0 : r5.x;
  r3.x = r5.y * r5.y;
  r3.y = 0.159999996 * r3.x;
  r3.xzw = -r3.xxx * float3(0.159999996,0.159999996,0.159999996) + r4.xyz;
  r3.xyz = r1.yyy * r3.xzw + r3.yyy;
  r1.y = dot(r3.xyz, float3(0.330000013,0.330000013,0.330000013));
  r1.y = saturate(50 * r1.y);
  r4.y = r1.x * r1.x;
  r4.zw = r1.zw * float2(2,2) + float2(-1,-1);
  r2.xy = float2(1,-1) * r4.zw;
  r2.w = 1;
  r6.x = dot(r2.xyzw, invViewProjectionMatrix._m00_m10_m20_m30);
  r6.y = dot(r2.xyzw, invViewProjectionMatrix._m01_m11_m21_m31);
  r6.z = dot(r2.xyzw, invViewProjectionMatrix._m02_m12_m22_m32);
  r2.x = dot(r2.xyzw, invViewProjectionMatrix._m03_m13_m23_m33);
  r2.x = 1 / r2.x;
  r8.xyz = r6.xyz * r2.xxx;
  r2.y = dot(-r8.xyz, -r8.xyz);
  r2.y = rsqrt(r2.y);
  r2.yzw = -r8.xyz * r2.yyy;
  r3.w = dot(-r2.yzw, r7.xyz);
  r3.w = r3.w + r3.w;
  r5.xyw = r7.xyz * -r3.www + -r2.yzw;
  r4.x = saturate(dot(r7.xyz, r2.yzw));
  r1.z = g_diffuseOcclusionTexture.SampleLevel(g_linearSampler_s, r1.zw, 0).x;
  
  uint start = g0.x;  // ld_raw r1.w, l(0), g0.xxxx
  
  r2.yz = g_preIntegratedFGTexture.SampleLevel(g_linearSampler_s, r4.xy, 0).xy;
  r1.y = r2.z * r1.y;
  r2.yzw = r3.xyz * r2.yyy + r1.yyy;
  
  uint loopend = g1.x;  // ld_raw r1.y, l(0), g1.xxxx
  loopend = start + loopend;  // r1.y = (int)r1.w + (int)r1.y;
  
  r3.x = -r1.x * r1.x + 1;
  r3.y = max(0, r3.x);
  r3.y = sqrt(r3.y);
  r3.y = r1.x * r1.x + r3.y;
  r3.x = r3.x * r3.y;
  r3.yzw = r5.xyw + -r7.xyz;
  r3.xyz = r3.xxx * r3.yzw + r7.xyz;
  r3.w = dot(r3.xyz, r3.xyz);
  r4.z = 4 * r3.w;
  r4.w = cmp(r3.w == 0.000000);
  r3.w = r3.w + r3.w;
  r5.x = min(1, r4.y);
  r5.y = r5.x * -2 + 3;
  r5.x = r5.x * r5.x;
  r5.x = r5.y * r5.x;
  r5.y = r4.y * -16 + -1;
  r5.y = exp2(r5.y);
  r5.w = 1 + -r5.z;
  r8.w = 1;
  r9.xyz = float3(0,0,0);
  r6.w = 0;
  
  uint i = start; // r7.w = r1.w;
  while (true) {
    r9.w = cmp(i < loopend);  // r9.w = cmp((uint)r7.w < (uint)r1.y);
    r10.x = cmp(r6.w < 1);
    r9.w = r9.w ? r10.x : 0;
    if (r9.w == 0) break;
      
    int r9_w = g_lightIndexInput[i].g_lightIndexInput_uint; //    ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r7.w, l(0), t20.xxxx
    
    r9.w = r9_w * 11;  // r9.w = (int)r9.w * 11;
  
    r10.x = cmp(0.000000 == g_lightInfoLocalIBL[r9.w].IBLType);
    if (r10.x != 0) {
      r10.xyz = r6.xyz * r2.xxx + -g_lightInfoLocalIBL[r9.w].pos.xyz;
      r10.w = dot(r3.xyz, r10.xyz);
      r11.x = r10.w + r10.w;
      r11.y = dot(r10.xyz, r10.xyz);
      r11.z = -g_lightInfoLocalIBL[r9.w].extend.x * g_lightInfoLocalIBL[r9.w].extend.x + r11.y;
      r11.z = r11.z * r4.z;
      r11.x = r11.x * r11.x + -r11.z;
      r11.z = cmp(r11.x < 0);
      r11.z = (int)r4.w | (int)r11.z;
      if (r11.z != 0) {
        r11.w = 0;
      } else {
        r11.x = sqrt(r11.x);
        r10.w = -r10.w * 2 + r11.x;
        r11.w = r10.w / r3.w;
      }
      if (r11.z == 0) {
        r12.xyz = r11.www * r3.xyz + r8.xyz;
        r12.xyz = -g_lightInfoLocalIBL[r9.w].pos.xyz + r12.xyz;
        r10.w = dot(r12.xyz, r12.xyz);
        r10.w = sqrt(r10.w);
        r11.x = r11.w * r4.y;
        r10.w = r11.x / r10.w;
        r11.x = r1.x * r1.x + -r10.w;
        r10.w = r5.x * r11.x + r10.w;
        r11.xzw = -r12.xyz + r3.xyz;
        r12.xyz = r5.xxx * r11.xzw + r12.xyz;
        r10.w = max(0.0135000004, r10.w);
        r10.w = min(1, r10.w);
        r10.w = r10.w * localIblMipmapBias + 1;
        r10.w = log2(r10.w);
        r12.w = g_lightInfoLocalIBL[r9.w].textureIndex;
        r12.xyzw = g_specularLocalIBLsTexture.SampleLevel(g_linearMipmapSampler_s, r12.xyzw, r10.w).xyzw;
        r11.xzw = r12.xyz * r2.yzw;
        r10.w = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsAO, r5.z);
        r10.w = min(r10.w, r1.z);
        r12.x = r10.w + r4.x;
        r12.x = log2(r12.x);
        r12.x = r12.x * r5.y;
        r12.x = exp2(r12.x);
        r10.w = r12.x + r10.w;
        r10.w = saturate(-1 + r10.w);
        r11.xzw = r11.xzw * r10.www;
        r10.w = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsMask, r5.w);
        r10.w = r12.w * r10.w;
        r12.x = sqrt(r11.y);
        r12.y = g_lightInfoLocalIBL[r9.w].influenceExpandDistance + g_lightInfoLocalIBL[r9.w].extend.x;
        r12.y = r12.y + -r12.x;
        r12.z = max(g_lightInfoLocalIBL[r9.w].influenceFadeDistance, 9.99999975e-005);
        r12.y = saturate(r12.y / r12.z);
        r12.x = -g_lightInfoLocalIBL[r9.w].extend.x + r12.x;
        r12.x = saturate(g_lightInfoLocalIBL[r9.w].influenceFadeNormal.x + r12.x);
        r11.y = rsqrt(r11.y);
        r10.xyz = r11.yyy * r10.xyz;
        r10.x = dot(r7.xyz, r10.xyz);
        r10.x = saturate(r10.x * -2.5 + 1.5);
        r10.y = cmp(0 < r12.x);
        r10.x = r10.y ? r10.x : 1;
        r10.x = r12.y * r10.x;
        r10.y = r10.x * r10.x;
        r10.x = -r10.x * 2 + 3;
        r10.x = r10.y * r10.x;
        r10.x = r10.w * r10.x;
      } else {
        r11.xzw = float3(0,0,0);
        r10.x = 0;
      }
    } else {
      
      r12.x = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w].invTransform._m00_m10_m20_m30);  // r12.x = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w/4]._m00_m10_m20_m30);
      r12.y = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w].invTransform._m01_m11_m21_m31);  // r12.y = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w/4]._m01_m11_m21_m31);
      r12.z = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w].invTransform._m02_m12_m22_m32);  // r12.z = dot(r8.xyzw, g_lightInfoLocalIBL[r9.w/4]._m02_m12_m22_m32);
      r13.x = dot(r3.xyz, g_lightInfoLocalIBL[r9.w].invTransform._m00_m10_m20);  // r13.x = dot(r3.xyz, g_lightInfoLocalIBL[r9.w/4]._m00_m10_m20);
      r13.y = dot(r3.xyz, g_lightInfoLocalIBL[r9.w].invTransform._m01_m11_m21);  // r13.y = dot(r3.xyz, g_lightInfoLocalIBL[r9.w/4]._m01_m11_m21);
      r13.z = dot(r3.xyz, g_lightInfoLocalIBL[r9.w].invTransform._m02_m12_m22);  // r13.z = dot(r3.xyz, g_lightInfoLocalIBL[r9.w/4]._m02_m12_m22);
      
      r10.yzw = float3(1,1,1) / r13.xyz;
      r14.xyz = -g_lightInfoLocalIBL[r9.w].extend.xyz + -r12.xyz;
      r14.xyz = r14.xyz * r10.yzw;
      r15.xyz = g_lightInfoLocalIBL[r9.w].extend.xyz + -r12.xyz;
      r10.yzw = r15.xyz * r10.yzw;
      r15.xyz = min(r14.xyz, r10.yzw);
      r10.yzw = max(r14.xyz, r10.yzw);
      r11.y = max(r15.y, r15.z);
      r11.y = max(r15.x, r11.y);
      r10.y = min(r10.y, r10.z);
      r10.y = min(r10.y, r10.w);
      r10.z = cmp(r11.y < r10.y);
      if (r10.z != 0) {
        r14.xyz = r10.yyy * r13.xyz + r12.xyz;
        r14.xyz = -g_lightInfoLocalIBL[r9.w].localOffset.xyz + r14.xyz;
        r10.z = dot(r14.xyz, r14.xyz);
        r10.z = sqrt(r10.z);
        r10.y = r10.y * r4.y;
        r10.y = r10.y / r10.z;
        r10.z = r1.x * r1.x + -r10.y;
        r10.y = r5.x * r10.z + r10.y;
        r13.xyz = -r14.xyz + r13.xyz;
        r13.xyz = r5.xxx * r13.xyz + r14.xyz;
        r10.y = max(0.0135000004, r10.y);
        r10.y = min(1, r10.y);
        r10.y = r10.y * localIblMipmapBias + 1;
        r10.y = log2(r10.y);
        r13.w = g_lightInfoLocalIBL[r9.w].textureIndex;
        r14.xyzw = g_specularLocalIBLsTexture.SampleLevel(g_linearMipmapSampler_s, r13.xyzw, r10.y).xyzw;
        r10.yzw = r14.xyz * r2.yzw;
        r11.y = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsAO, r5.z);
        r11.y = min(r11.y, r1.z);
        r12.w = r11.y + r4.x;
        r12.w = log2(r12.w);
        r12.w = r12.w * r5.y;
        r12.w = exp2(r12.w);
        r11.y = r12.w + r11.y;
        r11.y = saturate(-1 + r11.y);
        r11.xzw = r11.yyy * r10.yzw;
        r10.y = max(g_lightInfoLocalIBL[r9.w].skipSkyVisibilityAsMask, r5.w);
        r10.y = r14.w * r10.y;
        r14.xyz = g_lightInfoLocalIBL[r9.w].influenceExpandDistance + g_lightInfoLocalIBL[r9.w].extend.xyz;
        r15.xyz = g_lightInfoLocalIBL[r9.w].influenceFadeDistance + -r14.xyz;
        r16.xyz = -g_lightInfoLocalIBL[r9.w].influenceFadeDistance + r14.xyz;
        r17.xyz = cmp(r12.xyz < r15.xyz);
        r15.xyz = r15.xyz + -r12.xyz;
        r15.xyz = r15.xyz * r15.xyz;
        r15.xyz = r17.xyz ? r15.xyz : 0;
        r17.xyz = cmp(r16.xyz < r12.xyz);
        r16.xyz = -r16.xyz + r12.xyz;
        r16.xyz = r16.xyz * r16.xyz;
        r16.xyz = r17.xyz ? r16.xyz : 0;
        r10.z = dot(r15.xyz, float3(1,1,1));
        r10.w = dot(r16.xyz, float3(1,1,1));
        r10.z = r10.z + r10.w;
        r10.z = sqrt(r10.z);
        r10.w = max(g_lightInfoLocalIBL[r9.w].influenceFadeDistance, 9.99999975e-005);
        r10.z = r10.z / r10.w;
        r10.z = min(1, r10.z);
        r10.z = 1 + -r10.z;
        r12.xyz = -r14.xyz + abs(r12.xyz);
        r12.xyz = saturate(g_lightInfoLocalIBL[r9.w].influenceFadeNormal.xyz + r12.xyz);
        r14.xyz = r6.xyz * r2.xxx + -g_lightInfoLocalIBL[r9.w].pos.xyz;
        r10.w = dot(r14.xyz, r14.xyz);
        r10.w = rsqrt(r10.w);
        r14.xyz = r14.xyz * r10.www;
        r10.w = dot(r7.xyz, r14.xyz);
        r10.w = saturate(r10.w * -2.5 + 1.5);
        r11.y = dot(r12.xyz, float3(1,1,1));
        r11.y = cmp(0 < r11.y);
        r10.w = r11.y ? r10.w : 1;
        r10.z = r10.z * r10.w;
        r10.w = dot(r13.xyz, r13.xyz);
        r10.w = rsqrt(r10.w);
        r12.xyz = r13.xyz * r10.www;
        r13.xyz = r12.xyz * float3(6,6,6) + float3(-2,-2,-2);
        r13.xyz = saturate(g_lightInfoLocalIBL[r9.w].sideFadePositive.xyz * r13.xyz);
        r12.xyz = r12.xyz * float3(-6,-6,-6) + float3(-2,-2,-2);
        r12.xyz = saturate(g_lightInfoLocalIBL[r9.w].sideFadeNegative.xyz * r12.xyz);
        r12.xyz = r13.xyz + r12.xyz;
        r9.w = r12.x + r12.y;
        r9.w = r9.w + r12.z;
        r9.w = 1 + -r9.w;
        r9.w = max(0, r9.w);
        r9.w = r10.z * r9.w;
        r10.z = r9.w * r9.w;
        r9.w = -r9.w * 2 + 3;
        r9.w = r10.z * r9.w;
        r10.x = r10.y * r9.w;
      } else {
        r11.xzw = float3(0,0,0);
        r10.x = 0;
      }
    }
    r9.w = saturate(r10.x + -r6.w);
    r9.xyz = r11.xzw * r9.www + r9.xyz;
    r9.w = r9.w + r6.w;
    r6.w = min(1, r9.w);
    
    i = i + 1;  // r7.w = (int)r7.w + 1;
  }
  r1.w = 1 + -r6.w;
  r2.xyz = g_exposureMultipliers.zzz * r9.xyz;
  r1.xyz = min(float3(65504,65504,65504), r2.xyz);
  
// No code for instruction (needs manual fix):
// store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
  g_outputTexture0[threading.xy].xyzw = r1.xyzw;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.2.43 on Fri Sep 30 16:06:01 2016
//
//
// Buffer Definitions: 
//
// cbuffer cbLocalIBLLightInfo
// {
//
//   struct LocalIBLLightInfo
//   {
//       
//       float3 pos;                    // Offset:    0
//       float sqrAttenuationRadius;    // Offset:   12
//       float4x4 invTransform;         // Offset:   16
//       float3 extend;                 // Offset:   80
//       float textureIndex;            // Offset:   92
//       float3 sideFadePositive;       // Offset:   96
//       float influenceFadeDistance;   // Offset:  108
//       float3 sideFadeNegative;       // Offset:  112
//       float IBLType;                 // Offset:  124
//       float3 localOffset;            // Offset:  128
//       float influenceExpandDistance; // Offset:  140
//       float3 influenceFadeNormal;    // Offset:  144
//       float skipSkyVisibilityAsAO;   // Offset:  156
//       float skipSkyVisibilityAsMask; // Offset:  160
//       float3 unused;                 // Offset:  164
//
//   } g_lightInfoLocalIBL[128];        // Offset:    0 Size: 22528
//
// }
//
// cbuffer cb0
// {
//
//   float4x4 invViewProjectionMatrix;  // Offset:    0 Size:    64
//   float4 g_exposureMultipliers;      // Offset:   64 Size:    16
//   float localIblMipmapBias;          // Offset:   80 Size:     4
//   float screenAspectRatio;           // Offset:   84 Size:     4 [unused]
//   float2 invResolution;              // Offset:   88 Size:     8
//   float4 shadowMapSizeAndInvSize;    // Offset:   96 Size:    16 [unused]
//   uint forceSplitLighting;           // Offset:  112 Size:     4 [unused]
//   uint sssScatteringEnables;         // Offset:  116 Size:     4 [unused]
//   float volumetricShadowmapHalfTexelOffset;// Offset:  120 Size:     4 [unused]
//   float volumetricShadowmapOneMinusHalfTexelOffset;// Offset:  124 Size:     4 [unused]
//   float volumetricShadowmapInvMaxCount;// Offset:  128 Size:     4 [unused]
//   float dynamicAOFactor;             // Offset:  132 Size:     4 [unused]
//   uint tileCountX;                   // Offset:  136 Size:     4
//   uint pad1;                         // Offset:  140 Size:     4 [unused]
//   float4x3 g_normalBasisTransforms[6];// Offset:  144 Size:   288
//
// }
//
// Resource bind info for g_lightCullInput
// {
//
//   uint4 $Element;                    // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_lightIndexInput
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for g_compactTileGridBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_linearSampler                   sampler      NA          NA    0        1
// g_linearMipmapSampler             sampler      NA          NA    1        1
// g_gbufferTexture0                 texture  float4          2d    0        1
// g_gbufferTexture1                 texture  float4          2d    1        1
// g_gbufferTexture2                 texture  float4          2d    2        1
// g_depthTexture                    texture   float          2d    6        1
// g_specularLocalIBLsTexture        texture  float4   cubearray    7        1
// g_preIntegratedFGTexture          texture  float4          2d    8        1
// g_diffuseOcclusionTexture         texture   float          2d   10        1
// g_lightCullInput                  texture  struct         r/o   19        1
// g_lightIndexInput                 texture  struct         r/o   20        1
// g_compactTileGridBuffer           texture  struct         r/o   24        1
// g_outputTexture0                      UAV  float4          2d    0        1
// cb0                               cbuffer      NA          NA    0        1
// cbLocalIBLLightInfo               cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[1408], dynamicIndexed
dcl_constantbuffer cb0[27], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texturecubearray (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_structured t19, 16 
dcl_resource_structured t20, 4 
dcl_resource_structured t24, 4 
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 18
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 4
dcl_thread_group 16, 16, 1
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, vThreadGroupID.x, l(0), t24.xxxx
ushr r1.x, r0.x, l(16)
and r1.yzw, r0.xxxx, l(0, 0x0000ffff, 0x0000ffff, 0x0000ffff)
imad r0.xyzw, r1.xyzw, l(16, 16, 16, 16), vThreadIDInGroup.xyyy
if_z vThreadIDInGroupFlattened.x
  imad r1.x, r1.w, cb0[8].z, r1.x
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.xyzw, r1.x, l(0), t19.xyzw
  ushr r2.xy, r1.yzyy, l(16, 16, 0, 0)
  and r1.yzw, r1.yyzw, l(0, 0x0000ffff, 0x0000ffff, 0x0000ffff)
  store_raw g1.x, l(0), r1.w
  iadd r1.y, r2.x, r1.y
  iadd r1.y, r1.z, r1.y
  iadd r1.y, r2.y, r1.y
  iadd r1.x, r1.y, r1.x
  store_raw g0.x, l(0), r1.x
endif 
sync_g_t
utof r1.xy, r0.xwxx
add r1.zw, r1.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r1.zw, r1.zzzw, cb0[5].zzzw
ftoi r2.xy, r1.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.xyww, t1.xyzw
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r2.xyww, t2.yzwx
ld_indexable(texture2d)(float,float,float,float) r2.z, r2.xyzw, t6.yzxw
mul r1.x, r4.w, l(6.000000)
round_ne r1.x, r1.x
ftou r1.x, r1.x
mad r6.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r1.y, r6.xyxx, r6.xyxx
min r1.y, r1.y, l(1.000000)
add r1.y, -r1.y, l(1.000000)
sqrt r6.z, r1.y
imul null, r1.x, r1.x, l(3)
dp3 r7.x, r6.xyzx, cb0[r1.x + 9].xyzx
dp3 r7.y, r6.xyzx, cb0[r1.x + 10].xyzx
dp3 r7.z, r6.xyzx, cb0[r1.x + 11].xyzx
add r1.x, -r3.z, l(1.000000)
mul r1.y, r3.w, l(3.000000)
round_ne r1.y, r1.y
ftoi r1.y, r1.y
ieq r1.y, r1.y, l(1)
movc r1.y, r1.y, l(0), r5.x
mul r3.x, r5.y, r5.y
mul r3.y, r3.x, l(0.160000)
mad r3.xzw, -r3.xxxx, l(0.160000, 0.000000, 0.160000, 0.160000), r4.xxyz
mad r3.xyz, r1.yyyy, r3.xzwx, r3.yyyy
dp3 r1.y, r3.xyzx, l(0.330000, 0.330000, 0.330000, 0.000000)
mul_sat r1.y, r1.y, l(50.000000)
mul r4.y, r1.x, r1.x
mad r4.zw, r1.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mul r2.xy, r4.zwzz, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r2.w, l(1.000000)
dp4 r6.x, r2.xyzw, cb0[0].xyzw
dp4 r6.y, r2.xyzw, cb0[1].xyzw
dp4 r6.z, r2.xyzw, cb0[2].xyzw
dp4 r2.x, r2.xyzw, cb0[3].xyzw
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r8.xyz, r2.xxxx, r6.xyzx
dp3 r2.y, -r8.xyzx, -r8.xyzx
rsq r2.y, r2.y
mul r2.yzw, r2.yyyy, -r8.xxyz
dp3 r3.w, -r2.yzwy, r7.xyzx
add r3.w, r3.w, r3.w
mad r5.xyw, r7.xyxz, -r3.wwww, -r2.yzyw
dp3_sat r4.x, r7.xyzx, r2.yzwy
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r1.zwzz, t10.yzxw, s0, l(0.000000)
ld_raw r1.w, l(0), g0.xxxx
sample_l_indexable(texture2d)(float,float,float,float) r2.yz, r4.xyxx, t8.zxyw, s0, l(0.000000)
mul r1.y, r1.y, r2.z
mad r2.yzw, r3.xxyz, r2.yyyy, r1.yyyy
ld_raw r1.y, l(0), g1.xxxx
iadd r1.y, r1.w, r1.y
mad r3.x, -r1.x, r1.x, l(1.000000)
max r3.y, r3.x, l(0.000000)
sqrt r3.y, r3.y
mad r3.y, r1.x, r1.x, r3.y
mul r3.x, r3.y, r3.x
add r3.yzw, -r7.xxyz, r5.xxyw
mad r3.xyz, r3.xxxx, r3.yzwy, r7.xyzx
dp3 r3.w, r3.xyzx, r3.xyzx
mul r4.z, r3.w, l(4.000000)
eq r4.w, r3.w, l(0.000000)
add r3.w, r3.w, r3.w
min r5.x, r4.y, l(1.000000)
mad r5.y, r5.x, l(-2.000000), l(3.000000)
mul r5.x, r5.x, r5.x
mul r5.x, r5.x, r5.y
mad r5.y, r4.y, l(-16.000000), l(-1.000000)
exp r5.y, r5.y
add r5.w, -r5.z, l(1.000000)
mov r8.w, l(1.000000)
mov r9.xyz, l(0,0,0,0)
mov r6.w, l(0)
mov r7.w, r1.w
loop 
  ult r9.w, r7.w, r1.y
  lt r10.x, r6.w, l(1.000000)
  and r9.w, r9.w, r10.x
  breakc_z r9.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r9.w, r7.w, l(0), t20.xxxx
  imul null, r9.w, r9.w, l(11)
  eq r10.x, l(0.000000), cb5[r9.w + 7].w
  if_nz r10.x
    mad r10.xyz, r6.xyzx, r2.xxxx, -cb5[r9.w + 0].xyzx
    dp3 r10.w, r3.xyzx, r10.xyzx
    add r11.x, r10.w, r10.w
    dp3 r11.y, r10.xyzx, r10.xyzx
    mad r11.z, -cb5[r9.w + 5].x, cb5[r9.w + 5].x, r11.y
    mul r11.z, r4.z, r11.z
    mad r11.x, r11.x, r11.x, -r11.z
    lt r11.z, r11.x, l(0.000000)
    or r11.z, r4.w, r11.z
    if_nz r11.z
      mov r11.w, l(0)
    else 
      sqrt r11.x, r11.x
      mad r10.w, -r10.w, l(2.000000), r11.x
      div r11.w, r10.w, r3.w
    endif 
    if_z r11.z
      mad r12.xyz, r11.wwww, r3.xyzx, r8.xyzx
      add r12.xyz, r12.xyzx, -cb5[r9.w + 0].xyzx
      dp3 r10.w, r12.xyzx, r12.xyzx
      sqrt r10.w, r10.w
      mul r11.x, r4.y, r11.w
      div r10.w, r11.x, r10.w
      mad r11.x, r1.x, r1.x, -r10.w
      mad r10.w, r5.x, r11.x, r10.w
      add r11.xzw, r3.xxyz, -r12.xxyz
      mad r12.xyz, r5.xxxx, r11.xzwx, r12.xyzx
      max r10.w, r10.w, l(0.013500)
      min r10.w, r10.w, l(1.000000)
      mad r10.w, r10.w, cb0[5].x, l(1.000000)
      log r10.w, r10.w
      mov r12.w, cb5[r9.w + 5].w
      sample_l_indexable(texturecubearray)(float,float,float,float) r12.xyzw, r12.xyzw, t7.xyzw, s1, r10.w
      mul r11.xzw, r2.yyzw, r12.xxyz
      max r10.w, r5.z, cb5[r9.w + 9].w
      min r10.w, r1.z, r10.w
      add r12.x, r4.x, r10.w
      log r12.x, r12.x
      mul r12.x, r5.y, r12.x
      exp r12.x, r12.x
      add r10.w, r10.w, r12.x
      add_sat r10.w, r10.w, l(-1.000000)
      mul r11.xzw, r10.wwww, r11.xxzw
      max r10.w, r5.w, cb5[r9.w + 10].x
      mul r10.w, r10.w, r12.w
      sqrt r12.x, r11.y
      add r12.y, cb5[r9.w + 5].x, cb5[r9.w + 8].w
      add r12.y, -r12.x, r12.y
      max r12.z, l(0.000100), cb5[r9.w + 6].w
      div_sat r12.y, r12.y, r12.z
      add r12.x, r12.x, -cb5[r9.w + 5].x
      add_sat r12.x, r12.x, cb5[r9.w + 9].x
      rsq r11.y, r11.y
      mul r10.xyz, r10.xyzx, r11.yyyy
      dp3 r10.x, r7.xyzx, r10.xyzx
      mad_sat r10.x, r10.x, l(-2.500000), l(1.500000)
      lt r10.y, l(0.000000), r12.x
      movc r10.x, r10.y, r10.x, l(1.000000)
      mul r10.x, r10.x, r12.y
      mul r10.y, r10.x, r10.x
      mad r10.x, -r10.x, l(2.000000), l(3.000000)
      mul r10.x, r10.x, r10.y
      mul r10.x, r10.x, r10.w
    else 
      mov r11.xzw, l(0,0,0,0)
      mov r10.x, l(0)
    endif 
  else 
    dp4 r12.x, r8.xyzw, cb5[r9.w + 1].xyzw
    dp4 r12.y, r8.xyzw, cb5[r9.w + 2].xyzw
    dp4 r12.z, r8.xyzw, cb5[r9.w + 3].xyzw
    dp3 r13.x, r3.xyzx, cb5[r9.w + 1].xyzx
    dp3 r13.y, r3.xyzx, cb5[r9.w + 2].xyzx
    dp3 r13.z, r3.xyzx, cb5[r9.w + 3].xyzx
    div r10.yzw, l(1.000000, 1.000000, 1.000000, 1.000000), r13.xxyz
    add r14.xyz, -r12.xyzx, -cb5[r9.w + 5].xyzx
    mul r14.xyz, r10.yzwy, r14.xyzx
    add r15.xyz, -r12.xyzx, cb5[r9.w + 5].xyzx
    mul r10.yzw, r10.yyzw, r15.xxyz
    min r15.xyz, r10.yzwy, r14.xyzx
    max r10.yzw, r10.yyzw, r14.xxyz
    max r11.y, r15.z, r15.y
    max r11.y, r11.y, r15.x
    min r10.y, r10.z, r10.y
    min r10.y, r10.w, r10.y
    lt r10.z, r11.y, r10.y
    if_nz r10.z
      mad r14.xyz, r10.yyyy, r13.xyzx, r12.xyzx
      add r14.xyz, r14.xyzx, -cb5[r9.w + 8].xyzx
      dp3 r10.z, r14.xyzx, r14.xyzx
      sqrt r10.z, r10.z
      mul r10.y, r4.y, r10.y
      div r10.y, r10.y, r10.z
      mad r10.z, r1.x, r1.x, -r10.y
      mad r10.y, r5.x, r10.z, r10.y
      add r13.xyz, r13.xyzx, -r14.xyzx
      mad r13.xyz, r5.xxxx, r13.xyzx, r14.xyzx
      max r10.y, r10.y, l(0.013500)
      min r10.y, r10.y, l(1.000000)
      mad r10.y, r10.y, cb0[5].x, l(1.000000)
      log r10.y, r10.y
      mov r13.w, cb5[r9.w + 5].w
      sample_l_indexable(texturecubearray)(float,float,float,float) r14.xyzw, r13.xyzw, t7.xyzw, s1, r10.y
      mul r10.yzw, r2.yyzw, r14.xxyz
      max r11.y, r5.z, cb5[r9.w + 9].w
      min r11.y, r1.z, r11.y
      add r12.w, r4.x, r11.y
      log r12.w, r12.w
      mul r12.w, r5.y, r12.w
      exp r12.w, r12.w
      add r11.y, r11.y, r12.w
      add_sat r11.y, r11.y, l(-1.000000)
      mul r11.xzw, r10.yyzw, r11.yyyy
      max r10.y, r5.w, cb5[r9.w + 10].x
      mul r10.y, r10.y, r14.w
      add r14.xyz, cb5[r9.w + 5].xyzx, cb5[r9.w + 8].wwww
      add r15.xyz, -r14.xyzx, cb5[r9.w + 6].wwww
      add r16.xyz, r14.xyzx, -cb5[r9.w + 6].wwww
      lt r17.xyz, r12.xyzx, r15.xyzx
      add r15.xyz, -r12.xyzx, r15.xyzx
      mul r15.xyz, r15.xyzx, r15.xyzx
      and r15.xyz, r15.xyzx, r17.xyzx
      lt r17.xyz, r16.xyzx, r12.xyzx
      add r16.xyz, r12.xyzx, -r16.xyzx
      mul r16.xyz, r16.xyzx, r16.xyzx
      and r16.xyz, r16.xyzx, r17.xyzx
      dp3 r10.z, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      dp3 r10.w, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      add r10.z, r10.w, r10.z
      sqrt r10.z, r10.z
      max r10.w, l(0.000100), cb5[r9.w + 6].w
      div r10.z, r10.z, r10.w
      min r10.z, r10.z, l(1.000000)
      add r10.z, -r10.z, l(1.000000)
      add r12.xyz, |r12.xyzx|, -r14.xyzx
      add_sat r12.xyz, r12.xyzx, cb5[r9.w + 9].xyzx
      mad r14.xyz, r6.xyzx, r2.xxxx, -cb5[r9.w + 0].xyzx
      dp3 r10.w, r14.xyzx, r14.xyzx
      rsq r10.w, r10.w
      mul r14.xyz, r10.wwww, r14.xyzx
      dp3 r10.w, r7.xyzx, r14.xyzx
      mad_sat r10.w, r10.w, l(-2.500000), l(1.500000)
      dp3 r11.y, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
      lt r11.y, l(0.000000), r11.y
      movc r10.w, r11.y, r10.w, l(1.000000)
      mul r10.z, r10.w, r10.z
      dp3 r10.w, r13.xyzx, r13.xyzx
      rsq r10.w, r10.w
      mul r12.xyz, r10.wwww, r13.xyzx
      mad r13.xyz, r12.xyzx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-2.000000, -2.000000, -2.000000, 0.000000)
      mul_sat r13.xyz, r13.xyzx, cb5[r9.w + 6].xyzx
      mad r12.xyz, r12.xyzx, l(-6.000000, -6.000000, -6.000000, 0.000000), l(-2.000000, -2.000000, -2.000000, 0.000000)
      mul_sat r12.xyz, r12.xyzx, cb5[r9.w + 7].xyzx
      add r12.xyz, r12.xyzx, r13.xyzx
      add r9.w, r12.y, r12.x
      add r9.w, r12.z, r9.w
      add r9.w, -r9.w, l(1.000000)
      max r9.w, r9.w, l(0.000000)
      mul r9.w, r9.w, r10.z
      mul r10.z, r9.w, r9.w
      mad r9.w, -r9.w, l(2.000000), l(3.000000)
      mul r9.w, r9.w, r10.z
      mul r10.x, r9.w, r10.y
    else 
      mov r11.xzw, l(0,0,0,0)
      mov r10.x, l(0)
    endif 
  endif 
  add_sat r9.w, -r6.w, r10.x
  mad r9.xyz, r11.xzwx, r9.wwww, r9.xyzx
  add r9.w, r6.w, r9.w
  min r6.w, r9.w, l(1.000000)
  iadd r7.w, r7.w, l(1)
endloop 
add r1.w, -r6.w, l(1.000000)
mul r2.xyz, r9.xyzx, cb0[4].zzzz
min r1.xyz, r2.xyzx, l(65504.000000, 65504.000000, 65504.000000, 0.000000)
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 284 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/