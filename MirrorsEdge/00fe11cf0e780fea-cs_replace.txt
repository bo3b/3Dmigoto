// ---- Created with 3Dmigoto v1.2.44 on Mon Sep 26 22:19:13 2016

cbuffer cbAreaLightInfo : register(b3)
{

  struct
  {

    struct
    {
      float3 pos;
      float invSqrAttenuationRadius;
      float3 color;
      float attenuationOffset;
      float3 matrixForward;
      float diffuseScale;
      float3 matrixUp;
      float specularScale;
      float3 matrixLeft;
      float shadowDimmer;
      float angleScale;
      float angleOffset;
      float2 unused;
    } baseLight;


    struct
    {
      float3 virtualPos;
      float occluderHeight;
      float areaLightType;
      float lightRadius0;
      float lightRadius1;
      float unused;
    } areaLight;


    struct
    {
      float enable;
      float volumeShadowMapIndex;
      float invAttenuationRadius;
      float tanAngle;
    } vShadow;

  } g_lightInfoArea[128] : packoffset(c0);

}

cbuffer cb0 : register(b0)
{
  float4x4 invViewProjectionMatrix : packoffset(c0);
  float4 g_exposureMultipliers : packoffset(c4);
  float localIblMipmapBias : packoffset(c5);
  float screenAspectRatio : packoffset(c5.y);
  float2 invResolution : packoffset(c5.z);
  float4 shadowMapSizeAndInvSize : packoffset(c6);
  uint forceSplitLighting : packoffset(c7);
  uint sssScatteringEnables : packoffset(c7.y);
  float volumetricShadowmapHalfTexelOffset : packoffset(c7.z);
  float volumetricShadowmapOneMinusHalfTexelOffset : packoffset(c7.w);
  float volumetricShadowmapInvMaxCount : packoffset(c8);
  float dynamicAOFactor : packoffset(c8.y);
  uint tileCountX : packoffset(c8.z);
  uint pad1 : packoffset(c8.w);
  float4x3 g_normalBasisTransforms[6] : packoffset(c9);
}

SamplerState g_linearSampler_s : register(s0);
Texture2D<float4> g_gbufferTexture0 : register(t0);
Texture2D<float4> g_gbufferTexture1 : register(t1);
Texture2D<float4> g_gbufferTexture2 : register(t2);
Texture2D<float> g_depthTexture : register(t6);
Texture2D<float> g_diffuseOcclusionTexture : register(t10);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t35);
Texture2D<float4> StereoParams : register(t125);

// Hand fixed for structured buffers. 

// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_structured t19, 16 
// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_structured t20, 4 
// Needs manual fix for instruction: 
// unknown dcl_: dcl_resource_structured t24, 4 

//StructuredBuffer<g_lightCullInput> g_lightCullInput : register(t19);
// Resource bind info for g_lightCullInput
// {
//
//   uint4 $Element;                    // Offset:    0 Size:    16
//
// }
struct g_lightCullInput_res
{
	uint4 g_lightCullInput_uint4;
};
StructuredBuffer<g_lightCullInput_res> g_lightCullInput : register(t19);

//StructuredBuffer<g_lightIndexInput> g_lightIndexInput : register(t20);
// Resource bind info for g_lightIndexInput
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
struct g_lightIndexInput_res
{
	uint g_lightIndexInput_uint;
};
StructuredBuffer<g_lightIndexInput_res> g_lightIndexInput : register(t20);

//StructuredBuffer<g_compactTileGridBuffer> g_compactTileGridBuffer : register(t24);
// Resource bind info for g_compactTileGridBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
struct g_compactTileGridBuffer_res
{
	uint g_compactTileGridBuffer_uint;
};
StructuredBuffer<g_compactTileGridBuffer_res> g_compactTileGridBuffer : register(t24);


// Manual fix for
// unknown dcl_: dcl_uav_typed_texture2d (float,float,float,float) u0
RWTexture2D<float4> g_outputTexture0 : register(u0); 


// Manual fix for group shared registers
// unknown dcl_: dcl_tgsm_raw g0, 4
// unknown dcl_: dcl_tgsm_raw g1, 4
groupshared uint g0;
groupshared uint g1;


// Manual fix for
// unknown dcl_: dcl_thread_group 16, 16, 1
[numthreads(16, 16, 1)]  


void main(
uint3 vThreadGroupID : SV_GroupID,
uint3 vThreadIDInGroup : SV_GroupThreadID,
uint vThreadIDInGroupFlattened : SV_GroupIndex
)
{
  float4 r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26,r27,r28,r29,r30,r31,r32;
  uint4 bitmask, uiDest;
  float4 fDest;
  uint4 r0;
  int4 thread;
  
   // ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, vThreadGroupID.x, l(0), t24.xxxx  
  r0.x = g_compactTileGridBuffer[vThreadGroupID.x].g_compactTileGridBuffer_uint;

  thread.x = r0.x >> 16;  // r1.x = (uint)r0.x >> 16;
  
  // r1.yzw = (int3)r0.xxx & int3(0,0,0);  bad consts
  thread.yzw = (int3)r0.xxx & int3(0x0000ffff, 0x0000ffff, 0x0000ffff);
  
  r0.xyzw = mad(thread.xyzw, int4(16,16,16,16), (int4)vThreadIDInGroup.xyyy);
  
  if (vThreadIDInGroupFlattened.x == 0) {
    
    thread.x = mad(thread.w, tileCountX, thread.x); // r1.x = mad((int)r1.w, tileCountX, (int)r1.x);
    
    // ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.y, r1.x, l(0), t19.xxxx
    thread.y = g_lightCullInput[thread.x].g_lightCullInput_uint4.x;
  
    // ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(8), t19.xxxx
    thread.x = g_lightCullInput[thread.x].g_lightCullInput_uint4.z;
  
    thread.x = thread.x & 0x0000ffff;
    

    g0.x = thread.y;    // store_raw g0.x, l(0), r1.y
        
    g1.x = thread.x;    // store_raw g1.x, l(0), r1.x
  }
  
  GroupMemoryBarrierWithGroupSync();    // sync_g_t
  r1.xy = (uint2)r0.xw;
  r1.zw = float2(0.5,0.5) + r1.xy;
  r1.zw = invResolution.xy * r1.zw;
  r2.xy = (int2)r1.xy;
  r2.zw = float2(0,0);
  r3.xyzw = g_gbufferTexture0.Load(r2.xyw).xyzw;
  r4.xyzw = g_gbufferTexture1.Load(r2.xyw).xyzw;
  r1.xy = g_gbufferTexture2.Load(r2.xyw).yz;
  r2.z = g_depthTexture.Load(r2.xyz).x;
  r4.w = 6 * r4.w;
  r4.w = round(r4.w);
  r4.w = (uint)r4.w;
  r5.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r3.x = dot(r5.xy, r5.xy);
  r3.x = min(1, r3.x);
  r3.x = 1 + -r3.x;
  r5.z = sqrt(r3.x);
  r3.x = (int)r4.w * 3;
  r6.x = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m00_m10_m20);
  r6.y = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m01_m11_m21);
  r6.z = dot(r5.xyz, g_normalBasisTransforms[r4.w]._m02_m12_m22);
  r3.x = 1 + -r3.z;
  r3.y = 3 * r3.w;
  r3.y = round(r3.y);
  r3.y = (int)r3.y;
  r3.y = cmp((int)r3.y == 1);
  r1.x = r3.y ? 0 : r1.x;
  r3.y = 1 + -r1.x;
  r3.yzw = r4.xyz * r3.yyy;
  r1.y = r1.y * r1.y;
  r4.w = 0.159999996 * r1.y;
  r4.xyz = -r1.yyy * float3(0.159999996,0.159999996,0.159999996) + r4.xyz;
  r4.xyz = r1.xxx * r4.xyz + r4.www;
  r1.x = dot(r4.xyz, float3(0.330000013,0.330000013,0.330000013));
  r1.x = saturate(50 * r1.x);
  r1.y = r3.x * r3.x;
  r5.xy = r1.zw * float2(2,2) + float2(-1,-1);
  r2.xy = float2(1,-1) * r5.xy;
  r2.w = 1;
  r5.x = dot(r2.xyzw, invViewProjectionMatrix._m00_m10_m20_m30);
  r5.y = dot(r2.xyzw, invViewProjectionMatrix._m01_m11_m21_m31);
  r5.z = dot(r2.xyzw, invViewProjectionMatrix._m02_m12_m22_m32);
  r2.x = dot(r2.xyzw, invViewProjectionMatrix._m03_m13_m23_m33);
  r2.x = 1 / r2.x;
  r2.yzw = r5.xyz * r2.xxx;
  r4.w = dot(-r2.yzw, -r2.yzw);
  r4.w = rsqrt(r4.w);
  r7.xyz = r4.www * -r2.yzw;
  r5.w = dot(-r7.xyz, r6.xyz);
  r5.w = r5.w + r5.w;
  r8.xyz = r6.xyz * -r5.www + -r7.xyz;
  r5.w = dot(r6.xyz, r7.xyz);
  r6.w = saturate(r5.w);
  r1.z = g_diffuseOcclusionTexture.SampleLevel(g_linearSampler_s, r1.zw, 0).x;
  
  uint loopstart = g0.x;  // ld_raw r1.w, l(0), g0.xxxx
  
  uint loopend = g1.x; // ld_raw r7.x, l(0), g1.xxxx

  loopend = loopstart + loopend;  // r7.x = (int)r1.w + (int)r7.x;
  
  r7.y = max(0.00200000009, r1.y);
  r5.w = 9.99999975e-006 + abs(r5.w);
  r9.xyz = r1.xxx + -r4.xyz;
  r1.x = r7.y * r7.y;
  r7.z = -r5.w * r1.x + r5.w;
  r7.z = r7.z * r5.w + r1.x;
  r7.z = sqrt(r7.z);
  r7.w = r3.x * -0.337748349 + 1;
  r8.w = 1 + -r5.w;
  r9.w = r8.w * r8.w;
  r9.w = r9.w * r9.w;
  r8.w = r9.w * r8.w;
  
  r9.w = 1.5 * r7.y;
  r9.w = min(1, r9.w);
  r9.w = -r9.w * 7 + 8;
  r10.z = 0;
  r11.z = 0;
  r12.zw = float2(1,-1);
  r13.yz = float2(0,0);
  r14.yz = float2(0,0);
  r15.zw = float2(1,-1);
  r16.xz = float2(0,0);
  r17.xz = float2(0,0);
  r18.xyz = float3(0,0,0);
  r19.xyz = float3(0,0,0);
  
  uint i = loopstart;  // r10.w = r1.w;
  
  while (true) {
    int done = cmp(i >= loopend);  // r11.w = cmp((uint)r10.w >= (uint)r7.x);
    if (done != 0) break;  // if (r11.w != 0) break;
    
    // ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r10.w, l(0), t20.xxxx
    r11.w = g_lightIndexInput[i].g_lightIndexInput_uint;
  
    // Skips this one, because fxc calculates array indexing and generates imul *9
    //r11.w = r11.w * 9; 
    
    // r13.w = (uint13)g_lightInfoArea[r11.w].areaLight.areaLightType;  bad uint13 conversion
    uint r13_w = (uint)g_lightInfoArea[r11.w].areaLight.areaLightType;
    
    int r14_w = cmp((int)r13_w == 2);  // r14.w = cmp((int)r13.w == 2);
    
    if (r14_w != 0) {  // if (r14.w != 0) {
      r20.xyz = g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz * float3(0.5,0.5,0.5);
      r21.xyz = -r20.xyz * g_lightInfoArea[r11.w].areaLight.lightRadius1 + g_lightInfoArea[r11.w].baseLight.pos.xyz;
      r20.xyz = r20.xyz * g_lightInfoArea[r11.w].areaLight.lightRadius1 + g_lightInfoArea[r11.w].baseLight.pos.xyz;
      r22.xyz = r20.xyz + -r21.xyz;
      r23.xyz = r5.xyz * r2.xxx + -r21.xyz;
      r14.w = dot(r23.xyz, r22.xyz);
      r16.w = dot(r22.xyz, r22.xyz);
      r14.w = r14.w / r16.w;
      r23.xyz = r14.www * r22.yzx + r21.yzx;
      r23.xyz = -r5.yzx * r2.xxx + r23.xyz;
      r16.w = dot(r23.xyz, r23.xyz);
      r16.w = rsqrt(r16.w);
      r23.xyz = r23.xyz * r16.www;
      r24.xyz = g_lightInfoArea[r11.w].baseLight.matrixLeft.zxy * r23.xyz;
      r23.xyz = g_lightInfoArea[r11.w].baseLight.matrixLeft.yzx * r23.yzx + -r24.xyz;
      r16.w = g_lightInfoArea[r11.w].areaLight.lightRadius1 * 0.5;
      r24.xyz = -g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz * r16.www + g_lightInfoArea[r11.w].baseLight.pos.xyz;
      r25.xyz = g_lightInfoArea[r11.w].areaLight.lightRadius0 * r23.xyz + r24.xyz;
      r24.xyz = -g_lightInfoArea[r11.w].areaLight.lightRadius0 * r23.xyz + r24.xyz;
      r26.xyz = g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz * r16.www + g_lightInfoArea[r11.w].baseLight.pos.xyz;
      r27.xyz = -g_lightInfoArea[r11.w].areaLight.lightRadius0 * r23.xyz + r26.xyz;
      r23.xyz = g_lightInfoArea[r11.w].areaLight.lightRadius0 * r23.xyz + r26.xyz;
      r25.xyz = -r5.xyz * r2.xxx + r25.xyz;
      r24.xyz = -r5.xyz * r2.xxx + r24.xyz;
      r26.xyz = -r5.xyz * r2.xxx + r27.xyz;
      r23.xyz = -r5.xyz * r2.xxx + r23.xyz;
      r27.xyz = r25.zxy * r24.yzx;
      r27.xyz = r25.yzx * r24.zxy + -r27.xyz;
      r16.w = dot(r27.xyz, r27.xyz);
      r16.w = rsqrt(r16.w);
      r27.xyz = r27.xyz * r16.www;
      r28.xyz = r26.yzx * r24.zxy;
      r28.xyz = r24.yzx * r26.zxy + -r28.xyz;
      r16.w = dot(r28.xyz, r28.xyz);
      r16.w = rsqrt(r16.w);
      r28.xyz = r28.xyz * r16.www;
      r29.xyz = r26.zxy * r23.yzx;
      r29.xyz = r26.yzx * r23.zxy + -r29.xyz;
      r16.w = dot(r29.xyz, r29.xyz);
      r16.w = rsqrt(r16.w);
      r29.xyz = r29.xyz * r16.www;
      r30.xyz = r23.zxy * r25.yzx;
      r30.xyz = r23.yzx * r25.zxy + -r30.xyz;
      r16.w = dot(r30.xyz, r30.xyz);
      r16.w = rsqrt(r16.w);
      r30.xyz = r30.xyz * r16.www;
      r16.w = dot(-r27.xyz, r28.xyz);
      r17.w = abs(r16.w) * abs(r16.w);
      r18.w = r17.w * abs(r16.w);
      r19.w = abs(r16.w) * -0.212114394 + 1.57072878;
      r17.w = r17.w * 0.0742610022 + r19.w;
      r17.w = r18.w * -0.0187292993 + r17.w;
      r18.w = 1 + -abs(r16.w);
      r18.w = sqrt(r18.w);
      r19.w = r18.w * r17.w;
      r16.w = cmp(r16.w >= 0);
      r17.w = -r18.w * r17.w + 3.14159274;
      r16.w = r16.w ? r19.w : r17.w;
      r17.w = dot(-r28.xyz, r29.xyz);
      r18.w = abs(r17.w) * abs(r17.w);
      r19.w = r18.w * abs(r17.w);
      r20.w = abs(r17.w) * -0.212114394 + 1.57072878;
      r18.w = r18.w * 0.0742610022 + r20.w;
      r18.w = r19.w * -0.0187292993 + r18.w;
      r19.w = 1 + -abs(r17.w);
      r19.w = sqrt(r19.w);
      r20.w = r19.w * r18.w;
      r17.w = cmp(r17.w >= 0);
      r18.w = -r19.w * r18.w + 3.14159274;
      r17.w = r17.w ? r20.w : r18.w;
      r18.w = dot(-r29.xyz, r30.xyz);
      r19.w = abs(r18.w) * abs(r18.w);
      r20.w = r19.w * abs(r18.w);
      r21.w = abs(r18.w) * -0.212114394 + 1.57072878;
      r19.w = r19.w * 0.0742610022 + r21.w;
      r19.w = r20.w * -0.0187292993 + r19.w;
      r20.w = 1 + -abs(r18.w);
      r20.w = sqrt(r20.w);
      r21.w = r20.w * r19.w;
      r18.w = cmp(r18.w >= 0);
      r19.w = -r20.w * r19.w + 3.14159274;
      r18.w = r18.w ? r21.w : r19.w;
      r19.w = dot(-r30.xyz, r27.xyz);
      r20.w = abs(r19.w) * abs(r19.w);
      r21.w = r20.w * abs(r19.w);
      r22.w = abs(r19.w) * -0.212114394 + 1.57072878;
      r20.w = r20.w * 0.0742610022 + r22.w;
      r20.w = r21.w * -0.0187292993 + r20.w;
      r21.w = 1 + -abs(r19.w);
      r21.w = sqrt(r21.w);
      r22.w = r21.w * r20.w;
      r19.w = cmp(r19.w >= 0);
      r20.w = -r21.w * r20.w + 3.14159274;
      r19.w = r19.w ? r22.w : r20.w;
      r16.w = r17.w + r16.w;
      r16.w = r16.w + r18.w;
      r16.w = r16.w + r19.w;
      r16.w = -6.28318548 + r16.w;
      r16.w = 0.200000003 * r16.w;
      r17.w = dot(r25.xyz, r25.xyz);
      r17.w = rsqrt(r17.w);
      r25.xyz = r25.xyz * r17.www;
      r17.w = saturate(dot(r25.xyz, r6.xyz));
      r18.w = dot(r24.xyz, r24.xyz);
      r18.w = rsqrt(r18.w);
      r24.xyz = r24.xyz * r18.www;
      r18.w = saturate(dot(r24.xyz, r6.xyz));
      r17.w = r18.w + r17.w;
      r18.w = dot(r26.xyz, r26.xyz);
      r18.w = rsqrt(r18.w);
      r24.xyz = r26.xyz * r18.www;
      r18.w = saturate(dot(r24.xyz, r6.xyz));
      r17.w = r18.w + r17.w;
      r18.w = dot(r23.xyz, r23.xyz);
      r18.w = rsqrt(r18.w);
      r23.xyz = r23.xyz * r18.www;
      r18.w = saturate(dot(r23.xyz, r6.xyz));
      r17.w = r18.w + r17.w;
      r23.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
      r18.w = dot(r23.xyz, r23.xyz);
      r19.w = rsqrt(r18.w);
      r23.xyz = r23.xyz * r19.www;
      r19.w = saturate(dot(r23.xyz, r6.xyz));
      r17.w = r19.w + r17.w;
      r14.w = saturate(r14.w);
      r22.xyz = r14.www * r22.xyz + r21.xyz;
      r22.xyz = -r5.xyz * r2.xxx + r22.xyz;
      r14.w = dot(r22.xyz, r22.xyz);
      r19.w = rsqrt(r14.w);
      r22.xyz = r22.xyz * r19.www;
      r19.w = g_lightInfoArea[r11.w].areaLight.lightRadius0 * g_lightInfoArea[r11.w].areaLight.lightRadius0;
      r20.w = saturate(dot(r22.xyz, r6.xyz));
      r21.w = 3.14159274 * r20.w;
      r14.w = max(r19.w, r14.w);
      r14.w = r19.w / r14.w;
      r14.w = r21.w * r14.w;
      r14.w = r16.w * r17.w + r14.w;
      r16.w = g_lightInfoArea[r11.w].baseLight.invSqrAttenuationRadius * r18.w;
      r16.w = -r16.w * r16.w + 1;
      r16.w = max(0, r16.w);
      r16.w = r16.w * r16.w;
      r14.w = r16.w * r14.w;
      r16.w = cmp(0 < r14.w);
      if (r16.w != 0) {
        r21.xyz = -r5.xyz * r2.xxx + r21.xyz;
        r20.xyz = -r5.xyz * r2.xxx + r20.xyz;
        r20.xyz = r20.xyz + -r21.xyz;
        r16.w = dot(r20.xyz, r20.xyz);
        r17.w = dot(r8.xyz, r20.xyz);
        r18.w = dot(r8.xyz, r21.xyz);
        r19.w = dot(r21.xyz, r20.xyz);
        r18.w = r18.w * r17.w + -r19.w;
        r16.w = -r17.w * r17.w + r16.w;
        r16.w = saturate(r18.w / r16.w);
        r20.xyz = r16.www * r20.xyz + r21.xyz;
        r16.w = dot(r20.xyz, r8.xyz);
        r21.xyz = r16.www * r8.xyz + -r20.xyz;
        r16.w = dot(r21.xyz, r21.xyz);
        r16.w = sqrt(r16.w);
        r16.w = saturate(g_lightInfoArea[r11.w].areaLight.lightRadius0 / r16.w);
        r20.xyz = r21.xyz * r16.www + r20.xyz;
        r16.w = dot(r20.xyz, r20.xyz);
        r17.w = sqrt(r16.w);
        r16.w = rsqrt(r16.w);
        r20.xyz = r20.xyz * r16.www;
        r16.w = r17.w + r17.w;
        r16.w = g_lightInfoArea[r11.w].areaLight.lightRadius0 / r16.w;
        r16.w = saturate(r16.w + r7.y);
        r16.w = r7.y / r16.w;
        r21.xyz = -r2.yzw * r4.www + r20.xyz;
        r17.w = dot(r21.xyz, r21.xyz);
        r17.w = rsqrt(r17.w);
        r21.xyz = r21.xyz * r17.www;
        r23.xyz = -r2.yzw * r4.www + r22.xyz;
        r17.w = dot(r23.xyz, r23.xyz);
        r17.w = rsqrt(r17.w);
        r23.xyz = r23.xyz * r17.www;
        r17.w = saturate(dot(r20.xyz, r21.xyz));
        r18.w = saturate(dot(r22.xyz, r23.xyz));
        r19.w = saturate(dot(r6.xyz, r21.xyz));
        r20.x = saturate(dot(r6.xyz, r20.xyz));
        r17.w = 1 + -r17.w;
        r20.y = r17.w * r17.w;
        r20.y = r20.y * r20.y;
        r17.w = r20.y * r17.w;
        r21.xyz = r9.xyz * r17.www + r4.xyz;
        r17.w = -r20.x * r1.x + r20.x;
        r17.w = r17.w * r20.x + r1.x;
        r17.w = sqrt(r17.w);
        r17.w = r17.w * r5.w;
        r17.w = r20.x * r7.z + r17.w;
        r17.w = 0.5 / r17.w;
        r20.x = r19.w * r1.x + -r19.w;
        r19.w = r20.x * r19.w + 1;
        r19.w = r19.w * r19.w;
        r19.w = r1.x / r19.w;
        r17.w = r19.w * r17.w;
        r16.w = r17.w * r16.w;
        r20.xyz = r21.xyz * r16.www;
        r16.w = r18.w * r18.w;
        r16.w = dot(r16.ww, r3.xx);
        r16.w = r3.x * 0.5 + r16.w;
        r17.w = 1 + -r20.w;
        r18.w = r17.w * r17.w;
        r18.w = r18.w * r18.w;
        r17.w = r18.w * r17.w;
        r16.w = -1 + r16.w;
        r17.w = r16.w * r17.w + 1;
        r16.w = r16.w * r8.w + 1;
        r16.w = r17.w * r16.w;
        r16.w = r16.w * r7.w;
        r17.w = g_lightInfoArea[r11.w].baseLight.diffuseScale * r14.w;
        r21.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r17.www;
        r21.xyz = r21.xyz * r16.www;
        r14.w = g_lightInfoArea[r11.w].baseLight.specularScale * r14.w;
        r22.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r14.www;
        r20.xyz = r22.xyz * r20.xyz;
      } else {
        r21.xyz = float3(0,0,0);
        r20.xyz = float3(0,0,0);
      }
    } else {
      r14.w = cmp((int)r13.w == 5);
      if (r14.w != 0) {
        r22.xyz = r5.xyz * r2.xxx + -g_lightInfoArea[r11.w].baseLight.pos.xyz;
        r14.w = dot(r22.xyz, -g_lightInfoArea[r11.w].baseLight.matrixForward.xyz);
        r14.w = cmp(0 < r14.w);
        if (r14.w != 0) {
          r22.xy = g_lightInfoArea[r11.w].areaLight.lightRadius0 * float2(0.5,0.5);
          r23.xyz = g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz * -r22.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
          r24.xyz = g_lightInfoArea[r11.w].baseLight.matrixUp.xyz * r22.yyy + r23.xyz;
          r23.xyz = g_lightInfoArea[r11.w].baseLight.matrixUp.xyz * -r22.yyy + r23.xyz;
          r25.xyz = g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz * r22.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
          r26.xyz = g_lightInfoArea[r11.w].baseLight.matrixUp.xyz * -r22.yyy + r25.xyz;
          r25.xyz = g_lightInfoArea[r11.w].baseLight.matrixUp.xyz * r22.yyy + r25.xyz;
          r24.xyz = -r5.xyz * r2.xxx + r24.xyz;
          r23.xyz = -r5.xyz * r2.xxx + r23.xyz;
          r26.xyz = -r5.xyz * r2.xxx + r26.xyz;
          r25.xyz = -r5.xyz * r2.xxx + r25.xyz;
          r27.xyz = r24.zxy * r23.yzx;
          r27.xyz = r24.yzx * r23.zxy + -r27.xyz;
          r14.w = dot(r27.xyz, r27.xyz);
          r14.w = rsqrt(r14.w);
          r27.xyz = r27.xyz * r14.www;
          r28.xyz = r26.yzx * r23.zxy;
          r28.xyz = r23.yzx * r26.zxy + -r28.xyz;
          r14.w = dot(r28.xyz, r28.xyz);
          r14.w = rsqrt(r14.w);
          r28.xyz = r28.xyz * r14.www;
          r29.xyz = r26.zxy * r25.yzx;
          r29.xyz = r26.yzx * r25.zxy + -r29.xyz;
          r14.w = dot(r29.xyz, r29.xyz);
          r14.w = rsqrt(r14.w);
          r29.xyz = r29.xyz * r14.www;
          r30.xyz = r25.zxy * r24.yzx;
          r30.xyz = r25.yzx * r24.zxy + -r30.xyz;
          r14.w = dot(r30.xyz, r30.xyz);
          r14.w = rsqrt(r14.w);
          r30.xyz = r30.xyz * r14.www;
          r14.w = dot(-r27.xyz, r28.xyz);
          r16.w = abs(r14.w) * abs(r14.w);
          r17.w = r16.w * abs(r14.w);
          r18.w = abs(r14.w) * -0.212114394 + 1.57072878;
          r16.w = r16.w * 0.0742610022 + r18.w;
          r16.w = r17.w * -0.0187292993 + r16.w;
          r17.w = 1 + -abs(r14.w);
          r17.w = sqrt(r17.w);
          r18.w = r17.w * r16.w;
          r14.w = cmp(r14.w >= 0);
          r16.w = -r17.w * r16.w + 3.14159274;
          r14.w = r14.w ? r18.w : r16.w;
          r16.w = dot(-r28.xyz, r29.xyz);
          r17.w = abs(r16.w) * abs(r16.w);
          r18.w = r17.w * abs(r16.w);
          r19.w = abs(r16.w) * -0.212114394 + 1.57072878;
          r17.w = r17.w * 0.0742610022 + r19.w;
          r17.w = r18.w * -0.0187292993 + r17.w;
          r18.w = 1 + -abs(r16.w);
          r18.w = sqrt(r18.w);
          r19.w = r18.w * r17.w;
          r16.w = cmp(r16.w >= 0);
          r17.w = -r18.w * r17.w + 3.14159274;
          r16.w = r16.w ? r19.w : r17.w;
          r17.w = dot(-r29.xyz, r30.xyz);
          r18.w = abs(r17.w) * abs(r17.w);
          r19.w = r18.w * abs(r17.w);
          r20.w = abs(r17.w) * -0.212114394 + 1.57072878;
          r18.w = r18.w * 0.0742610022 + r20.w;
          r18.w = r19.w * -0.0187292993 + r18.w;
          r19.w = 1 + -abs(r17.w);
          r19.w = sqrt(r19.w);
          r20.w = r19.w * r18.w;
          r17.w = cmp(r17.w >= 0);
          r18.w = -r19.w * r18.w + 3.14159274;
          r17.w = r17.w ? r20.w : r18.w;
          r18.w = dot(-r30.xyz, r27.xyz);
          r19.w = abs(r18.w) * abs(r18.w);
          r20.w = r19.w * abs(r18.w);
          r21.w = abs(r18.w) * -0.212114394 + 1.57072878;
          r19.w = r19.w * 0.0742610022 + r21.w;
          r19.w = r20.w * -0.0187292993 + r19.w;
          r20.w = 1 + -abs(r18.w);
          r20.w = sqrt(r20.w);
          r21.w = r20.w * r19.w;
          r18.w = cmp(r18.w >= 0);
          r19.w = -r20.w * r19.w + 3.14159274;
          r18.w = r18.w ? r21.w : r19.w;
          r14.w = r16.w + r14.w;
          r14.w = r14.w + r17.w;
          r14.w = r14.w + r18.w;
          r14.w = -6.28318548 + r14.w;
          r14.w = 0.200000003 * r14.w;
          r16.w = dot(r24.xyz, r24.xyz);
          r16.w = rsqrt(r16.w);
          r24.xyz = r24.xyz * r16.www;
          r16.w = saturate(dot(r24.xyz, r6.xyz));
          r17.w = dot(r23.xyz, r23.xyz);
          r17.w = rsqrt(r17.w);
          r23.xyz = r23.xyz * r17.www;
          r17.w = saturate(dot(r23.xyz, r6.xyz));
          r16.w = r17.w + r16.w;
          r17.w = dot(r26.xyz, r26.xyz);
          r17.w = rsqrt(r17.w);
          r23.xyz = r26.xyz * r17.www;
          r17.w = saturate(dot(r23.xyz, r6.xyz));
          r16.w = r17.w + r16.w;
          r17.w = dot(r25.xyz, r25.xyz);
          r17.w = rsqrt(r17.w);
          r23.xyz = r25.xyz * r17.www;
          r17.w = saturate(dot(r23.xyz, r6.xyz));
          r16.w = r17.w + r16.w;
          r23.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
          r17.w = dot(r23.xyz, r23.xyz);
          r17.w = rsqrt(r17.w);
          r24.xyz = r23.xyz * r17.www;
          r17.w = saturate(dot(r24.xyz, r6.xyz));
          r16.w = r17.w + r16.w;
          r14.w = r16.w * r14.w;
          r16.w = saturate(dot(r6.xyz, g_lightInfoArea[r11.w].baseLight.matrixForward.xyz));
          r16.w = 9.99999975e-006 + r16.w;
          r24.xyz = r6.xyz * r16.www + g_lightInfoArea[r11.w].baseLight.matrixForward.xyz;
          r17.w = dot(r24.xyz, r24.xyz);
          r17.w = rsqrt(r17.w);
          r25.xyz = g_lightInfoArea[r11.w].baseLight.matrixForward.xyz * r16.www + r6.xyz;
          r16.w = dot(r25.xyz, r25.xyz);
          r16.w = rsqrt(r16.w);
          r25.xyz = r25.xyz * r16.www;
          r24.xyz = r24.xyz * r17.www + r25.xyz;
          r24.xyz = float3(0.5,0.5,0.5) * r24.xyz;
          r16.w = dot(-g_lightInfoArea[r11.w].baseLight.matrixForward.xyz, r23.xyz);
          r17.w = dot(-g_lightInfoArea[r11.w].baseLight.matrixForward.xyz, r24.xyz);
          r16.w = r16.w / r17.w;
          r23.xyz = r24.xyz * r16.www + r2.yzw;
          r23.xyz = -g_lightInfoArea[r11.w].baseLight.pos.xyz + r23.xyz;
          r24.x = dot(r23.xyz, g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz);
          r24.y = dot(r23.xyz, g_lightInfoArea[r11.w].baseLight.matrixUp.xyz);
          r22.zw = max(r24.xy, -r22.xy);
          r22.xy = min(r22.zw, r22.xy);
          r22.xzw = r22.xxx * g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz + g_lightInfoArea[r11.w].baseLight.pos.xyz;
          r22.xyz = r22.yyy * g_lightInfoArea[r11.w].baseLight.matrixUp.xyz + r22.xzw;
          r22.xyz = -r5.xyz * r2.xxx + r22.xyz;
          r16.w = dot(r22.xyz, r22.xyz);
          r16.w = rsqrt(r16.w);
          r22.xyz = r22.xyz * r16.www;
        } else {
          r22.xyz = float3(1,0,0);
          r14.w = 0;
        }
        r23.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
        r16.w = dot(r23.xyz, r23.xyz);
        r16.w = g_lightInfoArea[r11.w].baseLight.invSqrAttenuationRadius * r16.w;
        r16.w = -r16.w * r16.w + 1;
        r16.w = max(0, r16.w);
        r16.w = r16.w * r16.w;
        r14.w = r16.w * r14.w;
        r16.w = cmp(0 < r14.w);
        if (r16.w != 0) {
          r24.xy = g_lightInfoArea[r11.w].areaLight.lightRadius0 * float2(0.5,0.5);
          r25.x = dot(r8.xyz, g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz);
          r25.y = dot(r8.xyz, g_lightInfoArea[r11.w].baseLight.matrixUp.xyz);
          r25.z = dot(r8.xyz, -g_lightInfoArea[r11.w].baseLight.matrixForward.xyz);
          r26.x = dot(r23.xyz, g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz);
          r26.y = dot(r23.xyz, g_lightInfoArea[r11.w].baseLight.matrixUp.xyz);
          r26.z = dot(r23.xyz, -g_lightInfoArea[r11.w].baseLight.matrixForward.xyz);
          r16.w = r26.z / r25.z;
          r27.xyz = r25.xyz * r16.www;
          r24.zw = r25.xy * r16.ww + -r26.xy;
          r16.w = cmp(0 < r16.w);
          r24.yz = cmp(r24.xy >= abs(r24.zw));
          r16.w = r16.w ? r24.y : 0;
          r16.w = r24.z ? r16.w : 0;
          if (r16.w == 0) {
            r10.xy = g_lightInfoArea[r11.w].areaLight.lightRadius0 * float2(-0.5,-0.5);
            r28.xyz = r26.xyz + r10.xyz;
            r11.xy = g_lightInfoArea[r11.w].areaLight.lightRadius0 * float2(0.5,0.5);
            r29.xyz = r26.xyz + r11.xyz;
            r28.w = r29.x;
            r10.xy = r28.xw * r25.xx;
            r29.w = r28.y;
            r11.xy = r29.wy * r25.yy;
            r24.yz = r26.zz * r25.zz;
            r30.xy = r28.xw * r28.xw;
            r30.zw = r26.zz * r26.zz;
            r31.xy = r29.wy * r29.wy + r30.zw;
            r31.zw = r31.xy * r25.xx;
            r11.xy = -r11.xy * r28.xw + r31.zw;
            r11.xy = -r24.yz * r28.xw + r11.xy;
            r31.zw = r25.yy * r29.wy + r24.yz;
            r24.xw = r31.zw * r24.xx;
            r24.xw = r24.xw + r24.xw;
            r32.xy = r11.xy / r24.xw;
            r32.z = -r32.y;
            r12.xy = saturate(r32.xz);
            r11.xy = g_lightInfoArea[r11.w].areaLight.lightRadius0 * r12.zy;
            r11.xy = r11.xy * r12.xw + r28.xw;
            r24.xw = r25.xx * r11.xy + r31.zw;
            r11.xy = r11.xy * r11.xy + r31.xy;
            r11.xy = sqrt(r11.xy);
            r11.xy = r24.xw / r11.xy;
            r16.w = cmp(r11.x < r11.y);
            if (r16.w != 0) {
              r13.x = g_lightInfoArea[r11.w].areaLight.lightRadius0;
              r27.xyz = -r13.xyz * r12.yyy + r29.xyz;
              r11.x = r11.y;
            } else {
              r14.x = g_lightInfoArea[r11.w].areaLight.lightRadius0;
              r27.xyz = r14.xyz * r12.xxx + r28.xyz;
            }
            r10.xy = r10.xy * r29.wy;
            r10.xy = r25.yy * r30.xy + -r10.xy;
            r10.xy = -r24.yz * r29.wy + r10.xy;
            r10.xy = r25.yy * r30.zw + r10.xy;
            r12.xy = r25.xx * r28.xw + r24.yz;
            r24.xy = g_lightInfoArea[r11.w].areaLight.lightRadius1 * r12.xy;
            r24.xy = r10.xy / r24.xy;
            r24.z = -r24.y;
            r15.xy = saturate(r24.xz);
            r10.xy = g_lightInfoArea[r11.w].areaLight.lightRadius1 * r15.zy;
            r10.xy = r10.xy * r15.xw + r29.wy;
            r12.xy = r25.yy * r10.xy + r12.xy;
            r24.xy = r28.xw * r28.xw + r30.zw;
            r10.xy = r10.xy * r10.xy + r24.xy;
            r10.xy = sqrt(r10.xy);
            r10.xy = r12.xy / r10.xy;
            r10.x = cmp(r11.x < r10.x);
            if (r10.x != 0) {
              r16.y = g_lightInfoArea[r11.w].areaLight.lightRadius1;
              r27.xyz = r16.xyz * r15.xxx + r28.xyz;
            } else {
              r10.x = cmp(r11.x < r10.y);
              if (r10.x != 0) {
                r17.y = g_lightInfoArea[r11.w].areaLight.lightRadius1;
                r27.xyz = -r17.xyz * r15.yyy + r29.xyz;
              }
            }
          }
          r10.x = dot(r27.xyz, r27.xyz);
          r10.x = rsqrt(r10.x);
          r24.xyz = r27.xyz * r10.xxx;
          r10.x = dot(r25.xyz, r25.xyz);
          r10.x = rsqrt(r10.x);
          r25.xyz = r25.xyz * r10.xxx;
          r10.x = dot(r24.xyz, r25.xyz);
          r10.x = saturate(r10.x * 1.66600001 + -0.5);
          r24.xyz = r27.xyz + -r26.xyz;
          r23.xyz = r24.xxx * g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz + r23.xyz;
          r23.xyz = r24.yyy * g_lightInfoArea[r11.w].baseLight.matrixUp.xyz + r23.xyz;
          r23.xyz = r24.zzz * -g_lightInfoArea[r11.w].baseLight.matrixForward.xyz + r23.xyz;
          r23.xyz = r23.xyz + -r22.xyz;
          r23.xyz = r10.xxx * r23.xyz + r22.xyz;
          r10.x = dot(r23.xyz, r23.xyz);
          r10.y = sqrt(r10.x);
          r10.y = 1 / r10.y;
          r10.x = rsqrt(r10.x);
          r23.xyz = r23.xyz * r10.xxx;
          r10.x = g_lightInfoArea[r11.w].areaLight.lightRadius0 + g_lightInfoArea[r11.w].areaLight.lightRadius1;
          r10.x = saturate(r10.x * r10.y + r7.y);
          r10.x = r7.y / r10.x;
          r10.x = r10.x * r10.x;
          r10.x = r10.x * r9.w;
          r24.xyz = -r2.yzw * r4.www + r23.xyz;
          r10.y = dot(r24.xyz, r24.xyz);
          r10.y = rsqrt(r10.y);
          r24.xyz = r24.xyz * r10.yyy;
          r25.xyz = -r2.yzw * r4.www + r22.xyz;
          r10.y = dot(r25.xyz, r25.xyz);
          r10.y = rsqrt(r10.y);
          r25.xyz = r25.xyz * r10.yyy;
          r10.y = saturate(dot(r23.xyz, r24.xyz));
          r11.x = saturate(dot(r22.xyz, r25.xyz));
          r11.y = saturate(dot(r6.xyz, r24.xyz));
          r12.x = saturate(dot(r6.xyz, r23.xyz));
          r12.y = saturate(dot(r6.xyz, r22.xyz));
          r10.y = 1 + -r10.y;
          r13.x = r10.y * r10.y;
          r13.x = r13.x * r13.x;
          r10.y = r13.x * r10.y;
          r22.xyz = r9.xyz * r10.yyy + r4.xyz;
          r10.y = -r12.x * r1.x + r12.x;
          r10.y = r10.y * r12.x + r1.x;
          r10.y = sqrt(r10.y);
          r10.y = r10.y * r5.w;
          r10.y = r12.x * r7.z + r10.y;
          r10.y = 0.5 / r10.y;
          r12.x = r11.y * r1.x + -r11.y;
          r11.y = r12.x * r11.y + 1;
          r11.y = r11.y * r11.y;
          r11.y = r1.x / r11.y;
          r10.y = r11.y * r10.y;
          r10.x = r10.y * r10.x;
          r22.xyz = r22.xyz * r10.xxx;
          r10.x = r11.x * r11.x;
          r10.x = dot(r10.xx, r3.xx);
          r10.x = r3.x * 0.5 + r10.x;
          r10.y = 1 + -r12.y;
          r11.x = r10.y * r10.y;
          r11.x = r11.x * r11.x;
          r10.y = r11.x * r10.y;
          r10.x = -1 + r10.x;
          r10.y = r10.x * r10.y + 1;
          r10.x = r10.x * r8.w + 1;
          r10.x = r10.y * r10.x;
          r10.x = r10.x * r7.w;
          r10.y = g_lightInfoArea[r11.w].baseLight.diffuseScale * r14.w;
          r23.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r10.yyy;
          r21.xyz = r23.xyz * r10.xxx;
          r10.x = g_lightInfoArea[r11.w].baseLight.specularScale * r14.w;
          r23.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r10.xxx;
          r20.xyz = r23.xyz * r22.xyz;
        } else {
          r21.xyz = float3(0,0,0);
          r20.xyz = float3(0,0,0);
        }
      } else {
        r10.x = cmp((int)r13.w == 4);
        if (r10.x != 0) {
          r22.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
          r10.x = dot(r22.xyz, r22.xyz);
          r10.y = rsqrt(r10.x);
          r23.xyz = r22.xyz * r10.yyy;
          r10.y = dot(r6.xyz, r23.xyz);
          r11.x = g_lightInfoArea[r11.w].areaLight.lightRadius0 * g_lightInfoArea[r11.w].areaLight.lightRadius0;
          r11.y = max(r11.x, r10.x);
          r11.y = g_lightInfoArea[r11.w].areaLight.lightRadius0 * g_lightInfoArea[r11.w].areaLight.lightRadius0 + r11.y;
          r11.x = r11.x / r11.y;
          r12.xy = r11.xx * float2(-0.690576434,-10.4827538) + float2(0.559636116,18.2588902);
          r11.y = r12.y * r11.x + -11.7109194;
          r11.y = r11.y * r11.x + 4.99786425;
          r12.y = r10.y * 0.5 + 0.5;
          r13.x = log2(r12.y);
          r11.y = r13.x * r11.y;
          r11.y = exp2(r11.y);
          r13.x = saturate(r10.y);
          r10.y = r12.x * r10.y;
          r12.x = r12.y + -r11.y;
          r10.y = r10.y * r12.x + r11.y;
          r10.y = max(r13.x, r10.y);
          r10.y = r10.y * r11.x;
          r10.y = 3.14159274 * r10.y;
          r11.x = saturate(dot(-g_lightInfoArea[r11.w].baseLight.matrixForward.xyz, -r23.xyz));
          r10.y = r11.x * r10.y;
          r24.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r11.w].areaLight.virtualPos.xyz;
          r11.x = dot(r24.xyz, r24.xyz);
          r11.x = rsqrt(r11.x);
          r24.xyz = r24.xyz * r11.xxx;
          r11.x = dot(g_lightInfoArea[r11.w].baseLight.matrixForward.xyz, r24.xyz);
          r11.x = saturate(r11.x * g_lightInfoArea[r11.w].baseLight.angleScale + g_lightInfoArea[r11.w].baseLight.angleOffset);
          r11.x = r11.x * r11.x;
          r10.y = r11.x * r10.y;
          r10.x = g_lightInfoArea[r11.w].baseLight.invSqrAttenuationRadius * r10.x;
          r10.x = -r10.x * r10.x + 1;
          r10.x = max(0, r10.x);
          r10.x = r10.x * r10.x;
          r10.x = r10.y * r10.x;
          r10.y = cmp(0 < r10.x);
          if (r10.y != 0) {
            r10.y = saturate(dot(r8.xyz, -g_lightInfoArea[r11.w].baseLight.matrixForward.xyz));
            r10.y = 9.99999975e-006 + r10.y;
            r24.xyz = g_lightInfoArea[r11.w].baseLight.matrixForward.xyz * r10.yyy + r8.xyz;
            r10.y = dot(r24.xyz, r24.xyz);
            r10.y = rsqrt(r10.y);
            r24.xyz = r24.xyz * r10.yyy;
            r10.y = dot(-g_lightInfoArea[r11.w].baseLight.matrixForward.xyz, r22.xyz);
            r11.x = dot(-g_lightInfoArea[r11.w].baseLight.matrixForward.xyz, r24.xyz);
            r10.y = r10.y / r11.x;
            r22.xyz = r24.xyz * r10.yyy + r2.yzw;
            r22.xyz = -g_lightInfoArea[r11.w].baseLight.pos.xyz + r22.xyz;
            r11.x = dot(r22.xyz, g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz);
            r11.y = dot(r22.xyz, g_lightInfoArea[r11.w].baseLight.matrixUp.xyz);
            r10.y = dot(r11.xy, r11.xy);
            r10.y = sqrt(r10.y);
            r12.xy = r11.xy / r10.yy;
            r12.xy = g_lightInfoArea[r11.w].areaLight.lightRadius0 * r12.xy;
            r10.y = cmp(r10.y < g_lightInfoArea[r11.w].areaLight.lightRadius0);
            r11.xy = r10.yy ? r11.xy : r12.xy;
            r22.xyz = r11.xxx * g_lightInfoArea[r11.w].baseLight.matrixLeft.xyz + g_lightInfoArea[r11.w].baseLight.pos.xyz;
            r22.xyz = r11.yyy * g_lightInfoArea[r11.w].baseLight.matrixUp.xyz + r22.xyz;
            r22.xyz = -r5.xyz * r2.xxx + r22.xyz;
            r10.y = dot(r22.xyz, r22.xyz);
            r10.y = sqrt(r10.y);
            r22.xyz = r22.xyz / r10.yyy;
            r10.y = r10.y + r10.y;
            r10.y = g_lightInfoArea[r11.w].areaLight.lightRadius0 / r10.y;
            r10.y = saturate(r10.y + r7.y);
            r10.y = r7.y / r10.y;
            r10.y = r10.y * r10.y;
            r24.xyz = -r2.yzw * r4.www + r22.xyz;
            r11.x = dot(r24.xyz, r24.xyz);
            r11.x = rsqrt(r11.x);
            r24.xyz = r24.xyz * r11.xxx;
            r25.xyz = -r2.yzw * r4.www + r23.xyz;
            r11.x = dot(r25.xyz, r25.xyz);
            r11.x = rsqrt(r11.x);
            r25.xyz = r25.xyz * r11.xxx;
            r11.x = saturate(dot(r22.xyz, r24.xyz));
            r11.y = saturate(dot(r23.xyz, r25.xyz));
            r12.x = saturate(dot(r6.xyz, r24.xyz));
            r12.y = saturate(dot(r6.xyz, r22.xyz));
            r11.x = 1 + -r11.x;
            r13.w = r11.x * r11.x;
            r13.w = r13.w * r13.w;
            r11.x = r13.w * r11.x;
            r22.xyz = r9.xyz * r11.xxx + r4.xyz;
            r11.x = -r12.y * r1.x + r12.y;
            r11.x = r11.x * r12.y + r1.x;
            r11.x = sqrt(r11.x);
            r11.x = r11.x * r5.w;
            r11.x = r12.y * r7.z + r11.x;
            r11.x = 0.5 / r11.x;
            r12.y = r12.x * r1.x + -r12.x;
            r12.x = r12.y * r12.x + 1;
            r12.x = r12.x * r12.x;
            r12.x = r1.x / r12.x;
            r11.x = r12.x * r11.x;
            r10.y = r11.x * r10.y;
            r22.xyz = r22.xyz * r10.yyy;
            r10.y = r11.y * r11.y;
            r10.y = dot(r10.yy, r3.xx);
            r10.y = r3.x * 0.5 + r10.y;
            r11.x = 1 + -r13.x;
            r11.y = r11.x * r11.x;
            r11.y = r11.y * r11.y;
            r11.x = r11.y * r11.x;
            r10.y = -1 + r10.y;
            r11.x = r10.y * r11.x + 1;
            r10.y = r10.y * r8.w + 1;
            r10.y = r11.x * r10.y;
            r10.y = r10.y * r7.w;
            r11.x = g_lightInfoArea[r11.w].baseLight.diffuseScale * r10.x;
            r23.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r11.xxx;
            r21.xyz = r23.xyz * r10.yyy;
            r10.x = g_lightInfoArea[r11.w].baseLight.specularScale * r10.x;
            r23.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r10.xxx;
            r20.xyz = r23.xyz * r22.xyz;
          } else {
            r21.xyz = float3(0,0,0);
            r20.xyz = float3(0,0,0);
          }
        } else {
          r22.xyz = -r5.xyz * r2.xxx + g_lightInfoArea[r11.w].baseLight.pos.xyz;
          r10.x = dot(r22.xyz, r22.xyz);
          r10.y = rsqrt(r10.x);
          r23.xyz = r22.xyz * r10.yyy;
          r10.y = dot(r6.xyz, r23.xyz);
          r11.x = g_lightInfoArea[r11.w].areaLight.lightRadius0 * g_lightInfoArea[r11.w].areaLight.lightRadius0;
          r11.y = max(r11.x, r10.x);
          r11.x = r11.x / r11.y;
          r12.xy = r11.xx * float2(-0.690576434,-10.4827538) + float2(0.559636116,18.2588902);
          r11.y = r12.y * r11.x + -11.7109194;
          r11.y = r11.y * r11.x + 4.99786425;
          r12.y = r10.y * 0.5 + 0.5;
          r13.x = log2(r12.y);
          r11.y = r13.x * r11.y;
          r11.y = exp2(r11.y);
          r13.x = saturate(r10.y);
          r10.y = r12.x * r10.y;
          r12.x = r12.y + -r11.y;
          r10.y = r10.y * r12.x + r11.y;
          r10.y = max(r13.x, r10.y);
          r10.y = r10.y * r11.x;
          r10.y = 3.14159274 * r10.y;
          r10.x = g_lightInfoArea[r11.w].baseLight.invSqrAttenuationRadius * r10.x;
          r10.x = -r10.x * r10.x + 1;
          r10.x = max(0, r10.x);
          r10.x = r10.x * r10.x;
          r10.x = r10.y * r10.x;
          r10.y = cmp(0 < r10.x);
          if (r10.y != 0) {
            r10.y = dot(r22.xyz, r8.xyz);
            r24.xyz = r10.yyy * r8.xyz + -r22.xyz;
            r10.y = dot(r24.xyz, r24.xyz);
            r10.y = sqrt(r10.y);
            r10.y = saturate(g_lightInfoArea[r11.w].areaLight.lightRadius0 / r10.y);
            r22.xyz = r24.xyz * r10.yyy + r22.xyz;
            r10.y = dot(r22.xyz, r22.xyz);
            r10.y = sqrt(r10.y);
            r22.xyz = r22.xyz / r10.yyy;
            r10.y = r10.y + r10.y;
            r10.y = g_lightInfoArea[r11.w].areaLight.lightRadius0 / r10.y;
            r10.y = saturate(r10.y + r7.y);
            r10.y = r7.y / r10.y;
            r10.y = r10.y * r10.y;
            r24.xyz = -r2.yzw * r4.www + r22.xyz;
            r11.x = dot(r24.xyz, r24.xyz);
            r11.x = rsqrt(r11.x);
            r24.xyz = r24.xyz * r11.xxx;
            r25.xyz = -r2.yzw * r4.www + r23.xyz;
            r11.x = dot(r25.xyz, r25.xyz);
            r11.x = rsqrt(r11.x);
            r25.xyz = r25.xyz * r11.xxx;
            r11.x = saturate(dot(r22.xyz, r24.xyz));
            r11.y = saturate(dot(r23.xyz, r25.xyz));
            r12.x = saturate(dot(r6.xyz, r24.xyz));
            r12.y = saturate(dot(r6.xyz, r22.xyz));
            r11.x = 1 + -r11.x;
            r13.w = r11.x * r11.x;
            r13.w = r13.w * r13.w;
            r11.x = r13.w * r11.x;
            r22.xyz = r9.xyz * r11.xxx + r4.xyz;
            r11.x = -r12.y * r1.x + r12.y;
            r11.x = r11.x * r12.y + r1.x;
            r11.x = sqrt(r11.x);
            r11.x = r11.x * r5.w;
            r11.x = r12.y * r7.z + r11.x;
            r11.x = 0.5 / r11.x;
            r12.y = r12.x * r1.x + -r12.x;
            r12.x = r12.y * r12.x + 1;
            r12.x = r12.x * r12.x;
            r12.x = r1.x / r12.x;
            r11.x = r12.x * r11.x;
            r10.y = r11.x * r10.y;
            r22.xyz = r22.xyz * r10.yyy;
            r10.y = r11.y * r11.y;
            r10.y = dot(r10.yy, r3.xx);
            r10.y = r3.x * 0.5 + r10.y;
            r11.x = 1 + -r13.x;
            r11.y = r11.x * r11.x;
            r11.y = r11.y * r11.y;
            r11.x = r11.y * r11.x;
            r10.y = -1 + r10.y;
            r11.x = r10.y * r11.x + 1;
            r10.y = r10.y * r8.w + 1;
            r10.y = r11.x * r10.y;
            r10.y = r10.y * r7.w;
            r11.x = g_lightInfoArea[r11.w].baseLight.diffuseScale * r10.x;
            r23.xyz = g_lightInfoArea[r11.w].baseLight.color.xyz * r11.xxx;
            r21.xyz = r23.xyz * r10.yyy;
            r10.x = g_lightInfoArea[r11.w].baseLight.specularScale * r10.x;
            r11.xyw = g_lightInfoArea[r11.w].baseLight.color.xyz * r10.xxx;
            r20.xyz = r22.xyz * r11.xyw;
          } else {
            r21.xyz = float3(0,0,0);
            r20.xyz = float3(0,0,0);
          }
        }
      }
    }

    r19.xyz = r21.xyz + r19.xyz;
    r18.xyz = r20.xyz + r18.xyz;
    
    i = i + 1;  // r10.w = (int)r10.w + 1;
  }
  r1.x = -1 + r1.z;
  r1.x = dynamicAOFactor * r1.x + 1;
  r2.xyz = r19.xyz * r1.xxx;
  r1.x = r6.w + r1.z;
  r1.y = r1.y * -16 + -1;
  r1.y = exp2(r1.y);
  r1.x = log2(r1.x);
  r1.x = r1.y * r1.x;
  r1.x = exp2(r1.x);
  r1.x = r1.x + r1.z;
  r1.x = saturate(-1 + r1.x);
  r1.xyz = r18.xyz * r1.xxx;
  r2.xyz = r3.yzw * r2.xyz;
  r1.xyz = float3(0.318309873,0.318309873,0.318309873) * r1.xyz;
  r1.xyz = r2.xyz * float3(0.318309873,0.318309873,0.318309873) + r1.xyz;
  r1.xyz = g_exposureMultipliers.zzz * r1.xyz;
  r1.xyz = min(float3(65504,65504,65504), r1.xyz);
  r1.w = 0;
    
  g_outputTexture0[r0.xy].xyzw = r1.xyzw;  // store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw

  return;
}

/*  Invert code from Mike

float4x4 origMatrix = invViewProjectionMatrix;
float4x4 invMatrix;

AllMemoryBarrierWithGroupSync();

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;

//...Original Matrix
a1.xyzw = origMatrix[0].xyzw;
a2.xyzw = origMatrix[1].xyzw;
a3.xyzw = origMatrix[2].xyzw;
a4.xyzw = origMatrix[3].xyzw;

//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse  

invMatrix[0].xyzw = b1.xyzw;  
invMatrix[1].xyzw = b2.xyzw;  
invMatrix[2].xyzw = b3.xyzw;  
invMatrix[3].xyzw = b4.xyzw;  

*/

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
//
//   using 3Dmigoto v1.2.44 on Mon Sep 26 22:19:13 2016
//
//
// Buffer Definitions: 
//
// cbuffer cbAreaLightInfo
// {
//
//   struct AreaLightInfo
//   {
//       
//       struct BaseLightInfo
//       {
//           
//           float3 pos;                // Offset:    0
//           float invSqrAttenuationRadius;// Offset:   12
//           float3 color;              // Offset:   16
//           float attenuationOffset;   // Offset:   28
//           float3 matrixForward;      // Offset:   32
//           float diffuseScale;        // Offset:   44
//           float3 matrixUp;           // Offset:   48
//           float specularScale;       // Offset:   60
//           float3 matrixLeft;         // Offset:   64
//           float shadowDimmer;        // Offset:   76
//           float angleScale;          // Offset:   80
//           float angleOffset;         // Offset:   84
//           float2 unused;             // Offset:   88
//
//       } baseLight;                   // Offset:    0
//       
//       struct BaseAreaLightInfo
//       {
//           
//           float3 virtualPos;         // Offset:   96
//           float occluderHeight;      // Offset:  108
//           float areaLightType;       // Offset:  112
//           float lightRadius0;        // Offset:  116
//           float lightRadius1;        // Offset:  120
//           float unused;              // Offset:  124
//
//       } areaLight;                   // Offset:   96
//       
//       struct VolumetricShadowInfo
//       {
//           
//           float enable;              // Offset:  128
//           float volumeShadowMapIndex;// Offset:  132
//           float invAttenuationRadius;// Offset:  136
//           float tanAngle;            // Offset:  140
//
//       } vShadow;                     // Offset:  128
//
//   } g_lightInfoArea[128];            // Offset:    0 Size: 18432
//
// }
//
// cbuffer cb0
// {
//
//   float4x4 invViewProjectionMatrix;  // Offset:    0 Size:    64
//   float4 g_exposureMultipliers;      // Offset:   64 Size:    16
//   float localIblMipmapBias;          // Offset:   80 Size:     4 [unused]
//   float screenAspectRatio;           // Offset:   84 Size:     4 [unused]
//   float2 invResolution;              // Offset:   88 Size:     8
//   float4 shadowMapSizeAndInvSize;    // Offset:   96 Size:    16 [unused]
//   uint forceSplitLighting;           // Offset:  112 Size:     4 [unused]
//   uint sssScatteringEnables;         // Offset:  116 Size:     4 [unused]
//   float volumetricShadowmapHalfTexelOffset;// Offset:  120 Size:     4 [unused]
//   float volumetricShadowmapOneMinusHalfTexelOffset;// Offset:  124 Size:     4 [unused]
//   float volumetricShadowmapInvMaxCount;// Offset:  128 Size:     4 [unused]
//   float dynamicAOFactor;             // Offset:  132 Size:     4
//   uint tileCountX;                   // Offset:  136 Size:     4
//   uint pad1;                         // Offset:  140 Size:     4 [unused]
//   float4x3 g_normalBasisTransforms[6];// Offset:  144 Size:   288
//
// }
//
// Resource bind info for g_lightCullInput
// {
//
//   uint4 $Element;                    // Offset:    0 Size:    16
//
// }
//
// Resource bind info for g_lightIndexInput
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
// Resource bind info for g_compactTileGridBuffer
// {
//
//   uint $Element;                     // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_linearSampler                   sampler      NA          NA    0        1
// g_gbufferTexture0                 texture  float4          2d    0        1
// g_gbufferTexture1                 texture  float4          2d    1        1
// g_gbufferTexture2                 texture  float4          2d    2        1
// g_depthTexture                    texture   float          2d    6        1
// g_diffuseOcclusionTexture         texture   float          2d   10        1
// g_lightCullInput                  texture  struct         r/o   19        1
// g_lightIndexInput                 texture  struct         r/o   20        1
// g_compactTileGridBuffer           texture  struct         r/o   24        1
// g_outputTexture0                      UAV  float4          2d    0        1
// cb0                               cbuffer      NA          NA    0        1
// cbAreaLightInfo                   cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb3[1152], dynamicIndexed
dcl_constantbuffer cb0[27], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_structured t19, 16 
dcl_resource_structured t20, 4 
dcl_resource_structured t24, 4 
dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_input vThreadIDInGroupFlattened
dcl_input vThreadGroupID.x
dcl_input vThreadIDInGroup.xy
dcl_temps 33
dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 4
dcl_thread_group 16, 16, 1
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r0.x, vThreadGroupID.x, l(0), t24.xxxx
ushr r1.x, r0.x, l(16)
and r1.yzw, r0.xxxx, l(0, 0x0000ffff, 0x0000ffff, 0x0000ffff)
imad r0.xyzw, r1.xyzw, l(16, 16, 16, 16), vThreadIDInGroup.xyyy
if_z vThreadIDInGroupFlattened.x
  imad r1.x, r1.w, cb0[8].z, r1.x
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.y, r1.x, l(0), t19.xxxx
  ld_structured_indexable(structured_buffer, stride=16)(mixed,mixed,mixed,mixed) r1.x, r1.x, l(8), t19.xxxx
  and r1.x, r1.x, l(0x0000ffff)
  store_raw g0.x, l(0), r1.y
  store_raw g1.x, l(0), r1.x
endif 
sync_g_t
utof r1.xy, r0.xwxx
add r1.zw, r1.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
mul r1.zw, r1.zzzw, cb0[5].zzzw
ftoi r2.xy, r1.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyww, t0.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.xyww, t1.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.xy, r2.xyww, t2.yzxw
ld_indexable(texture2d)(float,float,float,float) r2.z, r2.xyzw, t6.yzxw
mul r4.w, r4.w, l(6.000000)
round_ne r4.w, r4.w
ftou r4.w, r4.w
mad r5.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r3.x, r5.xyxx, r5.xyxx
min r3.x, r3.x, l(1.000000)
add r3.x, -r3.x, l(1.000000)
sqrt r5.z, r3.x
imul null, r3.x, r4.w, l(3)
dp3 r6.x, r5.xyzx, cb0[r3.x + 9].xyzx
dp3 r6.y, r5.xyzx, cb0[r3.x + 10].xyzx
dp3 r6.z, r5.xyzx, cb0[r3.x + 11].xyzx
add r3.x, -r3.z, l(1.000000)
mul r3.y, r3.w, l(3.000000)
round_ne r3.y, r3.y
ftoi r3.y, r3.y
ieq r3.y, r3.y, l(1)
movc r1.x, r3.y, l(0), r1.x
add r3.y, -r1.x, l(1.000000)
mul r3.yzw, r3.yyyy, r4.xxyz
mul r1.y, r1.y, r1.y
mul r4.w, r1.y, l(0.160000)
mad r4.xyz, -r1.yyyy, l(0.160000, 0.160000, 0.160000, 0.000000), r4.xyzx
mad r4.xyz, r1.xxxx, r4.xyzx, r4.wwww
dp3 r1.x, r4.xyzx, l(0.330000, 0.330000, 0.330000, 0.000000)
mul_sat r1.x, r1.x, l(50.000000)
mul r1.y, r3.x, r3.x
mad r5.xy, r1.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r5.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r2.w, l(1.000000)
dp4 r5.x, r2.xyzw, cb0[0].xyzw
dp4 r5.y, r2.xyzw, cb0[1].xyzw
dp4 r5.z, r2.xyzw, cb0[2].xyzw
dp4 r2.x, r2.xyzw, cb0[3].xyzw
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r2.yzw, r2.xxxx, r5.xxyz
dp3 r4.w, -r2.yzwy, -r2.yzwy
rsq r4.w, r4.w
mul r7.xyz, -r2.yzwy, r4.wwww
dp3 r5.w, -r7.xyzx, r6.xyzx
add r5.w, r5.w, r5.w
mad r8.xyz, r6.xyzx, -r5.wwww, -r7.xyzx
dp3 r5.w, r6.xyzx, r7.xyzx
mov_sat r6.w, r5.w
sample_l_indexable(texture2d)(float,float,float,float) r1.z, r1.zwzz, t10.yzxw, s0, l(0.000000)
ld_raw r1.w, l(0), g0.xxxx
ld_raw r7.x, l(0), g1.xxxx
iadd r7.x, r1.w, r7.x
max r7.y, r1.y, l(0.002000)
add r5.w, |r5.w|, l(0.000010)
add r9.xyz, -r4.xyzx, r1.xxxx
mul r1.x, r7.y, r7.y
mad r7.z, -r5.w, r1.x, r5.w
mad r7.z, r7.z, r5.w, r1.x
sqrt r7.z, r7.z
mad r7.w, r3.x, l(-0.337748349), l(1.000000)
add r8.w, -r5.w, l(1.000000)
mul r9.w, r8.w, r8.w
mul r9.w, r9.w, r9.w
mul r8.w, r8.w, r9.w
mul r9.w, r7.y, l(1.500000)
min r9.w, r9.w, l(1.000000)
mad r9.w, -r9.w, l(7.000000), l(8.000000)
mov r10.z, l(0)
mov r11.z, l(0)
mov r12.zw, l(0,0,1.000000,-1.000000)
mov r13.yz, l(0,0,0,0)
mov r14.yz, l(0,0,0,0)
mov r15.zw, l(0,0,1.000000,-1.000000)
mov r16.xz, l(0,0,0,0)
mov r17.xz, l(0,0,0,0)
mov r18.xyz, l(0,0,0,0)
mov r19.xyz, l(0,0,0,0)
mov r10.w, r1.w
loop 
  uge r11.w, r10.w, r7.x
  breakc_nz r11.w
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r11.w, r10.w, l(0), t20.xxxx
  imul null, r11.w, r11.w, l(9)
  ftou r13.w, cb3[r11.w + 7].x
  ieq r14.w, r13.w, l(2)
  if_nz r14.w
    mul r20.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), cb3[r11.w + 4].xyzx
    mad r21.xyz, -r20.xyzx, cb3[r11.w + 7].zzzz, cb3[r11.w + 0].xyzx
    mad r20.xyz, r20.xyzx, cb3[r11.w + 7].zzzz, cb3[r11.w + 0].xyzx
    add r22.xyz, -r21.xyzx, r20.xyzx
    mad r23.xyz, r5.xyzx, r2.xxxx, -r21.xyzx
    dp3 r14.w, r23.xyzx, r22.xyzx
    dp3 r16.w, r22.xyzx, r22.xyzx
    div r14.w, r14.w, r16.w
    mad r23.xyz, r14.wwww, r22.yzxy, r21.yzxy
    mad r23.xyz, -r5.yzxy, r2.xxxx, r23.xyzx
    dp3 r16.w, r23.xyzx, r23.xyzx
    rsq r16.w, r16.w
    mul r23.xyz, r16.wwww, r23.xyzx
    mul r24.xyz, r23.xyzx, cb3[r11.w + 4].zxyz
    mad r23.xyz, cb3[r11.w + 4].yzxy, r23.yzxy, -r24.xyzx
    mul r16.w, l(0.500000), cb3[r11.w + 7].z
    mad r24.xyz, -cb3[r11.w + 4].xyzx, r16.wwww, cb3[r11.w + 0].xyzx
    mad r25.xyz, cb3[r11.w + 7].yyyy, r23.xyzx, r24.xyzx
    mad r24.xyz, -cb3[r11.w + 7].yyyy, r23.xyzx, r24.xyzx
    mad r26.xyz, cb3[r11.w + 4].xyzx, r16.wwww, cb3[r11.w + 0].xyzx
    mad r27.xyz, -cb3[r11.w + 7].yyyy, r23.xyzx, r26.xyzx
    mad r23.xyz, cb3[r11.w + 7].yyyy, r23.xyzx, r26.xyzx
    mad r25.xyz, -r5.xyzx, r2.xxxx, r25.xyzx
    mad r24.xyz, -r5.xyzx, r2.xxxx, r24.xyzx
    mad r26.xyz, -r5.xyzx, r2.xxxx, r27.xyzx
    mad r23.xyz, -r5.xyzx, r2.xxxx, r23.xyzx
    mul r27.xyz, r24.yzxy, r25.zxyz
    mad r27.xyz, r25.yzxy, r24.zxyz, -r27.xyzx
    dp3 r16.w, r27.xyzx, r27.xyzx
    rsq r16.w, r16.w
    mul r27.xyz, r16.wwww, r27.xyzx
    mul r28.xyz, r24.zxyz, r26.yzxy
    mad r28.xyz, r24.yzxy, r26.zxyz, -r28.xyzx
    dp3 r16.w, r28.xyzx, r28.xyzx
    rsq r16.w, r16.w
    mul r28.xyz, r16.wwww, r28.xyzx
    mul r29.xyz, r23.yzxy, r26.zxyz
    mad r29.xyz, r26.yzxy, r23.zxyz, -r29.xyzx
    dp3 r16.w, r29.xyzx, r29.xyzx
    rsq r16.w, r16.w
    mul r29.xyz, r16.wwww, r29.xyzx
    mul r30.xyz, r25.yzxy, r23.zxyz
    mad r30.xyz, r23.yzxy, r25.zxyz, -r30.xyzx
    dp3 r16.w, r30.xyzx, r30.xyzx
    rsq r16.w, r16.w
    mul r30.xyz, r16.wwww, r30.xyzx
    dp3 r16.w, -r27.xyzx, r28.xyzx
    mul r17.w, |r16.w|, |r16.w|
    mul r18.w, |r16.w|, r17.w
    mad r19.w, |r16.w|, l(-0.212114394), l(1.57072878)
    mad r17.w, r17.w, l(0.074261), r19.w
    mad r17.w, r18.w, l(-0.0187292993), r17.w
    add r18.w, -|r16.w|, l(1.000000)
    sqrt r18.w, r18.w
    mul r19.w, r17.w, r18.w
    ge r16.w, r16.w, l(0.000000)
    mad r17.w, -r18.w, r17.w, l(3.14159274)
    movc r16.w, r16.w, r19.w, r17.w
    dp3 r17.w, -r28.xyzx, r29.xyzx
    mul r18.w, |r17.w|, |r17.w|
    mul r19.w, |r17.w|, r18.w
    mad r20.w, |r17.w|, l(-0.212114394), l(1.57072878)
    mad r18.w, r18.w, l(0.074261), r20.w
    mad r18.w, r19.w, l(-0.0187292993), r18.w
    add r19.w, -|r17.w|, l(1.000000)
    sqrt r19.w, r19.w
    mul r20.w, r18.w, r19.w
    ge r17.w, r17.w, l(0.000000)
    mad r18.w, -r19.w, r18.w, l(3.14159274)
    movc r17.w, r17.w, r20.w, r18.w
    dp3 r18.w, -r29.xyzx, r30.xyzx
    mul r19.w, |r18.w|, |r18.w|
    mul r20.w, |r18.w|, r19.w
    mad r21.w, |r18.w|, l(-0.212114394), l(1.57072878)
    mad r19.w, r19.w, l(0.074261), r21.w
    mad r19.w, r20.w, l(-0.0187292993), r19.w
    add r20.w, -|r18.w|, l(1.000000)
    sqrt r20.w, r20.w
    mul r21.w, r19.w, r20.w
    ge r18.w, r18.w, l(0.000000)
    mad r19.w, -r20.w, r19.w, l(3.14159274)
    movc r18.w, r18.w, r21.w, r19.w
    dp3 r19.w, -r30.xyzx, r27.xyzx
    mul r20.w, |r19.w|, |r19.w|
    mul r21.w, |r19.w|, r20.w
    mad r22.w, |r19.w|, l(-0.212114394), l(1.57072878)
    mad r20.w, r20.w, l(0.074261), r22.w
    mad r20.w, r21.w, l(-0.0187292993), r20.w
    add r21.w, -|r19.w|, l(1.000000)
    sqrt r21.w, r21.w
    mul r22.w, r20.w, r21.w
    ge r19.w, r19.w, l(0.000000)
    mad r20.w, -r21.w, r20.w, l(3.14159274)
    movc r19.w, r19.w, r22.w, r20.w
    add r16.w, r16.w, r17.w
    add r16.w, r18.w, r16.w
    add r16.w, r19.w, r16.w
    add r16.w, r16.w, l(-6.28318548)
    mul r16.w, r16.w, l(0.200000)
    dp3 r17.w, r25.xyzx, r25.xyzx
    rsq r17.w, r17.w
    mul r25.xyz, r17.wwww, r25.xyzx
    dp3_sat r17.w, r25.xyzx, r6.xyzx
    dp3 r18.w, r24.xyzx, r24.xyzx
    rsq r18.w, r18.w
    mul r24.xyz, r18.wwww, r24.xyzx
    dp3_sat r18.w, r24.xyzx, r6.xyzx
    add r17.w, r17.w, r18.w
    dp3 r18.w, r26.xyzx, r26.xyzx
    rsq r18.w, r18.w
    mul r24.xyz, r18.wwww, r26.xyzx
    dp3_sat r18.w, r24.xyzx, r6.xyzx
    add r17.w, r17.w, r18.w
    dp3 r18.w, r23.xyzx, r23.xyzx
    rsq r18.w, r18.w
    mul r23.xyz, r18.wwww, r23.xyzx
    dp3_sat r18.w, r23.xyzx, r6.xyzx
    add r17.w, r17.w, r18.w
    mad r23.xyz, -r5.xyzx, r2.xxxx, cb3[r11.w + 0].xyzx
    dp3 r18.w, r23.xyzx, r23.xyzx
    rsq r19.w, r18.w
    mul r23.xyz, r19.wwww, r23.xyzx
    dp3_sat r19.w, r23.xyzx, r6.xyzx
    add r17.w, r17.w, r19.w
    mov_sat r14.w, r14.w
    mad r22.xyz, r14.wwww, r22.xyzx, r21.xyzx
    mad r22.xyz, -r5.xyzx, r2.xxxx, r22.xyzx
    dp3 r14.w, r22.xyzx, r22.xyzx
    rsq r19.w, r14.w
    mul r22.xyz, r19.wwww, r22.xyzx
    mul r19.w, cb3[r11.w + 7].y, cb3[r11.w + 7].y
    dp3_sat r20.w, r22.xyzx, r6.xyzx
    mul r21.w, r20.w, l(3.14159274)
    max r14.w, r14.w, r19.w
    div r14.w, r19.w, r14.w
    mul r14.w, r14.w, r21.w
    mad r14.w, r16.w, r17.w, r14.w
    mul r16.w, r18.w, cb3[r11.w + 0].w
    mad r16.w, -r16.w, r16.w, l(1.000000)
    max r16.w, r16.w, l(0.000000)
    mul r16.w, r16.w, r16.w
    mul r14.w, r14.w, r16.w
    lt r16.w, l(0.000000), r14.w
    if_nz r16.w
      mad r21.xyz, -r5.xyzx, r2.xxxx, r21.xyzx
      mad r20.xyz, -r5.xyzx, r2.xxxx, r20.xyzx
      add r20.xyz, -r21.xyzx, r20.xyzx
      dp3 r16.w, r20.xyzx, r20.xyzx
      dp3 r17.w, r8.xyzx, r20.xyzx
      dp3 r18.w, r8.xyzx, r21.xyzx
      dp3 r19.w, r21.xyzx, r20.xyzx
      mad r18.w, r18.w, r17.w, -r19.w
      mad r16.w, -r17.w, r17.w, r16.w
      div_sat r16.w, r18.w, r16.w
      mad r20.xyz, r16.wwww, r20.xyzx, r21.xyzx
      dp3 r16.w, r20.xyzx, r8.xyzx
      mad r21.xyz, r16.wwww, r8.xyzx, -r20.xyzx
      dp3 r16.w, r21.xyzx, r21.xyzx
      sqrt r16.w, r16.w
      div_sat r16.w, cb3[r11.w + 7].y, r16.w
      mad r20.xyz, r21.xyzx, r16.wwww, r20.xyzx
      dp3 r16.w, r20.xyzx, r20.xyzx
      sqrt r17.w, r16.w
      rsq r16.w, r16.w
      mul r20.xyz, r16.wwww, r20.xyzx
      add r16.w, r17.w, r17.w
      div r16.w, cb3[r11.w + 7].y, r16.w
      add_sat r16.w, r7.y, r16.w
      div r16.w, r7.y, r16.w
      mad r21.xyz, -r2.yzwy, r4.wwww, r20.xyzx
      dp3 r17.w, r21.xyzx, r21.xyzx
      rsq r17.w, r17.w
      mul r21.xyz, r17.wwww, r21.xyzx
      mad r23.xyz, -r2.yzwy, r4.wwww, r22.xyzx
      dp3 r17.w, r23.xyzx, r23.xyzx
      rsq r17.w, r17.w
      mul r23.xyz, r17.wwww, r23.xyzx
      dp3_sat r17.w, r20.xyzx, r21.xyzx
      dp3_sat r18.w, r22.xyzx, r23.xyzx
      dp3_sat r19.w, r6.xyzx, r21.xyzx
      dp3_sat r20.x, r6.xyzx, r20.xyzx
      add r17.w, -r17.w, l(1.000000)
      mul r20.y, r17.w, r17.w
      mul r20.y, r20.y, r20.y
      mul r17.w, r17.w, r20.y
      mad r21.xyz, r9.xyzx, r17.wwww, r4.xyzx
      mad r17.w, -r20.x, r1.x, r20.x
      mad r17.w, r17.w, r20.x, r1.x
      sqrt r17.w, r17.w
      mul r17.w, r5.w, r17.w
      mad r17.w, r20.x, r7.z, r17.w
      div r17.w, l(0.500000), r17.w
      mad r20.x, r19.w, r1.x, -r19.w
      mad r19.w, r20.x, r19.w, l(1.000000)
      mul r19.w, r19.w, r19.w
      div r19.w, r1.x, r19.w
      mul r17.w, r17.w, r19.w
      mul r16.w, r16.w, r17.w
      mul r20.xyz, r16.wwww, r21.xyzx
      mul r16.w, r18.w, r18.w
      dp2 r16.w, r16.wwww, r3.xxxx
      mad r16.w, r3.x, l(0.500000), r16.w
      add r17.w, -r20.w, l(1.000000)
      mul r18.w, r17.w, r17.w
      mul r18.w, r18.w, r18.w
      mul r17.w, r17.w, r18.w
      add r16.w, r16.w, l(-1.000000)
      mad r17.w, r16.w, r17.w, l(1.000000)
      mad r16.w, r16.w, r8.w, l(1.000000)
      mul r16.w, r16.w, r17.w
      mul r16.w, r7.w, r16.w
      mul r17.w, r14.w, cb3[r11.w + 2].w
      mul r21.xyz, r17.wwww, cb3[r11.w + 1].xyzx
      mul r21.xyz, r16.wwww, r21.xyzx
      mul r14.w, r14.w, cb3[r11.w + 3].w
      mul r22.xyz, r14.wwww, cb3[r11.w + 1].xyzx
      mul r20.xyz, r20.xyzx, r22.xyzx
    else 
      mov r21.xyz, l(0,0,0,0)
      mov r20.xyz, l(0,0,0,0)
    endif 
  else 
    ieq r14.w, r13.w, l(5)
    if_nz r14.w
      mad r22.xyz, r5.xyzx, r2.xxxx, -cb3[r11.w + 0].xyzx
      dp3 r14.w, r22.xyzx, -cb3[r11.w + 2].xyzx
      lt r14.w, l(0.000000), r14.w
      if_nz r14.w
        mul r22.xy, l(0.500000, 0.500000, 0.000000, 0.000000), cb3[r11.w + 7].yzyy
        mad r23.xyz, cb3[r11.w + 4].xyzx, -r22.xxxx, cb3[r11.w + 0].xyzx
        mad r24.xyz, cb3[r11.w + 3].xyzx, r22.yyyy, r23.xyzx
        mad r23.xyz, cb3[r11.w + 3].xyzx, -r22.yyyy, r23.xyzx
        mad r25.xyz, cb3[r11.w + 4].xyzx, r22.xxxx, cb3[r11.w + 0].xyzx
        mad r26.xyz, cb3[r11.w + 3].xyzx, -r22.yyyy, r25.xyzx
        mad r25.xyz, cb3[r11.w + 3].xyzx, r22.yyyy, r25.xyzx
        mad r24.xyz, -r5.xyzx, r2.xxxx, r24.xyzx
        mad r23.xyz, -r5.xyzx, r2.xxxx, r23.xyzx
        mad r26.xyz, -r5.xyzx, r2.xxxx, r26.xyzx
        mad r25.xyz, -r5.xyzx, r2.xxxx, r25.xyzx
        mul r27.xyz, r23.yzxy, r24.zxyz
        mad r27.xyz, r24.yzxy, r23.zxyz, -r27.xyzx
        dp3 r14.w, r27.xyzx, r27.xyzx
        rsq r14.w, r14.w
        mul r27.xyz, r14.wwww, r27.xyzx
        mul r28.xyz, r23.zxyz, r26.yzxy
        mad r28.xyz, r23.yzxy, r26.zxyz, -r28.xyzx
        dp3 r14.w, r28.xyzx, r28.xyzx
        rsq r14.w, r14.w
        mul r28.xyz, r14.wwww, r28.xyzx
        mul r29.xyz, r25.yzxy, r26.zxyz
        mad r29.xyz, r26.yzxy, r25.zxyz, -r29.xyzx
        dp3 r14.w, r29.xyzx, r29.xyzx
        rsq r14.w, r14.w
        mul r29.xyz, r14.wwww, r29.xyzx
        mul r30.xyz, r24.yzxy, r25.zxyz
        mad r30.xyz, r25.yzxy, r24.zxyz, -r30.xyzx
        dp3 r14.w, r30.xyzx, r30.xyzx
        rsq r14.w, r14.w
        mul r30.xyz, r14.wwww, r30.xyzx
        dp3 r14.w, -r27.xyzx, r28.xyzx
        mul r16.w, |r14.w|, |r14.w|
        mul r17.w, |r14.w|, r16.w
        mad r18.w, |r14.w|, l(-0.212114394), l(1.57072878)
        mad r16.w, r16.w, l(0.074261), r18.w
        mad r16.w, r17.w, l(-0.0187292993), r16.w
        add r17.w, -|r14.w|, l(1.000000)
        sqrt r17.w, r17.w
        mul r18.w, r16.w, r17.w
        ge r14.w, r14.w, l(0.000000)
        mad r16.w, -r17.w, r16.w, l(3.14159274)
        movc r14.w, r14.w, r18.w, r16.w
        dp3 r16.w, -r28.xyzx, r29.xyzx
        mul r17.w, |r16.w|, |r16.w|
        mul r18.w, |r16.w|, r17.w
        mad r19.w, |r16.w|, l(-0.212114394), l(1.57072878)
        mad r17.w, r17.w, l(0.074261), r19.w
        mad r17.w, r18.w, l(-0.0187292993), r17.w
        add r18.w, -|r16.w|, l(1.000000)
        sqrt r18.w, r18.w
        mul r19.w, r17.w, r18.w
        ge r16.w, r16.w, l(0.000000)
        mad r17.w, -r18.w, r17.w, l(3.14159274)
        movc r16.w, r16.w, r19.w, r17.w
        dp3 r17.w, -r29.xyzx, r30.xyzx
        mul r18.w, |r17.w|, |r17.w|
        mul r19.w, |r17.w|, r18.w
        mad r20.w, |r17.w|, l(-0.212114394), l(1.57072878)
        mad r18.w, r18.w, l(0.074261), r20.w
        mad r18.w, r19.w, l(-0.0187292993), r18.w
        add r19.w, -|r17.w|, l(1.000000)
        sqrt r19.w, r19.w
        mul r20.w, r18.w, r19.w
        ge r17.w, r17.w, l(0.000000)
        mad r18.w, -r19.w, r18.w, l(3.14159274)
        movc r17.w, r17.w, r20.w, r18.w
        dp3 r18.w, -r30.xyzx, r27.xyzx
        mul r19.w, |r18.w|, |r18.w|
        mul r20.w, |r18.w|, r19.w
        mad r21.w, |r18.w|, l(-0.212114394), l(1.57072878)
        mad r19.w, r19.w, l(0.074261), r21.w
        mad r19.w, r20.w, l(-0.0187292993), r19.w
        add r20.w, -|r18.w|, l(1.000000)
        sqrt r20.w, r20.w
        mul r21.w, r19.w, r20.w
        ge r18.w, r18.w, l(0.000000)
        mad r19.w, -r20.w, r19.w, l(3.14159274)
        movc r18.w, r18.w, r21.w, r19.w
        add r14.w, r14.w, r16.w
        add r14.w, r17.w, r14.w
        add r14.w, r18.w, r14.w
        add r14.w, r14.w, l(-6.28318548)
        mul r14.w, r14.w, l(0.200000)
        dp3 r16.w, r24.xyzx, r24.xyzx
        rsq r16.w, r16.w
        mul r24.xyz, r16.wwww, r24.xyzx
        dp3_sat r16.w, r24.xyzx, r6.xyzx
        dp3 r17.w, r23.xyzx, r23.xyzx
        rsq r17.w, r17.w
        mul r23.xyz, r17.wwww, r23.xyzx
        dp3_sat r17.w, r23.xyzx, r6.xyzx
        add r16.w, r16.w, r17.w
        dp3 r17.w, r26.xyzx, r26.xyzx
        rsq r17.w, r17.w
        mul r23.xyz, r17.wwww, r26.xyzx
        dp3_sat r17.w, r23.xyzx, r6.xyzx
        add r16.w, r16.w, r17.w
        dp3 r17.w, r25.xyzx, r25.xyzx
        rsq r17.w, r17.w
        mul r23.xyz, r17.wwww, r25.xyzx
        dp3_sat r17.w, r23.xyzx, r6.xyzx
        add r16.w, r16.w, r17.w
        mad r23.xyz, -r5.xyzx, r2.xxxx, cb3[r11.w + 0].xyzx
        dp3 r17.w, r23.xyzx, r23.xyzx
        rsq r17.w, r17.w
        mul r24.xyz, r17.wwww, r23.xyzx
        dp3_sat r17.w, r24.xyzx, r6.xyzx
        add r16.w, r16.w, r17.w
        mul r14.w, r14.w, r16.w
        dp3_sat r16.w, r6.xyzx, cb3[r11.w + 2].xyzx
        add r16.w, r16.w, l(0.000010)
        mad r24.xyz, r6.xyzx, r16.wwww, cb3[r11.w + 2].xyzx
        dp3 r17.w, r24.xyzx, r24.xyzx
        rsq r17.w, r17.w
        mad r25.xyz, cb3[r11.w + 2].xyzx, r16.wwww, r6.xyzx
        dp3 r16.w, r25.xyzx, r25.xyzx
        rsq r16.w, r16.w
        mul r25.xyz, r16.wwww, r25.xyzx
        mad r24.xyz, r24.xyzx, r17.wwww, r25.xyzx
        mul r24.xyz, r24.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
        dp3 r16.w, -cb3[r11.w + 2].xyzx, r23.xyzx
        dp3 r17.w, -cb3[r11.w + 2].xyzx, r24.xyzx
        div r16.w, r16.w, r17.w
        mad r23.xyz, r24.xyzx, r16.wwww, r2.yzwy
        add r23.xyz, r23.xyzx, -cb3[r11.w + 0].xyzx
        dp3 r24.x, r23.xyzx, cb3[r11.w + 4].xyzx
        dp3 r24.y, r23.xyzx, cb3[r11.w + 3].xyzx
        max r22.zw, -r22.xxxy, r24.xxxy
        min r22.xy, r22.xyxx, r22.zwzz
        mad r22.xzw, r22.xxxx, cb3[r11.w + 4].xxyz, cb3[r11.w + 0].xxyz
        mad r22.xyz, r22.yyyy, cb3[r11.w + 3].xyzx, r22.xzwx
        mad r22.xyz, -r5.xyzx, r2.xxxx, r22.xyzx
        dp3 r16.w, r22.xyzx, r22.xyzx
        rsq r16.w, r16.w
        mul r22.xyz, r16.wwww, r22.xyzx
      else 
        mov r22.xyz, l(1.000000,0,0,0)
        mov r14.w, l(0)
      endif 
      mad r23.xyz, -r5.xyzx, r2.xxxx, cb3[r11.w + 0].xyzx
      dp3 r16.w, r23.xyzx, r23.xyzx
      mul r16.w, r16.w, cb3[r11.w + 0].w
      mad r16.w, -r16.w, r16.w, l(1.000000)
      max r16.w, r16.w, l(0.000000)
      mul r16.w, r16.w, r16.w
      mul r14.w, r14.w, r16.w
      lt r16.w, l(0.000000), r14.w
      if_nz r16.w
        mul r24.xy, l(0.500000, 0.500000, 0.000000, 0.000000), cb3[r11.w + 7].yzyy
        dp3 r25.x, r8.xyzx, cb3[r11.w + 4].xyzx
        dp3 r25.y, r8.xyzx, cb3[r11.w + 3].xyzx
        dp3 r25.z, r8.xyzx, -cb3[r11.w + 2].xyzx
        dp3 r26.x, r23.xyzx, cb3[r11.w + 4].xyzx
        dp3 r26.y, r23.xyzx, cb3[r11.w + 3].xyzx
        dp3 r26.z, r23.xyzx, -cb3[r11.w + 2].xyzx
        div r16.w, r26.z, r25.z
        mul r27.xyz, r16.wwww, r25.xyzx
        mad r24.zw, r25.xxxy, r16.wwww, -r26.xxxy
        lt r16.w, l(0.000000), r16.w
        ge r24.yz, r24.xxyx, |r24.zzwz|
        and r16.w, r16.w, r24.y
        and r16.w, r24.z, r16.w
        if_z r16.w
          mul r10.xy, l(-0.500000, -0.500000, 0.000000, 0.000000), cb3[r11.w + 7].yzyy
          add r28.xyz, r10.xyzx, r26.xyzx
          mul r11.xy, l(0.500000, 0.500000, 0.000000, 0.000000), cb3[r11.w + 7].yzyy
          add r29.xyz, r11.xyzx, r26.xyzx
          mov r28.w, r29.x
          mul r10.xy, r25.xxxx, r28.xwxx
          mov r29.w, r28.y
          mul r11.xy, r25.yyyy, r29.wyww
          mul r24.yz, r25.zzzz, r26.zzzz
          mul r30.xy, r28.xwxx, r28.xwxx
          mul r30.zw, r26.zzzz, r26.zzzz
          mad r31.xy, r29.wyww, r29.wyww, r30.zwzz
          mul r31.zw, r25.xxxx, r31.xxxy
          mad r11.xy, -r11.xyxx, r28.xwxx, r31.zwzz
          mad r11.xy, -r24.yzyy, r28.xwxx, r11.xyxx
          mad r31.zw, r25.yyyy, r29.wwwy, r24.yyyz
          mul r24.xw, r24.xxxx, r31.zzzw
          add r24.xw, r24.xxxw, r24.xxxw
          div r32.xy, r11.xyxx, r24.xwxx
          mov r32.z, -r32.y
          mov_sat r12.xy, r32.xzxx
          mul r11.xy, r12.zyzz, cb3[r11.w + 7].yyyy
          mad r11.xy, r11.xyxx, r12.xwxx, r28.xwxx
          mad r24.xw, r25.xxxx, r11.xxxy, r31.zzzw
          mad r11.xy, r11.xyxx, r11.xyxx, r31.xyxx
          sqrt r11.xy, r11.xyxx
          div r11.xy, r24.xwxx, r11.xyxx
          lt r16.w, r11.x, r11.y
          if_nz r16.w
            mov r13.x, cb3[r11.w + 7].y
            mad r27.xyz, -r13.xyzx, r12.yyyy, r29.xyzx
            mov r11.x, r11.y
          else 
            mov r14.x, cb3[r11.w + 7].y
            mad r27.xyz, r14.xyzx, r12.xxxx, r28.xyzx
          endif 
          mul r10.xy, r29.wyww, r10.xyxx
          mad r10.xy, r25.yyyy, r30.xyxx, -r10.xyxx
          mad r10.xy, -r24.yzyy, r29.wyww, r10.xyxx
          mad r10.xy, r25.yyyy, r30.zwzz, r10.xyxx
          mad r12.xy, r25.xxxx, r28.xwxx, r24.yzyy
          mul r24.xy, r12.xyxx, cb3[r11.w + 7].zzzz
          div r24.xy, r10.xyxx, r24.xyxx
          mov r24.z, -r24.y
          mov_sat r15.xy, r24.xzxx
          mul r10.xy, r15.zyzz, cb3[r11.w + 7].zzzz
          mad r10.xy, r10.xyxx, r15.xwxx, r29.wyww
          mad r12.xy, r25.yyyy, r10.xyxx, r12.xyxx
          mad r24.xy, r28.xwxx, r28.xwxx, r30.zwzz
          mad r10.xy, r10.xyxx, r10.xyxx, r24.xyxx
          sqrt r10.xy, r10.xyxx
          div r10.xy, r12.xyxx, r10.xyxx
          lt r10.x, r11.x, r10.x
          if_nz r10.x
            mov r16.y, cb3[r11.w + 7].z
            mad r27.xyz, r16.xyzx, r15.xxxx, r28.xyzx
          else 
            lt r10.x, r11.x, r10.y
            if_nz r10.x
              mov r17.y, cb3[r11.w + 7].z
              mad r27.xyz, -r17.xyzx, r15.yyyy, r29.xyzx
            endif 
          endif 
        endif 
        dp3 r10.x, r27.xyzx, r27.xyzx
        rsq r10.x, r10.x
        mul r24.xyz, r10.xxxx, r27.xyzx
        dp3 r10.x, r25.xyzx, r25.xyzx
        rsq r10.x, r10.x
        mul r25.xyz, r10.xxxx, r25.xyzx
        dp3 r10.x, r24.xyzx, r25.xyzx
        mad_sat r10.x, r10.x, l(1.666000), l(-0.500000)
        add r24.xyz, -r26.xyzx, r27.xyzx
        mad r23.xyz, r24.xxxx, cb3[r11.w + 4].xyzx, r23.xyzx
        mad r23.xyz, r24.yyyy, cb3[r11.w + 3].xyzx, r23.xyzx
        mad r23.xyz, r24.zzzz, -cb3[r11.w + 2].xyzx, r23.xyzx
        add r23.xyz, -r22.xyzx, r23.xyzx
        mad r23.xyz, r10.xxxx, r23.xyzx, r22.xyzx
        dp3 r10.x, r23.xyzx, r23.xyzx
        sqrt r10.y, r10.x
        div r10.y, l(1.000000, 1.000000, 1.000000, 1.000000), r10.y
        rsq r10.x, r10.x
        mul r23.xyz, r10.xxxx, r23.xyzx
        add r10.x, cb3[r11.w + 7].z, cb3[r11.w + 7].y
        mad_sat r10.x, r10.x, r10.y, r7.y
        div r10.x, r7.y, r10.x
        mul r10.x, r10.x, r10.x
        mul r10.x, r9.w, r10.x
        mad r24.xyz, -r2.yzwy, r4.wwww, r23.xyzx
        dp3 r10.y, r24.xyzx, r24.xyzx
        rsq r10.y, r10.y
        mul r24.xyz, r10.yyyy, r24.xyzx
        mad r25.xyz, -r2.yzwy, r4.wwww, r22.xyzx
        dp3 r10.y, r25.xyzx, r25.xyzx
        rsq r10.y, r10.y
        mul r25.xyz, r10.yyyy, r25.xyzx
        dp3_sat r10.y, r23.xyzx, r24.xyzx
        dp3_sat r11.x, r22.xyzx, r25.xyzx
        dp3_sat r11.y, r6.xyzx, r24.xyzx
        dp3_sat r12.x, r6.xyzx, r23.xyzx
        dp3_sat r12.y, r6.xyzx, r22.xyzx
        add r10.y, -r10.y, l(1.000000)
        mul r13.x, r10.y, r10.y
        mul r13.x, r13.x, r13.x
        mul r10.y, r10.y, r13.x
        mad r22.xyz, r9.xyzx, r10.yyyy, r4.xyzx
        mad r10.y, -r12.x, r1.x, r12.x
        mad r10.y, r10.y, r12.x, r1.x
        sqrt r10.y, r10.y
        mul r10.y, r5.w, r10.y
        mad r10.y, r12.x, r7.z, r10.y
        div r10.y, l(0.500000), r10.y
        mad r12.x, r11.y, r1.x, -r11.y
        mad r11.y, r12.x, r11.y, l(1.000000)
        mul r11.y, r11.y, r11.y
        div r11.y, r1.x, r11.y
        mul r10.y, r10.y, r11.y
        mul r10.x, r10.x, r10.y
        mul r22.xyz, r10.xxxx, r22.xyzx
        mul r10.x, r11.x, r11.x
        dp2 r10.x, r10.xxxx, r3.xxxx
        mad r10.x, r3.x, l(0.500000), r10.x
        add r10.y, -r12.y, l(1.000000)
        mul r11.x, r10.y, r10.y
        mul r11.x, r11.x, r11.x
        mul r10.y, r10.y, r11.x
        add r10.x, r10.x, l(-1.000000)
        mad r10.y, r10.x, r10.y, l(1.000000)
        mad r10.x, r10.x, r8.w, l(1.000000)
        mul r10.x, r10.x, r10.y
        mul r10.x, r7.w, r10.x
        mul r10.y, r14.w, cb3[r11.w + 2].w
        mul r23.xyz, r10.yyyy, cb3[r11.w + 1].xyzx
        mul r21.xyz, r10.xxxx, r23.xyzx
        mul r10.x, r14.w, cb3[r11.w + 3].w
        mul r23.xyz, r10.xxxx, cb3[r11.w + 1].xyzx
        mul r20.xyz, r22.xyzx, r23.xyzx
      else 
        mov r21.xyz, l(0,0,0,0)
        mov r20.xyz, l(0,0,0,0)
      endif 
    else 
      ieq r10.x, r13.w, l(4)
      if_nz r10.x
        mad r22.xyz, -r5.xyzx, r2.xxxx, cb3[r11.w + 0].xyzx
        dp3 r10.x, r22.xyzx, r22.xyzx
        rsq r10.y, r10.x
        mul r23.xyz, r10.yyyy, r22.xyzx
        dp3 r10.y, r6.xyzx, r23.xyzx
        mul r11.x, cb3[r11.w + 7].y, cb3[r11.w + 7].y
        max r11.y, r10.x, r11.x
        mad r11.y, cb3[r11.w + 7].y, cb3[r11.w + 7].y, r11.y
        div r11.x, r11.x, r11.y
        mad r12.xy, r11.xxxx, l(-0.690576434, -10.482754, 0.000000, 0.000000), l(0.559636116, 18.258890, 0.000000, 0.000000)
        mad r11.y, r12.y, r11.x, l(-11.710919)
        mad r11.y, r11.y, r11.x, l(4.99786425)
        mad r12.y, r10.y, l(0.500000), l(0.500000)
        log r13.x, r12.y
        mul r11.y, r11.y, r13.x
        exp r11.y, r11.y
        mov_sat r13.x, r10.y
        mul r10.y, r10.y, r12.x
        add r12.x, -r11.y, r12.y
        mad r10.y, r10.y, r12.x, r11.y
        max r10.y, r10.y, r13.x
        mul r10.y, r11.x, r10.y
        mul r10.y, r10.y, l(3.14159274)
        dp3_sat r11.x, -cb3[r11.w + 2].xyzx, -r23.xyzx
        mul r10.y, r10.y, r11.x
        mad r24.xyz, -r5.xyzx, r2.xxxx, cb3[r11.w + 6].xyzx
        dp3 r11.x, r24.xyzx, r24.xyzx
        rsq r11.x, r11.x
        mul r24.xyz, r11.xxxx, r24.xyzx
        dp3 r11.x, cb3[r11.w + 2].xyzx, r24.xyzx
        mad_sat r11.x, r11.x, cb3[r11.w + 5].x, cb3[r11.w + 5].y
        mul r11.x, r11.x, r11.x
        mul r10.y, r10.y, r11.x
        mul r10.x, r10.x, cb3[r11.w + 0].w
        mad r10.x, -r10.x, r10.x, l(1.000000)
        max r10.x, r10.x, l(0.000000)
        mul r10.x, r10.x, r10.x
        mul r10.x, r10.x, r10.y
        lt r10.y, l(0.000000), r10.x
        if_nz r10.y
          dp3_sat r10.y, r8.xyzx, -cb3[r11.w + 2].xyzx
          add r10.y, r10.y, l(0.000010)
          mad r24.xyz, cb3[r11.w + 2].xyzx, r10.yyyy, r8.xyzx
          dp3 r10.y, r24.xyzx, r24.xyzx
          rsq r10.y, r10.y
          mul r24.xyz, r10.yyyy, r24.xyzx
          dp3 r10.y, -cb3[r11.w + 2].xyzx, r22.xyzx
          dp3 r11.x, -cb3[r11.w + 2].xyzx, r24.xyzx
          div r10.y, r10.y, r11.x
          mad r22.xyz, r24.xyzx, r10.yyyy, r2.yzwy
          add r22.xyz, r22.xyzx, -cb3[r11.w + 0].xyzx
          dp3 r11.x, r22.xyzx, cb3[r11.w + 4].xyzx
          dp3 r11.y, r22.xyzx, cb3[r11.w + 3].xyzx
          dp2 r10.y, r11.xyxx, r11.xyxx
          sqrt r10.y, r10.y
          div r12.xy, r11.xyxx, r10.yyyy
          mul r12.xy, r12.xyxx, cb3[r11.w + 7].yyyy
          lt r10.y, r10.y, cb3[r11.w + 7].y
          movc r11.xy, r10.yyyy, r11.xyxx, r12.xyxx
          mad r22.xyz, r11.xxxx, cb3[r11.w + 4].xyzx, cb3[r11.w + 0].xyzx
          mad r22.xyz, r11.yyyy, cb3[r11.w + 3].xyzx, r22.xyzx
          mad r22.xyz, -r5.xyzx, r2.xxxx, r22.xyzx
          dp3 r10.y, r22.xyzx, r22.xyzx
          sqrt r10.y, r10.y
          div r22.xyz, r22.xyzx, r10.yyyy
          add r10.y, r10.y, r10.y
          div r10.y, cb3[r11.w + 7].y, r10.y
          add_sat r10.y, r7.y, r10.y
          div r10.y, r7.y, r10.y
          mul r10.y, r10.y, r10.y
          mad r24.xyz, -r2.yzwy, r4.wwww, r22.xyzx
          dp3 r11.x, r24.xyzx, r24.xyzx
          rsq r11.x, r11.x
          mul r24.xyz, r11.xxxx, r24.xyzx
          mad r25.xyz, -r2.yzwy, r4.wwww, r23.xyzx
          dp3 r11.x, r25.xyzx, r25.xyzx
          rsq r11.x, r11.x
          mul r25.xyz, r11.xxxx, r25.xyzx
          dp3_sat r11.x, r22.xyzx, r24.xyzx
          dp3_sat r11.y, r23.xyzx, r25.xyzx
          dp3_sat r12.x, r6.xyzx, r24.xyzx
          dp3_sat r12.y, r6.xyzx, r22.xyzx
          add r11.x, -r11.x, l(1.000000)
          mul r13.w, r11.x, r11.x
          mul r13.w, r13.w, r13.w
          mul r11.x, r11.x, r13.w
          mad r22.xyz, r9.xyzx, r11.xxxx, r4.xyzx
          mad r11.x, -r12.y, r1.x, r12.y
          mad r11.x, r11.x, r12.y, r1.x
          sqrt r11.x, r11.x
          mul r11.x, r5.w, r11.x
          mad r11.x, r12.y, r7.z, r11.x
          div r11.x, l(0.500000), r11.x
          mad r12.y, r12.x, r1.x, -r12.x
          mad r12.x, r12.y, r12.x, l(1.000000)
          mul r12.x, r12.x, r12.x
          div r12.x, r1.x, r12.x
          mul r11.x, r11.x, r12.x
          mul r10.y, r10.y, r11.x
          mul r22.xyz, r10.yyyy, r22.xyzx
          mul r10.y, r11.y, r11.y
          dp2 r10.y, r10.yyyy, r3.xxxx
          mad r10.y, r3.x, l(0.500000), r10.y
          add r11.x, -r13.x, l(1.000000)
          mul r11.y, r11.x, r11.x
          mul r11.y, r11.y, r11.y
          mul r11.x, r11.x, r11.y
          add r10.y, r10.y, l(-1.000000)
          mad r11.x, r10.y, r11.x, l(1.000000)
          mad r10.y, r10.y, r8.w, l(1.000000)
          mul r10.y, r10.y, r11.x
          mul r10.y, r7.w, r10.y
          mul r11.x, r10.x, cb3[r11.w + 2].w
          mul r23.xyz, r11.xxxx, cb3[r11.w + 1].xyzx
          mul r21.xyz, r10.yyyy, r23.xyzx
          mul r10.x, r10.x, cb3[r11.w + 3].w
          mul r23.xyz, r10.xxxx, cb3[r11.w + 1].xyzx
          mul r20.xyz, r22.xyzx, r23.xyzx
        else 
          mov r21.xyz, l(0,0,0,0)
          mov r20.xyz, l(0,0,0,0)
        endif 
      else 
        mad r22.xyz, -r5.xyzx, r2.xxxx, cb3[r11.w + 0].xyzx
        dp3 r10.x, r22.xyzx, r22.xyzx
        rsq r10.y, r10.x
        mul r23.xyz, r10.yyyy, r22.xyzx
        dp3 r10.y, r6.xyzx, r23.xyzx
        mul r11.x, cb3[r11.w + 7].y, cb3[r11.w + 7].y
        max r11.y, r10.x, r11.x
        div r11.x, r11.x, r11.y
        mad r12.xy, r11.xxxx, l(-0.690576434, -10.482754, 0.000000, 0.000000), l(0.559636116, 18.258890, 0.000000, 0.000000)
        mad r11.y, r12.y, r11.x, l(-11.710919)
        mad r11.y, r11.y, r11.x, l(4.99786425)
        mad r12.y, r10.y, l(0.500000), l(0.500000)
        log r13.x, r12.y
        mul r11.y, r11.y, r13.x
        exp r11.y, r11.y
        mov_sat r13.x, r10.y
        mul r10.y, r10.y, r12.x
        add r12.x, -r11.y, r12.y
        mad r10.y, r10.y, r12.x, r11.y
        max r10.y, r10.y, r13.x
        mul r10.y, r11.x, r10.y
        mul r10.y, r10.y, l(3.14159274)
        mul r10.x, r10.x, cb3[r11.w + 0].w
        mad r10.x, -r10.x, r10.x, l(1.000000)
        max r10.x, r10.x, l(0.000000)
        mul r10.x, r10.x, r10.x
        mul r10.x, r10.x, r10.y
        lt r10.y, l(0.000000), r10.x
        if_nz r10.y
          dp3 r10.y, r22.xyzx, r8.xyzx
          mad r24.xyz, r10.yyyy, r8.xyzx, -r22.xyzx
          dp3 r10.y, r24.xyzx, r24.xyzx
          sqrt r10.y, r10.y
          div_sat r10.y, cb3[r11.w + 7].y, r10.y
          mad r22.xyz, r24.xyzx, r10.yyyy, r22.xyzx
          dp3 r10.y, r22.xyzx, r22.xyzx
          sqrt r10.y, r10.y
          div r22.xyz, r22.xyzx, r10.yyyy
          add r10.y, r10.y, r10.y
          div r10.y, cb3[r11.w + 7].y, r10.y
          add_sat r10.y, r7.y, r10.y
          div r10.y, r7.y, r10.y
          mul r10.y, r10.y, r10.y
          mad r24.xyz, -r2.yzwy, r4.wwww, r22.xyzx
          dp3 r11.x, r24.xyzx, r24.xyzx
          rsq r11.x, r11.x
          mul r24.xyz, r11.xxxx, r24.xyzx
          mad r25.xyz, -r2.yzwy, r4.wwww, r23.xyzx
          dp3 r11.x, r25.xyzx, r25.xyzx
          rsq r11.x, r11.x
          mul r25.xyz, r11.xxxx, r25.xyzx
          dp3_sat r11.x, r22.xyzx, r24.xyzx
          dp3_sat r11.y, r23.xyzx, r25.xyzx
          dp3_sat r12.x, r6.xyzx, r24.xyzx
          dp3_sat r12.y, r6.xyzx, r22.xyzx
          add r11.x, -r11.x, l(1.000000)
          mul r13.w, r11.x, r11.x
          mul r13.w, r13.w, r13.w
          mul r11.x, r11.x, r13.w
          mad r22.xyz, r9.xyzx, r11.xxxx, r4.xyzx
          mad r11.x, -r12.y, r1.x, r12.y
          mad r11.x, r11.x, r12.y, r1.x
          sqrt r11.x, r11.x
          mul r11.x, r5.w, r11.x
          mad r11.x, r12.y, r7.z, r11.x
          div r11.x, l(0.500000), r11.x
          mad r12.y, r12.x, r1.x, -r12.x
          mad r12.x, r12.y, r12.x, l(1.000000)
          mul r12.x, r12.x, r12.x
          div r12.x, r1.x, r12.x
          mul r11.x, r11.x, r12.x
          mul r10.y, r10.y, r11.x
          mul r22.xyz, r10.yyyy, r22.xyzx
          mul r10.y, r11.y, r11.y
          dp2 r10.y, r10.yyyy, r3.xxxx
          mad r10.y, r3.x, l(0.500000), r10.y
          add r11.x, -r13.x, l(1.000000)
          mul r11.y, r11.x, r11.x
          mul r11.y, r11.y, r11.y
          mul r11.x, r11.x, r11.y
          add r10.y, r10.y, l(-1.000000)
          mad r11.x, r10.y, r11.x, l(1.000000)
          mad r10.y, r10.y, r8.w, l(1.000000)
          mul r10.y, r10.y, r11.x
          mul r10.y, r7.w, r10.y
          mul r11.x, r10.x, cb3[r11.w + 2].w
          mul r23.xyz, r11.xxxx, cb3[r11.w + 1].xyzx
          mul r21.xyz, r10.yyyy, r23.xyzx
          mul r10.x, r10.x, cb3[r11.w + 3].w
          mul r11.xyw, r10.xxxx, cb3[r11.w + 1].xyxz
          mul r20.xyz, r11.xywx, r22.xyzx
        else 
          mov r21.xyz, l(0,0,0,0)
          mov r20.xyz, l(0,0,0,0)
        endif 
      endif 
    endif 
  endif 
  add r19.xyz, r19.xyzx, r21.xyzx
  add r18.xyz, r18.xyzx, r20.xyzx
  iadd r10.w, r10.w, l(1)
endloop 
add r1.x, r1.z, l(-1.000000)
mad r1.x, cb0[8].y, r1.x, l(1.000000)
mul r2.xyz, r1.xxxx, r19.xyzx
add r1.x, r1.z, r6.w
mad r1.y, r1.y, l(-16.000000), l(-1.000000)
exp r1.y, r1.y
log r1.x, r1.x
mul r1.x, r1.x, r1.y
exp r1.x, r1.x
add r1.x, r1.z, r1.x
add_sat r1.x, r1.x, l(-1.000000)
mul r1.xyz, r1.xxxx, r18.xyzx
mul r2.xyz, r2.xyzx, r3.yzwy
mul r1.xyz, r1.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000)
mad r1.xyz, r2.xyzx, l(0.318309873, 0.318309873, 0.318309873, 0.000000), r1.xyzx
mul r1.xyz, r1.xyzx, cb0[4].zzzz
min r1.xyz, r1.xyzx, l(65504.000000, 65504.000000, 65504.000000, 0.000000)
mov r1.w, l(0)
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 885 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
