//lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float g_colorScale : packoffset(c6.y);
  uint4 g_shadowmapDimensions : packoffset(c7);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2D<float4> g_depthTexture : register(t1);
Texture2D<float4> g_gbufferTexture0 : register(t2);
Texture2D<float4> g_gbufferTexture1 : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = g_invScreenSize.xy * v0.xy;
  r0.xy = r0.xy * float2(2,2) + float2(-1,-1);
  r0.xy = float2(1,-1) * r0.xy;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0,0);
  r0.z = g_depthTexture.Load(r1.xyw).x;
  r0.w = 1;
  r2.x = dot(r0.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r2.x = 1 / r2.x;
  r3.x = dot(r0.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r3.y = dot(r0.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r3.z = dot(r0.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  
  float4 r28, r26, r27;
r26.xyz = r3.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r3.xyz = r26.xyz / r2.xxx;

  r0.xyz = r3.xyz * r2.xxx;
  r2.xyz = -r3.xyz * r2.xxx + v1.xyz;
  r0.w = 1;
  r3.x = dot(r0.xyzw, v7.xyzw);
  r3.y = dot(r0.xyzw, v8.xyzw);
  r2.w = dot(r0.xyzw, v10.xyzw);
  r0.x = dot(r0.xyzw, v9.xyzw);
  r0.y = 1 / r2.w;
  r0.zw = r3.xy * r0.yy;
  r0.y = r0.x * r0.y;
  r2.w = max(abs(r0.z), abs(r0.w));
  r3.xy = r0.zw * float2(0.5,0.5) + float2(0.5,0.5);
  r0.z = 1 + -r2.w;
  r0.x = min(r0.x, r0.z);
  r0.x = r0.x < 0;
  if (r0.x != 0) discard;
  o1.xyzw = float4(0,0,0,0);
  r3.z = 1 + -r3.y;
  r0.x = (uint)g_shadowmapDimensions.x;
  r0.zw = r0.xx * r3.xz + float2(0.5,0.5);
  r0.x = 1 / r0.x;
  r3.xy = floor(r0.zw);
  r0.zw = -r3.xy + r0.zw;
  r3.xy = r3.xy * r0.xx;
  r4.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(2,-2)).xyzw;
  r0.x = r0.z * 2 + 2;
  r5.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(2,0)).xyzw;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(0,-2)).xyzw;
  r3.zw = float2(4,1) + -r0.zw;
  r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(0,0)).xyzw;
  r8.xyzw = float4(1,2,3,5) + -r0.zzzz;
  r9.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(-2,-2)).xyzw;
  r2.w = -r0.z * 2 + 2;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(-2,0)).xyzw;
  r11.x = r0.z * -2 + 4;
  r11.yz = r10.wx * r2.ww;
  r11.xy = r10.zy * r11.xx + r11.yz;
  r11.x = r9.y * r8.z + r11.x;
  r10.z = r10.z * r8.z + r11.y;
  r10.z = r10.w * r2.w + r10.z;
  r10.w = r9.x * r2.w + r11.x;
  r9.xyzw = r9.wzxy * r8.xyxy;
  r9.xy = r9.xz + r9.yw;
  r9.xy = r6.zy * float2(2,2) + r9.xy;
  r6.zw = r6.wx * float2(2,2) + r9.xy;
  r6.zw = r4.zy * r0.zz + r6.zw;
  r9.xyzw = float4(1,4,3,2) + r0.zzzz;
  r4.z = r7.z * r9.y + r10.w;
  r4.z = r7.w * r8.w + r4.z;
  r4.z = r6.y * r9.z + r4.z;
  r4.z = r6.x * r3.z + r4.z;
  r5.z = dot(r5.zz, r0.zz);
  r4.z = r5.z + r4.z;
  r4.z = r5.w * r0.x + r4.z;
  r4.y = r4.y * r0.z;
  r4.y = r4.y * 2 + r4.z;
  r6.x = r4.x * r9.w + r4.y;
  r4.xy = r4.wx * r9.xx + r6.zw;
  r4.z = dot(r5.yy, r0.zz);
  r4.w = r7.y * r9.y + r10.z;
  r4.w = r7.x * r8.w + r4.w;
  r4.w = r7.z * r9.z + r4.w;
  r4.w = r7.w * r3.z + r4.w;
  r4.w = r4.z + r4.w;
  r0.x = r5.x * r0.x + r4.w;
  r0.x = r5.z + r0.x;
  r6.y = r5.w * r9.w + r0.x;
  r4.xy = r6.xy + r4.xy;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(-2,2)).xyzw;
  r11.xyzw = r6.wzxy * r8.xyxy;
  r5.yz = r11.xz + r11.yw;
  r0.x = r6.z * r8.z + r5.z;
  r0.x = r6.w * r2.w + r0.x;
  r4.w = r10.y * r8.z + r5.y;
  r2.w = r10.x * r2.w + r4.w;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(0,2)).xyzw;
  r8.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r3.xy, r0.y, int2(2,2)).xyzw;
  r0.x = r6.y * 2 + r0.x;
  r0.x = r6.x * 2 + r0.x;
  r0.x = r6.z * r9.z + r0.x;
  r0.x = r6.w * r3.z + r0.x;
  r0.x = r8.y * r0.z + r0.x;
  r0.x = r8.x * r9.x + r0.x;
  r0.y = r8.z * r0.z;
  r0.x = r0.y * 2 + r0.x;
  r0.y = r8.w * r9.w + r0.x;
  r2.w = r6.z * 2 + r2.w;
  r2.w = r6.w * 2 + r2.w;
  r2.w = r7.y * r9.z + r2.w;
  r2.w = r7.x * r3.z + r2.w;
  r0.z = r8.z * r0.z + r2.w;
  r0.z = r8.w * r9.x + r0.z;
  r0.z = r4.z + r0.z;
  r0.x = r5.x * r9.w + r0.z;
  r0.xy = r4.xy + r0.xy;
  r0.y = r0.y * r0.w;
  r0.x = r0.x * r3.w + r0.y;
  r0.x = 0.0169491526 * r0.x;
  r0.y = dot(r2.xyz, r2.xyz);
  r0.z = v3.w + r0.y;
  r0.y = rsqrt(r0.y);
  r2.xyz = r2.xyz * r0.yyy;
  r0.y = 1 / r0.z;
  r0.y = v1.w + r0.y;
  r0.y = max(0, r0.y);
  r0.x = r0.y * r0.x;
  r0.y = dot(v6.xyz, r2.xyz);
  r0.y = saturate(r0.y * v5.x + v5.y);
  r0.y = 1 + -r0.y;
  r0.x = r0.x * r0.y;
  r0.xyz = v2.xyz * r0.xxx;
  r3.xyz = g_gbufferTexture0.Load(r1.xyw).xyz;
  r1.xyz = g_gbufferTexture1.Load(r1.xyz).xyz;
  r1.xyz = r1.xyz * r1.xyz;
  r3.xyz = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.w = saturate(dot(r3.xyz, r2.xyz));
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = r1.xyz * r0.xyz;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Wed Oct 21 11:37:02 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:   80 Size:    16 [unused]
//   float g_subRolloff;                // Offset:   96 Size:     4 [unused]
//   float g_colorScale;                // Offset:  100 Size:     4 [unused]
//   uint4 g_shadowmapDimensions;       // Offset:  112 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_shadowmapSampler              sampler_c      NA          NA    0        1
// g_shadowmapTexture                texture  float4          2d    0        1
// g_depthTexture                    texture  float4          2d    1        1
// g_gbufferTexture0                 texture  float4          2d    2        1
// g_gbufferTexture1                 texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float      w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.w
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 12
mul r0.xy, v0.xyxx, cb0[0].xyxx
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyww, t1.yzxw
mov r0.w, l(1.000000)
dp4 r2.x, r0.xyzw, cb0[4].xyzw
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
dp4 r3.x, r0.xyzw, cb0[1].xyzw
dp4 r3.y, r0.xyzw, cb0[2].xyzw
dp4 r3.z, r0.xyzw, cb0[3].xyzw
mul r0.xyz, r2.xxxx, r3.xyzx
mad r2.xyz, -r3.xyzx, r2.xxxx, v1.xyzx
mov r0.w, l(1.000000)
dp4 r3.x, r0.xyzw, v7.xyzw
dp4 r3.y, r0.xyzw, v8.xyzw
dp4 r2.w, r0.xyzw, v10.xyzw
dp4 r0.x, r0.xyzw, v9.xyzw
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r0.zw, r0.yyyy, r3.xxxy
mul r0.y, r0.y, r0.x
max r2.w, |r0.w|, |r0.z|
mad r3.xy, r0.zwzz, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
add r0.z, -r2.w, l(1.000000)
min r0.x, r0.z, r0.x
lt r0.x, r0.x, l(0.000000)
discard_nz r0.x
mov o1.xyzw, l(0,0,0,0)
add r3.z, -r3.y, l(1.000000)
utof r0.x, cb0[7].x
mad r0.zw, r0.xxxx, r3.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
round_ni r3.xy, r0.zwzz
add r0.zw, r0.zzzw, -r3.xxxy
mul r3.xy, r0.xxxx, r3.xyxx
gather4_c_aoffimmi_indexable(2,-2,0)(texture2d)(float,float,float,float) r4.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
mad r0.x, r0.z, l(2.000000), l(2.000000)
gather4_c_aoffimmi_indexable(2,0,0)(texture2d)(float,float,float,float) r5.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
gather4_c_aoffimmi_indexable(0,-2,0)(texture2d)(float,float,float,float) r6.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
add r3.zw, -r0.zzzw, l(0.000000, 0.000000, 4.000000, 1.000000)
gather4_c_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r7.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
add r8.xyzw, -r0.zzzz, l(1.000000, 2.000000, 3.000000, 5.000000)
gather4_c_aoffimmi_indexable(-2,-2,0)(texture2d)(float,float,float,float) r9.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
mad r2.w, -r0.z, l(2.000000), l(2.000000)
gather4_c_aoffimmi_indexable(-2,0,0)(texture2d)(float,float,float,float) r10.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
mad r11.x, r0.z, l(-2.000000), l(4.000000)
mul r11.yz, r2.wwww, r10.wwxw
mad r11.xy, r10.zyzz, r11.xxxx, r11.yzyy
mad r11.x, r9.y, r8.z, r11.x
mad r10.z, r10.z, r8.z, r11.y
mad r10.z, r10.w, r2.w, r10.z
mad r10.w, r9.x, r2.w, r11.x
mul r9.xyzw, r8.xyxy, r9.wzxy
add r9.xy, r9.ywyy, r9.xzxx
mad r9.xy, r6.zyzz, l(2.000000, 2.000000, 0.000000, 0.000000), r9.xyxx
mad r6.zw, r6.wwwx, l(0.000000, 0.000000, 2.000000, 2.000000), r9.xxxy
mad r6.zw, r4.zzzy, r0.zzzz, r6.zzzw
add r9.xyzw, r0.zzzz, l(1.000000, 4.000000, 3.000000, 2.000000)
mad r4.z, r7.z, r9.y, r10.w
mad r4.z, r7.w, r8.w, r4.z
mad r4.z, r6.y, r9.z, r4.z
mad r4.z, r6.x, r3.z, r4.z
dp2 r5.z, r5.zzzz, r0.zzzz
add r4.z, r4.z, r5.z
mad r4.z, r5.w, r0.x, r4.z
mul r4.y, r0.z, r4.y
mad r4.y, r4.y, l(2.000000), r4.z
mad r6.x, r4.x, r9.w, r4.y
mad r4.xy, r4.wxww, r9.xxxx, r6.zwzz
dp2 r4.z, r5.yyyy, r0.zzzz
mad r4.w, r7.y, r9.y, r10.z
mad r4.w, r7.x, r8.w, r4.w
mad r4.w, r7.z, r9.z, r4.w
mad r4.w, r7.w, r3.z, r4.w
add r4.w, r4.w, r4.z
mad r0.x, r5.x, r0.x, r4.w
add r0.x, r0.x, r5.z
mad r6.y, r5.w, r9.w, r0.x
add r4.xy, r4.xyxx, r6.xyxx
gather4_c_aoffimmi_indexable(-2,2,0)(texture2d)(float,float,float,float) r6.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
mul r11.xyzw, r8.xyxy, r6.wzxy
add r5.yz, r11.yywy, r11.xxzx
mad r0.x, r6.z, r8.z, r5.z
mad r0.x, r6.w, r2.w, r0.x
mad r4.w, r10.y, r8.z, r5.y
mad r2.w, r10.x, r2.w, r4.w
gather4_c_aoffimmi_indexable(0,2,0)(texture2d)(float,float,float,float) r6.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
gather4_c_aoffimmi_indexable(2,2,0)(texture2d)(float,float,float,float) r8.xyzw, r3.xyxx, t0.xyzw, s0.x, r0.y
mad r0.x, r6.y, l(2.000000), r0.x
mad r0.x, r6.x, l(2.000000), r0.x
mad r0.x, r6.z, r9.z, r0.x
mad r0.x, r6.w, r3.z, r0.x
mad r0.x, r8.y, r0.z, r0.x
mad r0.x, r8.x, r9.x, r0.x
mul r0.y, r0.z, r8.z
mad r0.x, r0.y, l(2.000000), r0.x
mad r0.y, r8.w, r9.w, r0.x
mad r2.w, r6.z, l(2.000000), r2.w
mad r2.w, r6.w, l(2.000000), r2.w
mad r2.w, r7.y, r9.z, r2.w
mad r2.w, r7.x, r3.z, r2.w
mad r0.z, r8.z, r0.z, r2.w
mad r0.z, r8.w, r9.x, r0.z
add r0.z, r0.z, r4.z
mad r0.x, r5.x, r9.w, r0.z
add r0.xy, r0.xyxx, r4.xyxx
mul r0.y, r0.w, r0.y
mad r0.x, r0.x, r3.w, r0.y
mul r0.x, r0.x, l(0.0169491526)
dp3 r0.y, r2.xyzx, r2.xyzx
add r0.z, r0.y, v3.w
rsq r0.y, r0.y
mul r2.xyz, r0.yyyy, r2.xyzx
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r0.y, r0.y, v1.w
max r0.y, r0.y, l(0.000000)
mul r0.x, r0.x, r0.y
dp3 r0.y, v6.xyzx, r2.xyzx
mad_sat r0.y, r0.y, v5.x, v5.y
add r0.y, -r0.y, l(1.000000)
mul r0.x, r0.y, r0.x
mul r0.xyz, r0.xxxx, v2.xyzx
ld_indexable(texture2d)(float,float,float,float) r3.xyz, r1.xyww, t2.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r1.xyzw, t3.xyzw
mul r1.xyz, r1.xyzx, r1.xyzx
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
dp3_sat r0.w, r3.xyzx, r2.xyzx
mul r0.xyz, r0.wwww, r0.xyzx
mul o0.xyz, r0.xyzx, r1.xyzx
mov o0.w, l(0)
ret 
// Approximately 135 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
