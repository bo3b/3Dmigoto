// bug lights skyEnvmap
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float4 g_keyColor : packoffset(c9);
  float4 g_keyTranslucencyParams : packoffset(c10);
  float4 g_subParams : packoffset(c11);
  float4 g_envmapParams : packoffset(c12);
  float g_skyEnvmap8BitTexInvScale : packoffset(c13);
  float g_colorScale : packoffset(c13.y);
  float4 g_envmapsMipmapCount : packoffset(c14);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_customSampler_s : register(s2);
SamplerState g_ssaoSampler_s : register(s3);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
TextureCube<float4> g_customEnvmap : register(t2);
Texture2D<float4> g_ssaoTexture : register(t3);
Texture2DMS<float4,4> g_depthTexture : register(t4);
Texture2DMS<float4,4> g_gbufferTexture0 : register(t5);
Texture2DMS<float4,4> g_gbufferTexture1 : register(t6);
Texture2DMS<float4,4> g_gbufferTexture2 : register(t7);
Texture2DMS<float4,4> g_gbufferTexture3 : register(t8);
Texture2DMS<float4> g_shadowAccumTexture : register(t9);
Texture2D<float> g_msaaClassifyTexture : register(t10);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r1.z = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.z = 0 < r1.z;
  
  // DHR BUG FIX
  //r1.zw = r1.zz ? float2(5.60519386e-045,0.249999747) : //float2(1.40129846e-045,0.999998987);
  
  r1.zw = r1.zz ? float2(4.0,0.249999747) : float2(1.0,0.999998987);
  
  r2.x = 1 + -g_envmapParams.w;
  r2.yz = (int2)g_envmapsMipmapCount.xy;
  r2.yz = (int2)r2.yz + int2(-1,-1);
  r3.xy = trunc(g_envmapsMipmapCount.xy);
  r2.yz = (int2)r2.yz;
  r4.w = 1;
  r5.xyz = float3(0,0,0);
  r2.w = 0;
  while (true) {
    r3.z = (int)r2.w >= (int)r1.z;
    if (r3.z != 0) break;
    r3.zw = icb[r2.w+0].xy * g_invScreenSize.xy + r1.xy;
    r6.xyzw = g_gbufferTexture0.Load(r0.xy, r2.w).xyzw;
    r7.xyzw = g_gbufferTexture1.Load(r0.xy, r2.w).xyzw;
    r8.xyzw = g_gbufferTexture2.Load(r0.xy, r2.w).yxzw;
    r9.xyz = g_gbufferTexture3.Load(r0.xy, r2.w).xyz;
    r4.z = g_depthTexture.Load(r0.xy, r2.w).x;
    r5.w = 255 * r8.w;
    r5.w = round(r5.w);
    r5.w = (int)r5.w;
    r7.xyzw = r7.xyzw * r7.xyzw;
    r10.xy = (int2)r5.ww == int2(1,2);
    if (r10.x != 0) {
      r10.xzw = r7.www * r7.xyz;
    } else {
      r10.xzw = r7.www;
    }
    r7.w = 0 < r10.x;
    r6.w = r7.w ? r6.w : 0;
    r7.w = r6.w * 12 + 1;
    r7.w = exp2(r7.w);
    r7.w = r7.w * 1.44299996 + 1.44299996;
    r8.y = log2(abs(r8.y));
    r8.y = g_envmapParams.z * r8.y;
    r8.y = exp2(r8.y);
    r6.xyz = r6.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r9.w = dot(r6.xyz, r6.xyz);
    r9.w = rsqrt(r9.w);
    r6.xyz = r9.www * r6.xyz;
    r3.zw = r3.zw * float2(2,2) + float2(-1,-1);
    r4.xy = float2(1,-1) * r3.zw;
    r11.x = dot(r4.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r11.y = dot(r4.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r11.z = dot(r4.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r3.z = dot(r4.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r3.z = 1 / r3.z;
	
	float4 r28, r26, r27;
r26.xyz = r11.xyz * r3.zzz;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r11.xyz = r26.xyz / r3.zzz;

    r4.xyz = r11.xzy * r3.zzz;
    r3.w = dot(-r4.xyz, -r4.xyz);
    r3.w = rsqrt(r3.w);
    r11.xzw = -r4.xzy * r3.www;
    r9.w = g_shadowAccumTexture.Load(r0.xy, r2.w).x;
    r3.z = r11.y * r3.z + g_cameraPos.y;
    r12.xy = g_lightDir.xz * r3.zz;
    r12.xy = r12.xy * g_cloudOffsetAndScale.ww + r4.xy;
    r12.xy = r12.xy * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
    r3.z = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r12.xy, 0).x;
    r3.z = saturate(g_cloudCoverageExponentAndFade.x + r3.z);
    r3.z = log2(r3.z);
    r3.z = g_cloudCoverageExponentAndFade.y * r3.z;
    r3.z = exp2(r3.z);
    r11.y = dot(r4.xyz, r4.xyz);
    r11.y = sqrt(r11.y);
    r11.y = -g_cloudCoverageExponentAndFade.z + r11.y;
    r11.y = saturate(g_cloudCoverageExponentAndFade.w * r11.y);
    r11.y = r11.y * r11.y;
    r12.x = 1 + -r3.z;
    r3.z = r11.y * r12.x + r3.z;
    r3.z = r9.w * r3.z;
    r9.w = dot(r6.xyz, g_lightDir.xyz);
    r11.y = saturate(r9.w);
    r12.xyz = g_keyColor.xyz * r11.yyy;
    r13.xyz = r12.xyz * r3.zzz;
    r4.xyz = -r4.xzy * r3.www + g_lightDir.xyz;
    r3.w = dot(r4.xyz, r4.xyz);
    r3.w = rsqrt(r3.w);
    r4.xyz = r4.xyz * r3.www;
    r3.w = saturate(dot(r4.xyz, r6.xyz));
    r4.x = r7.w * 0.0866250992 + 0.875;
    r3.w = r3.w * r7.w + -r7.w;
    r3.w = exp2(r3.w);
    r3.w = r4.x * r3.w;
    r4.xyz = r13.xyz * r3.www;
    r3.w = dot(-r11.xzw, r6.xyz);
    r3.w = r3.w + r3.w;
    r13.xyz = r6.xyz * -r3.www + -r11.xzw;
    r12.xyz = r12.xyz * r3.zzz + r9.xyz;
    r14.xyzw = r8.zzzz == float4(0,0.00392156886,0.00784313772,0.0117647061);
    r14.xyzw = r14.xyzw ? g_envmapParams.xxxx : 0;
    r3.w = r3.z * r2.x + g_envmapParams.w;
    r3.w = r3.w * r8.y;
    r15.xy = -r6.ww * float2(15,15) + r3.xy;
    r15.xy = float2(5,5) + r15.xy;
    r15.xy = max(float2(0,0), r15.xy);
    r15.xy = min(r15.xy, r2.yz);
    r16.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r13.xyz, r15.y).xyzw;
    r6.w = dot(r14.xyzw, r16.xyzw);
    r13.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r13.xyz, r15.x).xyz;
    r13.xyz = r13.xyz * r3.www;
    r13.xyz = g_skyEnvmap8BitTexInvScale * r13.xyz;
    r4.xyz = r4.xyz * g_keyColor.www + r13.xyz;
    r9.xyz = g_envmapParams.yyy + r9.xyz;
    r9.xyz = r9.xyz * r6.www;
    r3.w = 1 + -r8.y;
    r4.xyz = r9.xyz * r3.www + r4.xyz;
    if (r10.y != 0) {
      r3.w = r9.w * 1.14988995 + -2.1456399;
      r3.w = r9.w * r3.w + 0.841609001;
      r3.w = saturate(r9.w * r3.w + 0.154140994);
      r9.xyz = g_subParams.xyz * r3.www;
      r12.xyz = r9.xyz * r3.zzz + r12.xyz;
    }
    r3.w = (int)r5.w >= 5;
    if (r3.w != 0) {
      r3.w = saturate(-0.0196078438 + r8.w);
      r8.x = saturate(r8.x);
      r8.x = 1 + -r8.x;
      r8.y = 1 + -r3.w;
      r6.xyz = r6.xyz * g_keyTranslucencyParams.www + g_lightDir.xyz;
      r3.w = saturate(dot(r11.xzw, -r6.xyz));
      r6.xy = g_keyTranslucencyParams.yy * r8.xy;
      r6.xy = float2(-1.44269502,-1.44269502) * r6.xy;
      r6.xy = exp2(r6.xy);
      r3.w = r3.w * g_keyTranslucencyParams.z + g_keyTranslucencyParams.x;
      r3.w = dot(r3.ww, r6.xy);
      r3.z = r3.w * r3.z;
      r12.xyz = r3.zzz * g_keyColor.xyz + r12.xyz;
    }
    r6.xyz = r7.xyz * r12.xyz + r5.xyz;
    r5.xyz = r10.xzw * r4.xyz + r6.xyz;
    r2.w = (int)r2.w + 1;
  }
  r0.xyzw = g_ssaoTexture.Gather(g_ssaoSampler_s, r1.xy).xyzw;
  r0.x = min(r0.x, r0.y);
  r0.x = min(r0.x, r0.z);
  o0.w = min(r0.x, r0.w);
  o0.xyz = r5.xyz * r1.www;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Thu Oct 29 02:42:09 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float4 g_keyColor;                 // Offset:  144 Size:    16
//   float4 g_keyTranslucencyParams;    // Offset:  160 Size:    16
//   float4 g_subParams;                // Offset:  176 Size:    16
//   float4 g_envmapParams;             // Offset:  192 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  208 Size:     4
//   float g_colorScale;                // Offset:  212 Size:     4 [unused]
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_customSampler                   sampler      NA          NA    2        1
// g_ssaoSampler                     sampler      NA          NA    3        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_customEnvmap                    texture  float4        cube    2        1
// g_ssaoTexture                     texture  float4          2d    3        1
// g_depthTexture                    texture  float4       2dMS4    4        1
// g_gbufferTexture0                 texture  float4       2dMS4    5        1
// g_gbufferTexture1                 texture  float4       2dMS4    6        1
// g_gbufferTexture2                 texture  float4       2dMS4    7        1
// g_gbufferTexture3                 texture  float4       2dMS4    8        1
// g_shadowAccumTexture              texture  float4        2dMS    9        1
// g_msaaClassifyTexture             texture   float          2d   10        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} }
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2dms(4) (float,float,float,float) t4
dcl_resource_texture2dms(4) (float,float,float,float) t5
dcl_resource_texture2dms(4) (float,float,float,float) t6
dcl_resource_texture2dms(4) (float,float,float,float) t7
dcl_resource_texture2dms(4) (float,float,float,float) t8
dcl_resource_texture2dms(0) (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 17
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[1].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r0.xyww, t10.yzxw
lt r1.z, l(0.000000), r1.z
movc r1.zw, r1.zzzz, l(0,0,4,00.249999747), l(0,0,1,0.999999)
add r2.x, -cb0[12].w, l(1.000000)
ftoi r2.yz, cb0[14].xxyx
iadd r2.yz, r2.yyzy, l(0, -1, -1, 0)
round_z r3.xy, cb0[14].xyxx
itof r2.yz, r2.yyzy
mov r4.w, l(1.000000)
mov r5.xyz, l(0,0,0,0)
mov r2.w, l(0)
loop 
  ige r3.z, r2.w, r1.z
  breakc_nz r3.z
  mad r3.zw, icb[r2.w + 0].xxxy, cb0[1].xxxy, r1.xxxy
  ldms_indexable(texture2dms)(float,float,float,float) r6.xyzw, r0.xyww, t5.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyzw, r0.xyww, t6.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r0.xyww, t7.yxzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyz, r0.xyww, t8.xyzw, r2.w
  ldms_indexable(texture2dms)(float,float,float,float) r4.z, r0.xyww, t4.yzxw, r2.w
  mul r5.w, r8.w, l(255.000000)
  round_ne r5.w, r5.w
  ftoi r5.w, r5.w
  mul r7.xyzw, r7.xyzw, r7.xyzw
  ieq r10.xy, r5.wwww, l(1, 2, 0, 0)
  if_nz r10.x
    mul r10.xzw, r7.xxyz, r7.wwww
  else 
    mov r10.xzw, r7.wwww
  endif 
  lt r7.w, l(0.000000), r10.x
  and r6.w, r6.w, r7.w
  mad r7.w, r6.w, l(12.000000), l(1.000000)
  exp r7.w, r7.w
  mad r7.w, r7.w, l(1.443000), l(1.443000)
  log r8.y, |r8.y|
  mul r8.y, r8.y, cb0[12].z
  exp r8.y, r8.y
  mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r9.w, r6.xyzx, r6.xyzx
  rsq r9.w, r9.w
  mul r6.xyz, r6.xyzx, r9.wwww
  mad r3.zw, r3.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  mul r4.xy, r3.zwzz, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r11.x, r4.xyzw, cb0[2].xyzw
  dp4 r11.y, r4.xyzw, cb0[3].xyzw
  dp4 r11.z, r4.xyzw, cb0[4].xyzw
  dp4 r3.z, r4.xyzw, cb0[5].xyzw
  div r3.z, l(1.000000, 1.000000, 1.000000, 1.000000), r3.z
  mul r4.xyz, r3.zzzz, r11.xzyx
  dp3 r3.w, -r4.xyzx, -r4.xyzx
  rsq r3.w, r3.w
  mul r11.xzw, r3.wwww, -r4.xxzy
  ldms_indexable(texture2dms)(float,float,float,float) r9.w, r0.xyzw, t9.yzwx, r2.w
  mad r3.z, r11.y, r3.z, cb0[0].y
  mul r12.xy, r3.zzzz, cb0[8].xzxx
  mad r12.xy, r12.xyxx, cb0[6].wwww, r4.xyxx
  mad r12.xy, r12.xyxx, cb0[6].zzzz, cb0[6].xyxx
  sample_l_indexable(texture2d)(float,float,float,float) r3.z, r12.xyxx, t0.yzxw, s0, l(0.000000)
  add_sat r3.z, r3.z, cb0[7].x
  log r3.z, r3.z
  mul r3.z, r3.z, cb0[7].y
  exp r3.z, r3.z
  dp3 r11.y, r4.xyzx, r4.xyzx
  sqrt r11.y, r11.y
  add r11.y, r11.y, -cb0[7].z
  mul_sat r11.y, r11.y, cb0[7].w
  mul r11.y, r11.y, r11.y
  add r12.x, -r3.z, l(1.000000)
  mad r3.z, r11.y, r12.x, r3.z
  mul r3.z, r3.z, r9.w
  dp3 r9.w, r6.xyzx, cb0[8].xyzx
  mov_sat r11.y, r9.w
  mul r12.xyz, r11.yyyy, cb0[9].xyzx
  mul r13.xyz, r3.zzzz, r12.xyzx
  mad r4.xyz, -r4.xzyx, r3.wwww, cb0[8].xyzx
  dp3 r3.w, r4.xyzx, r4.xyzx
  rsq r3.w, r3.w
  mul r4.xyz, r3.wwww, r4.xyzx
  dp3_sat r3.w, r4.xyzx, r6.xyzx
  mad r4.x, r7.w, l(0.0866250992), l(0.875000)
  mad r3.w, r3.w, r7.w, -r7.w
  exp r3.w, r3.w
  mul r3.w, r3.w, r4.x
  mul r4.xyz, r3.wwww, r13.xyzx
  dp3 r3.w, -r11.xzwx, r6.xyzx
  add r3.w, r3.w, r3.w
  mad r13.xyz, r6.xyzx, -r3.wwww, -r11.xzwx
  mad r12.xyz, r12.xyzx, r3.zzzz, r9.xyzx
  eq r14.xyzw, r8.zzzz, l(0.000000, 0.00392156886, 0.00784313772, 0.0117647061)
  and r14.xyzw, r14.xyzw, cb0[12].xxxx
  mad r3.w, r3.z, r2.x, cb0[12].w
  mul r3.w, r8.y, r3.w
  mad r15.xy, -r6.wwww, l(15.000000, 15.000000, 0.000000, 0.000000), r3.xyxx
  add r15.xy, r15.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
  max r15.xy, r15.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r15.xy, r2.yzyy, r15.xyxx
  sample_l_indexable(texturecube)(float,float,float,float) r16.xyzw, r13.xyzx, t2.xyzw, s2, r15.y
  dp4 r6.w, r14.xyzw, r16.xyzw
  sample_l_indexable(texturecube)(float,float,float,float) r13.xyz, r13.xyzx, t1.xyzw, s1, r15.x
  mul r13.xyz, r3.wwww, r13.xyzx
  mul r13.xyz, r13.xyzx, cb0[13].xxxx
  mad r4.xyz, r4.xyzx, cb0[9].wwww, r13.xyzx
  add r9.xyz, r9.xyzx, cb0[12].yyyy
  mul r9.xyz, r6.wwww, r9.xyzx
  add r3.w, -r8.y, l(1.000000)
  mad r4.xyz, r9.xyzx, r3.wwww, r4.xyzx
  if_nz r10.y
    mad r3.w, r9.w, l(1.149890), l(-2.145640)
    mad r3.w, r9.w, r3.w, l(0.841609)
    mad_sat r3.w, r9.w, r3.w, l(0.154141)
    mul r9.xyz, r3.wwww, cb0[11].xyzx
    mad r12.xyz, r9.xyzx, r3.zzzz, r12.xyzx
  endif 
  ige r3.w, r5.w, l(5)
  if_nz r3.w
    add_sat r3.w, r8.w, l(-0.0196078438)
    mov_sat r8.x, r8.x
    add r8.x, -r8.x, l(1.000000)
    add r8.y, -r3.w, l(1.000000)
    mad r6.xyz, r6.xyzx, cb0[10].wwww, cb0[8].xyzx
    dp3_sat r3.w, r11.xzwx, -r6.xyzx
    mul r6.xy, r8.xyxx, cb0[10].yyyy
    mul r6.xy, r6.xyxx, l(-1.442695, -1.442695, 0.000000, 0.000000)
    exp r6.xy, r6.xyxx
    mad r3.w, r3.w, cb0[10].z, cb0[10].x
    dp2 r3.w, r3.wwww, r6.xyxx
    mul r3.z, r3.z, r3.w
    mad r12.xyz, r3.zzzz, cb0[9].xyzx, r12.xyzx
  endif 
  mad r6.xyz, r7.xyzx, r12.xyzx, r5.xyzx
  mad r5.xyz, r10.xzwx, r4.xyzx, r6.xyzx
  iadd r2.w, r2.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r1.xyxx, t3.xyzw, s3.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
mul o0.xyz, r1.wwww, r5.xyzx
ret 
// Approximately 143 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
   