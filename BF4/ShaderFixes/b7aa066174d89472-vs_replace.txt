// light bloom
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : TEXCOORD0,
  float2 v1 : TEXCOORD1,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0)
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xyz = v0.xyz;
  o0.w = 1;
  r0.x = 1 + -transparentStartAndSlopeAndClamp.x;
  r0.x = transparentStartAndSlopeAndClamp.y * r0.x;
  r0.x = max(0, r0.x);
  r0.z = min(transparentStartAndSlopeAndClamp.z, r0.x);
  r0.y = r0.z * r0.z;
  r0.x = r0.z * r0.y;
  r0.w = 1;
  r0.x = saturate(dot(r0.xyzw, transparentCurve.xyzw));
  o1.z = 1 + -r0.x;
  o1.xy = v1.xy;
  o1.w = 0;
  
  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);
  
  //Lensflare disable
  if (iniParams.w == 0) 
  {  
  o0 = 0;
  }
  
  //Lensflare enable with an aproximate fix, not perfect
  if (iniParams.w == 1)
  {  
   o0.x += stereo.x;
  }
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Fri Oct 23 05:12:34 2015
//
//
// Buffer Definitions: 
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4 [unused]
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16 [unused]
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64 [unused]
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12 [unused]
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_temps 1
mov o0.xyz, v0.xyzx
mov o0.w, l(1.000000)
add r0.x, -cb2[21].x, l(1.000000)
mul r0.x, r0.x, cb2[21].y
max r0.x, r0.x, l(0.000000)
min r0.z, r0.x, cb2[21].z
mul r0.y, r0.z, r0.z
mul r0.x, r0.y, r0.z
mov r0.w, l(1.000000)
dp4_sat r0.x, r0.xyzw, cb2[22].xyzw
add o1.z, -r0.x, l(1.000000)
mov o1.xy, v1.xyxx
mov o1.w, l(0)
ret 
// Approximately 14 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
