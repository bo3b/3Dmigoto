// lights
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float3 g_lightDir : packoffset(c6);
  float4 g_keyColor : packoffset(c7);
  float4 g_keyTranslucencyParams : packoffset(c8);
  float4 g_subParams : packoffset(c9);
  float4 g_envmapParams : packoffset(c10);
  float g_skyEnvmap8BitTexInvScale : packoffset(c11);
  float g_colorScale : packoffset(c11.y);
  float4 g_envmapsMipmapCount : packoffset(c12);
}
SamplerState g_skyEnvmapSampler_s : register(s0);
SamplerState g_customSampler_s : register(s1);
SamplerState g_ssaoSampler_s : register(s2);
TextureCube<float4> g_skyEnvmap : register(t0);
TextureCube<float4> g_customEnvmap : register(t1);
Texture2D<float4> g_ssaoTexture : register(t2);
Texture2D<float4> g_depthTexture : register(t3);
Texture2D<float4> g_gbufferTexture0 : register(t4);
Texture2D<float4> g_gbufferTexture1 : register(t5);
Texture2D<float4> g_gbufferTexture2 : register(t6);
Texture2D<float4> g_gbufferTexture3 : register(t7);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r2.xyzw = g_gbufferTexture0.Load(r0.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r0.xyw).xyzw;
  r4.xyz = g_gbufferTexture2.Load(r0.xyw).xzw;
  r5.xyz = g_gbufferTexture3.Load(r0.xyw).xyz;
  r0.z = g_depthTexture.Load(r0.xyz).x;
  r1.z = 255 * r4.z;
  r1.z = round(r1.z);
  r1.z = (int)r1.z;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r1.z = (int)r1.z == 1;
  if (r1.z != 0) {
    r6.xyz = r3.www * r3.xyz;
  } else {
    r6.xyz = r3.www;
  }
  r1.z = 0 < r6.x;
  r1.z = r1.z ? r2.w : 0;
  r1.w = log2(abs(r4.x));
  r1.w = g_envmapParams.z * r1.w;
  r1.w = exp2(r1.w);
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r4.xz = r1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = float2(1,-1) * r4.xz;
  r0.w = 1;
  r7.x = dot(r0.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r7.y = dot(r0.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r7.z = dot(r0.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.x = dot(r0.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.x = 1 / r0.x;
  
  float4 r28, r26, r27;
r26.xyz = r7.xyz * r0.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r7.xyz = r26.xyz / r0.xxx;

  r0.xyz = r7.xyz * r0.xxx;
  r0.w = dot(-r0.xyz, -r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = -r0.xyz * r0.www;
  r0.w = dot(-r0.xyz, r2.xyz);
  r0.w = r0.w + r0.w;
  r0.xyz = r2.xyz * -r0.www + -r0.xyz;
  r2.xyzw = r4.yyyy == float4(0,0.00392156886,0.00784313772,0.0117647061);
  r2.xyzw = r2.xyzw ? g_envmapParams.xxxx : 0;
  r4.xy = (int2)g_envmapsMipmapCount.xy;
  r4.zw = trunc(g_envmapsMipmapCount.xy);
  r4.zw = -r1.zz * float2(15,15) + r4.zw;
  r4.zw = float2(5,5) + r4.zw;
  r4.xy = (int2)r4.xy + int2(-1,-1);
  r4.xy = (int2)r4.xy;
  r4.zw = max(float2(0,0), r4.zw);
  r4.xy = min(r4.zw, r4.xy);
  r7.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r0.xyz, r4.y).xyzw;
  r0.w = dot(r2.xyzw, r7.xyzw);
  r0.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r0.xyz, r4.x).xyz;
  r0.xyz = r0.xyz * r1.www;
  r2.xyz = g_envmapParams.yyy + r5.xyz;
  r2.xyz = r2.xyz * r0.www;
  r0.w = 1 + -r1.w;
  r2.xyz = r2.xyz * r0.www;
  r0.xyz = r0.xyz * g_skyEnvmap8BitTexInvScale + r2.xyz;
  r0.xyz = r6.xyz * r0.xyz;
  o0.xyz = r3.xyz * r5.xyz + r0.xyz;
  r0.xyzw = g_ssaoTexture.Gather(g_ssaoSampler_s, r1.xy).xyzw;
  r0.x = min(r0.x, r0.y);
  r0.x = min(r0.x, r0.z);
  o0.w = min(r0.x, r0.w);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Thu Oct 22 01:46:56 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float3 g_lightDir;                 // Offset:   96 Size:    12 [unused]
//   float4 g_keyColor;                 // Offset:  112 Size:    16 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  128 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  144 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  160 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  176 Size:     4
//   float g_colorScale;                // Offset:  180 Size:     4 [unused]
//   float4 g_envmapsMipmapCount;       // Offset:  192 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyEnvmapSampler                sampler      NA          NA    0        1
// g_customSampler                   sampler      NA          NA    1        1
// g_ssaoSampler                     sampler      NA          NA    2        1
// g_skyEnvmap                       texture  float4        cube    0        1
// g_customEnvmap                    texture  float4        cube    1        1
// g_ssaoTexture                     texture  float4          2d    2        1
// g_depthTexture                    texture  float4          2d    3        1
// g_gbufferTexture0                 texture  float4          2d    4        1
// g_gbufferTexture1                 texture  float4          2d    5        1
// g_gbufferTexture2                 texture  float4          2d    6        1
// g_gbufferTexture3                 texture  float4          2d    7        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 8
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[1].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyww, t5.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r0.xyww, t6.xzwy
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r0.xyww, t7.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t3.yzxw
mul r1.z, r4.z, l(255.000000)
round_ne r1.z, r1.z
ftoi r1.z, r1.z
mul r3.xyzw, r3.xyzw, r3.xyzw
ieq r1.z, r1.z, l(1)
if_nz r1.z
  mul r6.xyz, r3.xyzx, r3.wwww
else 
  mov r6.xyz, r3.wwww
endif 
lt r1.z, l(0.000000), r6.x
and r1.z, r2.w, r1.z
log r1.w, |r4.x|
mul r1.w, r1.w, cb0[10].z
exp r1.w, r1.w
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
mad r4.xz, r1.xxyx, l(2.000000, 0.000000, 2.000000, 0.000000), l(-1.000000, 0.000000, -1.000000, 0.000000)
mul r0.xy, r4.xzxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r7.x, r0.xyzw, cb0[2].xyzw
dp4 r7.y, r0.xyzw, cb0[3].xyzw
dp4 r7.z, r0.xyzw, cb0[4].xyzw
dp4 r0.x, r0.xyzw, cb0[5].xyzw
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.xyz, r0.xxxx, r7.xyzx
dp3 r0.w, -r0.xyzx, -r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, -r0.xyzx
dp3 r0.w, -r0.xyzx, r2.xyzx
add r0.w, r0.w, r0.w
mad r0.xyz, r2.xyzx, -r0.wwww, -r0.xyzx
eq r2.xyzw, r4.yyyy, l(0.000000, 0.00392156886, 0.00784313772, 0.0117647061)
and r2.xyzw, r2.xyzw, cb0[10].xxxx
ftoi r4.xy, cb0[12].xyxx
round_z r4.zw, cb0[12].xxxy
mad r4.zw, -r1.zzzz, l(0.000000, 0.000000, 15.000000, 15.000000), r4.zzzw
add r4.zw, r4.zzzw, l(0.000000, 0.000000, 5.000000, 5.000000)
iadd r4.xy, r4.xyxx, l(-1, -1, 0, 0)
itof r4.xy, r4.xyxx
max r4.zw, r4.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
min r4.xy, r4.xyxx, r4.zwzz
sample_l_indexable(texturecube)(float,float,float,float) r7.xyzw, r0.xyzx, t1.xyzw, s1, r4.y
dp4 r0.w, r2.xyzw, r7.xyzw
sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t0.xyzw, s0, r4.x
mul r0.xyz, r1.wwww, r0.xyzx
add r2.xyz, r5.xyzx, cb0[10].yyyy
mul r2.xyz, r0.wwww, r2.xyzx
add r0.w, -r1.w, l(1.000000)
mul r2.xyz, r0.wwww, r2.xyzx
mad r0.xyz, r0.xyzx, cb0[11].xxxx, r2.xyzx
mul r0.xyz, r0.xyzx, r6.xyzx
mad o0.xyz, r3.xyzx, r5.xyzx, r0.xyzx
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r1.xyxx, t2.xyzw, s2.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
ret 
// Approximately 68 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  