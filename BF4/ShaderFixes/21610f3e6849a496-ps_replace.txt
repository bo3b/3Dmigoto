// lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float g_colorScale : packoffset(c6.y);
  uint4 g_shadowmapDimensions : packoffset(c7);
}
Texture2D<float4> g_depthTexture : register(t0);
Texture2D<float4> g_gbufferTexture0 : register(t1);
Texture2D<float4> g_gbufferTexture1 : register(t2);
Texture2D<float4> g_gbufferTexture2 : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r2.z = g_depthTexture.Load(r0.xyw).x;
  r3.xyz = g_gbufferTexture0.Load(r0.xyw).xyz;
  r4.xyz = g_gbufferTexture1.Load(r0.xyw).xyz;
  r0.x = g_gbufferTexture2.Load(r0.xyz).w;
  r0.yz = r1.xy * float2(2,2) + float2(-1,-1);
  r2.xy = float2(1,-1) * r0.yz;
  r2.w = 1;
  r1.x = dot(r2.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r1.z = dot(r2.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.y = dot(r2.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.y = 1 / r0.y;
  
  float4 r28, r26, r27;
r26.xyz = r1.xyz * r0.yyy;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r1.xyz = r26.xyz / r0.yyy;

  r0.yzw = -r1.xyz * r0.yyy + v1.xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.y = rsqrt(r1.x);
  r0.yzw = r1.yyy * r0.yzw;
  r1.yzw = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.x = dot(r1.yzw, r1.yzw);
  r2.x = rsqrt(r2.x);
  r1.yzw = r2.xxx * r1.yzw;
  r1.x = v3.w + r1.x;
  r1.x = 1 / r1.x;
  r1.x = v1.w + r1.x;
  r1.x = max(0, r1.x);
  r1.y = dot(r1.yzw, r0.yzw);
  r0.x = 255 * r0.x;
  r0.x = round(r0.x);
  r0.x = (int)r0.x;
  r2.xyz = r4.xyz * r4.xyz;
  r0.y = dot(v6.xyz, r0.yzw);
  r0.y = saturate(r0.y * v5.x + v5.y);
  r0.y = 1 + -r0.y;
  r0.y = r1.x * r0.y;
  r1.xzw = v2.xyz * r0.yyy;
  r0.z = saturate(r1.y);
  r1.xzw = r1.xzw * r0.zzz;
  r0.x = (int)r0.x == 2;
  if (r0.x != 0) {
    r0.x = 1 + g_subRolloff;
    r0.w = g_subRolloff + r1.y;
    r0.x = 1 / r0.x;
    r0.x = saturate(r0.w * r0.x);
    r0.w = r0.x * -2 + 3;
    r0.x = r0.x * r0.x;
    r1.y = r0.z * -2 + 3;
    r0.z = r0.z * r0.z;
    r0.z = r1.y * r0.z;
    r0.x = r0.w * r0.x + -r0.z;
    r0.x = max(0, r0.x);
    r0.xzw = v3.xyz * r0.xxx;
    r1.xzw = r0.xzw * r0.yyy + r1.xzw;
  }
  o0.xyz = r2.xyz * r1.xzw;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Thu Oct 22 01:01:33 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:   80 Size:    16 [unused]
//   float g_subRolloff;                // Offset:   96 Size:     4
//   float g_colorScale;                // Offset:  100 Size:     4 [unused]
//   uint4 g_shadowmapDimensions;       // Offset:  112 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_depthTexture                    texture  float4          2d    0        1
// g_gbufferTexture0                 texture  float4          2d    1        1
// g_gbufferTexture1                 texture  float4          2d    2        1
// g_gbufferTexture2                 texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float       
// TEXCOORD                 7   xyzw        8     NONE   float       
// TEXCOORD                 8   xyzw        9     NONE   float       
// TEXCOORD                 9   xyzw       10     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[7], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 5
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[0].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.z, r0.xyww, t0.yzxw
ld_indexable(texture2d)(float,float,float,float) r3.xyz, r0.xyww, t1.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyz, r0.xyww, t2.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t3.wxyz
mad r0.yz, r1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mul r2.xy, r0.yzyy, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r2.w, l(1.000000)
dp4 r1.x, r2.xyzw, cb0[1].xyzw
dp4 r1.y, r2.xyzw, cb0[2].xyzw
dp4 r1.z, r2.xyzw, cb0[3].xyzw
dp4 r0.y, r2.xyzw, cb0[4].xyzw
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r0.yzw, -r1.xxyz, r0.yyyy, v1.xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.y, r1.x
mul r0.yzw, r0.yyzw, r1.yyyy
mad r1.yzw, r3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
dp3 r2.x, r1.yzwy, r1.yzwy
rsq r2.x, r2.x
mul r1.yzw, r1.yyzw, r2.xxxx
add r1.x, r1.x, v3.w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
add r1.x, r1.x, v1.w
max r1.x, r1.x, l(0.000000)
dp3 r1.y, r1.yzwy, r0.yzwy
mul r0.x, r0.x, l(255.000000)
round_ne r0.x, r0.x
ftoi r0.x, r0.x
mul r2.xyz, r4.xyzx, r4.xyzx
dp3 r0.y, v6.xyzx, r0.yzwy
mad_sat r0.y, r0.y, v5.x, v5.y
add r0.y, -r0.y, l(1.000000)
mul r0.y, r0.y, r1.x
mul r1.xzw, r0.yyyy, v2.xxyz
mov_sat r0.z, r1.y
mul r1.xzw, r0.zzzz, r1.xxzw
ieq r0.x, r0.x, l(2)
if_nz r0.x
  add r0.x, cb0[6].x, l(1.000000)
  add r0.w, r1.y, cb0[6].x
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mul_sat r0.x, r0.x, r0.w
  mad r0.w, r0.x, l(-2.000000), l(3.000000)
  mul r0.x, r0.x, r0.x
  mad r1.y, r0.z, l(-2.000000), l(3.000000)
  mul r0.z, r0.z, r0.z
  mul r0.z, r0.z, r1.y
  mad r0.x, r0.w, r0.x, -r0.z
  max r0.x, r0.x, l(0.000000)
  mul r0.xzw, r0.xxxx, v3.xxyz
  mad r1.xzw, r0.xxzw, r0.yyyy, r1.xxzw
endif 
mul o0.xyz, r1.xzwx, r2.xyzx
mov o0.w, l(0)
ret 
// Approximately 58 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
