// bug lights skyEnvmap
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float3 g_lightDir : packoffset(c6);
  float4 g_keyColor : packoffset(c7);
  float4 g_keyTranslucencyParams : packoffset(c8);
  float4 g_subParams : packoffset(c9);
  float4 g_envmapParams : packoffset(c10);
  float g_skyEnvmap8BitTexInvScale : packoffset(c11);
  float g_colorScale : packoffset(c11.y);
  float4 g_envmapsMipmapCount : packoffset(c12);
}
SamplerState g_skyEnvmapSampler_s : register(s0);
SamplerState g_customSampler_s : register(s1);
SamplerState g_ssaoSampler_s : register(s2);
TextureCube<float4> g_skyEnvmap : register(t0);
TextureCube<float4> g_customEnvmap : register(t1);
Texture2D<float4> g_ssaoTexture : register(t2);
Texture2DMS<float4,4> g_depthTexture : register(t3);
Texture2DMS<float4,4> g_gbufferTexture0 : register(t4);
Texture2DMS<float4,4> g_gbufferTexture1 : register(t5);
Texture2DMS<float4,4> g_gbufferTexture2 : register(t6);
Texture2DMS<float4,4> g_gbufferTexture3 : register(t7);
Texture2D<float> g_msaaClassifyTexture : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  const float4 icb[] = { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r1.z = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.z = 0 < r1.z;
  
  // DHR BUG FIX
  //r1.zw = r1.zz ? float2(5.60519386e-045,0.249999747) : //float2(1.40129846e-045,0.999998987);
  
  r1.zw = r1.zz ? float2(4.0,0.249999747) : float2(1.0,0.999998987);
  
  r2.xy = (int2)g_envmapsMipmapCount.xy;
  r2.xy = (int2)r2.xy + int2(-1,-1);
  r2.zw = trunc(g_envmapsMipmapCount.xy);
  r2.xy = (int2)r2.xy;
  r3.w = 1;
  r5.xyz = float3(0,0,0);
  r4.xyzw = float4(0,0,0,0);
  while (true) {
    r5.w = (int)r4.w >= (int)r1.z;
    if (r5.w != 0) break;
    r6.xy = icb[r4.w+0].xy * g_invScreenSize.xy + r1.xy;
    r7.xyzw = g_gbufferTexture0.Load(r0.xy, r4.w).xyzw;
    r8.xyzw = g_gbufferTexture1.Load(r0.xy, r4.w).xyzw;
    r9.xyz = g_gbufferTexture2.Load(r0.xy, r4.w).xzw;
    r10.xyz = g_gbufferTexture3.Load(r0.xy, r4.w).xyz;
    r3.z = g_depthTexture.Load(r0.xy, r4.w).x;
    r5.w = 255 * r9.z;
    r5.w = round(r5.w);
    r5.w = (int)r5.w;
    r8.xyzw = r8.xyzw * r8.xyzw;
    r6.zw = (int2)r5.ww == int2(1,2);
    if (r6.z != 0) {
      r11.xyz = r8.www * r8.xyz;
    } else {
      r11.xyz = r8.www;
    }
    r5.w = 0 < r11.x;
    r5.w = r5.w ? r7.w : 0;
    r6.z = log2(abs(r9.x));
    r6.z = g_envmapParams.z * r6.z;
    r6.z = exp2(r6.z);
    r7.xyz = r7.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r7.w = dot(r7.xyz, r7.xyz);
    r7.w = rsqrt(r7.w);
    r7.xyz = r7.xyz * r7.www;
    r6.xy = r6.xy * float2(2,2) + float2(-1,-1);
    r3.xy = float2(1,-1) * r6.xy;
    r12.x = dot(r3.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r12.y = dot(r3.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r12.z = dot(r3.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r3.x = dot(r3.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r3.x = 1 / r3.x;
	
	float4 r28, r26, r27;
r26.xyz = r12.xyz * r3.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r12.xyz = r26.xyz / r3.xxx;

    r3.xyz = r12.xyz * r3.xxx;
    r6.x = dot(-r3.xyz, -r3.xyz);
    r6.x = rsqrt(r6.x);
    r3.xyz = r6.xxx * -r3.xyz;
    r6.x = dot(-r3.xyz, r7.xyz);
    r6.x = r6.x + r6.x;
    r3.xyz = r7.xyz * -r6.xxx + -r3.xyz;
    r7.xyzw = r9.yyyy == float4(0,0.00392156886,0.00784313772,0.0117647061);
    r7.xyzw = r7.xyzw ? g_envmapParams.xxxx : 0;
    r6.xy = -r5.ww * float2(15,15) + r2.zw;
    r6.xy = float2(5,5) + r6.xy;
    r6.xy = max(float2(0,0), r6.xy);
    r6.xy = min(r6.xy, r2.xy);
    r9.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r3.xyz, r6.y).xyzw;
    r5.w = dot(r7.xyzw, r9.xyzw);
    r3.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r3.xyz, r6.x).xyz;
    r3.xyz = r3.xyz * r6.zzz;
    r7.xyz = g_envmapParams.yyy + r10.xyz;
    r7.xyz = r7.xyz * r5.www;
    r5.w = 1 + -r6.z;
    r6.xyz = r7.xyz * r5.www;
    r3.xyz = r3.xyz * g_skyEnvmap8BitTexInvScale + r6.xyz;
    r6.xyz = r8.xyz * r10.xyz + r5.xyz;
    r7.xyz = r11.xyz * r3.xyz;
    r4.xyz = r11.xyz * r3.xyz + r4.xyz;
    r3.x = r6.w ? 0 : 1;
    r5.xyz = r7.xyz * r3.xxx + r6.xyz;
    r4.w = (int)r4.w + 1;
  }
  r0.xyzw = g_ssaoTexture.Gather(g_ssaoSampler_s, r1.xy).xyzw;
  r0.x = min(r0.x, r0.y);
  r0.x = min(r0.x, r0.z);
  o0.w = min(r0.x, r0.w);
  o0.xyz = r5.xyz * r1.www;
  o1.xyz = r4.xyz * r1.www;
  o1.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Tue Oct 27 05:14:32 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float3 g_lightDir;                 // Offset:   96 Size:    12 [unused]
//   float4 g_keyColor;                 // Offset:  112 Size:    16 [unused]
//   float4 g_keyTranslucencyParams;    // Offset:  128 Size:    16 [unused]
//   float4 g_subParams;                // Offset:  144 Size:    16 [unused]
//   float4 g_envmapParams;             // Offset:  160 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  176 Size:     4
//   float g_colorScale;                // Offset:  180 Size:     4 [unused]
//   float4 g_envmapsMipmapCount;       // Offset:  192 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyEnvmapSampler                sampler      NA          NA    0        1
// g_customSampler                   sampler      NA          NA    1        1
// g_ssaoSampler                     sampler      NA          NA    2        1
// g_skyEnvmap                       texture  float4        cube    0        1
// g_customEnvmap                    texture  float4        cube    1        1
// g_ssaoTexture                     texture  float4          2d    2        1
// g_depthTexture                    texture  float4       2dMS4    3        1
// g_gbufferTexture0                 texture  float4       2dMS4    4        1
// g_gbufferTexture1                 texture  float4       2dMS4    5        1
// g_gbufferTexture2                 texture  float4       2dMS4    6        1
// g_gbufferTexture3                 texture  float4       2dMS4    7        1
// g_msaaClassifyTexture             texture   float          2d    8        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} }
dcl_constantbuffer cb0[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2dms(4) (float,float,float,float) t3
dcl_resource_texture2dms(4) (float,float,float,float) t4
dcl_resource_texture2dms(4) (float,float,float,float) t5
dcl_resource_texture2dms(4) (float,float,float,float) t6
dcl_resource_texture2dms(4) (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 13
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[1].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r0.xyww, t8.yzxw
lt r1.z, l(0.000000), r1.z
movc r1.zw, r1.zzzz, l(0,0,4,00.249999747), l(0,0,1,0.999999)
ftoi r2.xy, cb0[12].xyxx
iadd r2.xy, r2.xyxx, l(-1, -1, 0, 0)
round_z r2.zw, cb0[12].xxxy
itof r2.xy, r2.xyxx
mov r3.w, l(1.000000)
mov r5.xyz, l(0,0,0,0)
mov r4.xyzw, l(0,0,0,0)
loop 
  ige r5.w, r4.w, r1.z
  breakc_nz r5.w
  mad r6.xy, icb[r4.w + 0].xyxx, cb0[1].xyxx, r1.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyzw, r0.xyww, t4.xyzw, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r8.xyzw, r0.xyww, t5.xyzw, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r9.xyz, r0.xyww, t6.xzwy, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r10.xyz, r0.xyww, t7.xyzw, r4.w
  ldms_indexable(texture2dms)(float,float,float,float) r3.z, r0.xyzw, t3.yzxw, r4.w
  mul r5.w, r9.z, l(255.000000)
  round_ne r5.w, r5.w
  ftoi r5.w, r5.w
  mul r8.xyzw, r8.xyzw, r8.xyzw
  ieq r6.zw, r5.wwww, l(0, 0, 1, 2)
  if_nz r6.z
    mul r11.xyz, r8.xyzx, r8.wwww
  else 
    mov r11.xyz, r8.wwww
  endif 
  lt r5.w, l(0.000000), r11.x
  and r5.w, r7.w, r5.w
  log r6.z, |r9.x|
  mul r6.z, r6.z, cb0[10].z
  exp r6.z, r6.z
  mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r7.w, r7.xyzx, r7.xyzx
  rsq r7.w, r7.w
  mul r7.xyz, r7.wwww, r7.xyzx
  mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r3.xy, r6.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r12.x, r3.xyzw, cb0[2].xyzw
  dp4 r12.y, r3.xyzw, cb0[3].xyzw
  dp4 r12.z, r3.xyzw, cb0[4].xyzw
  dp4 r3.x, r3.xyzw, cb0[5].xyzw
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  mul r3.xyz, r3.xxxx, r12.xyzx
  dp3 r6.x, -r3.xyzx, -r3.xyzx
  rsq r6.x, r6.x
  mul r3.xyz, -r3.xyzx, r6.xxxx
  dp3 r6.x, -r3.xyzx, r7.xyzx
  add r6.x, r6.x, r6.x
  mad r3.xyz, r7.xyzx, -r6.xxxx, -r3.xyzx
  eq r7.xyzw, r9.yyyy, l(0.000000, 0.00392156886, 0.00784313772, 0.0117647061)
  and r7.xyzw, r7.xyzw, cb0[10].xxxx
  mad r6.xy, -r5.wwww, l(15.000000, 15.000000, 0.000000, 0.000000), r2.zwzz
  add r6.xy, r6.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
  max r6.xy, r6.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r6.xy, r2.xyxx, r6.xyxx
  sample_l_indexable(texturecube)(float,float,float,float) r9.xyzw, r3.xyzx, t1.xyzw, s1, r6.y
  dp4 r5.w, r7.xyzw, r9.xyzw
  sample_l_indexable(texturecube)(float,float,float,float) r3.xyz, r3.xyzx, t0.xyzw, s0, r6.x
  mul r3.xyz, r6.zzzz, r3.xyzx
  add r7.xyz, r10.xyzx, cb0[10].yyyy
  mul r7.xyz, r5.wwww, r7.xyzx
  add r5.w, -r6.z, l(1.000000)
  mul r6.xyz, r5.wwww, r7.xyzx
  mad r3.xyz, r3.xyzx, cb0[11].xxxx, r6.xyzx
  mad r6.xyz, r8.xyzx, r10.xyzx, r5.xyzx
  mul r7.xyz, r3.xyzx, r11.xyzx
  mad r4.xyz, r11.xyzx, r3.xyzx, r4.xyzx
  movc r3.x, r6.w, l(0), l(1.000000)
  mad r5.xyz, r7.xyzx, r3.xxxx, r6.xyzx
  iadd r4.w, r4.w, l(1)
endloop 
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r1.xyxx, t2.xyzw, s2.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
mul o0.xyz, r1.wwww, r5.xyzx
mul o1.xyz, r1.wwww, r4.xyzx
mov o1.w, l(1.000000)
ret 
// Approximately 85 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
