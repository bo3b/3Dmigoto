// tank and ship HUD
cbuffer viewConstants : register(b2)
{
  float1 time : packoffset(c0);
  float3 vc_pad0_ : packoffset(c0.y);
  float4 screenSize : packoffset(c1);
  float3 debugNonFiniteColor : packoffset(c2);
  float1 vc_pad2_ : packoffset(c2.w);
  float4x4 viewMatrix : packoffset(c3);
  float4x4 projMatrix : packoffset(c7);
  float4x4 viewProjMatrix : packoffset(c11);
  float4x4 crViewProjMatrix : packoffset(c15);
  float4 projectionKxKyKzKw : packoffset(c19);
  float3 cameraPos : packoffset(c20);
  float1 vc_pad8_ : packoffset(c20.w);
  float3 transparentStartAndSlopeAndClamp : packoffset(c21);
  float1 vc_pad9_ : packoffset(c21.w);
  float4 transparentCurve : packoffset(c22);
}

cbuffer externalConstants : register(b1)
{
  float3 external_OptionVehicleHUDColor : packoffset(c0);
  float1 vc_pad0 : packoffset(c0.w);
  float3 external_OptionVehicleHUDWarnColor : packoffset(c1);
  float1 vc_pad1 : packoffset(c1.w);
  float4 external_HUD_Warning : packoffset(c2);
  float4 external_FLIRData : packoffset(c3);
  float external_OptionVehicleHUDAlpha : packoffset(c4);
  float3 vc_pad4 : packoffset(c4.y);
}
SamplerState sampler0_s : register(s0);
Texture2D<float4> texture_vehicleHud : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = float3(0.800000012,0.800000012,0.800000012) * external_OptionVehicleHUDColor.xyz;
  r1.xyz = texture_vehicleHud.Sample(sampler0_s, v1.xy).xyw;
  r0.w = r1.y * r1.y;
  r0.w = r0.w * r0.w;
  r0.xyz = r0.www * r0.xyz;
  r0.xyz = external_OptionVehicleHUDColor.xyz * float3(0.200000003,0.200000003,0.200000003) + r0.xyz;
  r2.xyz = external_OptionVehicleHUDWarnColor.xyz + -r0.xyz;
  r0.xyz = external_HUD_Warning.xxx * r2.xyz + r0.xyz;
  r0.w = r1.x + -r1.y;
  r2.xyz = external_OptionVehicleHUDWarnColor.xyz * r0.www;
  r0.xyz = r1.yyy * r0.xyz + r2.xyz;
  r1.xyw = float3(0.421000004,0,0.421000004) + -r0.xyz;
  r0.w = saturate(10 * external_FLIRData.x);
  r0.xyz = r0.www * r1.xyw + r0.xyz;
  r0.w = 90 * time;
  r0.w = sin(r0.w);
  r0.w = r0.w * 0.5 + 0.5;
  r0.w = r0.w * 0.0500000119 + 0.949999988;
  r0.w = r0.w * r1.z;
  r0.w = external_OptionVehicleHUDAlpha * r0.w;
  r0.w = v1.z * r0.w;
  o0.xyz = r0.xyz * r0.www;
  o0.w = r0.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Thu Oct 29 04:25:25 2015
//
//
// Buffer Definitions: 
//
// cbuffer viewConstants
// {
//
//   float1 time;                       // Offset:    0 Size:     4
//   float3 vc_pad0_;                   // Offset:    4 Size:    12 [unused]
//   float4 screenSize;                 // Offset:   16 Size:    16 [unused]
//   float3 debugNonFiniteColor;        // Offset:   32 Size:    12 [unused]
//   float1 vc_pad2_;                   // Offset:   44 Size:     4 [unused]
//   float4x4 viewMatrix;               // Offset:   48 Size:    64 [unused]
//   float4x4 projMatrix;               // Offset:  112 Size:    64 [unused]
//   float4x4 viewProjMatrix;           // Offset:  176 Size:    64 [unused]
//   float4x4 crViewProjMatrix;         // Offset:  240 Size:    64 [unused]
//   float4 projectionKxKyKzKw;         // Offset:  304 Size:    16 [unused]
//   float3 cameraPos;                  // Offset:  320 Size:    12 [unused]
//   float1 vc_pad8_;                   // Offset:  332 Size:     4 [unused]
//   float3 transparentStartAndSlopeAndClamp;// Offset:  336 Size:    12 [unused]
//   float1 vc_pad9_;                   // Offset:  348 Size:     4 [unused]
//   float4 transparentCurve;           // Offset:  352 Size:    16 [unused]
//
// }
//
// cbuffer externalConstants
// {
//
//   float3 external_OptionVehicleHUDColor;// Offset:    0 Size:    12
//   float1 vc_pad0;                    // Offset:   12 Size:     4 [unused]
//   float3 external_OptionVehicleHUDWarnColor;// Offset:   16 Size:    12
//   float1 vc_pad1;                    // Offset:   28 Size:     4 [unused]
//   float4 external_HUD_Warning;       // Offset:   32 Size:    16
//   float4 external_FLIRData;          // Offset:   48 Size:    16
//   float external_OptionVehicleHUDAlpha;// Offset:   64 Size:     4
//   float3 vc_pad4;                    // Offset:   68 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// sampler0                          sampler      NA          NA    0        1
// texture_vehicleHud                texture  float4          2d    1        1
// externalConstants                 cbuffer      NA          NA    1        1
// viewConstants                     cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 3
mul r0.xyz, cb1[0].xyzx, l(0.800000, 0.800000, 0.800000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t1.xywz, s0
mul r0.w, r1.y, r1.y
mul r0.w, r0.w, r0.w
mul r0.xyz, r0.xyzx, r0.wwww
mad r0.xyz, cb1[0].xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r0.xyzx
add r2.xyz, -r0.xyzx, cb1[1].xyzx
mad r0.xyz, cb1[2].xxxx, r2.xyzx, r0.xyzx
add r0.w, -r1.y, r1.x
mul r2.xyz, r0.wwww, cb1[1].xyzx
mad r0.xyz, r1.yyyy, r0.xyzx, r2.xyzx
add r1.xyw, -r0.xyxz, l(0.421000, 0.000000, 0.000000, 0.421000)
mul_sat r0.w, cb1[3].x, l(10.000000)
mad r0.xyz, r0.wwww, r1.xywx, r0.xyzx
mul r0.w, cb2[0].x, l(90.000000)
sincos r0.w, null, r0.w
mad r0.w, r0.w, l(0.500000), l(0.500000)
mad r0.w, r0.w, l(0.0500000119), l(0.950000)
mul r0.w, r1.z, r0.w
mul r0.w, r0.w, cb1[4].x
mul r0.w, r0.w, v1.z
mul o0.xyz, r0.wwww, r0.xyzx
mov o0.w, r0.w
ret 
// Approximately 24 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
