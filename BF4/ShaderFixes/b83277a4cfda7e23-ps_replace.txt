// lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float g_colorScale : packoffset(c6.y);
  uint4 g_shadowmapDimensions : packoffset(c7);
}
SamplerState g_cookieSampler_s : register(s0);
Texture2D<float4> g_cookieTexture : register(t0);
Texture2DMS<float4,4> g_depthTexture : register(t1);
Texture2DMS<float4,4> g_gbufferTexture0 : register(t2);
Texture2DMS<float4,4> g_gbufferTexture1 : register(t3);
Texture2DMS<float4,4> g_gbufferTexture2 : register(t4);
Texture2D<float> g_msaaClassifyTexture : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r1.x = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.x = 0 < r1.x;
  r1.xy = r1.xx ? float2(4,0.25) : float2(1,1);
  r1.z = 1 + g_subRolloff;
  r1.z = 1 / r1.z;
  r2.w = 1;
  r3.w = 1;
  r4.xyz = float3(0,0,0);
  r1.w = 0;
  while (true) {
    r4.w = (int)r1.w >= (int)r1.x;
    if (r4.w != 0) break;
    r5.xy = icb[r1.w+0].xy * g_invScreenSize.xy;
    r5.xy = v0.xy * g_invScreenSize.xy + r5.xy;
    r2.z = g_depthTexture.Load(r0.xy, r1.w).x;
    r6.xyz = g_gbufferTexture0.Load(r0.xy, r1.w).xyz;
    r7.xyz = g_gbufferTexture1.Load(r0.xy, r1.w).xyz;
    r4.w = g_gbufferTexture2.Load(r0.xy, r1.w).w;
    r5.xy = r5.xy * float2(2,2) + float2(-1,-1);
    r2.xy = float2(1,-1) * r5.xy;
    r5.x = dot(r2.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r5.y = dot(r2.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r5.z = dot(r2.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r2.x = dot(r2.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r2.x = 1 / r2.x;
	
	float4 r28, r26, r27;
r26.xyz = r5.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r5.xyz = r26.xyz / r2.xxx;

    r3.xyz = r5.xyz * r2.xxx;
    r2.xyz = -r5.xyz * r2.xxx + v1.xyz;
    r5.x = dot(r2.xyz, r2.xyz);
    r5.y = rsqrt(r5.x);
    r2.xyz = r5.yyy * r2.xyz;
    r5.yzw = r6.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r6.x = dot(r5.yzw, r5.yzw);
    r6.x = rsqrt(r6.x);
    r5.yzw = r6.xxx * r5.yzw;
    r5.x = v3.w + r5.x;
    r5.x = 1 / r5.x;
    r5.x = v1.w + r5.x;
    r5.x = max(0, r5.x);
    r2.x = dot(r5.yzw, r2.xyz);
    r2.y = 255 * r4.w;
    r2.y = round(r2.y);
    r2.y = (int)r2.y;
    r5.yzw = r7.xyz * r7.xyz;
    r6.x = dot(r3.xyzw, v7.xyzw);
    r6.y = dot(r3.xyzw, v8.xyzw);
    r2.z = dot(r3.xyzw, v9.xyzw);
    r3.x = dot(r3.xyzw, v10.xyzw);
    r3.x = 1 / r3.x;
    r3.xy = r6.xy * r3.xx;
    r3.z = max(abs(r3.x), abs(r3.y));
    r3.z = 1 + -r3.z;
    r2.z = min(r3.z, r2.z);
    r2.z = r2.z < 0;
    if (r2.z != 0) discard;
    r3.xy = r3.xy * float2(0.5,0.5) + float2(0.5,0.5);
    r3.xyz = g_cookieTexture.SampleLevel(g_cookieSampler_s, r3.xy, 0).xyz;
    r6.xyz = v2.xyz * r5.xxx;
    r2.z = saturate(r2.x);
    r6.xyz = r6.xyz * r2.zzz;
    r6.xyz = r6.xyz * r3.xyz;
    r2.y = (int)r2.y == 2;
    if (r2.y != 0) {
      r2.x = g_subRolloff + r2.x;
      r2.x = saturate(r2.x * r1.z);
      r2.y = r2.x * -2 + 3;
      r2.x = r2.x * r2.x;
      r4.w = r2.z * -2 + 3;
      r2.z = r2.z * r2.z;
      r2.z = r4.w * r2.z;
      r2.x = r2.y * r2.x + -r2.z;
      r2.x = max(0, r2.x);
      r2.xyz = v3.xyz * r2.xxx;
      r2.xyz = r2.xyz * r5.xxx;
      r6.xyz = r2.xyz * r3.xyz + r6.xyz;
    }
    r4.xyz = r5.yzw * r6.xyz + r4.xyz;
    r1.w = (int)r1.w + 1;
  }
  o0.xyz = r4.xyz * r1.yyy;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Thu Oct 29 05:03:41 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:   80 Size:    16 [unused]
//   float g_subRolloff;                // Offset:   96 Size:     4
//   float g_colorScale;                // Offset:  100 Size:     4 [unused]
//   uint4 g_shadowmapDimensions;       // Offset:  112 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cookieSampler                   sampler      NA          NA    0        1
// g_cookieTexture                   texture  float4          2d    0        1
// g_depthTexture                    texture  float4       2dMS4    1        1
// g_gbufferTexture0                 texture  float4       2dMS4    2        1
// g_gbufferTexture1                 texture  float4       2dMS4    3        1
// g_gbufferTexture2                 texture  float4       2dMS4    4        1
// g_msaaClassifyTexture             texture   float          2d    5        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyzw        5     NONE   float       
// TEXCOORD                 5   xyzw        6     NONE   float       
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} }
dcl_constantbuffer cb0[7], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2dms(4) (float,float,float,float) t1
dcl_resource_texture2dms(4) (float,float,float,float) t2
dcl_resource_texture2dms(4) (float,float,float,float) t3
dcl_resource_texture2dms(4) (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.xyzw
dcl_output o0.xyzw
dcl_temps 8
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t5.xyzw
lt r1.x, l(0.000000), r1.x
movc r1.xy, r1.xxxx, l(4,0.250000,0,0), l(1,1.000000,0,0)
add r1.z, cb0[6].x, l(1.000000)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mov r2.w, l(1.000000)
mov r3.w, l(1.000000)
mov r4.xyz, l(0,0,0,0)
mov r1.w, l(0)
loop 
  ige r4.w, r1.w, r1.x
  breakc_nz r4.w
  mul r5.xy, cb0[0].xyxx, icb[r1.w + 0].xyxx
  mad r5.xy, v0.xyxx, cb0[0].xyxx, r5.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r2.z, r0.xyww, t1.yzxw, r1.w
  ldms_indexable(texture2dms)(float,float,float,float) r6.xyz, r0.xyww, t2.xyzw, r1.w
  ldms_indexable(texture2dms)(float,float,float,float) r7.xyz, r0.xyww, t3.xyzw, r1.w
  ldms_indexable(texture2dms)(float,float,float,float) r4.w, r0.xyzw, t4.xyzw, r1.w
  mad r5.xy, r5.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r2.xy, r5.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r5.x, r2.xyzw, cb0[1].xyzw
  dp4 r5.y, r2.xyzw, cb0[2].xyzw
  dp4 r5.z, r2.xyzw, cb0[3].xyzw
  dp4 r2.x, r2.xyzw, cb0[4].xyzw
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
  mul r3.xyz, r2.xxxx, r5.xyzx
  mad r2.xyz, -r5.xyzx, r2.xxxx, v1.xyzx
  dp3 r5.x, r2.xyzx, r2.xyzx
  rsq r5.y, r5.x
  mul r2.xyz, r2.xyzx, r5.yyyy
  mad r5.yzw, r6.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
  dp3 r6.x, r5.yzwy, r5.yzwy
  rsq r6.x, r6.x
  mul r5.yzw, r5.yyzw, r6.xxxx
  add r5.x, r5.x, v3.w
  div r5.x, l(1.000000, 1.000000, 1.000000, 1.000000), r5.x
  add r5.x, r5.x, v1.w
  max r5.x, r5.x, l(0.000000)
  dp3 r2.x, r5.yzwy, r2.xyzx
  mul r2.y, r4.w, l(255.000000)
  round_ne r2.y, r2.y
  ftoi r2.y, r2.y
  mul r5.yzw, r7.xxyz, r7.xxyz
  dp4 r6.x, r3.xyzw, v7.xyzw
  dp4 r6.y, r3.xyzw, v8.xyzw
  dp4 r2.z, r3.xyzw, v9.xyzw
  dp4 r3.x, r3.xyzw, v10.xyzw
  div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
  mul r3.xy, r3.xxxx, r6.xyxx
  max r3.z, |r3.y|, |r3.x|
  add r3.z, -r3.z, l(1.000000)
  min r2.z, r2.z, r3.z
  lt r2.z, r2.z, l(0.000000)
  discard_nz r2.z
  mad r3.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t0.xyzw, s0, l(0.000000)
  mul r6.xyz, r5.xxxx, v2.xyzx
  mov_sat r2.z, r2.x
  mul r6.xyz, r2.zzzz, r6.xyzx
  mul r6.xyz, r3.xyzx, r6.xyzx
  ieq r2.y, r2.y, l(2)
  if_nz r2.y
    add r2.x, r2.x, cb0[6].x
    mul_sat r2.x, r1.z, r2.x
    mad r2.y, r2.x, l(-2.000000), l(3.000000)
    mul r2.x, r2.x, r2.x
    mad r4.w, r2.z, l(-2.000000), l(3.000000)
    mul r2.z, r2.z, r2.z
    mul r2.z, r2.z, r4.w
    mad r2.x, r2.y, r2.x, -r2.z
    max r2.x, r2.x, l(0.000000)
    mul r2.xyz, r2.xxxx, v3.xyzx
    mul r2.xyz, r5.xxxx, r2.xyzx
    mad r6.xyz, r2.xyzx, r3.xyzx, r6.xyzx
  endif 
  mad r4.xyz, r5.yzwy, r6.xyzx, r4.xyzx
  iadd r1.w, r1.w, l(1)
endloop 
mul o0.xyz, r1.yyyy, r4.xyzx
mov o0.w, l(0)
ret 
// Approximately 83 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 