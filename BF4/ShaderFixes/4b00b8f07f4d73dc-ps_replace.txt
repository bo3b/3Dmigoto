// shadows
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4x4 g_viewToShadowMatrix : packoffset(c6);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c10);
  float4 g_shadowmapPoissonScale : packoffset(c11);
  float4 g_shadowmapNoiseTilingFactor : packoffset(c12);
  float3 g_shadowBoxSize : packoffset(c13);
  float3 g_shadowBoxHalfSize : packoffset(c14);
  float4 g_shadowFadeOffsetAndSlope : packoffset(c15);
  float3 g_lightDir : packoffset(c16);
  float4x4 g_shadowmapTransform : packoffset(c17);
  uint4 g_shadowmapDimensions : packoffset(c21);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2DMS<float4,2> g_depthTexture : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  uint v1 : SV_SampleIndex0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r0.z = g_depthTexture.Load(r0.xy, v1.x).x;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = float2(1,-1) * r1.xy;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r1.x = 1 / r1.x;
  r2.x = dot(r0.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  
  float4 r28, r26, r27;
r26.xyz = r2.xyz * r1.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r2.xyz = r26.xyz / r1.xxx;

  r0.xyz = r2.xyz * r1.xxx;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_shadowmapTransform._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_shadowmapTransform._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, g_shadowmapTransform._m02_m12_m22_m32);
  r0.x = (uint)g_shadowmapDimensions.x;
  r0.yz = r0.xx * r1.xy + float2(0.5,0.5);
  r1.xyw = r1.xyz * g_shadowBoxSize.xyz + g_shadowBoxHalfSize.xyz;
  r1.xyw = saturate(abs(r1.xyw) * g_shadowFadeOffsetAndSlope.www + g_shadowFadeOffsetAndSlope.xyz);
  r0.x = 1 / r0.x;
  r2.xy = floor(r0.yz);
  r0.yz = -r2.xy + r0.yz;
  r0.xw = r2.xy * r0.xx;
  r2.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(2,0)).xyzw;
  r3.x = r0.y * 2 + 2;
  r3.yz = float2(4,1) + -r0.yz;
  r4.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(0,0)).xyzw;
  r5.xyzw = float4(1,4,3,2) + r0.yyyy;
  r6.xyzw = float4(1,2,3,5) + -r0.yyyy;
  r3.w = -r0.y * 2 + 2;
  r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(-2,0)).xyzw;
  r8.x = r0.y * -2 + 4;
  r8.yz = r7.wx * r3.ww;
  r8.xy = r7.zy * r8.xx + r8.yz;
  r7.z = r7.z * r6.z + r8.y;
  r7.z = r7.w * r3.w + r7.z;
  r7.z = r4.y * r5.y + r7.z;
  r7.z = r4.x * r6.w + r7.z;
  r7.z = r4.z * r5.z + r7.z;
  r7.z = r4.w * r3.y + r7.z;
  r2.y = dot(r2.yy, r0.yy);
  r7.z = r2.y + r7.z;
  r7.z = r2.x * r3.x + r7.z;
  r2.z = dot(r2.zz, r0.yy);
  r7.z = r2.z + r7.z;
  r9.y = r2.w * r5.w + r7.z;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(0,-2)).xyzw;
  r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(-2,-2)).xyzw;
  r7.z = r11.y * r6.z + r8.x;
  r7.z = r11.x * r3.w + r7.z;
  r8.xyzw = r11.wzxy * r6.xyxy;
  r8.xy = r8.xz + r8.yw;
  r8.xy = r10.zy * float2(2,2) + r8.xy;
  r8.xy = r10.wx * float2(2,2) + r8.xy;
  r4.z = r4.z * r5.y + r7.z;
  r4.z = r4.w * r6.w + r4.z;
  r4.z = r10.y * r5.z + r4.z;
  r4.z = r10.x * r3.y + r4.z;
  r2.z = r4.z + r2.z;
  r2.z = r2.w * r3.x + r2.z;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(2,-2)).xyzw;
  r2.w = r10.y * r0.y;
  r2.z = r2.w * 2 + r2.z;
  r9.x = r10.x * r5.w + r2.z;
  r2.zw = r10.zy * r0.yy + r8.xy;
  r2.zw = r10.wx * r5.xx + r2.zw;
  r2.zw = r2.zw + r9.xy;
  r8.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(-2,2)).xyzw;
  r9.xyzw = r8.wzxy * r6.xyxy;
  r4.zw = r9.xz + r9.yw;
  r3.x = r8.z * r6.z + r4.w;
  r3.x = r8.w * r3.w + r3.x;
  r4.z = r7.y * r6.z + r4.z;
  r3.w = r7.x * r3.w + r4.z;
  r6.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(0,2)).xyzw;
  r7.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r0.xw, r1.z, int2(2,2)).xyzw;
  r0.x = r6.y * 2 + r3.x;
  r0.x = r6.x * 2 + r0.x;
  r0.x = r6.z * r5.z + r0.x;
  r0.x = r6.w * r3.y + r0.x;
  r0.x = r7.y * r0.y + r0.x;
  r0.x = r7.x * r5.x + r0.x;
  r0.w = r7.z * r0.y;
  r0.x = r0.w * 2 + r0.x;
  r6.y = r7.w * r5.w + r0.x;
  r0.x = r6.z * 2 + r3.w;
  r0.x = r6.w * 2 + r0.x;
  r0.x = r4.y * r5.z + r0.x;
  r0.x = r4.x * r3.y + r0.x;
  r0.x = r7.z * r0.y + r0.x;
  r0.x = r7.w * r5.x + r0.x;
  r0.x = r2.y + r0.x;
  r6.x = r2.x * r5.w + r0.x;
  r0.xy = r6.xy + r2.zw;
  r0.y = r0.y * r0.z;
  r0.x = r0.x * r3.z + r0.y;
  o0.xyz = float3(0.0169491526,0.0169491526,0.0169491526) * r0.xxx;
  r0.x = min(r1.x, r1.y);
  o0.w = min(r0.x, r1.w);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Tue Oct 27 12:53:03 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4x4 g_viewToShadowMatrix;     // Offset:   96 Size:    64 [unused]
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:  160 Size:    16 [unused]
//   float4 g_shadowmapPoissonScale;    // Offset:  176 Size:    16 [unused]
//   float4 g_shadowmapNoiseTilingFactor;// Offset:  192 Size:    16 [unused]
//   float3 g_shadowBoxSize;            // Offset:  208 Size:    12
//   float3 g_shadowBoxHalfSize;        // Offset:  224 Size:    12
//   float4 g_shadowFadeOffsetAndSlope; // Offset:  240 Size:    16
//   float3 g_lightDir;                 // Offset:  256 Size:    12 [unused]
//   float4x4 g_shadowmapTransform;     // Offset:  272 Size:    64
//   uint4 g_shadowmapDimensions;       // Offset:  336 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_shadowmapSampler              sampler_c      NA          NA    0        1
// g_shadowmapTexture                texture  float4          2d    0        1
// g_depthTexture                    texture  float4       2dMS2    1        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// SV_SampleIndex           0   x           1   SAMPLE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
// Pixel Shader runs at sample frequency
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[22], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2dms(2) (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps_sgv v1.x, sampleIndex
dcl_output o0.xyzw
dcl_temps 12
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ldms_indexable(texture2dms)(float,float,float,float) r0.z, r0.xyzw, t1.yzxw, v1.x
mul r1.xy, v0.xyxx, cb0[1].xyxx
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[5].xyzw
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
dp4 r2.x, r0.xyzw, cb0[2].xyzw
dp4 r2.y, r0.xyzw, cb0[3].xyzw
dp4 r2.z, r0.xyzw, cb0[4].xyzw
mul r0.xyz, r1.xxxx, r2.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[17].xyzw
dp4 r1.y, r0.xyzw, cb0[18].xyzw
dp4 r1.z, r0.xyzw, cb0[19].xyzw
utof r0.x, cb0[21].x
mad r0.yz, r0.xxxx, r1.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
mad r1.xyw, r1.xyxz, cb0[13].xyxz, cb0[14].xyxz
mad_sat r1.xyw, |r1.xyxw|, cb0[15].wwww, cb0[15].xyxz
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
round_ni r2.xy, r0.yzyy
add r0.yz, r0.yyzy, -r2.xxyx
mul r0.xw, r0.xxxx, r2.xxxy
gather4_c_aoffimmi_indexable(2,0,0)(texture2d)(float,float,float,float) r2.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
mad r3.x, r0.y, l(2.000000), l(2.000000)
add r3.yz, -r0.yyzy, l(0.000000, 4.000000, 1.000000, 0.000000)
gather4_c_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r4.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
add r5.xyzw, r0.yyyy, l(1.000000, 4.000000, 3.000000, 2.000000)
add r6.xyzw, -r0.yyyy, l(1.000000, 2.000000, 3.000000, 5.000000)
mad r3.w, -r0.y, l(2.000000), l(2.000000)
gather4_c_aoffimmi_indexable(-2,0,0)(texture2d)(float,float,float,float) r7.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
mad r8.x, r0.y, l(-2.000000), l(4.000000)
mul r8.yz, r3.wwww, r7.wwxw
mad r8.xy, r7.zyzz, r8.xxxx, r8.yzyy
mad r7.z, r7.z, r6.z, r8.y
mad r7.z, r7.w, r3.w, r7.z
mad r7.z, r4.y, r5.y, r7.z
mad r7.z, r4.x, r6.w, r7.z
mad r7.z, r4.z, r5.z, r7.z
mad r7.z, r4.w, r3.y, r7.z
dp2 r2.y, r2.yyyy, r0.yyyy
add r7.z, r7.z, r2.y
mad r7.z, r2.x, r3.x, r7.z
dp2 r2.z, r2.zzzz, r0.yyyy
add r7.z, r7.z, r2.z
mad r9.y, r2.w, r5.w, r7.z
gather4_c_aoffimmi_indexable(0,-2,0)(texture2d)(float,float,float,float) r10.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
gather4_c_aoffimmi_indexable(-2,-2,0)(texture2d)(float,float,float,float) r11.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
mad r7.z, r11.y, r6.z, r8.x
mad r7.z, r11.x, r3.w, r7.z
mul r8.xyzw, r6.xyxy, r11.wzxy
add r8.xy, r8.ywyy, r8.xzxx
mad r8.xy, r10.zyzz, l(2.000000, 2.000000, 0.000000, 0.000000), r8.xyxx
mad r8.xy, r10.wxww, l(2.000000, 2.000000, 0.000000, 0.000000), r8.xyxx
mad r4.z, r4.z, r5.y, r7.z
mad r4.z, r4.w, r6.w, r4.z
mad r4.z, r10.y, r5.z, r4.z
mad r4.z, r10.x, r3.y, r4.z
add r2.z, r2.z, r4.z
mad r2.z, r2.w, r3.x, r2.z
gather4_c_aoffimmi_indexable(2,-2,0)(texture2d)(float,float,float,float) r10.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
mul r2.w, r0.y, r10.y
mad r2.z, r2.w, l(2.000000), r2.z
mad r9.x, r10.x, r5.w, r2.z
mad r2.zw, r10.zzzy, r0.yyyy, r8.xxxy
mad r2.zw, r10.wwwx, r5.xxxx, r2.zzzw
add r2.zw, r9.xxxy, r2.zzzw
gather4_c_aoffimmi_indexable(-2,2,0)(texture2d)(float,float,float,float) r8.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
mul r9.xyzw, r6.xyxy, r8.wzxy
add r4.zw, r9.yyyw, r9.xxxz
mad r3.x, r8.z, r6.z, r4.w
mad r3.x, r8.w, r3.w, r3.x
mad r4.z, r7.y, r6.z, r4.z
mad r3.w, r7.x, r3.w, r4.z
gather4_c_aoffimmi_indexable(0,2,0)(texture2d)(float,float,float,float) r6.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
gather4_c_aoffimmi_indexable(2,2,0)(texture2d)(float,float,float,float) r7.xyzw, r0.xwxx, t0.xyzw, s0.x, r1.z
mad r0.x, r6.y, l(2.000000), r3.x
mad r0.x, r6.x, l(2.000000), r0.x
mad r0.x, r6.z, r5.z, r0.x
mad r0.x, r6.w, r3.y, r0.x
mad r0.x, r7.y, r0.y, r0.x
mad r0.x, r7.x, r5.x, r0.x
mul r0.w, r0.y, r7.z
mad r0.x, r0.w, l(2.000000), r0.x
mad r6.y, r7.w, r5.w, r0.x
mad r0.x, r6.z, l(2.000000), r3.w
mad r0.x, r6.w, l(2.000000), r0.x
mad r0.x, r4.y, r5.z, r0.x
mad r0.x, r4.x, r3.y, r0.x
mad r0.x, r7.z, r0.y, r0.x
mad r0.x, r7.w, r5.x, r0.x
add r0.x, r0.x, r2.y
mad r6.x, r2.x, r5.w, r0.x
add r0.xy, r2.zwzz, r6.xyxx
mul r0.y, r0.z, r0.y
mad r0.x, r0.x, r3.z, r0.y
mul o0.xyz, r0.xxxx, l(0.0169491526, 0.0169491526, 0.0169491526, 0.000000)
min r0.x, r1.y, r1.x
min o0.w, r1.w, r0.x
ret 
// Approximately 102 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  