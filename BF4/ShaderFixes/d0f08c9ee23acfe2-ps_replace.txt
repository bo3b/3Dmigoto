// shadows
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4x4 g_viewToShadowMatrix : packoffset(c6);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c10);
  float4 g_shadowmapPoissonScale : packoffset(c11);
  float4 g_shadowmapNoiseTilingFactor : packoffset(c12);
  float3 g_shadowBoxSize : packoffset(c13);
  float3 g_shadowBoxHalfSize : packoffset(c14);
  float4 g_shadowFadeOffsetAndSlope : packoffset(c15);
  float3 g_lightDir : packoffset(c16);
  float4x4 g_shadowmapTransform : packoffset(c17);
  uint4 g_shadowmapDimensions : packoffset(c21);
}
SamplerComparisonState g_shadowmapSampler_s : register(s0);
Texture2D<float4> g_shadowmapTexture : register(t0);
Texture2D<float4> g_depthTexture : register(t1);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r0.z = g_depthTexture.Load(r0.xyz).x;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = float2(1,-1) * r1.xy;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r1.x = 1 / r1.x;
  r2.x = dot(r0.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r2.y = dot(r0.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r2.z = dot(r0.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  
  float4 r28, r26, r27;
r26.xyz = r2.xyz * r1.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r2.xyz = r26.xyz / r1.xxx;

  r0.xyz = r2.xyz * r1.xxx;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_shadowmapTransform._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_shadowmapTransform._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, g_shadowmapTransform._m02_m12_m22_m32);
  r0.xyz = r1.xyz * g_shadowBoxSize.xyz + g_shadowBoxHalfSize.xyz;
  r1.x = g_shadowmapTexture.SampleCmpLevelZero(g_shadowmapSampler_s, r1.xy, r1.z).x;
  r0.xyz = saturate(abs(r0.xyz) * g_shadowFadeOffsetAndSlope.www + g_shadowFadeOffsetAndSlope.xyz);
  r0.x = min(r0.x, r0.y);
  r1.y = min(r0.x, r0.z);
  o0.xyzw = r1.xxxy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Wed Oct 21 15:08:40 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12 [unused]
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4x4 g_viewToShadowMatrix;     // Offset:   96 Size:    64 [unused]
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:  160 Size:    16 [unused]
//   float4 g_shadowmapPoissonScale;    // Offset:  176 Size:    16 [unused]
//   float4 g_shadowmapNoiseTilingFactor;// Offset:  192 Size:    16 [unused]
//   float3 g_shadowBoxSize;            // Offset:  208 Size:    12
//   float3 g_shadowBoxHalfSize;        // Offset:  224 Size:    12
//   float4 g_shadowFadeOffsetAndSlope; // Offset:  240 Size:    16
//   float3 g_lightDir;                 // Offset:  256 Size:    12 [unused]
//   float4x4 g_shadowmapTransform;     // Offset:  272 Size:    64
//   uint4 g_shadowmapDimensions;       // Offset:  336 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_shadowmapSampler              sampler_c      NA          NA    0        1
// g_shadowmapTexture                texture  float4          2d    0        1
// g_depthTexture                    texture  float4          2d    1        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[20], immediateIndexed
dcl_sampler s0, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 3
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t1.yzxw
mul r1.xy, v0.xyxx, cb0[1].xyxx
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[5].xyzw
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
dp4 r2.x, r0.xyzw, cb0[2].xyzw
dp4 r2.y, r0.xyzw, cb0[3].xyzw
dp4 r2.z, r0.xyzw, cb0[4].xyzw
mul r0.xyz, r1.xxxx, r2.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[17].xyzw
dp4 r1.y, r0.xyzw, cb0[18].xyzw
dp4 r1.z, r0.xyzw, cb0[19].xyzw
mad r0.xyz, r1.xyzx, cb0[13].xyzx, cb0[14].xyzx
sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t0.xxxx, s0, r1.z
mad_sat r0.xyz, |r0.xyzx|, cb0[15].wwww, cb0[15].xyzx
min r0.x, r0.y, r0.x
min r1.y, r0.z, r0.x
mov o0.xyzw, r1.xxxy
ret 
// Approximately 24 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    