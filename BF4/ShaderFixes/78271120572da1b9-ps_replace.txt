//lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float g_colorScale : packoffset(c6.y);
  uint4 g_shadowmapDimensions : packoffset(c7);
}
SamplerState g_cookieSampler_s : register(s0);
SamplerComparisonState g_shadowmapSampler_s : register(s1);
Texture2D<float4> g_cookieTexture : register(t0);
Texture2D<float4> g_shadowmapTexture : register(t1);
Texture2D<float4> g_depthTexture : register(t2);
Texture2D<float4> g_gbufferTexture0 : register(t3);
Texture2D<float4> g_gbufferTexture1 : register(t4);
Texture2D<float4> g_gbufferTexture2 : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0.000000e+000,0.000000e+000);
  r2.z = g_depthTexture.Load(r0.xyw).x;
  r3.xyzw = g_gbufferTexture0.Load(r0.xyw).xyzw;
  r4.xyzw = g_gbufferTexture1.Load(r0.xyw).xyzw;
  r0.x = g_gbufferTexture2.Load(r0.xyz).w;
  r0.yz = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  r2.xy = float2(1.000000e+000,-1.000000e+000) * r0.yz;
  r2.w = 1.000000000e+000;
  r1.x = dot(r2.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r1.y = dot(r2.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r1.z = dot(r2.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.y = dot(r2.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.y = 1.000000e+000 / r0.y;
  
  float4 r28, r26, r27;
r26.xyz = r1.xyz * r0.yyy;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r1.xyz = r26.xyz / r0.yyy;

  r2.xyz = r1.xyz * r0.yyy;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = -r1.xyz * r0.yyy + v1.xyz;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.y);
  r1.xyz = r1.xyz * r0.www;
  r3.xyz = r3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r0.y = v3.w + r0.y;
  r0.y = 1.000000e+000 / r0.y;
  r0.y = v1.w + r0.y;
  r0.y = max(r0.y, 0.000000000e+000);
  r0.w = saturate(dot(r3.xyz, r1.xyz));
  r0.x = 2.550000000e+002 * r0.x;
  r0.x = round(r0.x);
  r0.x = (int)r0.x;
  r4.xyzw = r4.xyzw * r4.xyzw;
  r5.xy = (int)r0.xx == int2(1,2);
  if (r5.x != 0) {
    r5.xzw = r4.www * r4.xyz;
  } else {
    r5.xzw = r4.www;
  }
  r0.x = r3.w * 1.200000000e+001 + 1.000000000e+000;
  r0.x = exp2(r0.x);
  r0.x = r0.x * 1.442999959e+000 + 1.442999959e+000;
  r2.w = 1.000000000e+000;
  r6.x = dot(r2.xyzw, v7.xyzw);
  r6.y = dot(r2.xyzw, v8.xyzw);
  r1.w = dot(r2.xyzw, v9.xyzw);
  r2.w = dot(r2.xyzw, v10.xyzw);
  r2.w = 1.000000e+000 / r2.w;
  r6.xy = r6.xy * r2.ww;
  r2.w = r2.w * r1.w;
  r3.w = max(abs(r6.y), abs(r6.x));
  r3.w = 1.000000000e+000 + -r3.w;
  r1.w = min(r1.w, r3.w);
  r1.w = r1.w < 0.000000000e+000;
  if (r1.w != 0) discard;
  r6.xy = r6.xy * float2(5.000000e-001,5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r1.w = g_shadowmapDimensions.x;
  r3.w = 1.000000e+000 / r1.w;
  r6.z = 1.000000000e+000 + -r6.y;
  r6.zw = r1.ww * r6.xz + float2(5.000000e-001,5.000000e-001);
  r7.xy = floor(r6.zw);
  r6.zw = -r7.xy + r6.zw;
  r7.xy = r7.xy * r3.ww;
  r8.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(-2,-2)).xyzw;
  r9.xyzw = float4(1.000000e+000,2.000000e+000,3.000000e+000,5.000000e+000) + -r6.zzzz;
  r10.xyzw = r9.xyxy * r8.wzxy;
  r7.zw = r10.xz + r10.yw;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(0,-2)).xyzw;
  r7.zw = r10.zy * float2(2.000000e+000,2.000000e+000) + r7.zw;
  r7.zw = r10.wx * float2(2.000000e+000,2.000000e+000) + r7.zw;
  r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(2,-2)).xyzw;
  r12.xyzw = float4(1.000000e+000,4.000000e+000,3.000000e+000,2.000000e+000) + r6.zzzz;
  r1.w = r11.y * r6.z;
  r7.zw = r11.zy * r6.zz + r7.zw;
  r7.zw = r11.wx * r12.xx + r7.zw;
  r13.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(-2,0)).xyzw;
  r3.w = -r6.z * 2.000000000e+000 + 2.000000000e+000;
  r8.zw = r13.wx * r3.ww;
  r4.w = r6.z * -2.000000000e+000 + 4.000000000e+000;
  r8.zw = r13.zy * r4.ww + r8.zw;
  r4.w = r8.y * r9.z + r8.z;
  r4.w = r8.x * r3.w + r4.w;
  r8.x = r13.z * r9.z + r8.w;
  r8.x = r13.w * r3.w + r8.x;
  r14.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(0,0)).xyzw;
  r4.w = r14.z * r12.y + r4.w;
  r4.w = r14.w * r9.w + r4.w;
  r8.x = r14.y * r12.y + r8.x;
  r8.x = r14.x * r9.w + r8.x;
  r8.yz = float2(4.000000e+000,1.000000e+000) + -r6.zw;
  r4.w = r10.y * r12.z + r4.w;
  r4.w = r10.x * r8.y + r4.w;
  r8.x = r14.z * r12.z + r8.x;
  r8.x = r14.w * r8.y + r8.x;
  r10.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(2,0)).xyzw;
  r8.w = r6.z * 2.000000000e+000 + 2.000000000e+000;
  r9.w = dot(r10.zz, r6.zz);
  r4.w = r9.w + r4.w;
  r4.w = r10.w * r8.w + r4.w;
  r10.y = dot(r10.yy, r6.zz);
  r8.x = r10.y + r8.x;
  r8.x = r10.x * r8.w + r8.x;
  r1.w = r1.w * 2.000000000e+000 + r4.w;
  r11.x = r11.x * r12.w + r1.w;
  r1.w = r9.w + r8.x;
  r11.y = r10.w * r12.w + r1.w;
  r7.zw = r11.xy + r7.zw;
  r11.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(-2,2)).xyzw;
  r15.xyzw = r11.wzxy * r9.xyxy;
  r8.xw = r15.xz + r15.yw;
  r1.w = r13.y * r9.z + r8.x;
  r1.w = r13.x * r3.w + r1.w;
  r4.w = r11.z * r9.z + r8.w;
  r3.w = r11.w * r3.w + r4.w;
  r9.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(0,2)).xyzw;
  r1.w = r9.z * 2.000000000e+000 + r1.w;
  r1.w = r9.w * 2.000000000e+000 + r1.w;
  r3.w = r9.y * 2.000000000e+000 + r3.w;
  r3.w = r9.x * 2.000000000e+000 + r3.w;
  r1.w = r14.y * r12.z + r1.w;
  r1.w = r14.x * r8.y + r1.w;
  r3.w = r9.z * r12.z + r3.w;
  r3.w = r9.w * r8.y + r3.w;
  r9.xyzw = g_shadowmapTexture.GatherCmp(g_shadowmapSampler_s, r7.xy, r2.w, int2(2,2)).xyzw;
  r2.w = r9.z * r6.z;
  r1.w = r9.z * r6.z + r1.w;
  r1.w = r9.w * r12.x + r1.w;
  r3.w = r9.y * r6.z + r3.w;
  r3.w = r9.x * r12.x + r3.w;
  r1.w = r10.y + r1.w;
  r7.x = r10.x * r12.w + r1.w;
  r1.w = r2.w * 2.000000000e+000 + r3.w;
  r7.y = r9.w * r12.w + r1.w;
  r7.xy = r7.zw + r7.xy;
  r1.w = r7.y * r6.w;
  r1.w = r7.x * r8.z + r1.w;
  r1.w = 1.694915257e-002 * r1.w;
  r0.y = r1.w * r0.y;
  r6.xyz = g_cookieTexture.SampleLevel(g_cookieSampler_s, r6.xy, 0.000000000e+000).xyz;
  r7.xyz = v2.xyz * r0.yyy;
  r7.xyz = r7.xyz * r0.www;
  r6.xyz = r7.xyz * r6.xyz;
  r0.yzw = -r2.xyz * r0.zzz + r1.xyz;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r0.y = saturate(dot(r0.yzw, r3.xyz));
  r0.z = r0.x * 8.662509918e-002 + 8.750000000e-001;
  r0.x = r0.y * r0.x + -r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.z * r0.x;
  r0.xyz = r6.xyz * r0.xxx;
  r0.xyz = v2.www * r0.xyz;
  r0.xyz = r5.xzw * r0.xyz;
  r0.w = r5.y ? 0.000000000e+000 : 1.000000000e+000;
  r1.xyz = r0.xyz * r0.www;
  o0.xyz = r4.xyz * r6.xyz + r1.xyz;
  o1.xyz = r0.xyz;
  o1.w = 0.000000000e+000;
  o0.w = 0.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:   80 Size:    16 [unused]
//   float g_subRolloff;                // Offset:   96 Size:     4 [unused]
//   float g_colorScale;                // Offset:  100 Size:     4 [unused]
//   uint4 g_shadowmapDimensions;       // Offset:  112 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cookieSampler                   sampler      NA          NA    0        1
// g_shadowmapSampler              sampler_c      NA          NA    1        1
// g_cookieTexture                   texture  float4          2d    0        1
// g_shadowmapTexture                texture  float4          2d    1        1
// g_depthTexture                    texture  float4          2d    2        1
// g_gbufferTexture0                 texture  float4          2d    3        1
// g_gbufferTexture1                 texture  float4          2d    4        1
// g_gbufferTexture2                 texture  float4          2d    5        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float      w
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyzw        5     NONE   float       
// TEXCOORD                 5   xyzw        6     NONE   float       
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.w
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 16
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[0].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.z, r0.xyww, t2.yzxw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyww, t3.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyww, t4.xyzw
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t5.wxyz
mad r0.yz, r1.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mul r2.xy, r0.yzyy, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r2.w, l(1.000000)
dp4 r1.x, r2.xyzw, cb0[1].xyzw
dp4 r1.y, r2.xyzw, cb0[2].xyzw
dp4 r1.z, r2.xyzw, cb0[3].xyzw
dp4 r0.y, r2.xyzw, cb0[4].xyzw
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul r2.xyz, r0.yyyy, r1.xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mad r1.xyz, -r1.xyzx, r0.yyyy, v1.xyzx
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.w, r0.y
mul r1.xyz, r0.wwww, r1.xyzx
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
add r0.y, r0.y, v3.w
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add r0.y, r0.y, v1.w
max r0.y, r0.y, l(0.000000)
dp3_sat r0.w, r3.xyzx, r1.xyzx
mul r0.x, r0.x, l(255.000000)
round_ne r0.x, r0.x
ftoi r0.x, r0.x
mul r4.xyzw, r4.xyzw, r4.xyzw
ieq r5.xy, r0.xxxx, l(1, 2, 0, 0)
if_nz r5.x
  mul r5.xzw, r4.xxyz, r4.wwww
else 
  mov r5.xzw, r4.wwww
endif 
mad r0.x, r3.w, l(12.000000), l(1.000000)
exp r0.x, r0.x
mad r0.x, r0.x, l(1.443000), l(1.443000)
mov r2.w, l(1.000000)
dp4 r6.x, r2.xyzw, v7.xyzw
dp4 r6.y, r2.xyzw, v8.xyzw
dp4 r1.w, r2.xyzw, v9.xyzw
dp4 r2.w, r2.xyzw, v10.xyzw
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r6.xy, r2.wwww, r6.xyxx
mul r2.w, r1.w, r2.w
max r3.w, |r6.y|, |r6.x|
add r3.w, -r3.w, l(1.000000)
min r1.w, r1.w, r3.w
lt r1.w, r1.w, l(0.000000)
discard_nz r1.w
mad r6.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
utof r1.w, cb0[7].x
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
add r6.z, -r6.y, l(1.000000)
mad r6.zw, r1.wwww, r6.xxxz, l(0.000000, 0.000000, 0.500000, 0.500000)
round_ni r7.xy, r6.zwzz
add r6.zw, r6.zzzw, -r7.xxxy
mul r7.xy, r3.wwww, r7.xyxx
gather4_c_aoffimmi_indexable(-2,-2,0)(texture2d)(float,float,float,float) r8.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
add r9.xyzw, -r6.zzzz, l(1.000000, 2.000000, 3.000000, 5.000000)
mul r10.xyzw, r8.wzxy, r9.xyxy
add r7.zw, r10.yyyw, r10.xxxz
gather4_c_aoffimmi_indexable(0,-2,0)(texture2d)(float,float,float,float) r10.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mad r7.zw, r10.zzzy, l(0.000000, 0.000000, 2.000000, 2.000000), r7.zzzw
mad r7.zw, r10.wwwx, l(0.000000, 0.000000, 2.000000, 2.000000), r7.zzzw
gather4_c_aoffimmi_indexable(2,-2,0)(texture2d)(float,float,float,float) r11.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
add r12.xyzw, r6.zzzz, l(1.000000, 4.000000, 3.000000, 2.000000)
mul r1.w, r6.z, r11.y
mad r7.zw, r11.zzzy, r6.zzzz, r7.zzzw
mad r7.zw, r11.wwwx, r12.xxxx, r7.zzzw
gather4_c_aoffimmi_indexable(-2,0,0)(texture2d)(float,float,float,float) r13.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mad r3.w, -r6.z, l(2.000000), l(2.000000)
mul r8.zw, r3.wwww, r13.wwwx
mad r4.w, r6.z, l(-2.000000), l(4.000000)
mad r8.zw, r13.zzzy, r4.wwww, r8.zzzw
mad r4.w, r8.y, r9.z, r8.z
mad r4.w, r8.x, r3.w, r4.w
mad r8.x, r13.z, r9.z, r8.w
mad r8.x, r13.w, r3.w, r8.x
gather4_c_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r14.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mad r4.w, r14.z, r12.y, r4.w
mad r4.w, r14.w, r9.w, r4.w
mad r8.x, r14.y, r12.y, r8.x
mad r8.x, r14.x, r9.w, r8.x
add r8.yz, -r6.zzwz, l(0.000000, 4.000000, 1.000000, 0.000000)
mad r4.w, r10.y, r12.z, r4.w
mad r4.w, r10.x, r8.y, r4.w
mad r8.x, r14.z, r12.z, r8.x
mad r8.x, r14.w, r8.y, r8.x
gather4_c_aoffimmi_indexable(2,0,0)(texture2d)(float,float,float,float) r10.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mad r8.w, r6.z, l(2.000000), l(2.000000)
dp2 r9.w, r10.zzzz, r6.zzzz
add r4.w, r4.w, r9.w
mad r4.w, r10.w, r8.w, r4.w
dp2 r10.y, r10.yyyy, r6.zzzz
add r8.x, r8.x, r10.y
mad r8.x, r10.x, r8.w, r8.x
mad r1.w, r1.w, l(2.000000), r4.w
mad r11.x, r11.x, r12.w, r1.w
add r1.w, r8.x, r9.w
mad r11.y, r10.w, r12.w, r1.w
add r7.zw, r7.zzzw, r11.xxxy
gather4_c_aoffimmi_indexable(-2,2,0)(texture2d)(float,float,float,float) r11.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mul r15.xyzw, r9.xyxy, r11.wzxy
add r8.xw, r15.yyyw, r15.xxxz
mad r1.w, r13.y, r9.z, r8.x
mad r1.w, r13.x, r3.w, r1.w
mad r4.w, r11.z, r9.z, r8.w
mad r3.w, r11.w, r3.w, r4.w
gather4_c_aoffimmi_indexable(0,2,0)(texture2d)(float,float,float,float) r9.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mad r1.w, r9.z, l(2.000000), r1.w
mad r1.w, r9.w, l(2.000000), r1.w
mad r3.w, r9.y, l(2.000000), r3.w
mad r3.w, r9.x, l(2.000000), r3.w
mad r1.w, r14.y, r12.z, r1.w
mad r1.w, r14.x, r8.y, r1.w
mad r3.w, r9.z, r12.z, r3.w
mad r3.w, r9.w, r8.y, r3.w
gather4_c_aoffimmi_indexable(2,2,0)(texture2d)(float,float,float,float) r9.xyzw, r7.xyxx, t1.xyzw, s1.x, r2.w
mul r2.w, r6.z, r9.z
mad r1.w, r9.z, r6.z, r1.w
mad r1.w, r9.w, r12.x, r1.w
mad r3.w, r9.y, r6.z, r3.w
mad r3.w, r9.x, r12.x, r3.w
add r1.w, r1.w, r10.y
mad r7.x, r10.x, r12.w, r1.w
mad r1.w, r2.w, l(2.000000), r3.w
mad r7.y, r9.w, r12.w, r1.w
add r7.xy, r7.xyxx, r7.zwzz
mul r1.w, r6.w, r7.y
mad r1.w, r7.x, r8.z, r1.w
mul r1.w, r1.w, l(0.016949)
mul r0.y, r0.y, r1.w
sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t0.xyzw, s0, l(0.000000)
mul r7.xyz, r0.yyyy, v2.xyzx
mul r7.xyz, r0.wwww, r7.xyzx
mul r6.xyz, r6.xyzx, r7.xyzx
mad r0.yzw, -r2.xxyz, r0.zzzz, r1.xxyz
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
dp3_sat r0.y, r0.yzwy, r3.xyzx
mad r0.z, r0.x, l(0.086625), l(0.875000)
mad r0.x, r0.y, r0.x, -r0.x
exp r0.x, r0.x
mul r0.x, r0.x, r0.z
mul r0.xyz, r0.xxxx, r6.xyzx
mul r0.xyz, r0.xyzx, v2.wwww
mul r0.xyz, r0.xyzx, r5.xzwx
movc r0.w, r5.y, l(0), l(1.000000)
mul r1.xyz, r0.wwww, r0.xyzx
mad o0.xyz, r4.xyzx, r6.xyzx, r1.xyzx
mov o1.xyz, r0.xyzx
mov o1.w, l(0)
mov o0.w, l(0)
ret 
// Approximately 163 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
