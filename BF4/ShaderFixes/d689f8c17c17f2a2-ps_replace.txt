// lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float g_colorScale : packoffset(c5);
  float g_indirectCubeMapMipCount : packoffset(c5.y);
  float4x4 g_cubeMapLocalToWorld : packoffset(c6);
  float4x4 g_cubeMapWorldToBBox : packoffset(c10);
  float3 g_cubeMapExtents : packoffset(c14);
  float3 g_cubeMapFadeDist : packoffset(c15);
  float3 g_cubeMapFadeDistInverse : packoffset(c16);
  float g_cubeMapScale : packoffset(c16.w);
}
SamplerState g_indirectCubeMapSampler_s : register(s0);
TextureCube<float4> g_indirectCubeMap : register(t0);
Texture2D<float4> g_depthTexture : register(t1);
Texture2D<float4> g_gbufferTexture0 : register(t2);
Texture2D<float4> g_gbufferTexture1 : register(t3);
Texture2D<float4> g_gbufferTexture2 : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r2.xyzw = g_gbufferTexture0.Load(r0.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r0.xyw).xyzw;
  r1.z = g_gbufferTexture2.Load(r0.xyw).w;
  r0.z = g_depthTexture.Load(r0.xyz).x;
  r1.z = 255 * r1.z;
  r1.z = round(r1.z);
  r1.z = (int)r1.z;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r1.z = (int)r1.z == 1;
  if (r1.z != 0) {
    r3.xyz = r3.www * r3.xyz;
  } else {
    r3.xyz = r3.www;
  }
  r1.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = float2(1,-1) * r1.xy;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.x = dot(r0.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r0.x = 1 / r0.x;
  
  float4 r28, r26, r27;
r26.xyz = r1.xyz * r0.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r1.xyz = r26.xyz / r0.xxx;

  r0.xyz = r1.xyz * r0.xxx;
  r0.w = 1;
  r1.x = dot(r0.xyzw, g_cubeMapLocalToWorld._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, g_cubeMapLocalToWorld._m01_m11_m21_m31);
  r0.w = dot(r0.xyzw, g_cubeMapLocalToWorld._m02_m12_m22_m32);
  r1.yzw = g_cubeMapWorldToBBox._m01_m11_m21 * r1.yyy;
  r1.xyz = r1.xxx * g_cubeMapWorldToBBox._m00_m10_m20 + r1.yzw;
  r1.xyz = r0.www * g_cubeMapWorldToBBox._m02_m12_m22 + r1.xyz;
  r1.xyz = g_cubeMapWorldToBBox._m03_m13_m23 + r1.xyz;
  r4.xyz = g_cubeMapFadeDist.xyz + g_cubeMapExtents.xyz;
  r4.xyz = r4.xyz + -abs(r1.xyz);
  r4.xyz = g_cubeMapFadeDist.xyz + -r4.xyz;
  r4.xyz = saturate(-r4.xyz * g_cubeMapFadeDistInverse.xyz + float3(1,1,1));
  r0.w = min(r4.x, r4.y);
  r0.w = min(r0.w, r4.z);
  r0.w = r0.w * r0.w;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r1.w = dot(r0.xyz, r2.xyz);
  r1.w = r1.w + r1.w;
  r0.xyz = r2.xyz * -r1.www + r0.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r2.xyz = g_cubeMapWorldToBBox._m01_m11_m21 * r0.yyy;
  r2.xyz = r0.xxx * g_cubeMapWorldToBBox._m00_m10_m20 + r2.xyz;
  r0.xyz = r0.zzz * g_cubeMapWorldToBBox._m02_m12_m22 + r2.xyz;
  r2.xyz = float3(1,1,1) / r0.xyz;
  r4.xyz = g_cubeMapExtents.xyz + -r1.xyz;
  r4.xyz = r4.xyz * r2.xyz;
  r5.xyz = -g_cubeMapExtents.xyz + -r1.xyz;
  r2.xyz = r5.xyz * r2.xyz;
  r5.xyz = float3(0,0,0) < r0.xyz;
  r2.xyz = r5.xyz ? r4.xyz : r2.xyz;
  r1.w = min(r2.x, r2.y);
  r1.w = min(r1.w, r2.z);
  r0.xyz = r0.xyz * r1.www + r1.xyz;
  r1.x = g_indirectCubeMapMipCount;
  r1.y = trunc(g_indirectCubeMapMipCount);
  r1.y = -r2.w * 15 + r1.y;
  r1.y = 5 + r1.y;
  r1.x = (int)r1.x + -1;
  r1.x = (int)r1.x;
  r1.y = max(0, r1.y);
  r1.x = min(r1.y, r1.x);
  r0.xyz = g_indirectCubeMap.SampleLevel(g_indirectCubeMapSampler_s, r0.xyz, r1.x).xyz;
  r0.xyz = r0.xyz * r3.xyz;
  r0.xyz = r0.xyz * r0.www;
  o0.xyz = g_cubeMapScale * r0.xyz;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Sun Oct 25 10:44:16 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float g_colorScale;                // Offset:   80 Size:     4 [unused]
//   float g_indirectCubeMapMipCount;   // Offset:   84 Size:     4
//   float4x4 g_cubeMapLocalToWorld;    // Offset:   96 Size:    64
//   float4x4 g_cubeMapWorldToBBox;     // Offset:  160 Size:    64
//   float3 g_cubeMapExtents;           // Offset:  224 Size:    12
//   float3 g_cubeMapFadeDist;          // Offset:  240 Size:    12
//   float3 g_cubeMapFadeDistInverse;   // Offset:  256 Size:    12
//   float g_cubeMapScale;              // Offset:  268 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_indirectCubeMapSampler          sampler      NA          NA    0        1
// g_indirectCubeMap                 texture  float4        cube    0        1
// g_depthTexture                    texture  float4          2d    1        1
// g_gbufferTexture0                 texture  float4          2d    2        1
// g_gbufferTexture1                 texture  float4          2d    3        1
// g_gbufferTexture2                 texture  float4          2d    4        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float       
// TEXCOORD                 1   xyzw        2     NONE   float       
// TEXCOORD                 2   xyzw        3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texturecube (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 6
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[0].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyww, t2.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyww, t3.xyzw
ld_indexable(texture2d)(float,float,float,float) r1.z, r0.xyww, t4.xywz
ld_indexable(texture2d)(float,float,float,float) r0.z, r0.xyzw, t1.yzxw
mul r1.z, r1.z, l(255.000000)
round_ne r1.z, r1.z
ftoi r1.z, r1.z
mul r3.xyzw, r3.xyzw, r3.xyzw
ieq r1.z, r1.z, l(1)
if_nz r1.z
  mul r3.xyz, r3.xyzx, r3.wwww
else 
  mov r3.xyz, r3.wwww
endif 
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[1].xyzw
dp4 r1.y, r0.xyzw, cb0[2].xyzw
dp4 r1.z, r0.xyzw, cb0[3].xyzw
dp4 r0.x, r0.xyzw, cb0[4].xyzw
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.xyz, r0.xxxx, r1.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[6].xyzw
dp4 r1.y, r0.xyzw, cb0[7].xyzw
dp4 r0.w, r0.xyzw, cb0[8].xyzw
mul r1.yzw, r1.yyyy, cb0[11].xxyz
mad r1.xyz, r1.xxxx, cb0[10].xyzx, r1.yzwy
mad r1.xyz, r0.wwww, cb0[12].xyzx, r1.xyzx
add r1.xyz, r1.xyzx, cb0[13].xyzx
add r4.xyz, cb0[14].xyzx, cb0[15].xyzx
add r4.xyz, -|r1.xyzx|, r4.xyzx
add r4.xyz, -r4.xyzx, cb0[15].xyzx
mad_sat r4.xyz, -r4.xyzx, cb0[16].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
min r0.w, r4.y, r4.x
min r0.w, r4.z, r0.w
mul r0.w, r0.w, r0.w
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3 r1.w, r0.xyzx, r2.xyzx
add r1.w, r1.w, r1.w
mad r0.xyz, r2.xyzx, -r1.wwww, r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
mul r2.xyz, r0.yyyy, cb0[11].xyzx
mad r2.xyz, r0.xxxx, cb0[10].xyzx, r2.xyzx
mad r0.xyz, r0.zzzz, cb0[12].xyzx, r2.xyzx
div r2.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzx
add r4.xyz, -r1.xyzx, cb0[14].xyzx
mul r4.xyz, r2.xyzx, r4.xyzx
add r5.xyz, -r1.xyzx, -cb0[14].xyzx
mul r2.xyz, r2.xyzx, r5.xyzx
lt r5.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
movc r2.xyz, r5.xyzx, r4.xyzx, r2.xyzx
min r1.w, r2.y, r2.x
min r1.w, r2.z, r1.w
mad r0.xyz, r0.xyzx, r1.wwww, r1.xyzx
ftoi r1.x, cb0[5].y
round_z r1.y, cb0[5].y
mad r1.y, -r2.w, l(15.000000), r1.y
add r1.y, r1.y, l(5.000000)
iadd r1.x, r1.x, l(-1)
itof r1.x, r1.x
max r1.y, r1.y, l(0.000000)
min r1.x, r1.x, r1.y
sample_l_indexable(texturecube)(float,float,float,float) r0.xyz, r0.xyzx, t0.xyzw, s0, r1.x
mul r0.xyz, r3.xyzx, r0.xyzx
mul r0.xyz, r0.wwww, r0.xyzx
mul o0.xyz, r0.xyzx, cb0[16].wwww
mov o0.w, l(0)
ret 
// Approximately 81 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
