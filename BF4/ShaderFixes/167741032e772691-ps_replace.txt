// lights
cbuffer _Globals : register(b0)
{
  float2 g_invScreenSize : packoffset(c0);
  float4x4 g_invViewProjMatrix : packoffset(c1);
  float4 g_shadowmapHalfSizeAndInvHalfSize : packoffset(c5);
  float g_subRolloff : packoffset(c6);
  float g_colorScale : packoffset(c6.y);
  uint4 g_shadowmapDimensions : packoffset(c7);
}
Texture2DMS<float4,4> g_depthTexture : register(t0);
Texture2DMS<float4,4> g_gbufferTexture0 : register(t1);
Texture2DMS<float4,4> g_gbufferTexture1 : register(t2);
Texture2DMS<float4,4> g_gbufferTexture2 : register(t3);
Texture2D<float> g_msaaClassifyTexture : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  const float4 icb[] = { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} };
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r0.zw = float2(0,0);
  r1.x = g_msaaClassifyTexture.Load(r0.xyw).x;
  r1.x = 0 < r1.x;
  r1.xy = r1.xx ? float2(4,0.25) : float2(1,1);
  r1.z = 1 + g_subRolloff;
  r1.z = 1 / r1.z;
  r2.w = 1;
  r3.xyz = float3(0,0,0);
  r1.w = 0;
  while (true) {
    r3.w = (int)r1.w >= (int)r1.x;
    if (r3.w != 0) break;
    r4.xy = icb[r1.w+0].xy * g_invScreenSize.xy;
    r4.xy = v0.xy * g_invScreenSize.xy + r4.xy;
    r2.z = g_depthTexture.Load(r0.xy, r1.w).x;
    r5.xyz = g_gbufferTexture0.Load(r0.xy, r1.w).xyz;
    r6.xyz = g_gbufferTexture1.Load(r0.xy, r1.w).xyz;
    r3.w = g_gbufferTexture2.Load(r0.xy, r1.w).w;
    r4.xy = r4.xy * float2(2,2) + float2(-1,-1);
    r2.xy = float2(1,-1) * r4.xy;
    r4.x = dot(r2.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
    r4.y = dot(r2.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
    r4.z = dot(r2.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
    r2.x = dot(r2.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
    r2.x = 1 / r2.x;
	
	float4 r28, r26, r27;
r26.xyz = r4.xyz * r2.xxx;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r4.xyz = r26.xyz / r2.xxx;

    r2.xyz = -r4.xyz * r2.xxx + v1.xyz;
    r4.x = dot(r2.xyz, r2.xyz);
    r4.y = rsqrt(r4.x);
    r2.xyz = r4.yyy * r2.xyz;
    r4.yzw = r5.xyz * float3(2,2,2) + float3(-1,-1,-1);
    r5.x = dot(r4.yzw, r4.yzw);
    r5.x = rsqrt(r5.x);
    r4.yzw = r5.xxx * r4.yzw;
    r4.x = v3.w + r4.x;
    r4.x = 1 / r4.x;
    r4.x = v1.w + r4.x;
    r4.x = max(0, r4.x);
    r4.y = dot(r4.yzw, r2.xyz);
    r3.w = 255 * r3.w;
    r3.w = round(r3.w);
    r3.w = (int)r3.w;
    r5.xyz = r6.xyz * r6.xyz;
    r2.x = dot(v6.xyz, r2.xyz);
    r2.x = saturate(r2.x * v5.x + v5.y);
    r2.x = 1 + -r2.x;
    r2.x = r4.x * r2.x;
    r4.xzw = v2.xyz * r2.xxx;
    r2.y = saturate(r4.y);
    r4.xzw = r4.xzw * r2.yyy;
    r2.z = (int)r3.w == 2;
    if (r2.z != 0) {
      r2.z = g_subRolloff + r4.y;
      r2.z = saturate(r2.z * r1.z);
      r3.w = r2.z * -2 + 3;
      r2.z = r2.z * r2.z;
      r4.y = r2.y * -2 + 3;
      r2.y = r2.y * r2.y;
      r2.y = r4.y * r2.y;
      r2.y = r3.w * r2.z + -r2.y;
      r2.y = max(0, r2.y);
      r6.xyz = v3.xyz * r2.yyy;
      r4.xzw = r6.xyz * r2.xxx + r4.xzw;
    }
    r3.xyz = r5.xyz * r4.xzw + r3.xyz;
    r1.w = (int)r1.w + 1;
  }
  o0.xyz = r3.xyz * r1.yyy;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Thu Oct 29 07:11:13 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float2 g_invScreenSize;            // Offset:    0 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   16 Size:    64
//   float4 g_shadowmapHalfSizeAndInvHalfSize;// Offset:   80 Size:    16 [unused]
//   float g_subRolloff;                // Offset:   96 Size:     4
//   float g_colorScale;                // Offset:  100 Size:     4 [unused]
//   uint4 g_shadowmapDimensions;       // Offset:  112 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_depthTexture                    texture  float4       2dMS4    0        1
// g_gbufferTexture0                 texture  float4       2dMS4    1        1
// g_gbufferTexture1                 texture  float4       2dMS4    2        1
// g_gbufferTexture2                 texture  float4       2dMS4    3        1
// g_msaaClassifyTexture             texture   float          2d    4        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float       
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float       
// TEXCOORD                 7   xyzw        8     NONE   float       
// TEXCOORD                 8   xyzw        9     NONE   float       
// TEXCOORD                 9   xyzw       10     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_immediateConstantBuffer { { -0.125000, -0.375000, 0, 0},
                              { 0.375000, -0.125000, 0, 0},
                              { -0.375000, 0.125000, 0, 0},
                              { 0.125000, 0.375000, 0, 0} }
dcl_constantbuffer cb0[7], immediateIndexed
dcl_resource_texture2dms(4) (float,float,float,float) t0
dcl_resource_texture2dms(4) (float,float,float,float) t1
dcl_resource_texture2dms(4) (float,float,float,float) t2
dcl_resource_texture2dms(4) (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 7
ftoi r0.xy, v0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r0.xyww, t4.xyzw
lt r1.x, l(0.000000), r1.x
movc r1.xy, r1.xxxx, l(4,0.250000,0,0), l(1,1.000000,0,0)
add r1.z, cb0[6].x, l(1.000000)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
mov r2.w, l(1.000000)
mov r3.xyz, l(0,0,0,0)
mov r1.w, l(0)
loop 
  ige r3.w, r1.w, r1.x
  breakc_nz r3.w
  mul r4.xy, cb0[0].xyxx, icb[r1.w + 0].xyxx
  mad r4.xy, v0.xyxx, cb0[0].xyxx, r4.xyxx
  ldms_indexable(texture2dms)(float,float,float,float) r2.z, r0.xyww, t0.yzxw, r1.w
  ldms_indexable(texture2dms)(float,float,float,float) r5.xyz, r0.xyww, t1.xyzw, r1.w
  ldms_indexable(texture2dms)(float,float,float,float) r6.xyz, r0.xyww, t2.xyzw, r1.w
  ldms_indexable(texture2dms)(float,float,float,float) r3.w, r0.xyzw, t3.xyzw, r1.w
  mad r4.xy, r4.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r2.xy, r4.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
  dp4 r4.x, r2.xyzw, cb0[1].xyzw
  dp4 r4.y, r2.xyzw, cb0[2].xyzw
  dp4 r4.z, r2.xyzw, cb0[3].xyzw
  dp4 r2.x, r2.xyzw, cb0[4].xyzw
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
  mad r2.xyz, -r4.xyzx, r2.xxxx, v1.xyzx
  dp3 r4.x, r2.xyzx, r2.xyzx
  rsq r4.y, r4.x
  mul r2.xyz, r2.xyzx, r4.yyyy
  mad r4.yzw, r5.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
  dp3 r5.x, r4.yzwy, r4.yzwy
  rsq r5.x, r5.x
  mul r4.yzw, r4.yyzw, r5.xxxx
  add r4.x, r4.x, v3.w
  div r4.x, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
  add r4.x, r4.x, v1.w
  max r4.x, r4.x, l(0.000000)
  dp3 r4.y, r4.yzwy, r2.xyzx
  mul r3.w, r3.w, l(255.000000)
  round_ne r3.w, r3.w
  ftoi r3.w, r3.w
  mul r5.xyz, r6.xyzx, r6.xyzx
  dp3 r2.x, v6.xyzx, r2.xyzx
  mad_sat r2.x, r2.x, v5.x, v5.y
  add r2.x, -r2.x, l(1.000000)
  mul r2.x, r2.x, r4.x
  mul r4.xzw, r2.xxxx, v2.xxyz
  mov_sat r2.y, r4.y
  mul r4.xzw, r2.yyyy, r4.xxzw
  ieq r2.z, r3.w, l(2)
  if_nz r2.z
    add r2.z, r4.y, cb0[6].x
    mul_sat r2.z, r1.z, r2.z
    mad r3.w, r2.z, l(-2.000000), l(3.000000)
    mul r2.z, r2.z, r2.z
    mad r4.y, r2.y, l(-2.000000), l(3.000000)
    mul r2.y, r2.y, r2.y
    mul r2.y, r2.y, r4.y
    mad r2.y, r3.w, r2.z, -r2.y
    max r2.y, r2.y, l(0.000000)
    mul r6.xyz, r2.yyyy, v3.xyzx
    mad r4.xzw, r6.xxyz, r2.xxxx, r4.xxzw
  endif 
  mad r3.xyz, r5.xyzx, r4.xzwx, r3.xyzx
  iadd r1.w, r1.w, l(1)
endloop 
mul o0.xyz, r1.yyyy, r3.xyzx
mov o0.w, l(0)
ret 
// Approximately 70 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
