// cloud
cbuffer _Globals : register(b0)
{
  float4 g_sunColorAndSize : packoffset(c0);
  float4 g_sunDirAndSkyGradientScale : packoffset(c1);
  float g_panoramicRotation : packoffset(c2);
  float4 g_panoramicUVRanges : packoffset(c3);
  float g_panoramicTileFactor : packoffset(c4);
  float4 g_cloudLayerSunColor : packoffset(c5);
  float4 g_cloudLayerLightingParams0 : packoffset(c6);
  float4 g_cloudLayerLightingParams1 : packoffset(c7);
  float4 g_cloudLayer0Color : packoffset(c8);
  float4 g_cloudLayerParams : packoffset(c9);
  float4 g_cloudLayer0UVTransform0 : packoffset(c10);
  float4 g_cloudLayer0UVTransform1 : packoffset(c11);
  float4 g_cloudLayer1UVTransform0 : packoffset(c12);
  float4 g_cloudLayer1UVTransform1 : packoffset(c13);
  float4 g_cloudLayer1Color : packoffset(c14);
  float4 g_fogParams : packoffset(c15);
  float2 g_forwardScatteringParams : packoffset(c16);
  float4 g_forwardScatteringColorPresence : packoffset(c17);
  float4 g_fogCoefficients : packoffset(c18);
  float4 g_fogColorCoefficients : packoffset(c19);
  float4 g_fogColor : packoffset(c20);
  float g_fogStartDistance : packoffset(c21);
  float4 g_heightFogCoefficients : packoffset(c22);
  float4x4 g_invViewProjMatrix : packoffset(c23);
  float3 g_camPos : packoffset(c27);
  float2 g_screenSizeInv : packoffset(c28);
  float g_colorScale : packoffset(c28.z);
}
SamplerState g_skyGradientSampler_s : register(s0);
SamplerState g_acosLUTSampler_s : register(s1);
SamplerState g_panoramicSampler_s : register(s3);
SamplerState g_panoramicAlphaSampler_s : register(s4);
SamplerState g_forwardScatteringTextureSampler_s : register(s12);
Texture2D<float4> g_skyGradientTexture : register(t0);
Texture2D<float4> g_acosLUTTexture : register(t1);
Texture2D<float3> g_panoramicTexture : register(t3);
Texture2D<float> g_panoramicAlphaTexture : register(t4);
Texture2D<float4> g_depthTexture : register(t10);
Texture2D<float4> g_forwardScatteringTexture : register(t12);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float3 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;  
  
  r0.x = dot(v1.xyz, v1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v1.xyz * r0.xxx;
  r1.xy = (int2)v0.xy;
  r2.xy = g_screenSizeInv.xy * v0.xy;
  r0.w = abs(r0.z) < abs(r0.x);
  if (r0.w != 0) {
    r0.w = r0.z;
    r2.z = r0.x;
    r2.w = 1;
  } else {
    r0.w = r0.x;
    r2.z = r0.z;
    r2.w = 3;
  }
  r3.x = dot(r0.xz, float2(1,-1));
  r3.x = 0 < r3.x;
  if (r3.x != 0) {
    r2.w = 4 + r2.w;
    r3.x = -1;
  } else {
    r3.x = 1;
  }
  r0.w = r0.w / abs(r2.z);
  r2.z = r0.w * r0.w;
  r2.z = r2.z * 0.200000003 + 0.800000012;
  r0.w = r0.w / r2.z;
  r0.w = r0.w * r3.x + r2.w;
  r0.w = r0.w * 0.125 + 0.125;
  r0.w = frac(r0.w);
  r3.x = 1 + -r0.w;
  r0.w = r0.y * 0.499023438 + 0.500976563;
  r4.x = frac(r0.w);
  r4.yw = float2(0.5,1);
  r0.w = g_acosLUTTexture.SampleLevel(g_acosLUTSampler_s, r4.xy, 0).x;
  r3.y = -r0.w;
  r4.z = g_panoramicRotation;
  r2.zw = r4.zw + r3.xy;
  r4.xyzw = g_skyGradientTexture.SampleLevel(g_skyGradientSampler_s, r2.zw, 0).xyzw;
  r3.z = 1 + r3.y;
  r3.yz = saturate(r3.xz * g_panoramicUVRanges.xy + g_panoramicUVRanges.zw);
  r0.w = g_panoramicRotation + r3.y;
  r3.x = g_panoramicTileFactor * r0.w;
  r5.xyz = g_panoramicTexture.SampleLevel(g_panoramicSampler_s, r3.xz, 0).xyz;
  r0.w = g_panoramicAlphaTexture.SampleLevel(g_panoramicAlphaSampler_s, r3.xz, 0).x;
  r0.x = dot(g_sunDirAndSkyGradientScale.xyz, r0.xyz);
  r0.y = 1 + -g_sunColorAndSize.w;
  r0.z = -r0.y * r0.y + 1;
  r0.z = max(0, r0.z);
  r0.z = r0.z * r0.z;
  r2.z = r0.y * r0.y + 1;
  r0.y = r0.y + r0.y;
  r0.y = saturate(-r0.y * r0.x + r2.z);
  r0.y = log2(r0.y);
  r0.y = 1.5 * r0.y;
  r0.y = exp2(r0.y);
  r0.y = 12.566371 * r0.y;
  r0.y = r0.z / r0.y;
  r0.y = min(1, r0.y);
  r3.xyz = g_sunColorAndSize.xyz * r0.yyy;
  r1.zw = float2(0,0);
  r1.z = g_depthTexture.Load(r1.xyz).x;
  r0.yz = r2.xy * float2(2,2) + float2(-1,-1);
  r1.xy = float2(1,-1) * r0.yz;
  r1.w = 1;
  r6.x = dot(r1.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r6.y = dot(r1.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r6.z = dot(r1.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r0.y = dot(r1.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r1.xyz = r6.xyz / r0.yyy;
  r1.xyz = g_camPos.xyz + -r1.xyz;
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = sqrt(r0.y);
  r0.z = g_fogParams.z / r4.w;
  r1.z = saturate(r0.y * r0.z + g_fogParams.x);
  r1.y = r1.z * r1.z;
  r1.x = r1.z * r1.y;
  r1.w = 1;
  r0.y = saturate(dot(r1.xyzw, g_fogCoefficients.xyzw));
  r0.x = g_forwardScatteringParams.x * r0.x + 1;
  r0.x = r0.x * r0.x;
  r0.x = g_forwardScatteringParams.y / r0.x;
  r1.xyz = g_forwardScatteringColorPresence.xyz * r0.xxx;
  r6.xyz = r1.xyz * r0.yyy;
  r2.xyz = g_forwardScatteringTexture.SampleLevel(g_forwardScatteringTextureSampler_s, r2.xy, 0).xyz;
  r0.xyz = -r1.xyz * r0.yyy + r2.xyz;
  r0.xyz = g_forwardScatteringColorPresence.www * r0.xyz + r6.xyz;
  r1.xyz = r5.xyz + -r4.xyz;
  r1.xyz = r0.www * r1.xyz + r4.xyz;
  r1.xyz = r1.xyz * g_sunDirAndSkyGradientScale.www + r3.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  o0.xyz = g_colorScale * r0.xyz;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Sun Oct 25 09:04:24 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 g_sunColorAndSize;          // Offset:    0 Size:    16
//   float4 g_sunDirAndSkyGradientScale;// Offset:   16 Size:    16
//   float g_panoramicRotation;         // Offset:   32 Size:     4
//   float4 g_panoramicUVRanges;        // Offset:   48 Size:    16
//   float g_panoramicTileFactor;       // Offset:   64 Size:     4
//   float4 g_cloudLayerSunColor;       // Offset:   80 Size:    16 [unused]
//   float4 g_cloudLayerLightingParams0;// Offset:   96 Size:    16 [unused]
//   float4 g_cloudLayerLightingParams1;// Offset:  112 Size:    16 [unused]
//   float4 g_cloudLayer0Color;         // Offset:  128 Size:    16 [unused]
//   float4 g_cloudLayerParams;         // Offset:  144 Size:    16 [unused]
//   float4 g_cloudLayer0UVTransform0;  // Offset:  160 Size:    16 [unused]
//   float4 g_cloudLayer0UVTransform1;  // Offset:  176 Size:    16 [unused]
//   float4 g_cloudLayer1UVTransform0;  // Offset:  192 Size:    16 [unused]
//   float4 g_cloudLayer1UVTransform1;  // Offset:  208 Size:    16 [unused]
//   float4 g_cloudLayer1Color;         // Offset:  224 Size:    16 [unused]
//   float4 g_fogParams;                // Offset:  240 Size:    16
//   float2 g_forwardScatteringParams;  // Offset:  256 Size:     8
//   float4 g_forwardScatteringColorPresence;// Offset:  272 Size:    16
//   float4 g_fogCoefficients;          // Offset:  288 Size:    16
//   float4 g_fogColorCoefficients;     // Offset:  304 Size:    16 [unused]
//   float4 g_fogColor;                 // Offset:  320 Size:    16 [unused]
//   float g_fogStartDistance;          // Offset:  336 Size:     4 [unused]
//   float4 g_heightFogCoefficients;    // Offset:  352 Size:    16 [unused]
//   float4x4 g_invViewProjMatrix;      // Offset:  368 Size:    64
//   float3 g_camPos;                   // Offset:  432 Size:    12
//   float2 g_screenSizeInv;            // Offset:  448 Size:     8
//   float g_colorScale;                // Offset:  456 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_skyGradientSampler              sampler      NA          NA    0        1
// g_acosLUTSampler                  sampler      NA          NA    1        1
// g_panoramicSampler                sampler      NA          NA    3        1
// g_panoramicAlphaSampler           sampler      NA          NA    4        1
// g_forwardScatteringTextureSampler    sampler      NA          NA   12        1
// g_skyGradientTexture              texture  float4          2d    0        1
// g_acosLUTTexture                  texture  float4          2d    1        1
// g_panoramicTexture                texture  float3          2d    3        1
// g_panoramicAlphaTexture           texture   float          2d    4        1
// g_depthTexture                    texture  float4          2d   10        1
// g_forwardScatteringTexture        texture  float4          2d   12        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[29], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 7
dp3 r0.x, v1.xyzx, v1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v1.xyzx
ftoi r1.xy, v0.xyxx
mul r2.xy, v0.xyxx, cb0[28].xyxx
lt r0.w, |r0.z|, |r0.x|
if_nz r0.w
  mov r0.w, r0.z
  mov r2.z, r0.x
  mov r2.w, l(1.000000)
else 
  mov r0.w, r0.x
  mov r2.z, r0.z
  mov r2.w, l(3.000000)
endif 
dp2 r3.x, r0.xzxx, l(1.000000, -1.000000, 0.000000, 0.000000)
lt r3.x, l(0.000000), r3.x
if_nz r3.x
  add r2.w, r2.w, l(4.000000)
  mov r3.x, l(-1.000000)
else 
  mov r3.x, l(1.000000)
endif 
div r0.w, r0.w, |r2.z|
mul r2.z, r0.w, r0.w
mad r2.z, r2.z, l(0.200000), l(0.800000)
div r0.w, r0.w, r2.z
mad r0.w, r0.w, r3.x, r2.w
mad r0.w, r0.w, l(0.125000), l(0.125000)
frc r0.w, r0.w
add r3.x, -r0.w, l(1.000000)
mad r0.w, r0.y, l(0.499023438), l(0.500976563)
frc r4.x, r0.w
mov r4.yw, l(0,0.500000,0,1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r4.xyxx, t1.yzwx, s1, l(0.000000)
mov r3.y, -r0.w
mov r4.z, cb0[2].x
add r2.zw, r3.xxxy, r4.zzzw
sample_l_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.zwzz, t0.xyzw, s0, l(0.000000)
add r3.z, r3.y, l(1.000000)
mad_sat r3.yz, r3.xxzx, cb0[3].xxyx, cb0[3].zzwz
add r0.w, r3.y, cb0[2].x
mul r3.x, r0.w, cb0[4].x
sample_l_indexable(texture2d)(float,float,float,float) r5.xyz, r3.xzxx, t3.xyzw, s3, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r0.w, r3.xzxx, t4.yzwx, s4, l(0.000000)
dp3 r0.x, cb0[1].xyzx, r0.xyzx
add r0.y, -cb0[0].w, l(1.000000)
mad r0.z, -r0.y, r0.y, l(1.000000)
max r0.z, r0.z, l(0.000000)
mul r0.z, r0.z, r0.z
mad r2.z, r0.y, r0.y, l(1.000000)
add r0.y, r0.y, r0.y
mad_sat r0.y, -r0.y, r0.x, r2.z
log r0.y, r0.y
mul r0.y, r0.y, l(1.500000)
exp r0.y, r0.y
mul r0.y, r0.y, l(12.566371)
div r0.y, r0.z, r0.y
min r0.y, r0.y, l(1.000000)
mul r3.xyz, r0.yyyy, cb0[0].xyzx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.z, r1.xyzw, t10.yzxw
mad r0.yz, r2.xxyx, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
mul r1.xy, r0.yzyy, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r1.w, l(1.000000)
dp4 r6.x, r1.xyzw, cb0[23].xyzw
dp4 r6.y, r1.xyzw, cb0[24].xyzw
dp4 r6.z, r1.xyzw, cb0[25].xyzw
dp4 r0.y, r1.xyzw, cb0[26].xyzw
div r1.xyz, r6.xyzx, r0.yyyy
add r1.xyz, -r1.xyzx, cb0[27].xyzx
dp3 r0.y, r1.xyzx, r1.xyzx
sqrt r0.y, r0.y
div r0.z, cb0[15].z, r4.w
mad_sat r1.z, r0.y, r0.z, cb0[15].x
mul r1.y, r1.z, r1.z
mul r1.x, r1.y, r1.z
mov r1.w, l(1.000000)
dp4_sat r0.y, r1.xyzw, cb0[18].xyzw
mad r0.x, cb0[16].x, r0.x, l(1.000000)
mul r0.x, r0.x, r0.x
div r0.x, cb0[16].y, r0.x
mul r1.xyz, r0.xxxx, cb0[17].xyzx
mul r6.xyz, r0.yyyy, r1.xyzx
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t12.xyzw, s12, l(0.000000)
mad r0.xyz, -r1.xyzx, r0.yyyy, r2.xyzx
mad r0.xyz, cb0[17].wwww, r0.xyzx, r6.xyzx
add r1.xyz, -r4.xyzx, r5.xyzx
mad r1.xyz, r0.wwww, r1.xyzx, r4.xyzx
mad r1.xyz, r1.xyzx, cb0[1].wwww, r3.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
mul o0.xyz, r0.xyzx, cb0[28].zzzz
mov o0.w, l(0)
ret 
// Approximately 94 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
