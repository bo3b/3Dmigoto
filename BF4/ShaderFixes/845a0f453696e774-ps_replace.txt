// lights
cbuffer _Globals : register(b0)
{
  float3 g_cameraPos : packoffset(c0);
  float2 g_invScreenSize : packoffset(c1);
  float4x4 g_invViewProjMatrix : packoffset(c2);
  float4 g_cloudOffsetAndScale : packoffset(c6);
  float4 g_cloudCoverageExponentAndFade : packoffset(c7);
  float3 g_lightDir : packoffset(c8);
  float4 g_keyColor : packoffset(c9);
  float4 g_keyTranslucencyParams : packoffset(c10);
  float4 g_subParams : packoffset(c11);
  float4 g_envmapParams : packoffset(c12);
  float g_skyEnvmap8BitTexInvScale : packoffset(c13);
  float g_colorScale : packoffset(c13.y);
  float4 g_envmapsMipmapCount : packoffset(c14);
}
SamplerState g_cloudShadowSampler_s : register(s0);
SamplerState g_skyEnvmapSampler_s : register(s1);
SamplerState g_customSampler_s : register(s2);
SamplerState g_ssaoSampler_s : register(s3);
Texture2D<float4> g_cloudShadowTexture : register(t0);
TextureCube<float4> g_skyEnvmap : register(t1);
TextureCube<float4> g_customEnvmap : register(t2);
Texture2D<float4> g_ssaoTexture : register(t3);
Texture2D<float4> g_depthTexture : register(t4);
Texture2D<float4> g_gbufferTexture0 : register(t5);
Texture2D<float4> g_gbufferTexture1 : register(t6);
Texture2D<float4> g_gbufferTexture2 : register(t7);
Texture2D<float4> g_gbufferTexture3 : register(t8);
Texture2D<float4> g_shadowAccumTexture : register(t9);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  //Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1 = g_invViewProjMatrix._m00_m10_m20_m30;
a2 = g_invViewProjMatrix._m01_m11_m21_m31;
a3 = g_invViewProjMatrix._m02_m12_m22_m32;
a4 = g_invViewProjMatrix._m03_m13_m23_m33;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse

  r0.xy = (int2)v0.xy;
  r1.xy = g_invScreenSize.xy * v0.xy;
  r0.zw = float2(0,0);
  r2.xyzw = g_gbufferTexture0.Load(r0.xyw).xyzw;
  r3.xyzw = g_gbufferTexture1.Load(r0.xyw).xyzw;
  r4.xyzw = g_gbufferTexture2.Load(r0.xyw).yxzw;
  r5.xyz = g_gbufferTexture3.Load(r0.xyw).xyz;
  r6.z = g_depthTexture.Load(r0.xyw).x;
  r1.z = 255 * r4.w;
  r1.z = round(r1.z);
  r1.z = (int)r1.z;
  r3.xyzw = r3.xyzw * r3.xyzw;
  r7.xy = (int2)r1.zz == int2(1,2);
  if (r7.x != 0) {
    r7.xzw = r3.www * r3.xyz;
  } else {
    r7.xzw = r3.www;
  }
  r1.w = 0 < r7.x;
  r1.w = r1.w ? r2.w : 0;
  r2.w = r1.w * 12 + 1;
  r2.w = exp2(r2.w);
  r2.w = r2.w * 1.44299996 + 1.44299996;
  r3.w = log2(abs(r4.y));
  r3.w = g_envmapParams.z * r3.w;
  r3.w = exp2(r3.w);
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r4.y = dot(r2.xyz, r2.xyz);
  r4.y = rsqrt(r4.y);
  r2.xyz = r4.yyy * r2.xyz;
  r8.xy = r1.xy * float2(2,2) + float2(-1,-1);
  r6.xy = float2(1,-1) * r8.xy;
  r6.w = 1;
  r8.x = dot(r6.xyzw, g_invViewProjMatrix._m00_m10_m20_m30);
  r8.y = dot(r6.xyzw, g_invViewProjMatrix._m01_m11_m21_m31);
  r8.z = dot(r6.xyzw, g_invViewProjMatrix._m02_m12_m22_m32);
  r4.y = dot(r6.xyzw, g_invViewProjMatrix._m03_m13_m23_m33);
  r4.y = 1 / r4.y;
  
  float4 r28, r26, r27;
r26.xyz = r8.xyz * r4.yyy;
r26.w = 1.0;
r28.x = dot(r26.xyzw, b1.xyzw);
r28.y = dot(r26.xyzw, b2.xyzw);
r28.z = dot(r26.xyzw, b3.xyzw);
r28.w = dot(r26.xyzw, b4.xyzw);
float4 stereo = StereoParams.Load(0);
r28.x -= stereo.x * (r28.w - stereo.y); 
r26.x = dot(r28.xyzw, a1.xyzw);
r26.y = dot(r28.xyzw, a2.xyzw);
r26.z = dot(r28.xyzw, a3.xyzw);
r26.w = dot(r28.xyzw, a4.xyzw);
r8.xyz = r26.xyz / r4.yyy;

  r6.xyz = r8.xzy * r4.yyy;
  r5.w = dot(-r6.xyz, -r6.xyz);
  r5.w = rsqrt(r5.w);
  r8.xzw = -r6.xzy * r5.www;
  r0.x = g_shadowAccumTexture.Load(r0.xyz).x;
  r0.y = r8.y * r4.y + g_cameraPos.y;
  r0.yz = g_lightDir.xz * r0.yy;
  r0.yz = r0.yz * g_cloudOffsetAndScale.ww + r6.xy;
  r0.yz = r0.yz * g_cloudOffsetAndScale.zz + g_cloudOffsetAndScale.xy;
  r0.y = g_cloudShadowTexture.SampleLevel(g_cloudShadowSampler_s, r0.yz, 0).x;
  r0.y = saturate(g_cloudCoverageExponentAndFade.x + r0.y);
  r0.y = log2(r0.y);
  r0.y = g_cloudCoverageExponentAndFade.y * r0.y;
  r0.y = exp2(r0.y);
  r0.z = dot(r6.xyz, r6.xyz);
  r0.z = sqrt(r0.z);
  r0.z = -g_cloudCoverageExponentAndFade.z + r0.z;
  r0.z = saturate(g_cloudCoverageExponentAndFade.w * r0.z);
  r0.z = r0.z * r0.z;
  r0.w = 1 + -r0.y;
  r0.y = r0.z * r0.w + r0.y;
  r0.x = r0.x * r0.y;
  r0.y = dot(r2.xyz, g_lightDir.xyz);
  r0.z = saturate(r0.y);
  r9.xyz = g_keyColor.xyz * r0.zzz;
  r10.xyz = r9.xyz * r0.xxx;
  r6.xyz = -r6.xzy * r5.www + g_lightDir.xyz;
  r0.z = dot(r6.xyz, r6.xyz);
  r0.z = rsqrt(r0.z);
  r6.xyz = r6.xyz * r0.zzz;
  r0.z = saturate(dot(r6.xyz, r2.xyz));
  r0.w = r2.w * 0.0866250992 + 0.875;
  r0.z = r0.z * r2.w + -r2.w;
  r0.z = exp2(r0.z);
  r0.z = r0.w * r0.z;
  r6.xyz = r10.xyz * r0.zzz;
  r0.z = dot(-r8.xzw, r2.xyz);
  r0.z = r0.z + r0.z;
  r10.xyz = r2.xyz * -r0.zzz + -r8.xzw;
  r9.xyz = r9.xyz * r0.xxx + r5.xyz;
  r11.xyzw = r4.zzzz == float4(0,0.00392156886,0.00784313772,0.0117647061);
  r11.xyzw = r11.xyzw ? g_envmapParams.xxxx : 0;
  r0.z = 1 + -g_envmapParams.w;
  r0.z = r0.x * r0.z + g_envmapParams.w;
  r0.z = r0.z * r3.w;
  r4.yz = (int2)g_envmapsMipmapCount.xy;
  r12.xy = trunc(g_envmapsMipmapCount.xy);
  r12.xy = -r1.ww * float2(15,15) + r12.xy;
  r12.xy = float2(5,5) + r12.xy;
  r4.yz = (int2)r4.yz + int2(-1,-1);
  r4.yz = (int2)r4.yz;
  r12.xy = max(float2(0,0), r12.xy);
  r4.yz = min(r12.xy, r4.yz);
  r12.xyzw = g_customEnvmap.SampleLevel(g_customSampler_s, r10.xyz, r4.z).xyzw;
  r0.w = dot(r11.xyzw, r12.xyzw);
  r10.xyz = g_skyEnvmap.SampleLevel(g_skyEnvmapSampler_s, r10.xyz, r4.y).xyz;
  r10.xyz = r10.xyz * r0.zzz;
  r10.xyz = g_skyEnvmap8BitTexInvScale * r10.xyz;
  r6.xyz = r6.xyz * g_keyColor.www + r10.xyz;
  r5.xyz = g_envmapParams.yyy + r5.xyz;
  r5.xyz = r5.xyz * r0.www;
  r0.z = 1 + -r3.w;
  r5.xyz = r5.xyz * r0.zzz + r6.xyz;
  if (r7.y != 0) {
    r0.z = r0.y * 1.14988995 + -2.1456399;
    r0.z = r0.y * r0.z + 0.841609001;
    r0.y = saturate(r0.y * r0.z + 0.154140994);
    r0.yzw = g_subParams.xyz * r0.yyy;
    r9.xyz = r0.yzw * r0.xxx + r9.xyz;
  }
  r0.y = (int)r1.z >= 5;
  if (r0.y != 0) {
    r0.y = saturate(-0.0196078438 + r4.w);
    r4.x = saturate(r4.x);
    r4.x = 1 + -r4.x;
    r4.y = 1 + -r0.y;
    r0.yzw = r2.xyz * g_keyTranslucencyParams.www + g_lightDir.xyz;
    r0.y = saturate(dot(r8.xzw, -r0.yzw));
    r0.zw = g_keyTranslucencyParams.yy * r4.xy;
    r0.zw = float2(-1.44269502,-1.44269502) * r0.zw;
    r0.zw = exp2(r0.zw);
    r0.y = r0.y * g_keyTranslucencyParams.z + g_keyTranslucencyParams.x;
    r0.y = dot(r0.yy, r0.zw);
    r0.x = r0.y * r0.x;
    r9.xyz = r0.xxx * g_keyColor.xyz + r9.xyz;
  }
  r0.xyz = r7.xzw * r5.xyz;
  o0.xyz = r3.xyz * r9.xyz + r0.xyz;
  r0.xyzw = g_ssaoTexture.Gather(g_ssaoSampler_s, r1.xy).xyzw;
  r0.x = min(r0.x, r0.y);
  r0.x = min(r0.x, r0.z);
  o0.w = min(r0.x, r0.w);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20546
//
//   using 3Dmigoto v1.2.6 on Wed Oct 21 15:08:00 2015
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float3 g_cameraPos;                // Offset:    0 Size:    12
//   float2 g_invScreenSize;            // Offset:   16 Size:     8
//   float4x4 g_invViewProjMatrix;      // Offset:   32 Size:    64
//   float4 g_cloudOffsetAndScale;      // Offset:   96 Size:    16
//   float4 g_cloudCoverageExponentAndFade;// Offset:  112 Size:    16
//   float3 g_lightDir;                 // Offset:  128 Size:    12
//   float4 g_keyColor;                 // Offset:  144 Size:    16
//   float4 g_keyTranslucencyParams;    // Offset:  160 Size:    16
//   float4 g_subParams;                // Offset:  176 Size:    16
//   float4 g_envmapParams;             // Offset:  192 Size:    16
//   float g_skyEnvmap8BitTexInvScale;  // Offset:  208 Size:     4
//   float g_colorScale;                // Offset:  212 Size:     4 [unused]
//   float4 g_envmapsMipmapCount;       // Offset:  224 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// g_cloudShadowSampler              sampler      NA          NA    0        1
// g_skyEnvmapSampler                sampler      NA          NA    1        1
// g_customSampler                   sampler      NA          NA    2        1
// g_ssaoSampler                     sampler      NA          NA    3        1
// g_cloudShadowTexture              texture  float4          2d    0        1
// g_skyEnvmap                       texture  float4        cube    1        1
// g_customEnvmap                    texture  float4        cube    2        1
// g_ssaoTexture                     texture  float4          2d    3        1
// g_depthTexture                    texture  float4          2d    4        1
// g_gbufferTexture0                 texture  float4          2d    5        1
// g_gbufferTexture1                 texture  float4          2d    6        1
// g_gbufferTexture2                 texture  float4          2d    7        1
// g_gbufferTexture3                 texture  float4          2d    8        1
// g_shadowAccumTexture              texture  float4          2d    9        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_output o0.xyzw
dcl_temps 13
ftoi r0.xy, v0.xyxx
mul r1.xy, v0.xyxx, cb0[1].xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r2.xyzw, r0.xyww, t5.xyzw
ld_indexable(texture2d)(float,float,float,float) r3.xyzw, r0.xyww, t6.xyzw
ld_indexable(texture2d)(float,float,float,float) r4.xyzw, r0.xyww, t7.yxzw
ld_indexable(texture2d)(float,float,float,float) r5.xyz, r0.xyww, t8.xyzw
ld_indexable(texture2d)(float,float,float,float) r6.z, r0.xyww, t4.yzxw
mul r1.z, r4.w, l(255.000000)
round_ne r1.z, r1.z
ftoi r1.z, r1.z
mul r3.xyzw, r3.xyzw, r3.xyzw
ieq r7.xy, r1.zzzz, l(1, 2, 0, 0)
if_nz r7.x
  mul r7.xzw, r3.xxyz, r3.wwww
else 
  mov r7.xzw, r3.wwww
endif 
lt r1.w, l(0.000000), r7.x
and r1.w, r2.w, r1.w
mad r2.w, r1.w, l(12.000000), l(1.000000)
exp r2.w, r2.w
mad r2.w, r2.w, l(1.443000), l(1.443000)
log r3.w, |r4.y|
mul r3.w, r3.w, cb0[12].z
exp r3.w, r3.w
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r4.y, r2.xyzx, r2.xyzx
rsq r4.y, r4.y
mul r2.xyz, r2.xyzx, r4.yyyy
mad r8.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r6.xy, r8.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mov r6.w, l(1.000000)
dp4 r8.x, r6.xyzw, cb0[2].xyzw
dp4 r8.y, r6.xyzw, cb0[3].xyzw
dp4 r8.z, r6.xyzw, cb0[4].xyzw
dp4 r4.y, r6.xyzw, cb0[5].xyzw
div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r4.y
mul r6.xyz, r4.yyyy, r8.xzyx
dp3 r5.w, -r6.xyzx, -r6.xyzx
rsq r5.w, r5.w
mul r8.xzw, r5.wwww, -r6.xxzy
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t9.xyzw
mad r0.y, r8.y, r4.y, cb0[0].y
mul r0.yz, r0.yyyy, cb0[8].xxzx
mad r0.yz, r0.yyzy, cb0[6].wwww, r6.xxyx
mad r0.yz, r0.yyzy, cb0[6].zzzz, cb0[6].xxyx
sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.yxzw, s0, l(0.000000)
add_sat r0.y, r0.y, cb0[7].x
log r0.y, r0.y
mul r0.y, r0.y, cb0[7].y
exp r0.y, r0.y
dp3 r0.z, r6.xyzx, r6.xyzx
sqrt r0.z, r0.z
add r0.z, r0.z, -cb0[7].z
mul_sat r0.z, r0.z, cb0[7].w
mul r0.z, r0.z, r0.z
add r0.w, -r0.y, l(1.000000)
mad r0.y, r0.z, r0.w, r0.y
mul r0.x, r0.y, r0.x
dp3 r0.y, r2.xyzx, cb0[8].xyzx
mov_sat r0.z, r0.y
mul r9.xyz, r0.zzzz, cb0[9].xyzx
mul r10.xyz, r0.xxxx, r9.xyzx
mad r6.xyz, -r6.xzyx, r5.wwww, cb0[8].xyzx
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, r6.xyzx
dp3_sat r0.z, r6.xyzx, r2.xyzx
mad r0.w, r2.w, l(0.0866250992), l(0.875000)
mad r0.z, r0.z, r2.w, -r2.w
exp r0.z, r0.z
mul r0.z, r0.z, r0.w
mul r6.xyz, r0.zzzz, r10.xyzx
dp3 r0.z, -r8.xzwx, r2.xyzx
add r0.z, r0.z, r0.z
mad r10.xyz, r2.xyzx, -r0.zzzz, -r8.xzwx
mad r9.xyz, r9.xyzx, r0.xxxx, r5.xyzx
eq r11.xyzw, r4.zzzz, l(0.000000, 0.00392156886, 0.00784313772, 0.0117647061)
and r11.xyzw, r11.xyzw, cb0[12].xxxx
add r0.z, -cb0[12].w, l(1.000000)
mad r0.z, r0.x, r0.z, cb0[12].w
mul r0.z, r3.w, r0.z
ftoi r4.yz, cb0[14].xxyx
round_z r12.xy, cb0[14].xyxx
mad r12.xy, -r1.wwww, l(15.000000, 15.000000, 0.000000, 0.000000), r12.xyxx
add r12.xy, r12.xyxx, l(5.000000, 5.000000, 0.000000, 0.000000)
iadd r4.yz, r4.yyzy, l(0, -1, -1, 0)
itof r4.yz, r4.yyzy
max r12.xy, r12.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r4.yz, r4.yyzy, r12.xxyx
sample_l_indexable(texturecube)(float,float,float,float) r12.xyzw, r10.xyzx, t2.xyzw, s2, r4.z
dp4 r0.w, r11.xyzw, r12.xyzw
sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t1.xyzw, s1, r4.y
mul r10.xyz, r0.zzzz, r10.xyzx
mul r10.xyz, r10.xyzx, cb0[13].xxxx
mad r6.xyz, r6.xyzx, cb0[9].wwww, r10.xyzx
add r5.xyz, r5.xyzx, cb0[12].yyyy
mul r5.xyz, r0.wwww, r5.xyzx
add r0.z, -r3.w, l(1.000000)
mad r5.xyz, r5.xyzx, r0.zzzz, r6.xyzx
if_nz r7.y
  mad r0.z, r0.y, l(1.149890), l(-2.145640)
  mad r0.z, r0.y, r0.z, l(0.841609)
  mad_sat r0.y, r0.y, r0.z, l(0.154141)
  mul r0.yzw, r0.yyyy, cb0[11].xxyz
  mad r9.xyz, r0.yzwy, r0.xxxx, r9.xyzx
endif 
ige r0.y, r1.z, l(5)
if_nz r0.y
  add_sat r0.y, r4.w, l(-0.0196078438)
  mov_sat r4.x, r4.x
  add r4.x, -r4.x, l(1.000000)
  add r4.y, -r0.y, l(1.000000)
  mad r0.yzw, r2.xxyz, cb0[10].wwww, cb0[8].xxyz
  dp3_sat r0.y, r8.xzwx, -r0.yzwy
  mul r0.zw, r4.xxxy, cb0[10].yyyy
  mul r0.zw, r0.zzzw, l(0.000000, 0.000000, -1.442695, -1.442695)
  exp r0.zw, r0.zzzw
  mad r0.y, r0.y, cb0[10].z, cb0[10].x
  dp2 r0.y, r0.yyyy, r0.zwzz
  mul r0.x, r0.x, r0.y
  mad r9.xyz, r0.xxxx, cb0[9].xyzx, r9.xyzx
endif 
mul r0.xyz, r5.xyzx, r7.xzwx
mad o0.xyz, r3.xyzx, r9.xyzx, r0.xyzx
gather4_indexable(texture2d)(float,float,float,float) r0.xyzw, r1.xyxx, t3.xyzw, s3.x
min r0.x, r0.y, r0.x
min r0.x, r0.z, r0.x
min o0.w, r0.w, r0.x
ret 
// Approximately 131 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
       