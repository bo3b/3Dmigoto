
cbuffer PerSceneConsts : register(b1)
{
  row_major float4x4 projectionMatrix : packoffset(c0);
  row_major float4x4 viewMatrix : packoffset(c4);
  row_major float4x4 viewProjectionMatrix : packoffset(c8);
  row_major float4x4 inverseProjectionMatrix : packoffset(c12);
  row_major float4x4 inverseViewMatrix : packoffset(c16);
  row_major float4x4 inverseViewProjectionMatrix : packoffset(c20);
  float4 eyeOffset : packoffset(c24);
  float4 adsZScale : packoffset(c25);
  float4 hdrControl0 : packoffset(c26);
  float4 hdrControl1 : packoffset(c27);
  float4 fogColor : packoffset(c28);
  float4 fogConsts : packoffset(c29);
  float4 fogConsts2 : packoffset(c30);
  float4 fogConsts3 : packoffset(c31);
  float4 fogConsts4 : packoffset(c32);
  float4 fogConsts5 : packoffset(c33);
  float4 fogConsts6 : packoffset(c34);
  float4 fogConsts7 : packoffset(c35);
  float4 fogConsts8 : packoffset(c36);
  float4 fogConsts9 : packoffset(c37);
  float3 sunFogDir : packoffset(c38);
  float4 sunFogColor : packoffset(c39);
  float2 sunFog : packoffset(c40);
  float4 zNear : packoffset(c41);
  float3 clothPrimaryTint : packoffset(c42);
  float3 clothSecondaryTint : packoffset(c43);
  float4 renderTargetSize : packoffset(c44);
  float4 upscaledTargetSize : packoffset(c45);
  float4 materialColor : packoffset(c46);
  float4 cameraUp : packoffset(c47);
  float4 cameraLook : packoffset(c48);
  float4 cameraSide : packoffset(c49);
  float4 cameraVelocity : packoffset(c50);
  float4 skyMxR : packoffset(c51);
  float4 skyMxG : packoffset(c52);
  float4 skyMxB : packoffset(c53);
  float4 sunMxR : packoffset(c54);
  float4 sunMxG : packoffset(c55);
  float4 sunMxB : packoffset(c56);
  float4 skyRotationTransition : packoffset(c57);
  float4 debugColorOverride : packoffset(c58);
  float4 debugAlphaOverride : packoffset(c59);
  float4 debugNormalOverride : packoffset(c60);
  float4 debugSpecularOverride : packoffset(c61);
  float4 debugGlossOverride : packoffset(c62);
  float4 debugOcclusionOverride : packoffset(c63);
  float4 debugStreamerControl : packoffset(c64);
  float4 emblemLUTSelector : packoffset(c65);
  float4 colorMatrixR : packoffset(c66);
  float4 colorMatrixG : packoffset(c67);
  float4 colorMatrixB : packoffset(c68);
  float4 gameTime : packoffset(c69);
  float4 gameTick : packoffset(c70);
  float4 subpixelOffset : packoffset(c71);
  float4 viewportDimensions : packoffset(c72);
  float4 viewSpaceScaleBias : packoffset(c73);
  float4 ui3dUVSetup0 : packoffset(c74);
  float4 ui3dUVSetup1 : packoffset(c75);
  float4 ui3dUVSetup2 : packoffset(c76);
  float4 ui3dUVSetup3 : packoffset(c77);
  float4 ui3dUVSetup4 : packoffset(c78);
  float4 ui3dUVSetup5 : packoffset(c79);
  float4 clipSpaceLookupScale : packoffset(c80);
  float4 clipSpaceLookupOffset : packoffset(c81);
  uint4 computeSpriteControl : packoffset(c82);
  float4 invBcTexSizes : packoffset(c83);
  float4 invMaskTexSizes : packoffset(c84);
  float4 relHDRExposure : packoffset(c85);
  uint4 triDensityFlags : packoffset(c86);
  float4 triDensityParams : packoffset(c87);
  float4 voldecalRevealTextureInfo : packoffset(c88);
  float4 extraClipPlane0 : packoffset(c89);
  float4 extraClipPlane1 : packoffset(c90);
  float4 shaderDebug : packoffset(c91);
  uint isDepthHack : packoffset(c92);
}


// Manually added Structs for ld_structured_indexable fix.

struct ModelInstanceData
{
    
    uint boneArrayIndex;           // Offset:    0
    uint shaderConstantSet;        // Offset:    4
    uint flagsAndPrevFrameIndex;   // Offset:    8
    uint worldMatrix;              // Offset:   12
    uint siegeAnimStateOffset;     // Offset:   16
    uint prevFrameSiegeAnimStateOffset;// Offset:   20

};                        // Offset:    0 Size:    24
struct GpuBoneData
{
    
    float4 mat[3];                 // Offset:    0
    float4 extra;                  // Offset:   48

};                        // Offset:    0 Size:    64

StructuredBuffer<ModelInstanceData> modelInstanceBuffer : register(t4);
StructuredBuffer<GpuBoneData> boneMatrixBuffer : register(t5);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float3 v0 : POSITION0,
  float4 v1 : BLENDWEIGHT0,
  uint4 v2 : BLENDINDICES0,
  uint v3 : TEXCOORD15,
  out float4 o0 : SV_POSITION0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;


// Manual Fix:
// ld_structured_indexable(structured_buffer, stride=24)(mixed,mixed,mixed,mixed) r0.x, v3.x, l(0), t4.xxxx
r0.x = modelInstanceBuffer[v3.x].boneArrayIndex.x;

  if (r0.x != 0) {
    r0.y = v1.x != 0.000000;
    if (r0.y != 0) {
      r0.y = (int)r0.x + (int)v2.x;
      
// Manual Fix:
//    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, l(0), t5.xyzw
r1.xyzw = boneMatrixBuffer[r0.y].mat[0].xyzw;

      r0.z = dot(r1.xyz, v0.xyz);
      r0.z = r0.z + r1.w;
      r1.x = v1.x * r0.z;

// Manual Fix:
//    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[1].xyzw;

      r0.z = dot(r2.xyz, v0.xyz);
      r0.z = r0.z + r2.w;

// Manual Fix:
//    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(32), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[2].xyzw;

      r0.y = dot(r2.xyz, v0.xyz);
      r0.y = r0.y + r2.w;
      r1.yz = v1.xx * r0.zy;
      r0.y = v1.y != 0.000000;
      if (r0.y != 0) {
        r0.y = (int)r0.x + (int)v2.y;
        
// Manual Fix:
//      ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(0), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[0].xyzw;
      
        r0.z = dot(r2.xyz, v0.xyz);
        r0.z = r0.z + r2.w;
        r1.x = r0.z * v1.y + r1.x;
        
// Manual Fix:
//      ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[1].xyzw;
      
        r0.z = dot(r2.xyz, v0.xyz);
        r0.z = r0.z + r2.w;
        r1.y = r0.z * v1.y + r1.y;
        
// Manual Fix:
//      ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(32), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[2].xyzw;
      
        r0.y = dot(r2.xyz, v0.xyz);
        r0.y = r0.y + r2.w;
        r1.z = r0.y * v1.y + r1.z;
        r0.y = v1.z != 0.000000;
        if (r0.y != 0) {
          r0.y = (int)r0.x + (int)v2.z;
          
// Manual Fix:
//        ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(0), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[0].xyzw;
        
          r0.z = dot(r2.xyz, v0.xyz);
          r0.z = r0.z + r2.w;
          r1.x = r0.z * v1.z + r1.x;
          
// Manual Fix:
//        ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[1].xyzw;
       
          r0.z = dot(r2.xyz, v0.xyz);
          r0.z = r0.z + r2.w;
          r1.y = r0.z * v1.z + r1.y;
          
// Manual Fix:
//        ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(32), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.y].mat[2].xyzw;
        
          r0.y = dot(r2.xyz, v0.xyz);
          r0.y = r0.y + r2.w;
          r1.z = r0.y * v1.z + r1.z;
          r0.y = v1.w != 0.000000;
          if (r0.y != 0) {
            r0.x = (int)r0.x + (int)v2.w;

// Manual Fix:
//          ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(0), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.x].mat[0].xyzw;

            r0.y = dot(r2.xyz, v0.xyz);
            r0.y = r0.y + r2.w;
            r1.x = r0.y * v1.w + r1.x;
            
// Manual Fix:
//          ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(16), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.x].mat[1].xyzw;

            r0.y = dot(r2.xyz, v0.xyz);
            r0.y = r0.y + r2.w;
            r1.y = r0.y * v1.w + r1.y;
            
// Manual Fix:
//          ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.xyzw, r0.x, l(32), t5.xyzw
r0.xyzw = boneMatrixBuffer[r0.x].mat[2].xyzw;

            r0.x = dot(r0.xyz, v0.xyz);
            r0.x = r0.x + r0.w;
            r1.z = r0.x * v1.w + r1.z;
          }
        }
      }
    } else {
      r1.xyz = float3(0,0,0);
    }
  } else {
    r1.xyz = v0.xyz;
  }

// Manual Fix:
// ld_structured_indexable(structured_buffer, stride=24)(mixed,mixed,mixed,mixed) r0.x, v3.x, l(12), t4.xxxx
r0.x = modelInstanceBuffer[v3.x].worldMatrix.x;

  if (r0.x != 0) {
  
// Manual Fix:
//  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(0), t5.xyzw
r2.xyzw = boneMatrixBuffer[r0.x].mat[0].xyzw;
 
// Manual Fix:
  //   ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(16), t5.xyzw
r3.xyzw = boneMatrixBuffer[r0.x].mat[1].xyzw;
  
// Manual Fix:
//  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.xyzw, r0.x, l(32), t5.xywz
r0.xyzw = boneMatrixBuffer[r0.x].mat[2].xyzw;
  
    r4.xyz = r0.xyw;
    r0.x = r2.w;
    r0.y = r3.w;
  } else {
    r2.xyz = float3(1,0,0);
    r3.xyz = float3(0,1,0);
    r4.xyz = float3(0,0,1);
    r0.xyz = float3(0,0,0);
  }
  r0.xyz = -eyeOffset.xyz + r0.xyz;
  r1.w = 1;
  r2.w = r0.x;
  r0.x = dot(r1.xyzw, r2.xyzw);
  r3.w = r0.y;
  r0.y = dot(r1.xyzw, r3.xyzw);
  r4.w = r0.z;
  r0.z = dot(r1.xyzw, r4.xyzw);
  r1.xyzw = viewProjectionMatrix._m10_m11_m12_m13 * r0.yyyy;
  r1.xyzw = r0.xxxx * viewProjectionMatrix._m00_m01_m02_m03 + r1.xyzw;
  r0.xyzw = r0.zzzz * viewProjectionMatrix._m20_m21_m22_m23 + r1.xyzw;
  o0.xyzw = viewProjectionMatrix._m30_m31_m32_m33 + r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.2.6 on Sat Nov 07 17:37:41 2015
//
//
// Buffer Definitions: 
//
// cbuffer PerSceneConsts
// {
//
//   row_major float4x4 projectionMatrix;// Offset:    0 Size:    64 [unused]
//   row_major float4x4 viewMatrix;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 viewProjectionMatrix;// Offset:  128 Size:    64
//   row_major float4x4 inverseProjectionMatrix;// Offset:  192 Size:    64 [unused]
//   row_major float4x4 inverseViewMatrix;// Offset:  256 Size:    64 [unused]
//   row_major float4x4 inverseViewProjectionMatrix;// Offset:  320 Size:    64 [unused]
//   float4 eyeOffset;                  // Offset:  384 Size:    16
//   float4 adsZScale;                  // Offset:  400 Size:    16 [unused]
//   float4 hdrControl0;                // Offset:  416 Size:    16 [unused]
//   float4 hdrControl1;                // Offset:  432 Size:    16 [unused]
//   float4 fogColor;                   // Offset:  448 Size:    16 [unused]
//   float4 fogConsts;                  // Offset:  464 Size:    16 [unused]
//   float4 fogConsts2;                 // Offset:  480 Size:    16 [unused]
//   float4 fogConsts3;                 // Offset:  496 Size:    16 [unused]
//   float4 fogConsts4;                 // Offset:  512 Size:    16 [unused]
//   float4 fogConsts5;                 // Offset:  528 Size:    16 [unused]
//   float4 fogConsts6;                 // Offset:  544 Size:    16 [unused]
//   float4 fogConsts7;                 // Offset:  560 Size:    16 [unused]
//   float4 fogConsts8;                 // Offset:  576 Size:    16 [unused]
//   float4 fogConsts9;                 // Offset:  592 Size:    16 [unused]
//   float3 sunFogDir;                  // Offset:  608 Size:    12 [unused]
//   float4 sunFogColor;                // Offset:  624 Size:    16 [unused]
//   float2 sunFog;                     // Offset:  640 Size:     8 [unused]
//   float4 zNear;                      // Offset:  656 Size:    16 [unused]
//   float3 clothPrimaryTint;           // Offset:  672 Size:    12 [unused]
//   float3 clothSecondaryTint;         // Offset:  688 Size:    12 [unused]
//   float4 renderTargetSize;           // Offset:  704 Size:    16 [unused]
//   float4 upscaledTargetSize;         // Offset:  720 Size:    16 [unused]
//   float4 materialColor;              // Offset:  736 Size:    16 [unused]
//   float4 cameraUp;                   // Offset:  752 Size:    16 [unused]
//   float4 cameraLook;                 // Offset:  768 Size:    16 [unused]
//   float4 cameraSide;                 // Offset:  784 Size:    16 [unused]
//   float4 cameraVelocity;             // Offset:  800 Size:    16 [unused]
//   float4 skyMxR;                     // Offset:  816 Size:    16 [unused]
//   float4 skyMxG;                     // Offset:  832 Size:    16 [unused]
//   float4 skyMxB;                     // Offset:  848 Size:    16 [unused]
//   float4 sunMxR;                     // Offset:  864 Size:    16 [unused]
//   float4 sunMxG;                     // Offset:  880 Size:    16 [unused]
//   float4 sunMxB;                     // Offset:  896 Size:    16 [unused]
//   float4 skyRotationTransition;      // Offset:  912 Size:    16 [unused]
//   float4 debugColorOverride;         // Offset:  928 Size:    16 [unused]
//   float4 debugAlphaOverride;         // Offset:  944 Size:    16 [unused]
//   float4 debugNormalOverride;        // Offset:  960 Size:    16 [unused]
//   float4 debugSpecularOverride;      // Offset:  976 Size:    16 [unused]
//   float4 debugGlossOverride;         // Offset:  992 Size:    16 [unused]
//   float4 debugOcclusionOverride;     // Offset: 1008 Size:    16 [unused]
//   float4 debugStreamerControl;       // Offset: 1024 Size:    16 [unused]
//   float4 emblemLUTSelector;          // Offset: 1040 Size:    16 [unused]
//   float4 colorMatrixR;               // Offset: 1056 Size:    16 [unused]
//   float4 colorMatrixG;               // Offset: 1072 Size:    16 [unused]
//   float4 colorMatrixB;               // Offset: 1088 Size:    16 [unused]
//   float4 gameTime;                   // Offset: 1104 Size:    16 [unused]
//   float4 gameTick;                   // Offset: 1120 Size:    16 [unused]
//   float4 subpixelOffset;             // Offset: 1136 Size:    16 [unused]
//   float4 viewportDimensions;         // Offset: 1152 Size:    16 [unused]
//   float4 viewSpaceScaleBias;         // Offset: 1168 Size:    16 [unused]
//   float4 ui3dUVSetup0;               // Offset: 1184 Size:    16 [unused]
//   float4 ui3dUVSetup1;               // Offset: 1200 Size:    16 [unused]
//   float4 ui3dUVSetup2;               // Offset: 1216 Size:    16 [unused]
//   float4 ui3dUVSetup3;               // Offset: 1232 Size:    16 [unused]
//   float4 ui3dUVSetup4;               // Offset: 1248 Size:    16 [unused]
//   float4 ui3dUVSetup5;               // Offset: 1264 Size:    16 [unused]
//   float4 clipSpaceLookupScale;       // Offset: 1280 Size:    16 [unused]
//   float4 clipSpaceLookupOffset;      // Offset: 1296 Size:    16 [unused]
//   uint4 computeSpriteControl;        // Offset: 1312 Size:    16 [unused]
//   float4 invBcTexSizes;              // Offset: 1328 Size:    16 [unused]
//   float4 invMaskTexSizes;            // Offset: 1344 Size:    16 [unused]
//   float4 relHDRExposure;             // Offset: 1360 Size:    16 [unused]
//   uint4 triDensityFlags;             // Offset: 1376 Size:    16 [unused]
//   float4 triDensityParams;           // Offset: 1392 Size:    16 [unused]
//   float4 voldecalRevealTextureInfo;  // Offset: 1408 Size:    16 [unused]
//   float4 extraClipPlane0;            // Offset: 1424 Size:    16 [unused]
//   float4 extraClipPlane1;            // Offset: 1440 Size:    16 [unused]
//   float4 shaderDebug;                // Offset: 1456 Size:    16 [unused]
//   uint isDepthHack;                  // Offset: 1472 Size:     4 [unused]
//
// }
//
// Resource bind info for modelInstanceBuffer
// {
//
//   struct ModelInstanceData
//   {
//       
//       uint boneArrayIndex;           // Offset:    0
//       uint shaderConstantSet;        // Offset:    4
//       uint flagsAndPrevFrameIndex;   // Offset:    8
//       uint worldMatrix;              // Offset:   12
//       uint siegeAnimStateOffset;     // Offset:   16
//       uint prevFrameSiegeAnimStateOffset;// Offset:   20
//
//   } $Element;                        // Offset:    0 Size:    24
//
// }
//
// Resource bind info for boneMatrixBuffer
// {
//
//   struct GpuBoneData
//   {
//       
//       float4 mat[3];                 // Offset:    0
//       float4 extra;                  // Offset:   48
//
//   } $Element;                        // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// modelInstanceBuffer               texture  struct         r/o    4        1
// boneMatrixBuffer                  texture  struct         r/o    5        1
// PerSceneConsts                    cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// BLENDWEIGHT              0   xyzw        1     NONE   float   xyzw
// BLENDINDICES             0   xyzw        2     NONE    uint   xyzw
// TEXCOORD                15   x           3     NONE    uint   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[25], immediateIndexed
dcl_resource_structured t4, 24 
dcl_resource_structured t5, 64 
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.x
dcl_output_siv o0.xyzw, position
dcl_temps 5
ld_structured_indexable(structured_buffer, stride=24)(mixed,mixed,mixed,mixed) r0.x, v3.x, l(0), t4.xxxx
if_nz r0.x
  ne r0.y, v1.x, l(0.000000)
  if_nz r0.y
    iadd r0.y, r0.x, v2.x
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r1.xyzw, r0.y, l(0), t5.xyzw
    dp3 r0.z, r1.xyzx, v0.xyzx
    add r0.z, r1.w, r0.z
    mul r1.x, r0.z, v1.x
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t5.xyzw
    dp3 r0.z, r2.xyzx, v0.xyzx
    add r0.z, r2.w, r0.z
    ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(32), t5.xyzw
    dp3 r0.y, r2.xyzx, v0.xyzx
    add r0.y, r2.w, r0.y
    mul r1.yz, r0.zzyz, v1.xxxx
    ne r0.y, v1.y, l(0.000000)
    if_nz r0.y
      iadd r0.y, r0.x, v2.y
      ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(0), t5.xyzw
      dp3 r0.z, r2.xyzx, v0.xyzx
      add r0.z, r2.w, r0.z
      mad r1.x, r0.z, v1.y, r1.x
      ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t5.xyzw
      dp3 r0.z, r2.xyzx, v0.xyzx
      add r0.z, r2.w, r0.z
      mad r1.y, r0.z, v1.y, r1.y
      ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(32), t5.xyzw
      dp3 r0.y, r2.xyzx, v0.xyzx
      add r0.y, r2.w, r0.y
      mad r1.z, r0.y, v1.y, r1.z
      ne r0.y, v1.z, l(0.000000)
      if_nz r0.y
        iadd r0.y, r0.x, v2.z
        ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(0), t5.xyzw
        dp3 r0.z, r2.xyzx, v0.xyzx
        add r0.z, r2.w, r0.z
        mad r1.x, r0.z, v1.z, r1.x
        ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(16), t5.xyzw
        dp3 r0.z, r2.xyzx, v0.xyzx
        add r0.z, r2.w, r0.z
        mad r1.y, r0.z, v1.z, r1.y
        ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.y, l(32), t5.xyzw
        dp3 r0.y, r2.xyzx, v0.xyzx
        add r0.y, r2.w, r0.y
        mad r1.z, r0.y, v1.z, r1.z
        ne r0.y, v1.w, l(0.000000)
        if_nz r0.y
          iadd r0.x, r0.x, v2.w
          ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(0), t5.xyzw
          dp3 r0.y, r2.xyzx, v0.xyzx
          add r0.y, r2.w, r0.y
          mad r1.x, r0.y, v1.w, r1.x
          ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(16), t5.xyzw
          dp3 r0.y, r2.xyzx, v0.xyzx
          add r0.y, r2.w, r0.y
          mad r1.y, r0.y, v1.w, r1.y
          ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.xyzw, r0.x, l(32), t5.xyzw
          dp3 r0.x, r0.xyzx, v0.xyzx
          add r0.x, r0.w, r0.x
          mad r1.z, r0.x, v1.w, r1.z
        endif 
      endif 
    endif 
  else 
    mov r1.xyz, l(0,0,0,0)
  endif 
else 
  mov r1.xyz, v0.xyzx
endif 
ld_structured_indexable(structured_buffer, stride=24)(mixed,mixed,mixed,mixed) r0.x, v3.x, l(12), t4.xxxx
if_nz r0.x
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r2.xyzw, r0.x, l(0), t5.xyzw
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r3.xyzw, r0.x, l(16), t5.xyzw
  ld_structured_indexable(structured_buffer, stride=64)(mixed,mixed,mixed,mixed) r0.xyzw, r0.x, l(32), t5.xywz
  mov r4.xyz, r0.xywx
  mov r0.x, r2.w
  mov r0.y, r3.w
else 
  mov r2.xyz, l(1.000000,0,0,0)
  mov r3.xyz, l(0,1.000000,0,0)
  mov r4.xyz, l(0,0,1.000000,0)
  mov r0.xyz, l(0,0,0,0)
endif 
add r0.xyz, r0.xyzx, -cb1[24].xyzx
mov r1.w, l(1.000000)
mov r2.w, r0.x
dp4 r0.x, r1.xyzw, r2.xyzw
mov r3.w, r0.y
dp4 r0.y, r1.xyzw, r3.xyzw
mov r4.w, r0.z
dp4 r0.z, r1.xyzw, r4.xyzw
mul r1.xyzw, r0.yyyy, cb1[9].xyzw
mad r1.xyzw, r0.xxxx, cb1[8].xyzw, r1.xyzw
mad r0.xyzw, r0.zzzz, cb1[10].xyzw, r1.xyzw
add o0.xyzw, r0.xyzw, cb1[11].xyzw
ret 
// Approximately 97 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
