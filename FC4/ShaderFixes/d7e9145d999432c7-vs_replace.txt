// HUD - Weapon sight (Recurve bow)

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CGlobalShaderParameterProvider : register(b1)
{
  float4 _BurnColor : packoffset(c0);
  float4 _BurnParams : packoffset(c1);
  float4 _BurnParams2 : packoffset(c2);
  float4 _BurnParams3 : packoffset(c3);
  float4 _CascadedShadowScaleOffsetTile0 : packoffset(c4);
  float4 _CascadedShadowScaleOffsetTile1 : packoffset(c5);
  float4 _GlobalScalars : packoffset(c6);
  float4 _SSS_MiscParams : packoffset(c7);
  float4 _WindSimParamsX : packoffset(c8);
  float4 _WindSimParamsY : packoffset(c9);
  float2 _RangeDepthCompression : packoffset(c10);
  float3 _SSS_Color : packoffset(c11);
  int _BRDFHighQuality : packoffset(c11.w);
}

cbuffer SUserClipPlaneParameterProvider : register(b2)
{
  float4 _UserClipPlane : packoffset(c0);
}

cbuffer CSceneTransformParameterProvider : register(b3)
{
  float4x4 _WorldMatrix : packoffset(c0);
  float3 _WorldPositionFractions : packoffset(c4);
}

cbuffer CSceneGeometry : register(b4)
{
  float4 _GeometryPickingID : packoffset(c0);
  float4 _MeshDecompression : packoffset(c1);
  float4 _NormalizedXYBBox : packoffset(c2);
}

cbuffer Unlit : register(b5)
{
  float2 _DiffuseTiling1 : packoffset(c0);
  float4 _DiffuseColor1 : packoffset(c1);
  float2 _MaskTiling1 : packoffset(c2);
  float _MaskValue1 : packoffset(c2.z);
  float _MaskAnimSpeed1 : packoffset(c2.w);
  float _NormalAttenuationPower : packoffset(c3);
  float _NormalAttenuationBias : packoffset(c3.y);
  float4 _UVAnimControlFlags : packoffset(c4);
  float4 _UVAnimControlParams : packoffset(c5);
  float4 _MaskUVAnimControlFlags : packoffset(c6);
  float4 _MaskUVAnimControlParams : packoffset(c7);
  float _HDRMul : packoffset(c8);
  bool _NoDepthTest : packoffset(c8.y);
  bool _UI : packoffset(c8.z);
  bool _Particles : packoffset(c8.w);
  float _AlphaOffset : packoffset(c9);
  float4 _MaterialPickingID : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

#include <crosshair.hlsl>

void main(
  int4 v0 : position0,
  int2 v1 : texcoord0,
  float4 v2 : normal0,
  float4 v3 : color0,
  out float4 o0 : SV_Position0,
  out float o1 : SV_ClipDistance0,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float3 o4 : TEXCOORD2,
  out float2 o5 : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = _WorldPositionFractions.xyz + -_CameraPositionFractions_ZOffsetWS.xyz;
  r1.x = _WorldMatrix._m30;
  r1.y = _WorldMatrix._m31;
  r1.z = _WorldMatrix._m32;
  r2.xyz = -_CameraPosition_DistanceScale.xyz + r1.xyz;
  r3.xyz = v0.xyz;
  r3.xyz = r3.xyz * _MeshDecompression.yyy + _MeshDecompression.xxx;
  r4.x = dot(r3.xyz, _WorldMatrix._m00_m10_m20);
  r4.y = dot(r3.xyz, _WorldMatrix._m01_m11_m21);
  r4.z = dot(r3.xyz, _WorldMatrix._m02_m12_m22);
  r2.xyz = r4.xyz + r2.xyz;
  r1.xyz = r4.xyz + r1.xyz;
  r0.xyz = r2.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r0.xyz * r0.www;
  r0.xyz = r2.xyz * _CameraPositionFractions_ZOffsetWS.www + r0.xyz;
  r0.w = 1.000000000e+000;
  o0.x = dot(r0.xyzw, _ViewRotProjectionMatrix._m00_m10_m20_m30);
  o0.y = dot(r0.xyzw, _ViewRotProjectionMatrix._m01_m11_m21_m31);
  o0.z = dot(r0.xyzw, _ViewRotProjectionMatrix._m02_m12_m22_m32);
  o0.w = dot(r0.xyzw, _ViewRotProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = -_CameraPosition_DistanceScale.xyz + r1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = r0.xyz * _CameraPositionFractions_ZOffsetWS.www + r1.xyz;
  r0.w = 1.000000000e+000;
  o1.x = dot(_UserClipPlane.xyzw, r0.xyzw);
  o2.xyzw = v3.xyzw;
  r1.xyz = _CameraPosition_DistanceScale.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r2.xyz = v2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r3.x = dot(r2.xyz, _WorldMatrix._m00_m10_m20);
  r3.y = dot(r2.xyz, _WorldMatrix._m01_m11_m21);
  r3.z = dot(r2.xyz, _WorldMatrix._m02_m12_m22);
  r0.w = dot(r3.xyz, r1.xyz);
  r0.w = saturate(_NormalAttenuationBias + abs(r0.w));
  r0.w = log2(r0.w);
  r0.w = _NormalAttenuationPower * r0.w;
  o3.w = exp2(r0.w);
  r1.xyz = -_CameraPosition_DistanceScale.yzx + r0.yzx;
  o4.xyz = r0.xyz;
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.yzw = r1.xyz * r0.xxx;
  r0.x = 1.000000000e+000;
  r1.x = dot(_FogSHR.xyzw, r0.xyzw);
  r1.y = dot(_FogSHG.xyzw, r0.xyzw);
  r1.z = dot(_FogSHB.xyzw, r0.xyzw);
  o3.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r0.xy = _UVAnimControlParams.xz * _GlobalScalars.yy;
  r0.x = floor(r0.x);
  sincos(r0.y, r1.x, r2.x);
  r0.x = r0.x / _UVAnimControlParams.w;
  r0.yz = v1.xy;
  r0.yz = r0.yz * _MeshDecompression.ww + _MeshDecompression.zz;
  r1.yz = _GlobalScalars.yy * _UVAnimControlParams.xy + r0.yz;
  r3.xyzw = _UVAnimControlFlags.xyzw != float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r0.yz = r3.xx ? r1.yz : r0.yz;
  r4.x = r0.y + r0.x;
  r4.y = _GlobalScalars.y * _UVAnimControlParams.y + r0.z;
  r0.xy = r3.yy ? r4.xy : r0.yz;
  sincos(_GlobalScalars.y, r3.x, r4.x);
  r4.x = r4.x * _UVAnimControlParams.x + r0.x;
  r4.y = r3.x * _UVAnimControlParams.y + r0.y;
  r0.xy = r3.zz ? r4.xy : r0.xy;
  r0.zw = r2.xx * r0.xy;
  r2.x = -r1.x * r0.y + r0.z;
  r2.y = r1.x * r2.x + r0.w;
  o5.xy = r3.ww ? r2.xy : r0.xy;

// Push the scope into the screen.
float4 stereo = StereoParams.Load(0);
float separation = stereo.x; float convergence = stereo.y;

float scope_adjustment, auto_adjustment;

// Use standard stereo correction to align with weapon sight:
scope_adjustment = separation * (o0.w - convergence);

// Adjust based on depth buffer. Since W already has the depth of the
// sight (not 1), we need to multiply the adjustment by W:
auto_adjustment = adjust_from_stereo2mono_depth_buffer(0,0) * o0.w;

// Auto adjust the scope depth, but prevent it coming closer than the weapon
// sight (noticeable when hiding in bushes):
if (abs(auto_adjustment) > abs(scope_adjustment))
	o0.x += auto_adjustment;
else
	o0.x += scope_adjustment;


  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16
//   float4 _FogSHG;                    // Offset:  304 Size:    16
//   float4 _FogSHR;                    // Offset:  320 Size:    16
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer CGlobalShaderParameterProvider
// {
//
//   float4 _BurnColor;                 // Offset:    0 Size:    16 [unused]
//   float4 _BurnParams;                // Offset:   16 Size:    16 [unused]
//   float4 _BurnParams2;               // Offset:   32 Size:    16 [unused]
//   float4 _BurnParams3;               // Offset:   48 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile0;// Offset:   64 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile1;// Offset:   80 Size:    16 [unused]
//   float4 _GlobalScalars;             // Offset:   96 Size:    16
//   float4 _SSS_MiscParams;            // Offset:  112 Size:    16 [unused]
//   float4 _WindSimParamsX;            // Offset:  128 Size:    16 [unused]
//   float4 _WindSimParamsY;            // Offset:  144 Size:    16 [unused]
//   float2 _RangeDepthCompression;     // Offset:  160 Size:     8 [unused]
//   float3 _SSS_Color;                 // Offset:  176 Size:    12 [unused]
//   int _BRDFHighQuality;              // Offset:  188 Size:     4 [unused]
//
// }
//
// cbuffer SUserClipPlaneParameterProvider
// {
//
//   float4 _UserClipPlane;             // Offset:    0 Size:    16
//
// }
//
// cbuffer CSceneTransformParameterProvider
// {
//
//   float4x4 _WorldMatrix;             // Offset:    0 Size:    64
//   float3 _WorldPositionFractions;    // Offset:   64 Size:    12
//
// }
//
// cbuffer CSceneGeometry
// {
//
//   float4 _GeometryPickingID;         // Offset:    0 Size:    16 [unused]
//   float4 _MeshDecompression;         // Offset:   16 Size:    16
//   float4 _NormalizedXYBBox;          // Offset:   32 Size:    16 [unused]
//
// }
//
// cbuffer Unlit
// {
//
//   float2 _DiffuseTiling1;            // Offset:    0 Size:     8 [unused]
//   float4 _DiffuseColor1;             // Offset:   16 Size:    16 [unused]
//   float2 _MaskTiling1;               // Offset:   32 Size:     8 [unused]
//   float _MaskValue1;                 // Offset:   40 Size:     4 [unused]
//   float _MaskAnimSpeed1;             // Offset:   44 Size:     4 [unused]
//   float _NormalAttenuationPower;     // Offset:   48 Size:     4
//   float _NormalAttenuationBias;      // Offset:   52 Size:     4
//   float4 _UVAnimControlFlags;        // Offset:   64 Size:    16
//   float4 _UVAnimControlParams;       // Offset:   80 Size:    16
//   float4 _MaskUVAnimControlFlags;    // Offset:   96 Size:    16 [unused]
//   float4 _MaskUVAnimControlParams;   // Offset:  112 Size:    16 [unused]
//   float _HDRMul;                     // Offset:  128 Size:     4 [unused]
//   bool _NoDepthTest;                 // Offset:  132 Size:     4 [unused]
//   bool _UI;                          // Offset:  136 Size:     4 [unused]
//   bool _Particles;                   // Offset:  140 Size:     4 [unused]
//   float _AlphaOffset;                // Offset:  144 Size:     4 [unused]
//   float4 _MaterialPickingID;         // Offset:  160 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CGlobalShaderParameterProvider    cbuffer      NA          NA    1        1
// SUserClipPlaneParameterProvider    cbuffer      NA          NA    2        1
// CSceneTransformParameterProvider    cbuffer      NA          NA    3        1
// CSceneGeometry                    cbuffer      NA          NA    4        1
// Unlit                             cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE     int   xyz 
// texcoord                 0   xy          1     NONE     int   xy  
// normal                   0   xyzw        2     NONE   float   xyz 
// color                    0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          0   x           1  CLIPDST   float   x   
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyz         4     NONE   float   xyz 
// TEXCOORD                 3   xy          5     NONE   float   xy  
//
vs_4_0
dcl_constantbuffer cb0[48], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_constantbuffer cb3[5], immediateIndexed
dcl_constantbuffer cb4[2], immediateIndexed
dcl_constantbuffer cb5[6], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xy
dcl_temps 5
add r0.xyz, -cb0[6].xyzx, cb3[4].xyzx
mov r1.x, cb3[0].w
mov r1.y, cb3[1].w
mov r1.z, cb3[2].w
add r2.xyz, r1.xyzx, -cb0[8].xyzx
itof r3.xyz, v0.xyzx
mad r3.xyz, r3.xyzx, cb4[1].yyyy, cb4[1].xxxx
dp3 r4.x, r3.xyzx, cb3[0].xyzx
dp3 r4.y, r3.xyzx, cb3[1].xyzx
dp3 r4.z, r3.xyzx, cb3[2].xyzx
add r2.xyz, r2.xyzx, r4.xyzx
add r1.xyz, r1.xyzx, r4.xyzx
add r0.xyz, r0.xyzx, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r0.xyzx
mad r0.xyz, r2.xyzx, cb0[6].wwww, r0.xyzx
mov r0.w, l(1.000000)
dp4 o0.x, r0.xyzw, cb0[44].xyzw
dp4 o0.y, r0.xyzw, cb0[45].xyzw
dp4 o0.z, r0.xyzw, cb0[46].xyzw
dp4 o0.w, r0.xyzw, cb0[47].xyzw
add r0.xyz, r1.xyzx, -cb0[8].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mad r0.xyz, r0.xyzx, cb0[6].wwww, r1.xyzx
mov r0.w, l(1.000000)
dp4 o1.x, cb2[0].xyzw, r0.xyzw
mov o2.xyzw, v3.xyzw
add r1.xyz, -r0.xyzx, cb0[8].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r2.xyz, v2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r3.x, r2.xyzx, cb3[0].xyzx
dp3 r3.y, r2.xyzx, cb3[1].xyzx
dp3 r3.z, r2.xyzx, cb3[2].xyzx
dp3 r0.w, r3.xyzx, r1.xyzx
add_sat r0.w, |r0.w|, cb5[3].y
log r0.w, r0.w
mul r0.w, r0.w, cb5[3].x
exp o3.w, r0.w
add r1.xyz, r0.yzxy, -cb0[8].yzxy
mov o4.xyz, r0.xyzx
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.yzw, r0.xxxx, r1.xxyz
mov r0.x, l(1.000000)
dp4 r1.x, cb0[20].xyzw, r0.xyzw
dp4 r1.y, cb0[19].xyzw, r0.xyzw
dp4 r1.z, cb0[18].xyzw, r0.xyzw
max o3.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xy, cb1[6].yyyy, cb5[5].xzxx
round_ni r0.x, r0.x
sincos r1.x, r2.x, r0.y
div r0.x, r0.x, cb5[5].w
itof r0.yz, v1.xxyx
mad r0.yz, r0.yyzy, cb4[1].wwww, cb4[1].zzzz
mad r1.yz, cb1[6].yyyy, cb5[5].xxyx, r0.yyzy
ne r3.xyzw, cb5[4].xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
movc r0.yz, r3.xxxx, r1.yyzy, r0.yyzy
add r4.x, r0.x, r0.y
mad r4.y, cb1[6].y, cb5[5].y, r0.z
movc r0.xy, r3.yyyy, r4.xyxx, r0.yzyy
sincos r3.x, r4.x, cb1[6].y
mad r4.x, r4.x, cb5[5].x, r0.x
mad r4.y, r3.x, cb5[5].y, r0.y
movc r0.xy, r3.zzzz, r4.xyxx, r0.xyxx
mul r0.zw, r0.xxxy, r2.xxxx
mad r2.x, -r1.x, r0.y, r0.z
mad r2.y, r1.x, r2.x, r0.w
movc o5.xy, r3.wwww, r2.xyxx, r0.xyxx
ret 
// Approximately 74 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
