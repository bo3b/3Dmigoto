// Lighting related/environment (specular highlights, environment reflection, fog, etc)
// Shader has several variants. Some AA variants have two - one for the fill,
// one for the anti-aliased polygon edges:
//
// Hash             |AA | Fill | Vegetation
//------------------+---+------+-----------
// 18d84611abd87606 | 0 | N/A  | Medium
// 6d82ce75a16feb83 | 0 | N/A  | High
// d4e77294d5c49a53 | 2 | Fill | Medium
// aa0ba3aefd2413b1 | 2 | Fill | High
// 8afc461f52eab3e6 | 2 | Edge | Medium
// 26d2628c45dfbeea | 2 | Edge | High
// bae6b98bfda33066 | 4 | Fill | Medium
// c73430e1895ff2f8 | 4 | Fill | High
// ea7ccc99799c7228 | 4 | Edge | Medium
// 54eae19b7f5cc5a0 | 4 | Edge | High
// 6ee0d5531150d4cd | 8 | Fill | Medium
// d120ec3d6d0ad200 | 8 | Fill | High
// 343df1da0e3edd9e | 8 | Edge | Medium
// 9a9b807b3669906a | 8 | Edge | High
//
// And even more variants without specular highlights (seen in some Himalayas missions):
// Hash             |AA | Fill | Vegetation
//------------------+---+------+-----------
// 8870ff9827077a28 | 0 | N/A  | Medium
// 40fdd63f0d945497 | 0 | N/A  | High
// 21bb80dc29b691bb | 2 | Fill | Medium
// 01f23eabdd55a4de | 2 | Fill | High
// 5b0fcbe11dff7344 | 2 | Edge | Medium
// 5059cf988234568b | 2 | Edge | High
// 325594ab3056df53 | 4 | Fill | Medium
// f22672f7d2f3e4d5 | 4 | Fill | High
// 72a6e709c250e563 | 4 | Edge | Medium
// ef62df7b760ff261 | 4 | Edge | High
// 375c5401a4ad4241 | 8 | Fill | Medium
// 775ad5671fae6770 | 8 | Fill | High
// 8a508f9327f97cf3 | 8 | Edge | Medium
// dd3d62e85908f373 | 8 | Edge | High

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CGlobalShaderParameterProvider : register(b1)
{
  float4 _BurnColor : packoffset(c0);
  float4 _BurnParams : packoffset(c1);
  float4 _BurnParams2 : packoffset(c2);
  float4 _BurnParams3 : packoffset(c3);
  float4 _CascadedShadowScaleOffsetTile0 : packoffset(c4);
  float4 _CascadedShadowScaleOffsetTile1 : packoffset(c5);
  float4 _GlobalScalars : packoffset(c6);
  float4 _SSS_MiscParams : packoffset(c7);
  float4 _WindSimParamsX : packoffset(c8);
  float4 _WindSimParamsY : packoffset(c9);
  float2 _RangeDepthCompression : packoffset(c10);
  float3 _SSS_Color : packoffset(c11);
  int _BRDFHighQuality : packoffset(c11.w);
}

cbuffer CDeferredLightingParameterProvider : register(b2)
{
  float4 _DistanceBoostParameters : packoffset(c0);
  float4 _ForceAlbedoOnlyDisableShadows : packoffset(c1);
  float4x4 _InvViewRotProjectionMatrix : packoffset(c2);
  float4 _LightClippingPlanes[24] : packoffset(c6);
  float4 _PointLightAttenuation[4] : packoffset(c30);
  float4 _PointLightClippingInfo[4] : packoffset(c34);
  float4 _PointLightColor[4] : packoffset(c38);
  float4 _PointLightMinMaxDepth[4] : packoffset(c42);
  float4 _PointLightPos[4] : packoffset(c46);
  float4 _QuadParams : packoffset(c50);
  float4 _SpotLightAttenuation[4] : packoffset(c51);
  float4 _SpotLightClippingInfo[4] : packoffset(c55);
  float4 _SpotLightColor[4] : packoffset(c59);
  float4 _SpotLightDirection[4] : packoffset(c63);
  float4 _SpotLightMinMaxDepth[4] : packoffset(c67);
  float4 _SpotLightPos[4] : packoffset(c71);
  float4 _SpotScaleOffsetUVS[4] : packoffset(c75);
  float4 _SpotShadowMapSize : packoffset(c79);
  float4x4 _SpotShadowProjectionMatrix[4] : packoffset(c80);
  float4 _SunColor : packoffset(c96);
  float4 _SunDirection : packoffset(c97);
  float3 _CamVectorOffset : packoffset(c98);
  float3 _CamVectorScaleX : packoffset(c99);
  float3 _CamVectorScaleY : packoffset(c100);
  float _AmbientRange : packoffset(c100.w);
  float _DebugLightComplexityBias : packoffset(c101);
  float _DirectLightOcclusion : packoffset(c101.y);
  float _SSAOPerMaterialIntensity : packoffset(c101.z);
  int _PointLightCount : packoffset(c101.w);
  int _SpotLightCount : packoffset(c102);
  int _SpotLightGoboCount : packoffset(c102.y);
}
SamplerState DepthVPSampler__SampObj___s : register(s0);
SamplerState DeferredReflectedAmbientTexture__SampObj___s : register(s1);
SamplerState EnvironmentMapTexture__SampObj___s : register(s2);
SamplerState EnvironmentMapAttenuationTexture__SampObj___s : register(s3);
SamplerState DeferredAmbientTexture_s : register(s4);
SamplerState ColorPointClamp_s : register(s5);
Texture2D<float4> DepthVPSampler__TexObj__ : register(t0);
Texture2D<float4> DeferredReflectedAmbientTexture__TexObj__ : register(t1);
TextureCube<float4> EnvironmentMapTexture__TexObj__ : register(t2);
Texture2D<float4> EnvironmentMapAttenuationTexture__TexObj__ : register(t3);
Texture2D<float4> DeferredAmbientTexture_TextureObject : register(t4);
Texture2D<float> SSToksvig : register(t5);
Texture2D<float4> GBufferT0 : register(t6);
Texture2D<float4> GBufferT1 : register(t7);
Texture2D<float4> GBufferT2 : register(t8);
Texture2D<float4> GBufferT3 : register(t9);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = DepthVPSampler__TexObj__.SampleLevel(DepthVPSampler__SampObj___s, v1.xy, 0.000000000e+000).xyzw;
  r0.x = _DepthScale.y * r0.x + _DepthScale.x;
  r0.x = 1.000000e+000 / r0.x;

float depth = r0.x;

  r0.y = _CameraDistances.x * _CameraDistances.y;
  r0.x = _CameraDistances.z * r0.x;
  r0.x = r0.y / r0.x;
  r0.x = _CameraDistances.y + -r0.x;
  r0.z = -r0.x * _CameraDistances.w + 1.000000000e+000;
  r0.xy = v1.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, _InvViewRotProjectionMatrix._m00_m10_m20_m30);
  r1.z = dot(r0.xyzw, _InvViewRotProjectionMatrix._m01_m11_m21_m31);
  r1.y = dot(r0.xyzw, _InvViewRotProjectionMatrix._m02_m12_m22_m32);
  r0.x = dot(r0.xyzw, _InvViewRotProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = r1.xyz / r0.xxx;

// Messed up fog:

// r0.xyz = _CameraPosition_DistanceScale.xyz + r0.xyz;
//
// float4 r35, r32, r33, r34;
// r35.xyz = r0.xyz;
// r35.w = 1.0;
// r32.x = dot(r35.xyzw, _ViewProjectionMatrix._m00_m10_m20_m30);
// r32.y = dot(r35.xyzw, _ViewProjectionMatrix._m01_m11_m21_m31);
// r32.z = dot(r35.xyzw, _ViewProjectionMatrix._m02_m12_m22_m32);
// r32.w = dot(r35.xyzw, _ViewProjectionMatrix._m03_m13_m23_m33);

float4 stereo = StereoParams.Load(0);

// r32.x -= stereo.x * (r32.w - stereo.y);
//
// r33.x = dot(r32.xyzw, _InvProjectionMatrix._m00_m10_m20_m30);
// r33.y = dot(r32.xyzw, _InvProjectionMatrix._m01_m11_m21_m31);
// r33.z = dot(r32.xyzw, _InvProjectionMatrix._m02_m12_m22_m32);
// r33.w = dot(r32.xyzw, _InvProjectionMatrix._m03_m13_m23_m33);
//
// r34.x = dot(r33.xyzw, _InvViewMatrix._m00_m10_m20_m30);
// r34.y = dot(r33.xyzw, _InvViewMatrix._m01_m11_m21_m31);
// r34.z = dot(r33.xyzw, _InvViewMatrix._m02_m12_m22_m32);
// r34.w = dot(r33.xyzw, _InvViewMatrix._m03_m13_m23_m33);
//
// r0.xyz = r34.xyz - _CameraPosition_DistanceScale.xyz ;


  r0.xyz = _CameraPosition_DistanceScale.xzy + r0.xyz;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = GBufferT0.Load(r1.xyw).xyzw;
  r3.xyzw = GBufferT1.Load(r1.xyw).xyzw;
  r4.xyzw = GBufferT2.Load(r1.xyw).xyzw;
  r5.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(1, 0)).xzwy;
  r6.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(-1, 0)).xyzw;
  r7.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(0, 1)).xyzw;
  r8.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(0, -1)).xyzw;
  r9.x = r8.x;
  r9.y = r7.x;
  r9.z = r6.x;
  r9.w = r5.x;
  r9.xyzw = r9.xyzw + -r2.xxxx;
  r9.xyzw = abs(r9.xyzw) * float4(1.000000e+001,1.000000e+001,1.000000e+001,1.000000e+001) + float4(1.000000e-001,1.000000e-001,1.000000e-001,1.000000e-001);
  r9.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) / r9.xyzw;
  r0.w = dot(r9.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r0.w = 1.000000e+000 / r0.w;
  r9.xyzw = r9.xyzw * r0.wwww;
  r5.x = r8.y;
  r5.y = r7.y;
  r5.z = r6.y;
  r5.y = dot(r5.xyzw, r9.xyzw);
  r5.xw = (int2)r1.xy & int2(1,1);
  r0.w = (int)r5.x != (int)r5.w;
  r5.z = r2.y;
  r5.yz = r0.ww ? r5.yz : r5.zy;
  r5.x = r2.x * r2.x;
  r5.xyz = float3(-0.000000e+000,-4.980392e-001,-4.980392e-001) + r5.xyz;
  r6.yw = r5.xx + r5.zy;
  r6.x = r6.w + -r5.z;
  r0.w = r5.x + -r5.y;
  r6.z = r0.w + -r5.z;
  r6.xyz = saturate(r6.xyz);
  r2.xy = float2(2.550000e+002,1.300000e+001) * r2.wz;
  r0.w = (uint)r2.x;
  r2.x = (uint)r0.w >> 3;
  r2.x = (int)r2.x & 1;
  r2.x = r2.x;
  r0.w = (int)r0.w & 7;
  r2.w = 3.000000000e+000 * r3.w;
  r2.w = (uint)r2.w;
  r3.xyz = r3.xyz * float3(1.414214e+000,1.414214e+000,1.414214e+000) + float3(-7.071068e-001,-7.071068e-001,-7.071068e-001);
  r3.w = saturate(dot(r3.xyz, r3.xyz));
  r3.w = 1.000000000e+000 + -r3.w;
  r3.w = sqrt(r3.w);
  r5.w = r2.w ? r3.x : r3.w;
  r7.xy = (int)r2.ww == int2(1,2);
  r8.xy = r7.xy ? r3.ww : r3.yz;
  r2.w = r2.w ? r3.w : r3.x;
  r2.w = r7.x ? r3.y : r2.w;
  r5.x = r7.y ? r3.z : r2.w;
  r8.z = 2.000000000e+000;
  r3.xyz = r8.zzy * r8.yyy;
  r5.y = -2.000000000e+000;
  r5.z = r8.x;
  r3.xyz = r3.xyz * r5.zxy + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r7.xyz = float3(2.000000e+000,2.000000e+000,-2.000000e+000) * r5.www;
  r3.xyz = r7.zyz * r5.xzw + r3.xyz;
  r9.x = r8.y;
  r9.yz = r5.xw;
  r7.xyz = r7.xyz * r9.xyz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r9.w = -2.000000000e+000;
  r8.xyz = r9.wxw * r8.xxx;
  r5.y = 2.000000000e+000;
  r5.xyz = r8.xyz * r5.xyz + r7.xyz;
  r7.xyzw = (int)r0.wwww == int4(1,5,6,4);
  if (r7.x != 0) {
    r8.xy = float2(3.200000e+001,2.550000e+002) * r4.xy;
    r2.w = (uint)r8.y;
    r2.w = (int)r2.w & 3;
    r2.w = r2.w;
    r2.w = 3.333333433e-001 * r2.w;
    r8.yzw = r5.xyz;
    r9.x = 0.000000000e+000;
    r10.xy = float2(0.000000e+000,0.000000e+000);
    r3.w = 1.500000060e-001;
  } else {
    r9.xyzw = GBufferT3.Load(r1.xyw).xyzw;
    r4.x = 2.550000000e+002 * r4.x;
    r4.x = (uint)r4.x;
    r5.w = (uint)r4.x >> 4;
    r5.w = r5.w;
    r10.y = 6.666667014e-002 * r5.w;
    r4.x = (int)r4.x & 15;
    r4.x = r4.x;
    r3.w = 6.666667014e-002 * r4.x;
    r4.x = (int)r0.w == 3;
    if (r4.x != 0) {
      r11.xyz = r9.yzw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
      r4.x = dot(r11.xyz, r11.xyz);
      r4.x = rsqrt(r4.x);
      r8.yzw = r11.xyz * r4.xxx;
      r10.x = r4.w;
    } else {
      r9.yzw = r9.yzw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
      r4.x = dot(r9.yzw, r9.yzw);
      r4.x = rsqrt(r4.x);
      r9.yzw = r9.yzw * r4.xxx;
      r10.zw = (int)r0.ww == int2(4,5);
      r4.x = r10.w ? 1.000000000e+000 : r4.w;
      r8.yzw = r10.zzz ? r9.yzw : r5.xyz;
      r10.x = r10.z ? r4.w : r4.x;
      r9.x = 0.000000000e+000;
    }
    r2.w = r4.y;
    r8.x = 0.000000000e+000;
  }
  r1.xyzw = SSToksvig.Load(r1.xyz); //.xyzw;
  r1.y = exp2(r2.y);
  r1.z = 1.000000000e+000 + -r1.x;
  r1.y = r1.y * r1.z + r1.x;
  r1.x = r1.x / r1.y;
  r1.x = log2(abs(r1.x));
  r1.x = 1.109765396e-001 * r1.x;
  r1.x = exp2(r1.x);
  r1.x = r2.z * r1.x;
  r1.y = 5.699999928e-001 * r1.x;
  r1.y = _BRDFHighQuality ? r1.x : r1.y;
  r1.y = r7.y ? r1.y : r1.x;
  r1.zw = r7.zz ? float2(0.000000e+000,1.000000e+000) : r10.yx;

// Adjusted version of r0 for various fixes
// multiplier found through experimenting at different times of day/night
float multiplier = depth * 8192;
float3 adj_r0 = r0 - mul(float4(stereo.x * multiplier, 0, 0, 0), _InvViewRotProjectionMatrix).xzy; // Axis order XZY
//adj_r0 = r0;

  r0.xyz = _CameraPosition_DistanceScale.xzy + -r0.xyz;
  r2.y = dot(r0.xyz, r0.xyz);
  r2.y = sqrt(r2.y);
  r0.xyz = r0.xyz / r2.yyy;

// Do this second so r1.z is the adjusted version, which fixes fog
adj_r0.xyz = _CameraPosition_DistanceScale.xzy + -adj_r0.xyz;
r2.y = dot(adj_r0.xyz, adj_r0.xyz);
r2.y = sqrt(r2.y);
adj_r0.xyz = adj_r0.xyz / r2.yyy;

  r10.w = dot(r5.xzy, adj_r0.xyz); // Use adjusted position to fix highlights on surfaces

  r2.z = r3.w * 8.200000226e-002 + 1.799999923e-002;
  r4.xyw = r6.xyz + -r2.zzz;
  r4.xyw = r1.zzz * r4.xyw + r2.zzz;
  r1.z = 1.000000000e+000 + -r1.z;
  r6.xyz = r6.xyz * r1.zzz;
  r1.z = r0.w;
  r3.w = r1.z >= 9.998999834e-001;
  r3.w = r3.w ? 1.000000 : 0;
  r1.z = 1.000100017e+000 >= r1.z;
  r1.z = r1.z ? 1.000000 : 0;
  r1.z = r3.w * r1.z;
  r11.xyzw = DeferredAmbientTexture_TextureObject.Sample(DeferredAmbientTexture_s, v1.xy).xyzw;
  r9.yzw = r11.xyz * r11.xyz;
  r9.yzw = _AmbientRange * r9.yzw;
  r3.w = saturate(r2.y * _DistanceBoostParameters.x + _DistanceBoostParameters.y);
  r3.w = _DistanceBoostParameters.z * r3.w;
  r2.x = r3.w * r2.x;
  r11.xyz = r9.zzz * r2.xxx + r9.yzw;
  r12.xyzw = DeferredReflectedAmbientTexture__TexObj__.Sample(DeferredReflectedAmbientTexture__SampObj___s, v1.xy).xyzw;
  r12.xyz = r12.xyz * r12.xyz;
  r2.x = dot(r12.xyz, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  r2.x = r2.x >= 9.999999747e-005;
  r2.x = r2.x ? 1.000000 : 0;
  r12.xyz = r12.xyz * _AmbientRange + -r9.yzw;
  r9.yzw = r2.xxx * r12.xyz + r9.yzw;
  r0.w = (int)r0.w == 3;
  r0.w = (int)r0.w | (int)r7.w;
  r0.w = r0.w ? 1.000000 : 0;
  r0.w = _SSAOPerMaterialIntensity * r0.w;
  r2.x = 1.000000000e+000 + -r11.w;
  r0.w = r0.w * r2.x + r11.w;
  r2.x = 5.000000000e-001 * r1.z;

  r12.yzw = -adj_r0.zyx; // Use adjusted position to fix fog while camera is tilted

  r12.x = 1.000000000e+000;
  r13.x = dot(_FogSHR.xyzw, r12.xyzw);
  r13.y = dot(_FogSHG.xyzw, r12.xyzw);
  r13.z = dot(_FogSHB.xyzw, r12.xyzw);
  r12.xyw = max(r13.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r3.w = r12.z * r2.y;
  r2.y = saturate(r2.y * _FogParams.y + _FogParams.x);
  r3.w = _HeightFogParams.y * r3.w;
  r3.w = max(r3.w, -1.250000000e+002);
  r5.w = 9.999999975e-007 < abs(r3.w);
  r6.w = exp2(-r3.w);
  r6.w = 1.000000000e+000 + -r6.w;
  r3.w = r6.w / r3.w;
  r3.w = r5.w ? r3.w : 1.000000000e+000;
  r3.w = r3.w * _HeightFogParams.x + _FogParams.w;
  r2.y = r3.w * r2.y;
  r2.y = -_FogParams.z * r2.y;
  r2.y = exp2(r2.y);
  r12.xyz = -r12.xyw * r2.yyy + r12.xyw;
  r10.xyz = r7.www ? r8.yzw : r5.xyz;
  r5.xyz = r0.xzy * r3.xyz;
  r5.xyz = r0.yxz * r3.yzx + -r5.xyz;
  r7.xyw = r5.xyz * r3.xyz;
  r3.xyz = r3.zxy * r5.yzx + -r7.xyw;
  r3.xyz = r3.xyz + -r10.xyz;
  r3.xyz = r1.www * r3.xyz + r10.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;

// Use adjusted position to fix environment map reflection with texture quality >= high:
  r3.w = dot(r3.xzy, adj_r0.xyz);

  r3.xyzw = _BRDFHighQuality ? r3.xyzw : r10.xyzw;
  r1.w = r3.w + r3.w;

// Use adjusted position to fix environment map reflection:
  r0.xyz = -r1.www * r3.xzy + adj_r0.xyz;

  r0.xyz = -r0.xyz;
  r1.w = -r1.y * 6.000000000e+000 + 6.000000000e+000;
  r3.xyzw = EnvironmentMapTexture__TexObj__.SampleLevel(EnvironmentMapTexture__SampObj___s, r0.xyz, r1.w).xyzw;
  r0.xyz = r3.xyz * _EnvironmentMapColorScale.xyz + _EnvironmentMapColorOffset.xyz;
  if (_BRDFHighQuality != 0) {
    r1.x = abs(r10.w);
    r3.xyzw = EnvironmentMapAttenuationTexture__TexObj__.SampleLevel(EnvironmentMapAttenuationTexture__SampObj___s, r1.xy, 0.000000000e+000).xyzw;
    r3.xyz = saturate(r4.xyw * r3.yyy + r3.xxx);
    r3.xyz = r3.xyz * r0.xyz;
  } else {
    r5.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyw;
    r1.x = -8.656169891e+000 * abs(r10.w);
    r1.x = exp2(r1.x);
    r1.y = r1.y * r1.y;
    r1.y = r1.y * 8.299999833e-001 + 1.700000018e-001;
    r1.x = r1.x * r1.y;
    r1.xyw = r5.xyz * r1.xxx + r4.xyw;
    r3.xyz = r1.xyw * r0.xyz;
  }
  r0.x = -r1.z * 5.000000000e-001 + 1.000000000e+000;
  r0.x = saturate(r0.w * r0.x + r2.x);
  r0.y = r7.z ? 1.000000000e+000 : r4.z;
  r0.y = r0.y * r0.x;
  r0.yzw = r11.xyz * r0.yyy;
  r1.x = dot(r9.yzw, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  r1.xyz = r3.xyz * r1.xxx;
  r1.w = r7.z ? 1.000000000e+000 : r2.w;
  r1.xyz = r1.xyz * r1.www;
  r1.xyz = r1.xyz * r0.xxx;
  r0.x = r9.x * 4.000000000e+000 + 1.000000000e+000;
  r1.w = 1.000000000e+000 + -r2.z;
  r0.yzw = r6.xyz * r0.yzw;
  r0.yzw = r0.yzw * r1.www;
  r0.yzw = r6.xyz * r8.xxx + r0.yzw;
  r0.xyz = r1.xyz * r0.xxx + r0.yzw;
  r0.xyz = r0.xyz * r2.yyy + r12.xyz;
  r0.xyz = _BloomAdaptationFactor.zzz * r0.xyz;
  r0.w = 5.000000000e-001 < _ForceAlbedoOnlyDisableShadows.x;
  o0.xyz = r0.www ? r6.xyz : r0.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16
//   float4 _FogSHB;                    // Offset:  288 Size:    16
//   float4 _FogSHG;                    // Offset:  304 Size:    16
//   float4 _FogSHR;                    // Offset:  320 Size:    16
//   float4 _HeightFogParams;           // Offset:  336 Size:    16
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12
//
// }
//
// cbuffer CGlobalShaderParameterProvider
// {
//
//   float4 _BurnColor;                 // Offset:    0 Size:    16 [unused]
//   float4 _BurnParams;                // Offset:   16 Size:    16 [unused]
//   float4 _BurnParams2;               // Offset:   32 Size:    16 [unused]
//   float4 _BurnParams3;               // Offset:   48 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile0;// Offset:   64 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile1;// Offset:   80 Size:    16 [unused]
//   float4 _GlobalScalars;             // Offset:   96 Size:    16 [unused]
//   float4 _SSS_MiscParams;            // Offset:  112 Size:    16 [unused]
//   float4 _WindSimParamsX;            // Offset:  128 Size:    16 [unused]
//   float4 _WindSimParamsY;            // Offset:  144 Size:    16 [unused]
//   float2 _RangeDepthCompression;     // Offset:  160 Size:     8 [unused]
//   float3 _SSS_Color;                 // Offset:  176 Size:    12 [unused]
//   int _BRDFHighQuality;              // Offset:  188 Size:     4
//
// }
//
// cbuffer CDeferredLightingParameterProvider
// {
//
//   float4 _DistanceBoostParameters;   // Offset:    0 Size:    16
//   float4 _ForceAlbedoOnlyDisableShadows;// Offset:   16 Size:    16
//   float4x4 _InvViewRotProjectionMatrix;// Offset:   32 Size:    64
//   float4 _LightClippingPlanes[24];   // Offset:   96 Size:   384 [unused]
//   float4 _PointLightAttenuation[4];  // Offset:  480 Size:    64 [unused]
//   float4 _PointLightClippingInfo[4]; // Offset:  544 Size:    64 [unused]
//   float4 _PointLightColor[4];        // Offset:  608 Size:    64 [unused]
//   float4 _PointLightMinMaxDepth[4];  // Offset:  672 Size:    64 [unused]
//   float4 _PointLightPos[4];          // Offset:  736 Size:    64 [unused]
//   float4 _QuadParams;                // Offset:  800 Size:    16 [unused]
//   float4 _SpotLightAttenuation[4];   // Offset:  816 Size:    64 [unused]
//   float4 _SpotLightClippingInfo[4];  // Offset:  880 Size:    64 [unused]
//   float4 _SpotLightColor[4];         // Offset:  944 Size:    64 [unused]
//   float4 _SpotLightDirection[4];     // Offset: 1008 Size:    64 [unused]
//   float4 _SpotLightMinMaxDepth[4];   // Offset: 1072 Size:    64 [unused]
//   float4 _SpotLightPos[4];           // Offset: 1136 Size:    64 [unused]
//   float4 _SpotScaleOffsetUVS[4];     // Offset: 1200 Size:    64 [unused]
//   float4 _SpotShadowMapSize;         // Offset: 1264 Size:    16 [unused]
//   float4x4 _SpotShadowProjectionMatrix[4];// Offset: 1280 Size:   256 [unused]
//   float4 _SunColor;                  // Offset: 1536 Size:    16 [unused]
//   float4 _SunDirection;              // Offset: 1552 Size:    16 [unused]
//   float3 _CamVectorOffset;           // Offset: 1568 Size:    12 [unused]
//   float3 _CamVectorScaleX;           // Offset: 1584 Size:    12 [unused]
//   float3 _CamVectorScaleY;           // Offset: 1600 Size:    12 [unused]
//   float _AmbientRange;               // Offset: 1612 Size:     4
//   float _DebugLightComplexityBias;   // Offset: 1616 Size:     4 [unused]
//   float _DirectLightOcclusion;       // Offset: 1620 Size:     4 [unused]
//   float _SSAOPerMaterialIntensity;   // Offset: 1624 Size:     4
//   int _PointLightCount;              // Offset: 1628 Size:     4 [unused]
//   int _SpotLightCount;               // Offset: 1632 Size:     4 [unused]
//   int _SpotLightGoboCount;           // Offset: 1636 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthVPSampler__SampObj__         sampler      NA          NA    0        1
// DeferredReflectedAmbientTexture__SampObj__    sampler      NA          NA    1        1
// EnvironmentMapTexture__SampObj__    sampler      NA          NA    2        1
// EnvironmentMapAttenuationTexture__SampObj__    sampler      NA          NA    3        1
// DeferredAmbientTexture            sampler      NA          NA    4        1
// ColorPointClamp                   sampler      NA          NA    5        1
// DepthVPSampler__TexObj__          texture  float4          2d    0        1
// DeferredReflectedAmbientTexture__TexObj__    texture  float4          2d    1        1
// EnvironmentMapTexture__TexObj__    texture  float4        cube    2        1
// EnvironmentMapAttenuationTexture__TexObj__    texture  float4          2d    3        1
// DeferredAmbientTexture_TextureObject    texture  float4          2d    4        1
// SSToksvig                         texture   float          2d    5        1
// GBufferT0                         texture  float4          2d    6        1
// GBufferT1                         texture  float4          2d    7        1
// GBufferT2                         texture  float4          2d    8        1
// GBufferT3                         texture  float4          2d    9        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CGlobalShaderParameterProvider    cbuffer      NA          NA    1        1
// CDeferredLightingParameterProvider    cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// SV_IsFrontFace           0   x           2    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[58], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[102], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps_siv linear noperspective centroid v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 14
sample_l r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.x, cb0[14].y, r0.x, cb0[14].x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.y, cb0[4].y, cb0[4].x
mul r0.x, r0.x, cb0[4].z
div r0.x, r0.y, r0.x
add r0.x, -r0.x, cb0[4].y
mad r0.z, -r0.x, cb0[4].w, l(1.000000)
mad r0.xy, v1.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb2[2].xyzw
dp4 r1.z, r0.xyzw, cb2[3].xyzw
dp4 r1.y, r0.xyzw, cb2[4].xyzw
dp4 r0.x, r0.xyzw, cb2[5].xyzw
div r0.xyz, r1.xyzx, r0.xxxx
add r0.xyz, r0.xyzx, cb0[8].xzyx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld r2.xyzw, r1.xyww, t6.xyzw
ld r3.xyzw, r1.xyww, t7.xyzw
ld r4.xyzw, r1.xyww, t8.xyzw
sample_aoffimmi(1,0,0) r5.xyzw, v1.xyxx, t6.xzwy, s5
sample_aoffimmi(-1,0,0) r6.xyzw, v1.xyxx, t6.xyzw, s5
sample_aoffimmi(0,1,0) r7.xyzw, v1.xyxx, t6.xyzw, s5
sample_aoffimmi(0,-1,0) r8.xyzw, v1.xyxx, t6.xyzw, s5
mov r9.x, r8.x
mov r9.y, r7.x
mov r9.z, r6.x
mov r9.w, r5.x
add r9.xyzw, -r2.xxxx, r9.xyzw
mad r9.xyzw, |r9.xyzw|, l(10.000000, 10.000000, 10.000000, 10.000000), l(0.100000, 0.100000, 0.100000, 0.100000)
div r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r9.xyzw
dp4 r0.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r9.xyzw, r0.wwww, r9.xyzw
mov r5.x, r8.y
mov r5.y, r7.y
mov r5.z, r6.y
dp4 r5.y, r5.xyzw, r9.xyzw
and r5.xw, r1.xxxy, l(1, 0, 0, 1)
ine r0.w, r5.x, r5.w
mov r5.z, r2.y
movc r5.yz, r0.wwww, r5.yyzy, r5.zzyz
mul r5.x, r2.x, r2.x
add r5.xyz, r5.xyzx, l(-0.000000, -0.498039, -0.498039, 0.000000)
add r6.yw, r5.zzzy, r5.xxxx
add r6.x, -r5.z, r6.w
add r0.w, -r5.y, r5.x
add r6.z, -r5.z, r0.w
mov_sat r6.xyz, r6.xyzx
mul r2.xy, r2.wzww, l(255.000000, 13.000000, 0.000000, 0.000000)
ftou r0.w, r2.x
ushr r2.x, r0.w, l(3)
and r2.x, r2.x, l(1)
utof r2.x, r2.x
and r0.w, r0.w, l(7)
mul r2.w, r3.w, l(3.000000)
ftou r2.w, r2.w
mad r3.xyz, r3.xyzx, l(1.414214, 1.414214, 1.414214, 0.000000), l(-0.707107, -0.707107, -0.707107, 0.000000)
dp3_sat r3.w, r3.xyzx, r3.xyzx
add r3.w, -r3.w, l(1.000000)
sqrt r3.w, r3.w
movc r5.w, r2.w, r3.x, r3.w
ieq r7.xy, r2.wwww, l(1, 2, 0, 0)
movc r8.xy, r7.xyxx, r3.wwww, r3.yzyy
movc r2.w, r2.w, r3.w, r3.x
movc r2.w, r7.x, r3.y, r2.w
movc r5.x, r7.y, r3.z, r2.w
mov r8.z, l(2.000000)
mul r3.xyz, r8.yyyy, r8.zzyz
mov r5.y, l(-2.000000)
mov r5.z, r8.x
mad r3.xyz, r3.xyzx, r5.zxyz, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r7.xyz, r5.wwww, l(2.000000, 2.000000, -2.000000, 0.000000)
mad r3.xyz, r7.zyzz, r5.xzwx, r3.xyzx
mov r9.x, r8.y
mov r9.yz, r5.xxwx
mad r7.xyz, r7.xyzx, r9.xyzx, l(0.000000, 0.000000, 1.000000, 0.000000)
mov r9.w, l(-2.000000)
mul r8.xyz, r8.xxxx, r9.wxww
mov r5.y, l(2.000000)
mad r5.xyz, r8.xyzx, r5.xyzx, r7.xyzx
ieq r7.xyzw, r0.wwww, l(1, 5, 6, 4)
if_nz r7.x
  mul r8.xy, r4.xyxx, l(32.000000, 255.000000, 0.000000, 0.000000)
  ftou r2.w, r8.y
  and r2.w, r2.w, l(3)
  utof r2.w, r2.w
  mul r2.w, r2.w, l(0.333333)
  mov r8.yzw, r5.xxyz
  mov r9.x, l(0)
  mov r10.xy, l(0,0,0,0)
  mov r3.w, l(0.150000)
else 
  ld r9.xyzw, r1.xyww, t9.xyzw
  mul r4.x, r4.x, l(255.000000)
  ftou r4.x, r4.x
  ushr r5.w, r4.x, l(4)
  utof r5.w, r5.w
  mul r10.y, r5.w, l(0.066667)
  and r4.x, r4.x, l(15)
  utof r4.x, r4.x
  mul r3.w, r4.x, l(0.066667)
  ieq r4.x, r0.w, l(3)
  if_nz r4.x
    mad r11.xyz, r9.yzwy, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r4.x, r11.xyzx, r11.xyzx
    rsq r4.x, r4.x
    mul r8.yzw, r4.xxxx, r11.xxyz
    mov r10.x, r4.w
  else 
    mad r9.yzw, r9.yyzw, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
    dp3 r4.x, r9.yzwy, r9.yzwy
    rsq r4.x, r4.x
    mul r9.yzw, r4.xxxx, r9.yyzw
    ieq r10.zw, r0.wwww, l(0, 0, 4, 5)
    movc r4.x, r10.w, l(1.000000), r4.w
    movc r8.yzw, r10.zzzz, r9.yyzw, r5.xxyz
    movc r10.x, r10.z, r4.w, r4.x
    mov r9.x, l(0)
  endif 
  mov r2.w, r4.y
  mov r8.x, l(0)
endif 
ld r1.xyzw, r1.xyzw, t5.xyzw
exp r1.y, r2.y
add r1.z, -r1.x, l(1.000000)
mad r1.y, r1.y, r1.z, r1.x
div r1.x, r1.x, r1.y
log r1.x, |r1.x|
mul r1.x, r1.x, l(0.110977)
exp r1.x, r1.x
mul r1.x, r1.x, r2.z
mul r1.y, r1.x, l(0.570000)
movc r1.y, cb1[11].w, r1.x, r1.y
movc r1.y, r7.y, r1.y, r1.x
movc r1.zw, r7.zzzz, l(0,0,0,1.000000), r10.yyyx
add r0.xyz, -r0.xyzx, cb0[8].xzyx
dp3 r2.y, r0.xyzx, r0.xyzx
sqrt r2.y, r2.y
div r0.xyz, r0.xyzx, r2.yyyy
dp3 r10.w, r5.xzyx, r0.xyzx
mad r2.z, r3.w, l(0.082000), l(0.018000)
add r4.xyw, -r2.zzzz, r6.xyxz
mad r4.xyw, r1.zzzz, r4.xyxw, r2.zzzz
add r1.z, -r1.z, l(1.000000)
mul r6.xyz, r1.zzzz, r6.xyzx
utof r1.z, r0.w
ge r3.w, r1.z, l(0.999900)
and r3.w, r3.w, l(0x3f800000)
ge r1.z, l(1.000100), r1.z
and r1.z, r1.z, l(0x3f800000)
mul r1.z, r1.z, r3.w
sample r11.xyzw, v1.xyxx, t4.xyzw, s4
mul r9.yzw, r11.xxyz, r11.xxyz
mul r9.yzw, r9.yyzw, cb2[100].wwww
mad_sat r3.w, r2.y, cb2[0].x, cb2[0].y
mul r3.w, r3.w, cb2[0].z
mul r2.x, r2.x, r3.w
mad r11.xyz, r9.zzzz, r2.xxxx, r9.yzwy
sample r12.xyzw, v1.xyxx, t1.xyzw, s1
mul r12.xyz, r12.xyzx, r12.xyzx
dp3 r2.x, r12.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
ge r2.x, r2.x, l(0.000100)
and r2.x, r2.x, l(0x3f800000)
mad r12.xyz, r12.xyzx, cb2[100].wwww, -r9.yzwy
mad r9.yzw, r2.xxxx, r12.xxyz, r9.yyzw
ieq r0.w, r0.w, l(3)
or r0.w, r0.w, r7.w
and r0.w, r0.w, l(0x3f800000)
mul r0.w, r0.w, cb2[101].z
add r2.x, -r11.w, l(1.000000)
mad r0.w, r0.w, r2.x, r11.w
mul r2.x, r1.z, l(0.500000)
mov r12.yzw, -r0.zzyx
mov r12.x, l(1.000000)
dp4 r13.x, cb0[20].xyzw, r12.xyzw
dp4 r13.y, cb0[19].xyzw, r12.xyzw
dp4 r13.z, cb0[18].xyzw, r12.xyzw
max r12.xyw, r13.xyxz, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r3.w, r2.y, r12.z
mad_sat r2.y, r2.y, cb0[17].y, cb0[17].x
mul r3.w, r3.w, cb0[21].y
max r3.w, r3.w, l(-125.000000)
lt r5.w, l(0.000001), |r3.w|
exp r6.w, -r3.w
add r6.w, -r6.w, l(1.000000)
div r3.w, r6.w, r3.w
movc r3.w, r5.w, r3.w, l(1.000000)
mad r3.w, r3.w, cb0[21].x, cb0[17].w
mul r2.y, r2.y, r3.w
mul r2.y, r2.y, -cb0[17].z
exp r2.y, r2.y
mad r12.xyz, -r12.xywx, r2.yyyy, r12.xywx
movc r10.xyz, r7.wwww, r8.yzwy, r5.xyzx
mul r5.xyz, r3.xyzx, r0.xzyx
mad r5.xyz, r0.yxzy, r3.yzxy, -r5.xyzx
mul r7.xyw, r3.xyxz, r5.xyxz
mad r3.xyz, r3.zxyz, r5.yzxy, -r7.xywx
add r3.xyz, -r10.xyzx, r3.xyzx
mad r3.xyz, r1.wwww, r3.xyzx, r10.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
dp3 r3.w, r3.xzyx, r0.xyzx
movc r3.xyzw, cb1[11].wwww, r3.xyzw, r10.xyzw
add r1.w, r3.w, r3.w
mad r0.xyz, -r1.wwww, r3.xzyx, r0.xyzx
mov r0.xyz, -r0.xyzx
mad r1.w, -r1.y, l(6.000000), l(6.000000)
sample_l r3.xyzw, r0.xyzx, t2.xyzw, s2, r1.w
mad r0.xyz, r3.xyzx, cb0[57].xyzx, cb0[56].xyzx
if_nz cb1[11].w
  mov r1.x, |r10.w|
  sample_l r3.xyzw, r1.xyxx, t3.xyzw, s3, l(0.000000)
  mad_sat r3.xyz, r4.xywx, r3.yyyy, r3.xxxx
  mul r3.xyz, r0.xyzx, r3.xyzx
else 
  add r5.xyz, -r4.xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r1.x, |r10.w|, l(-8.656170)
  exp r1.x, r1.x
  mul r1.y, r1.y, r1.y
  mad r1.y, r1.y, l(0.830000), l(0.170000)
  mul r1.x, r1.y, r1.x
  mad r1.xyw, r5.xyxz, r1.xxxx, r4.xyxw
  mul r3.xyz, r0.xyzx, r1.xywx
endif 
mad r0.x, -r1.z, l(0.500000), l(1.000000)
mad_sat r0.x, r0.w, r0.x, r2.x
movc r0.y, r7.z, l(1.000000), r4.z
mul r0.y, r0.x, r0.y
mul r0.yzw, r0.yyyy, r11.xxyz
dp3 r1.x, r9.yzwy, l(0.212600, 0.715200, 0.072200, 0.000000)
mul r1.xyz, r1.xxxx, r3.xyzx
movc r1.w, r7.z, l(1.000000), r2.w
mul r1.xyz, r1.wwww, r1.xyzx
mul r1.xyz, r0.xxxx, r1.xyzx
mad r0.x, r9.x, l(4.000000), l(1.000000)
add r1.w, -r2.z, l(1.000000)
mul r0.yzw, r0.yyzw, r6.xxyz
mul r0.yzw, r1.wwww, r0.yyzw
mad r0.yzw, r6.xxyz, r8.xxxx, r0.yyzw
mad r0.xyz, r1.xyzx, r0.xxxx, r0.yzwy
mad r0.xyz, r0.xyzx, r2.yyyy, r12.xyzx
mul r0.xyz, r0.xyzx, cb0[2].zzzz
lt r0.w, l(0.500000), cb2[1].x
movc o0.xyz, r0.wwww, r6.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 249 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
