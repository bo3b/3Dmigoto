// Pebbles on road - floating like decals
// e.g. seen around Shanath Breeders

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CSplineShaderParameterProvider : register(b1)
{
  float4 _BoundingSphere : packoffset(c0);
  float4 _MeshDecompression : packoffset(c1);
  float4 _NormalizedXYBBox : packoffset(c2);
  float4x4 _WorldMatrix : packoffset(c3);
  float3 _WorldPositionFractions : packoffset(c7);
}

cbuffer CTerrainDecalLayerOffsetProvider : register(b2)
{
  float _LayerOffset : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  int4 v0 : position0,
  int2 v1 : texcoord0,
  float4 v2 : normal0,
  float4 v3 : color0,
  float4 v4 : fog0,
  float4 v5 : psize0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float3 o4 : TEXCOORD3,
  out float3 o5 : TEXCOORD4,
  out float3 o6 : TEXCOORD5,
  out float2 o7 : TEXCOORD6)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);

  r0.xyz = v0.xyz;
  r0.xyz = r0.xyz * _MeshDecompression.yyy + _MeshDecompression.xxx;
  r1.x = _WorldMatrix._m30 + r0.x;
  r1.y = _WorldMatrix._m31 + r0.y;
  r1.z = _WorldMatrix._m32 + r0.z;

float4 tmp = mul(float4(r1.xyz, 1), _ViewProjectionMatrix);
float4 adj = float4(stereo.x * (tmp.w - stereo.y), 0, 0, 0);
r1.xyz += mul(mul(adj, _InvProjectionMatrix), _InvViewMatrix);

  r0.xyz = _CameraPosition_DistanceScale.xyz + -r1.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = sqrt(r0.w);
  r1.w = 7.812500000e-003 * r0.w;
  r0.xyz = r0.xyz / r0.www;
  r0.w = min(r1.w, 1.000000000e+000);
  r0.w = r0.w * 6.000000000e+000 + _LayerOffset;
  r0.xyz = r0.www * r0.xyz + r1.xyz;
  r1.xyz = -_CameraPosition_DistanceScale.xyz + r0.xyz;
  o5.xyz = r0.xyz;
  r1.w = 1.000000000e+000;
  o0.x = dot(r1.xyzw, _ViewRotProjectionMatrix._m00_m10_m20_m30);
  o0.y = dot(r1.xyzw, _ViewRotProjectionMatrix._m01_m11_m21_m31);
  o0.z = dot(r1.xyzw, _ViewRotProjectionMatrix._m02_m12_m22_m32);
  o0.w = dot(r1.xyzw, _ViewRotProjectionMatrix._m03_m13_m23_m33);

o0.x -= stereo.x * (o0.w - stereo.y);

  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.yzw = r1.yzx * r0.xxx;
  r0.x = 1.000000000e+000;
  r1.x = dot(_FogSHR.xyzw, r0.xyzw);
  r1.y = dot(_FogSHG.xyzw, r0.xyzw);
  r1.z = dot(_FogSHB.xyzw, r0.xyzw);
  o1.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  o1.w = v3.w;
  r0.xyz = v2.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  o2.x = dot(r0.xyz, _WorldMatrix._m00_m10_m20);
  o2.y = dot(r0.xyz, _WorldMatrix._m01_m11_m21);
  o2.z = dot(r0.xyz, _WorldMatrix._m02_m12_m22);
  r0.xyz = v5.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  o3.x = dot(r0.xyz, _WorldMatrix._m00_m10_m20);
  o3.y = dot(r0.xyz, _WorldMatrix._m01_m11_m21);
  o3.z = dot(r0.xyz, _WorldMatrix._m02_m12_m22);
  r0.xyz = v4.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  o4.x = dot(r0.xyz, _WorldMatrix._m00_m10_m20);
  o4.y = dot(r0.xyz, _WorldMatrix._m01_m11_m21);
  o4.z = dot(r0.xyz, _WorldMatrix._m02_m12_m22);
  o6.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r0.xy = v1.xy;
  o7.xy = r0.xy * _MeshDecompression.ww + _MeshDecompression.zz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16
//   float4 _FogSHG;                    // Offset:  304 Size:    16
//   float4 _FogSHR;                    // Offset:  320 Size:    16
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer CSplineShaderParameterProvider
// {
//
//   float4 _BoundingSphere;            // Offset:    0 Size:    16 [unused]
//   float4 _MeshDecompression;         // Offset:   16 Size:    16
//   float4 _NormalizedXYBBox;          // Offset:   32 Size:    16 [unused]
//   float4x4 _WorldMatrix;             // Offset:   48 Size:    64
//   float3 _WorldPositionFractions;    // Offset:  112 Size:    12 [unused]
//
// }
//
// cbuffer CTerrainDecalLayerOffsetProvider
// {
//
//   float _LayerOffset;                // Offset:    0 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CSplineShaderParameterProvider    cbuffer      NA          NA    1        1
// CTerrainDecalLayerOffsetProvider    cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE     int   xyz 
// texcoord                 0   xy          1     NONE     int   xy  
// normal                   0   xyzw        2     NONE   float   xyz 
// color                    0   xyzw        3     NONE   float      w
// fog                      0   xyzw        4     NONE   float   xyz 
// psize                    0   xyzw        5     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xy          7     NONE   float   xy  
//
vs_4_0
dcl_constantbuffer cb0[48], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_input v3.w
dcl_input v4.xyz
dcl_input v5.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xy
dcl_temps 2
itof r0.xyz, v0.xyzx
mad r0.xyz, r0.xyzx, cb1[1].yyyy, cb1[1].xxxx
add r1.x, r0.x, cb1[3].w
add r1.y, r0.y, cb1[4].w
add r1.z, r0.z, cb1[5].w
add r0.xyz, -r1.xyzx, cb0[8].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w
mul r1.w, r0.w, l(0.007813)
div r0.xyz, r0.xyzx, r0.wwww
min r0.w, r1.w, l(1.000000)
mad r0.w, r0.w, l(6.000000), cb2[0].x
mad r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
add r1.xyz, r0.xyzx, -cb0[8].xyzx
mov o5.xyz, r0.xyzx
mov r1.w, l(1.000000)
dp4 o0.x, r1.xyzw, cb0[44].xyzw
dp4 o0.y, r1.xyzw, cb0[45].xyzw
dp4 o0.z, r1.xyzw, cb0[46].xyzw
dp4 o0.w, r1.xyzw, cb0[47].xyzw
dp3 r0.x, r1.xyzx, r1.xyzx
rsq r0.x, r0.x
mul r0.yzw, r0.xxxx, r1.yyzx
mov r0.x, l(1.000000)
dp4 r1.x, cb0[20].xyzw, r0.xyzw
dp4 r1.y, cb0[19].xyzw, r0.xyzw
dp4 r1.z, cb0[18].xyzw, r0.xyzw
max o1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mov o1.w, v3.w
mad r0.xyz, v2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 o2.x, r0.xyzx, cb1[3].xyzx
dp3 o2.y, r0.xyzx, cb1[4].xyzx
dp3 o2.z, r0.xyzx, cb1[5].xyzx
mad r0.xyz, v5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 o3.x, r0.xyzx, cb1[3].xyzx
dp3 o3.y, r0.xyzx, cb1[4].xyzx
dp3 o3.z, r0.xyzx, cb1[5].xyzx
mad r0.xyz, v4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 o4.x, r0.xyzx, cb1[3].xyzx
dp3 o4.y, r0.xyzx, cb1[4].xyzx
dp3 o4.z, r0.xyzx, cb1[5].xyzx
mov o6.xyz, l(0,0,0,0)
itof r0.xy, v1.xyxx
mad o7.xy, r0.xyxx, cb1[1].wwww, cb1[1].zzzz
ret 
// Approximately 45 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
