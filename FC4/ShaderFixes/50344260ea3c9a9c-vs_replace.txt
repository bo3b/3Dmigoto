// HUD - crosshair, map, grapple hud icon

cbuffer CSceneFireUiPrimitiveParameterProvider : register(b0)
{
  float4 _BackgroundColor : packoffset(c0);
  float4 _BordersColor : packoffset(c1);
  float4 _ColorAdd : packoffset(c2);
  float4 _ColorAdjustment : packoffset(c3);
  float4 _ColorMultiplier : packoffset(c4);
  float4 _ColorTransparent : packoffset(c5);
  float4x4 _Transform : packoffset(c6);
  float4x4 _UVTransform : packoffset(c10);
  float2 _ViewportScaleXY : packoffset(c14);
  float _BordersSizeFloatArray[8] : packoffset(c15);
  float _Desaturation : packoffset(c22.y);
  float _DistanceFieldFloatArray[18] : packoffset(c23);
  float _LinePercentage : packoffset(c40.y);
  float _TexHeight : packoffset(c40.z);
  float _TexRatio : packoffset(c40.w);
  float _TextWidth : packoffset(c41);
  float _Time : packoffset(c41.y);
}

// Copied from lighting shaders b0 with 3DMigoto
cbuffer CViewportShaderParameterProvider : register(b13)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

// Structure of the vertex buffer - this essentially matches the input
// signature of the shader, but the formats won't be interpreted the same since
// that relies on the input assembler layout. In this case that means we can't
// use a float4 for the color0 entry, as that would mean 4x4 byte values, but
// in the vertex buffer it's only 4x1 byte values. Since we don't actually care
// about it, just use a float so that the size matches.
struct vb_entry
{
  float2 vb_position;
  float2 vb_texcoord;
  // Don't be fooled by the float4 in the input signature - in
  // the vertex buffer this is just a single 4 byte value:
  float color0;
};

StructuredBuffer<struct vb_entry> vb_struct : register(t100);

Texture2D<float4> IconFilter1 : register(t101);
Texture2D<float4> IconFilter2 : register(t102);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

#include <crosshair.hlsl>

float2 find_quad_center(uint id)
{
	id = id / 6 * 6;

	float2 pos1 = vb_struct[id].vb_position;
	float2 pos2 = vb_struct[id + 2].vb_position;

	return (pos1 + pos2) / 2;
}

bool is_horiz_fullscreen()
{
	// The input position to this shader is in pixels, so rather than use
	// calc_pos, just use the the screen resolution:
	int2 resolution = int2(round(IniParams.Load(int2(1, 0)).zw));

	// A full screen effect will always use two trianges:
	int vertex_count = int(round(IniParams.Load(int2(2, 0)).z));
	if (vertex_count != 6)
		return false;

	// Look up the positions of four vertices that should match the corners
	// (for this game):
	float2 bl = vb_struct[0].vb_position;
	float2 tl = vb_struct[1].vb_position;
	float2 tr = vb_struct[2].vb_position;
	float2 br = vb_struct[4].vb_position;

	// Check that all four corners are are at or beyond the edge of the
	// screen. Use a threshold of half a pixel to compensate for floating
	// point error
	return (abs(float4(tl.x, tr.x - resolution.x,
		bl.x, br.x - resolution.x)) <= 0.5);
}

// This function looks up a texture that has been injected into the game to
// determine what action to take depending on the icon. It will check the
// colour of the texel in the center of the icon to make a decision.
// - Green will adjust the icon from the depth buffer based on it's center
// - Blue will adjust the icon based on the center of the screen
// - Anything else will use a fixed HUD depth adjustment
uint lookup_icon_filter(uint id, Texture2D<float4> IconFilter)
{
	uint width, height;
	id = id / 6 * 6;

	IconFilter.GetDimensions(width, height);

	// Find icon center:
	float2 coord1 = vb_struct[id].vb_texcoord;
	float2 coord2 = vb_struct[id + 2].vb_texcoord;
	uint2 coord = round((coord1 + coord2) / 2 * float2(width, height));

	float4 colour = IconFilter.Load(int3(coord, 0));

	if (all(abs(colour - float4(0, 1, 0, 1)) <= 1/512))
		return 1;
	if (all(abs(colour - float4(0, 0, 1, 1)) <= 1/512))
		return 2;
	if (all(abs(colour - float4(1, 0, 1, 1)) <= 1/512))
		return 5;
	return 0;
}

float4 calc_pos(float2 v0)
{
// Copy of the first hunk of code from the shader that calculates the output
// position
  float4 r0,r1,o0;
  r0.xy = v0.xy;
  r0.zw = float2(1.000000e+000,1.000000e+000);
  r1.x = dot(r0.xyww, _Transform._m00_m10_m20_m30);
  r1.y = dot(r0.xyww, _Transform._m01_m11_m21_m31);
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  o0.xy = float2(1.000000e+000,-1.000000e+000) * r1.xy;
  o0.z = dot(r0.xyww, _Transform._m02_m12_m22_m32);
  o0.w = dot(r0.xyzw, _Transform._m03_m13_m23_m33);
  return o0;
}

void main(
  float2 v0 : position0,
  float2 v1 : texcoord0,
  float4 v2 : color0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,

  uint id : SV_VertexID

  )
{

  float4 r0,r1;
  uint4 bitmask;
  r0.xy = v0.xy;
  r0.zw = float2(1.000000e+000,1.000000e+000);
  r1.x = dot(r0.xyww, _Transform._m00_m10_m20_m30);
  r1.y = dot(r0.xyww, _Transform._m01_m11_m21_m31);
  r1.xy = r1.xy * float2(2.000000e+000,2.000000e+000) + float2(-1.000000e+000,-1.000000e+000);
  o0.xy = float2(1.000000e+000,-1.000000e+000) * r1.xy;
  o0.z = dot(r0.xyww, _Transform._m02_m12_m22_m32);
  o0.w = dot(r0.xyzw, _Transform._m03_m13_m23_m33);
  o1.xyzw = v2.zyxw;
  o2.xy = v0.xy;
  o2.zw = v1.xy;

float4 stereo = StereoParams.Load(0);
float4 params = IniParams.Load(0);
float4 filter = IniParams.Load(int2(2,0));
float separation = stereo.x; float convergence = stereo.y;
float hud_depth = params.x; float tex_filter = filter.x; float partner_filter = filter.y;

if (params.w == 0) {
	// Depth buffer did not get copied, which means we are in a menu. Only
	// consider the adjusting full screen effects (such as the vignette on
	// the map), and otherwise just adjust to the standard UI depth (avoids
	// icons on the map being misaligned):

	if (tex_filter == 2 && is_horiz_fullscreen()) {
		// This is the vignette around the map. The texture is also
		// used for things on the menus, so we also check if it is
		// fullscreen. There are two layers - one is fullscreen, but
		// the other is only drawn along the top/bottom of the map, so
		// we only check the x coordinates at the edge of the screen
		// for fullscreen. We could either:
		// a) adjust the vignette like the rest of the UI, but then it
		//    clips at the edges.
		// b) leave it at screen depth, but then it looks different in
		//    each eye
		// c) Adjust only one side in each eye by double the regular
		//    HUD depth to move it to the same depth as the HUD, but
		//    stretched so that the clipping is not possible. For some
		//    reason this creates a bit of a moire effect on my screen
		//    in the crosstalk between the two eyes on the white
		//    background, but overall it seems the best option.
		if ((stereo.z ==  1 && (id == 0 || id == 1 || id == 5)) ||
		    (stereo.z == -1 && (id == 2 || id == 3 || id == 4))) {
			o0.x += separation * hud_depth * 2;
		}
	} else
		o0.x += separation * hud_depth;
	return;
}

// We are in-game (or possibly in the shop with previews on, or possibly in the
// main menu under certain circumstances), so we can use the depth buffer to
// adjust various UI elements:

uint action = 0;
float4 icon_center = calc_pos(find_quad_center(id));

if (in_minimap_region(icon_center)) {
	action = 4;
} else if (tex_filter == 3) {
	// Crosshair texture & various other icons
	action = lookup_icon_filter(id, IconFilter1);

	if (action == 5) {
		// Circle used for XP award background & targetting grapple
		// points - only auto adjust when in the middle of the screen:
		if (in_floating_icon_region(icon_center))
			action = 1;
		else
			action = 0;
	}

} else if (tex_filter == 5 && in_floating_icon_region(icon_center) && filter.w != 2) {
	// action = lookup_icon_filter(id, IconFilter2);
	action = 1;
} else if (tex_filter == 4) { // Rocket launcher targeting HUD / camera - treat as crosshair
	action = 2;
} else if (tex_filter == 7) { // Full screen vignette - leave at screen depth
	action = 3;
} else if (tex_filter == 6 && filter.w == 1) {
	// Pure white texture. Might be a highlight on the cross in the camera,
	// or might be something else (such as the exclamation marks on the DLC
	// items on the main menu). If the camera HUD is being drawn, w2 will
	// have been set by the cross' textureoverride earlier in the frame
	action = 2;
}

switch (action) {
case 1:
	o0.x += adjust_from_stereo2mono_depth_buffer(icon_center.x, icon_center.y);
	break;
case 2:
	o0.x += adjust_from_stereo2mono_depth_buffer(0,0);
	break;
case 3:
	break;
case 4:
	o0.x += minimap_adjustment();
	break;
default:
	o0.x += separation * hud_depth;
	break;
}

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CSceneFireUiPrimitiveParameterProvider
// {
//
//   float4 _BackgroundColor;           // Offset:    0 Size:    16 [unused]
//   float4 _BordersColor;              // Offset:   16 Size:    16 [unused]
//   float4 _ColorAdd;                  // Offset:   32 Size:    16 [unused]
//   float4 _ColorAdjustment;           // Offset:   48 Size:    16 [unused]
//   float4 _ColorMultiplier;           // Offset:   64 Size:    16 [unused]
//   float4 _ColorTransparent;          // Offset:   80 Size:    16 [unused]
//   float4x4 _Transform;               // Offset:   96 Size:    64
//   float4x4 _UVTransform;             // Offset:  160 Size:    64 [unused]
//   float2 _ViewportScaleXY;           // Offset:  224 Size:     8 [unused]
//   float _BordersSizeFloatArray[8];   // Offset:  240 Size:   116 [unused]
//   float _Desaturation;               // Offset:  356 Size:     4 [unused]
//   float _DistanceFieldFloatArray[18];// Offset:  368 Size:   276 [unused]
//   float _LinePercentage;             // Offset:  644 Size:     4 [unused]
//   float _TexHeight;                  // Offset:  648 Size:     4 [unused]
//   float _TexRatio;                   // Offset:  652 Size:     4 [unused]
//   float _TextWidth;                  // Offset:  656 Size:     4 [unused]
//   float _Time;                       // Offset:  660 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CSceneFireUiPrimitiveParameterProvider    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xy          0     NONE   float   xy  
// texcoord                 0   xy          1     NONE   float   xy  
// color                    0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_input v0.xy
dcl_input v1.xy
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_temps 2
mov r0.xy, v0.xyxx
mov r0.zw, l(0,0,1.000000,1.000000)
dp4 r1.x, r0.xyww, cb0[6].xyzw
dp4 r1.y, r0.xyww, cb0[7].xyzw
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul o0.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
dp4 o0.z, r0.xyww, cb0[8].xyzw
dp4 o0.w, r0.xyzw, cb0[9].xyzw
mov o1.xyzw, v2.zyxw
mov o2.xy, v0.xyxx
mov o2.zw, v1.xxxy
ret 
// Approximately 12 instruction slots used
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  
  
