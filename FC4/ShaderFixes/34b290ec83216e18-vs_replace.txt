// Reflected object shader

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer SUserClipPlaneParameterProvider : register(b1)
{
  float4 _UserClipPlane : packoffset(c0);
}

cbuffer CTerrainSectorParameterProvider : register(b2)
{
  float4 _CurrentTweening : packoffset(c0);
  float4 _NeighborTweening[4] : packoffset(c1);
  float4 _SectorOffset : packoffset(c5);
  float _NeighborIsAdapting[4] : packoffset(c6);
  float _WaterLevel : packoffset(c9.y);
  bool _BlendDetail : packoffset(c9.z);
}

cbuffer CTerrainSectorStaticParameterProvider : register(b3)
{
  float4 _DetailUVScalingSpecularOcclusion[8] : packoffset(c0);
  float4 _MaskChannelSelectors[4] : packoffset(c8);
  float4 _NoiseLevels : packoffset(c12);
  float4 _NoiseUVTransform : packoffset(c13);
  float4 _SectorUVTransform : packoffset(c14);
  int _MaterialID : packoffset(c15);
  int _NbrOfLayers : packoffset(c15.y);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  uint4 v0 : position0,
  uint4 v1 : psize0,
  float4 v2 : normal0,
  out float4 o0 : SV_Position0,
  out float o1 : SV_ClipDistance0,
  out float3 o2 : _wsPos0,
  out float4 o3 : IGNORE0,
  out float2 o4 : _TexCoord0,
  out float2 p4 : _DistancesToCam0,
  out float3 o5 : _PositionWS0,
  out float3 o6 : _NormalWS0,
  out float3 o7 : fogColor0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask;
  r0.xyzw = v0.xyzw;
  r0.z = (int)r0.z;
  r1.x = (int)r0.z < (int)4;
  r0.z = min(r0.z, 3);
  r1.x = r1.x ? 1.000000 : 0;
  r1.x = _NeighborIsAdapting[r0.z] * r1.x;
  r2.xyzw = _NeighborTweening[r0.z].xyzw + -_CurrentTweening.xyzw;
  r1.xyzw = r1.xxxx * r2.xyzw + _CurrentTweening.xyzw;
  r2.xyzw = v1.yxwz;
  r2.xy = r2.xz * float2(2.560000e+002,2.560000e+002) + r2.yw;
  r3.xyzw = float4(0.000000e+000,1.000000e+000,2.000000e+000,3.000000e+000) < r0.wwww;
  r2.xyzw = r3.xyzw ? r2.xxxx : r2.yyyy;
  r0.z = dot(r2.xyzw, r1.xyzw);
  r2.z = 1.562500000e-002 * r0.z;
  r2.xy = _SectorOffset.xy + r0.xy;
  r0.xy = _SectorUVTransform.xy * r0.yx;
  o4.xy = r0.xy * float2(1.562500e-002,1.562500e-002) + _SectorUVTransform.zw;
  r0.xyz = -_CameraPosition_DistanceScale.xyz + r2.xyz;
  r0.w = 1.000000000e+000;
  o0.x = dot(r0.xyzw, _ViewRotProjectionMatrix._m00_m10_m20_m30);
  o0.y = dot(r0.xyzw, _ViewRotProjectionMatrix._m01_m11_m21_m31);
  o0.z = dot(r0.xyzw, _ViewRotProjectionMatrix._m02_m12_m22_m32);
  o0.w = dot(r0.xyzw, _ViewRotProjectionMatrix._m03_m13_m23_m33);

if (_ViewportSize.x == 640 && _ViewportSize.y == 360 /* Low quality water */
 || _ViewportSize.x == _ViewportSize.y) { /* Medium - Ultra quality water */
	float4 stereo = StereoParams.Load(0);
	o0.x -= stereo.x * (o0.w - stereo.y) * 2;
}

  r2.w = 1.000000000e+000;
  o1.x = dot(_UserClipPlane.xyzw, r2.xyzw);
  o2.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  o3.xyzw = float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000);
  r4.xyz = _CameraPosition_DistanceScale.xyz + -r2.xyz;
  o5.xyz = r2.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  p4.x = sqrt(r0.w);
  p4.y = 0.000000000e+000;
  r2.xyzw = float4(-5.000000e-001,-5.000000e-001,-5.000000e-001,-5.000000e-001) + v2.xyzw;
  r2.xyzw = r2.xyzw + r2.xyzw;
  r4.xyzw = r3.xyzw ? r2.xxxx : r2.zzzz;
  r2.xyzw = r3.xyzw ? r2.yyyy : r2.wwww;
  r2.y = dot(r2.xyzw, r1.xyzw);
  r2.x = dot(r4.xyzw, r1.xyzw);
  o6.xy = r2.xy;
  r0.w = dot(r2.xy, r2.xy);
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = 1.000000000e+000 + -r0.w;
  o6.z = sqrt(r0.w);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.yzw = r0.yzx * r0.www;
  r0.x = 1.000000000e+000;
  r1.x = dot(_FogSHR.xyzw, r0.xyzw);
  r1.y = dot(_FogSHG.xyzw, r0.xyzw);
  r1.z = dot(_FogSHB.xyzw, r0.xyzw);
  o7.xyz = max(r1.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16 [unused]
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16
//   float4 _FogSHG;                    // Offset:  304 Size:    16
//   float4 _FogSHR;                    // Offset:  320 Size:    16
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer SUserClipPlaneParameterProvider
// {
//
//   float4 _UserClipPlane;             // Offset:    0 Size:    16
//
// }
//
// cbuffer CTerrainSectorParameterProvider
// {
//
//   float4 _CurrentTweening;           // Offset:    0 Size:    16
//   float4 _NeighborTweening[4];       // Offset:   16 Size:    64
//   float4 _SectorOffset;              // Offset:   80 Size:    16
//   float _NeighborIsAdapting[4];      // Offset:   96 Size:    52
//   float _WaterLevel;                 // Offset:  148 Size:     4 [unused]
//   bool _BlendDetail;                 // Offset:  152 Size:     4 [unused]
//
// }
//
// cbuffer CTerrainSectorStaticParameterProvider
// {
//
//   float4 _DetailUVScalingSpecularOcclusion[8];// Offset:    0 Size:   128 [unused]
//   float4 _MaskChannelSelectors[4];   // Offset:  128 Size:    64 [unused]
//   float4 _NoiseLevels;               // Offset:  192 Size:    16 [unused]
//   float4 _NoiseUVTransform;          // Offset:  208 Size:    16 [unused]
//   float4 _SectorUVTransform;         // Offset:  224 Size:    16
//   int _MaterialID;                   // Offset:  240 Size:     4 [unused]
//   int _NbrOfLayers;                  // Offset:  244 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// SUserClipPlaneParameterProvider    cbuffer      NA          NA    1        1
// CTerrainSectorParameterProvider    cbuffer      NA          NA    2        1
// CTerrainSectorStaticParameterProvider    cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE    uint   xyzw
// psize                    0   xyzw        1     NONE    uint   xyzw
// normal                   0   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// SV_ClipDistance          0   x           1  CLIPDST   float   x   
// _wsPos                   0   xyz         2     NONE   float   xyz 
// IGNORE                   0   xyzw        3     NONE   float   xyzw
// _TexCoord                0   xy          4     NONE   float   xy  
// _DistancesToCam          0     zw        4     NONE   float     zw
// _PositionWS              0   xyz         5     NONE   float   xyz 
// _NormalWS                0   xyz         6     NONE   float   xyz 
// fogColor                 0   xyz         7     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[48], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[10], dynamicIndexed
dcl_constantbuffer cb3[15], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output_siv o1.x, clip_distance
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xy
dcl_output o4.zw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 5
utof r0.xyzw, v0.xyzw
ftoi r0.z, r0.z
ilt r1.x, r0.z, l(4)
imin r0.z, r0.z, l(3)
and r1.x, r1.x, l(0x3f800000)
mul r1.x, r1.x, cb2[r0.z + 6].x
add r2.xyzw, -cb2[0].xyzw, cb2[r0.z + 1].xyzw
mad r1.xyzw, r1.xxxx, r2.xyzw, cb2[0].xyzw
utof r2.xyzw, v1.yxwz
mad r2.xy, r2.xzxx, l(256.000000, 256.000000, 0.000000, 0.000000), r2.ywyy
lt r3.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), r0.wwww
movc r2.xyzw, r3.xyzw, r2.xxxx, r2.yyyy
dp4 r0.z, r2.xyzw, r1.xyzw
mul r2.z, r0.z, l(0.015625)
add r2.xy, r0.xyxx, cb2[5].xyxx
mul r0.xy, r0.yxyy, cb3[14].xyxx
mad o4.xy, r0.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000), cb3[14].zwzz
add r0.xyz, r2.xyzx, -cb0[8].xyzx
mov r0.w, l(1.000000)
dp4 o0.x, r0.xyzw, cb0[44].xyzw
dp4 o0.y, r0.xyzw, cb0[45].xyzw
dp4 o0.z, r0.xyzw, cb0[46].xyzw
dp4 o0.w, r0.xyzw, cb0[47].xyzw
mov r2.w, l(1.000000)
dp4 o1.x, cb1[0].xyzw, r2.xyzw
mov o2.xyz, l(0,0,0,0)
mov o3.xyzw, l(0,0,0,0)
add r4.xyz, -r2.xyzx, cb0[8].xyzx
mov o5.xyz, r2.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
sqrt o4.z, r0.w
mov o4.w, l(0)
add r2.xyzw, v2.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
add r2.xyzw, r2.xyzw, r2.xyzw
movc r4.xyzw, r3.xyzw, r2.xxxx, r2.zzzz
movc r2.xyzw, r3.xyzw, r2.yyyy, r2.wwww
dp4 r2.y, r2.xyzw, r1.xyzw
dp4 r2.x, r4.xyzw, r1.xyzw
mov o6.xy, r2.xyxx
dp2 r0.w, r2.xyxx, r2.xyxx
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt o6.z, r0.w
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.yzw, r0.wwww, r0.yyzx
mov r0.x, l(1.000000)
dp4 r1.x, cb0[20].xyzw, r0.xyzw
dp4 r1.y, cb0[19].xyzw, r0.xyzw
dp4 r1.z, cb0[18].xyzw, r0.xyzw
max o7.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
ret 
// Approximately 52 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  
