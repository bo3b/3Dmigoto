// Outdoor shadows
// Other variants of this shader:
// Hash             |   Shadow  |AA |
// -----------------+-----------+---+
// 149c09dd3792cebb |      High | 0 |
// b674b00500663d60 | Very High | 0 |
// 7f6a827ab54982d8 |      Soft | 0 |
// 78fedf913827866d |      High | 2 |
// ac5fba3d4b543796 | Very High | 2 |
// 03232d48bca270a2 |      Soft | 2 |
// e32db13a74674ed9 |      High | 4 |
// ed7c22bb8f7fa4e6 | Very High | 4 |
// 6b3342526a5ce50b |      Soft | 4 |
// c4c278db36f2feeb |      High | 8 |
// b5b9d247af1d66fb | Very High | 8 |
// b7f7ad62461f55c0 |      Soft | 8 |

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CNewLightingDataProvider : register(b1)
{
  float4 _CSMSlice0_0 : packoffset(c0);
  float4 _CSMSlice0_1 : packoffset(c1);
  float4 _CSMSlice0_2 : packoffset(c2);
  float4 _CSMSlice1_0 : packoffset(c3);
  float4 _CSMSlice1_1 : packoffset(c4);
  float4 _CSMSlice1_2 : packoffset(c5);
  float4 _CSMSlice2_0 : packoffset(c6);
  float4 _CSMSlice2_1 : packoffset(c7);
  float4 _CSMSlice2_2 : packoffset(c8);
  float4 _CSMSliceFade : packoffset(c9);
  float4 _LightUpWS_RcpSquaredLightRadius : packoffset(c10);
  float4 _PointAttenuation_SpotFactors : packoffset(c11);
  float4 _ShadowMapSize : packoffset(c12);
  float4x4 _ShadowProjectionMatrix : packoffset(c13);
  float4x4 _ShadowRotProjectionMatrix : packoffset(c17);
  float3 _LightColor : packoffset(c21);
  float3 _LightColorUpNormal : packoffset(c22);
  float3 _LightDirectionWS : packoffset(c23);
  float3 _LightPositionWS : packoffset(c24);
  float3 _LightRightWS : packoffset(c25);
}

cbuffer CSceneTerrainShadowAtlasPrivateData : register(b2)
{
  float4 _SectorOffsetScale : packoffset(c0);
  float2 _LongRangeShadowFade : packoffset(c1);
}

cbuffer CDepthReconstructionProvider : register(b3)
{
  float4x4 _InvViewRotProjectionMatrix : packoffset(c0);
  float4x4 _ReconsInvViewRotProjectionMatrix : packoffset(c4);
  float3 _ReconsCamPosition : packoffset(c8);
  float _ReconsDepthMul : packoffset(c8.w);
  float _ReconsDepthOffset : packoffset(c9);
  float _ReconsViewFar : packoffset(c9.y);
  float _ReconsViewNear : packoffset(c9.z);
  float _ReconsViewOORange : packoffset(c9.w);
  float _ReconsViewRange : packoffset(c10);
}

cbuffer CCloudShadowParameterProvider : register(b4)
{
  float4 _CloudSettings : packoffset(c0);
  float4 _SunColor : packoffset(c1);
  float3 _PlayerPosition : packoffset(c2);
  float3 _SunDirection : packoffset(c3);
}

cbuffer CSceneTerrainVistaShadowPrivateData : register(b5)
{
  float4x4 _VistaShadowMatrix : packoffset(c0);
}
SamplerState DepthVPSampler__SampObj___s : register(s0);
SamplerState SkyDomeColorWrap_s : register(s2);
SamplerComparisonState ShadowCmpSampler_s : register(s1);
SamplerComparisonState VistaShadowTexture_s : register(s3);
Texture2D<float4> DepthVPSampler__TexObj__ : register(t0);
Texture2DArray<float4> ShadowCmpSampler_TextureObject : register(t1);
Texture2D<uint4> SectorAtlasTexture_UINT_TextureObject : register(t2);
Texture2D<float4> CloudShadowTexture : register(t3);
Texture2D<float4> VistaShadowTexture_TextureObject : register(t4);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = DepthVPSampler__TexObj__.SampleLevel(DepthVPSampler__SampObj___s, v1.xy, 0.000000000e+000).x;
  r0.x = _DepthScale.y * r0.x + _DepthScale.x;
  r0.x = 1.000000e+000 / r0.x;
  r0.y = _CameraDistances.x * _CameraDistances.y;
  r0.x = _CameraDistances.z * r0.x;
  r0.x = r0.y / r0.x;
  r0.x = _CameraDistances.y + -r0.x;
  r0.z = -r0.x * _CameraDistances.w + 1.000000000e+000;
  r0.xy = v1.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, _InvViewRotProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, _InvViewRotProjectionMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, _InvViewRotProjectionMatrix._m02_m12_m22_m32);
  r0.x = dot(r0.xyzw, _InvViewRotProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = r1.xyz / r0.xxx;

// Keep the floating point values low to eliminate artefacts due to floating
// point error!

float4 stereo = StereoParams.Load(0);
float4 tmp = mul(float4(_CameraPosition_DistanceScale.xyz + r0.xyz, 1), _ViewProjectionMatrix);
float4 adj = float4(stereo.x * (tmp.w - stereo.y), 0, 0, 0);
r0.xyz -= mul(mul(adj, _InvProjectionMatrix), _InvViewMatrix);

  r1.xyz = _CameraPosition_DistanceScale.xyz + r0.xyz;
  r2.xyz = -_PlayerPosition.xyz + r1.xyz;
  r0.w = dot(r2.xyz, -_SunDirection.xyz);
  r2.w = r0.w + r0.w;
  r3.x = dot(r2.xyz, r2.xyz);
  r3.y = -_CloudSettings.z * _CloudSettings.z + r3.x;
  r3.y = 4.000000000e+000 * r3.y;
  r2.w = r2.w * r2.w + -r3.y;
  r2.w = sqrt(r2.w);
  r3.y = -r0.w * 2.000000000e+000 + -r2.w;
  r3.y = 5.000000000e-001 * r3.y;
  r0.w = -r0.w * 2.000000000e+000 + r2.w;
  r0.w = 5.000000000e-001 * r0.w;
  r0.w = max(r3.y, r0.w);
  r3.yzw = -_SunDirection.xyz * r0.www;
  r2.xyz = -_SunDirection.xyz * r0.www + r2.xyz;
  r0.w = r2.y / r2.x;
  r2.y = min(abs(r0.w), 1.000000000e+000);
  r2.w = max(abs(r0.w), 1.000000000e+000);
  r2.w = 1.000000e+000 / r2.w;
  r2.y = r2.y * r2.w;
  r2.w = r2.y * r2.y;
  r4.x = r2.w * 2.083509974e-002 + -8.513300121e-002;
  r4.x = r2.w * r4.x + 1.801410019e-001;
  r4.x = r2.w * r4.x + -3.302994967e-001;
  r2.w = r2.w * r4.x + 9.998660088e-001;
  r4.x = r2.y * r2.w;
  r4.y = 1.000000000e+000 < abs(r0.w);
  r4.x = r4.x * -2.000000000e+000 + 1.570796371e+000;
  r4.x = r4.y ? r4.x : 0;
  r2.y = r2.y * r2.w + r4.x;
  r0.w = min(r0.w, 1.000000000e+000);
  r0.w = r0.w < -r0.w;
  r0.w = r0.w ? -r2.y : r2.y;
  r2.x = r2.x < 0.000000000e+000;
  r2.yw = float2(-1.570796e+000,-4.712389e+000) + -r0.ww;
  r0.w = r2.x ? r2.w : r2.y;
  r2.x = 9.150000215e-001 * r2.z;
  r2.x = r2.x / _CloudSettings.z;
  r2.y = 1.000000000e+000 + -r2.x;
  r2.z = 3.000000119e-001 * _CloudSettings.y;
  r2.x = r0.w * 1.591549367e-001 + r2.z;
  r0.w = 1.000000e+000 / _CloudSettings.z;
  r2.z = sqrt(r3.x);
  r2.z = saturate(r2.z * r0.w);
  r2.w = r2.z * -2.000000000e+000 + 3.000000000e+000;
  r2.z = r2.z * r2.z;
  r2.z = r2.w * r2.z;
  r2.x = CloudShadowTexture.SampleLevel(SkyDomeColorWrap_s, r2.xy, 0.000000000e+000).w;
  r2.y = -1.000000015e-001 + r2.x;
  r2.y = saturate(1.000000000e+001 * r2.y);
  r2.w = r2.y * -2.000000000e+000 + 3.000000000e+000;
  r2.y = r2.y * r2.y;
  r3.x = r2.w * r2.y;
  r2.y = -r2.w * r2.y + r2.x;
  r2.y = r2.z * r2.y + r3.x;
  r2.w = _CloudSettings.x + _CloudSettings.x;
  r2.y = r2.y * r2.y;
  r2.y = r2.w * r2.y;
  r2.z = -r2.z * 5.000000000e-001 + 1.000000000e+000;
  r2.y = saturate(-r2.y * r2.z + 1.000000000e+000);
  r1.w = 1.000000000e+000;
  r4.x = dot(r1.xyzw, _CSMSlice2_0.xyzw);
  r4.y = dot(r1.xyzw, _CSMSlice2_1.xyzw);
  r4.z = dot(r1.xyzw, _CSMSlice2_2.xyzw);
  r5.x = dot(r1.xyzw, _CSMSlice1_0.xyzw);
  r5.y = dot(r1.xyzw, _CSMSlice1_1.xyzw);
  r5.z = dot(r1.xyzw, _CSMSlice1_2.xyzw);
  r6.xyz = r5.xyz >= float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r6.xyz = r6.xyz ? 1.000000 : 0;
  r7.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) >= r5.xyz;
  r7.xyz = r7.xyz ? 1.000000 : 0;
  r6.xyz = r7.xyz * r6.xyz;
  r2.z = dot(r6.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r2.z = r2.z >= 3.000000000e+000;
  r5.w = 1.000000000e+000;
  r4.w = 2.000000000e+000;
  r6.xyzw = r2.zzzz ? r5.xyzw : r4.xyzw;
  r7.x = dot(r1.xyzw, _CSMSlice0_0.xyzw);
  r7.y = dot(r1.xyzw, _CSMSlice0_1.xyzw);
  r7.z = dot(r1.xyzw, _CSMSlice0_2.xyzw);
  r8.xyz = r7.xyz >= float3(0.000000e+000,0.000000e+000,0.000000e+000);
  r8.xyz = r8.xyz ? 1.000000 : 0;
  r9.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) >= r7.xyz;
  r9.xyz = r9.xyz ? 1.000000 : 0;
  r8.xyz = r9.xyz * r8.xyz;
  r2.z = dot(r8.xyz, float3(1.000000e+000,1.000000e+000,1.000000e+000));
  r2.z = r2.z >= 3.000000000e+000;
  r7.w = 0.000000000e+000;
  r6.xyzw = r2.zzzz ? r7.xywz : r6.xywz;
  r2.z = r6.z == 2.000000;
  if (r2.z != 0) {
    r8.x = dot(r1.xyzw, _VistaShadowMatrix._m00_m10_m20_m30);
    r8.y = dot(r1.xyzw, _VistaShadowMatrix._m01_m11_m21_m31);
    r8.z = dot(r1.xyzw, _VistaShadowMatrix._m02_m12_m22_m32);
    r1.w = dot(r1.xyzw, _VistaShadowMatrix._m03_m13_m23_m33);
    r8.xyz = r8.xyz / r1.www;
    VistaShadowTexture_TextureObject.GetDimensions(0, fDest.x, fDest.y, fDest.z);
    r2.zw = fDest.xy;
    r9.xy = float2(1.000000e+000,1.000000e+000) / r2.zw;
    r2.zw = r8.xy * r2.zw + float2(5.000000e-001,5.000000e-001);
    r9.zw = floor(r2.zw);
    r2.zw = -r9.zw + r2.zw;
    r9.zw = float2(-5.000000e-001,-5.000000e-001) + r9.zw;
    r9.zw = r9.zw * r9.xy;
    r10.xy = -r2.wz * float2(2.000000e+000,2.000000e+000) + float2(3.000000e+000,3.000000e+000);
    r10.zw = r2.zw * float2(2.000000e+000,2.000000e+000) + float2(1.000000e+000,1.000000e+000);
    r11.xy = float2(2.000000e+000,2.000000e+000) + -r2.zw;
    r11.xy = r11.xy / r10.yx;
    r2.zw = r2.zw / r10.zw;
    r11.zw = float2(-1.000000e+000,-1.000000e+000) + r11.xy;
    r11.xy = float2(1.000000e+000,1.000000e+000) + r2.zw;
    r1.w = r10.y * r10.x;
    r12.xyzw = r11.zwxw * r9.xyxy + r9.zwzw;
    r2.z = VistaShadowTexture_TextureObject.SampleCmpLevelZero(VistaShadowTexture_s, r12.xy, r8.z, int2(0, 0)).x;
    r10.xy = r10.zw * r10.xy;
    r2.w = VistaShadowTexture_TextureObject.SampleCmpLevelZero(VistaShadowTexture_s, r12.zw, r8.z, int2(0, 0)).x;
    r2.w = r10.x * r2.w;
    r1.w = r1.w * r2.z + r2.w;
    r9.xyzw = r11.zyxy * r9.xyxy + r9.zwzw;
    r2.z = VistaShadowTexture_TextureObject.SampleCmpLevelZero(VistaShadowTexture_s, r9.xy, r8.z, int2(0, 0)).x;
    r1.w = r10.y * r2.z + r1.w;
    r2.z = r10.z * r10.w;
    r2.w = VistaShadowTexture_TextureObject.SampleCmpLevelZero(VistaShadowTexture_s, r9.zw, r8.z, int2(0, 0)).x;
    r1.w = r2.z * r2.w + r1.w;
    r9.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000) >= r8.xyz;
    r9.xyz = r9.xyz ? 1.000000 : 0;
    r8.xyz = r8.xyz >= float3(1.000000e+000,1.000000e+000,1.000000e+000);
    r8.xyz = r8.xyz ? 1.000000 : 0;
    r8.xyz = r9.xyz + r8.xyz;
    r1.w = r1.w * 6.250000000e-002 + r8.x;
    r1.w = r1.w + r8.y;
    r1.w = saturate(r1.w + r8.z);
    r0.x = dot(r0.xyz, r0.xyz);
    r0.x = sqrt(r0.x);
    r0.yz = r1.yx * _SectorOffsetScale.yx + _SectorOffsetScale.wz;
    SectorAtlasTexture_UINT_TextureObject.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
    r1.xy = uiDest.xy;
    r2.zw = r1.xy;
    r0.yz = r0.yz * r2.zw + float2(5.000000e-001,5.000000e-001);
    r2.zw = frac(r0.zy);
    r8.xy = float2(1.000000e+000,1.000000e+000) + -r2.wz;
    r9.y = r2.w * r2.z;
    r9.xz = r8.xy * r2.zw;
    r9.w = r8.x * r8.y;
    r0.yz = (uint2)r0.yz;
    r0.yz = (int2)r0.yz + (int2)r1.xy;
    r8.xyzw = (int4)r0.yzyz + int4(-1,0,0,-1);
    r10.xy = (uint2)r0.yz % (uint2)r1.xy;
    r8.xyzw = (uint4)r8.zwxy % (uint4)r1.xyxy;
    r0.yz = (int2)r0.yz + int2(-1,-1);
    r11.xy = (uint2)r0.yz % (uint2)r1.xy;
    r12.xy = r8.zw;
    r12.zw = float2(0.000000e+000,0.000000e+000);
    r0.yz = SectorAtlasTexture_UINT_TextureObject.Load(r12.xyz).xy;
    r10.zw = float2(0.000000e+000,0.000000e+000);
    r1.xy = SectorAtlasTexture_UINT_TextureObject.Load(r10.xyz).xy;
    r8.zw = float2(0.000000e+000,0.000000e+000);
    r2.zw = SectorAtlasTexture_UINT_TextureObject.Load(r8.xyz).xy;
    r11.zw = float2(0.000000e+000,0.000000e+000);
    r8.xw = SectorAtlasTexture_UINT_TextureObject.Load(r11.xyz).yx;
    r10.x = f16tof32(r0.z);
    r10.y = f16tof32(r1.y);
    r10.z = f16tof32(r2.w);
    r10.w = f16tof32(r8.x);
    r0.z = dot(r10.xyzw, r9.xyzw);
    r8.x = r0.y;
    r8.y = r1.x;
    r8.z = r2.z;
    r8.xyzw = (int4)r8.xyzw | int4(0,0,0,0);
    r0.y = r1.z + -r0.z;
    r1.x = 2.500000000e-001 * r0.y;
    r1.x = (int)r1.x;
    r1.y = (int)r1.x * 3;
    r2.z = 7 << (int)r1.y;
    r10.xyzw = (int4)r2.zzzz & (int4)r8.xyzw;
    r10.xyzw = (uint4)r10.xyzw >> (uint4)r1.yyyy;
    r10.xyzw = r10.xyzw;
    r10.xyzw = float4(1.428571e-001,1.428571e-001,1.428571e-001,1.428571e-001) * r10.xyzw;
    r1.y = dot(r10.xyzw, r9.xyzw);
    r1.x = (int)r1.x + 1;
    r1.x = (int)r1.x * 3;
    r2.z = 7 << (int)r1.x;
    r8.xyzw = (int4)r2.zzzz & (int4)r8.xyzw;
    r8.xyzw = (uint4)r8.xyzw >> (uint4)r1.xxxx;
    r8.xyzw = r8.xyzw;
    r8.xyzw = float4(1.428571e-001,1.428571e-001,1.428571e-001,1.428571e-001) * r8.xyzw;
    r1.x = dot(r8.xyzw, r9.xyzw);
    r0.y = 2.500000000e-001 * abs(r0.y);
    r2.z = r0.y >= -r0.y;
    r0.y = frac(r0.y);
    r0.y = r2.z ? r0.y : -r0.y;
    r1.x = r1.x + -r1.y;
    r0.y = r0.y * r1.x + r1.y;
    r0.z = 2.000000000e+001 + r0.z;
    r0.z = r1.z + -r0.z;
    r0.z = saturate(5.000000075e-002 * r0.z);
    r1.x = 1.000000000e+000 + -r0.y;
    r0.y = r0.z * r1.x + r0.y;
    r0.x = saturate(r0.x * _LongRangeShadowFade.x + _LongRangeShadowFade.y);
    r0.z = r1.w + -r0.y;
    r0.x = r0.x * r0.z + r0.y;
    r0.y = dot(r3.yzw, r3.yzw);
    r0.y = sqrt(r0.y);
    r0.y = saturate(r0.y * r0.w);
    r0.z = r0.y * -2.000000000e+000 + 3.000000000e+000;
    r0.y = r0.y * r0.y;
    r0.y = r0.z * r0.y;
    r0.z = 4.000000000e+000 * _CloudSettings.x;
    r0.w = r2.x * r2.x;
    r0.z = r0.z * r0.w;
    r0.y = -r0.y * 5.000000000e-001 + 1.000000000e+000;
    r0.y = saturate(-r0.z * r0.y + 1.000000000e+000);
    r0.x = r0.x * r0.y;
    r0.yzw = r4.xyz * float3(2.000000e+000,2.000000e+000,1.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-0.000000e+000);
    r0.yzw = float3(-8.000000e-001,-8.000000e-001,-8.000000e-001) + abs(r0.yzw);
    r0.yzw = saturate(float3(5.000000e+000,5.000000e+000,5.000000e+000) * r0.yzw);
    r0.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r0.yzw;
    r0.y = min(r0.z, r0.y);
    r0.y = min(r0.w, r0.y);
    r0.zw = r6.xy * _ShadowMapSize.xy + float2(5.000000e-001,5.000000e-001);
    r1.xy = floor(r0.zw);
    r0.zw = -r1.xy + r0.zw;
    r1.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
    r1.zw = -r0.wz * float2(2.000000e+000,2.000000e+000) + float2(3.000000e+000,3.000000e+000);
    r2.xz = r0.zw * float2(2.000000e+000,2.000000e+000) + float2(1.000000e+000,1.000000e+000);
    r3.xy = float2(2.000000e+000,2.000000e+000) + -r0.zw;
    r3.xy = r3.xy / r1.wz;
    r0.zw = r0.zw / r2.xz;
    r3.zw = float2(-1.000000e+000,-1.000000e+000) + r3.xy;
    r3.xy = float2(1.000000e+000,1.000000e+000) + r0.zw;
    r0.z = r1.w * r1.z;
    r4.xyzw = _ShadowMapSize.zwzw * r3.zwxw;
    r8.xy = r1.xy * _ShadowMapSize.zw + r4.xy;
    r8.z = 2.000000000e+000;
    r0.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r8.xyz, r6.w, int2(0, 0)).x;
    r1.zw = r2.xz * r1.zw;
    r4.xy = r1.xy * _ShadowMapSize.zw + r4.zw;
    r4.z = 2.000000000e+000;
    r2.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r4.xyz, r6.w, int2(0, 0)).x;
    r1.z = r2.w * r1.z;
    r0.z = r0.z * r0.w + r1.z;
    r3.xyzw = _ShadowMapSize.zwzw * r3.zyxy;
    r4.xy = r1.xy * _ShadowMapSize.zw + r3.xy;
    r4.z = 2.000000000e+000;
    r0.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r4.xyz, r6.w, int2(0, 0)).x;
    r0.z = r1.w * r0.w + r0.z;
    r0.w = r2.x * r2.z;
    r1.xy = r1.xy * _ShadowMapSize.zw + r3.zw;
    r1.z = 2.000000000e+000;
    r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r1.xyz, r6.w, int2(0, 0)).x;
    r0.z = r0.w * r1.x + r0.z;
    r0.z = r0.z * 6.250000000e-002 + -r0.x;
    r0.x = r0.y * r0.z + r0.x;
  } else {
    r0.y = r6.z == 1.000000;
    if (r0.y != 0) {
      r0.yz = r6.xy * _ShadowMapSize.xy + float2(5.000000e-001,5.000000e-001);
      r1.xy = floor(r0.yz);
      r0.yz = -r1.xy + r0.yz;
      r1.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
      r1.zw = _ShadowMapSize.zw * r1.xy;
      r2.xz = -r0.zy * float2(3.000000e+000,3.000000e+000) + float2(4.000000e+000,4.000000e+000);
      r3.xy = r0.yz * float2(3.000000e+000,3.000000e+000) + float2(1.000000e+000,1.000000e+000);
      r3.zw = -r0.yz * float2(2.000000e+000,2.000000e+000) + float2(3.000000e+000,3.000000e+000);
      r3.zw = r3.zw / r2.zx;
      r4.xy = float2(3.000000e+000,3.000000e+000) + r0.yz;
      r0.yz = r0.yz / r3.xy;
      r8.xw = float2(-2.000000e+000,-2.000000e+000) + r3.zw;
      r8.yz = float2(1.428571e-001,1.428571e-001) * r4.yx;
      r4.xy = float2(2.000000e+000,2.000000e+000) + r0.yz;
      r0.y = r2.z * r2.x;
      r9.xyzw = _ShadowMapSize.zwzw * r8.xwzw;
      r10.xy = r1.xy * _ShadowMapSize.zw + r9.xy;
      r10.z = 1.000000000e+000;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r6.w, int2(0, 0)).x;
      r3.zw = float2(7.000000e+000,7.000000e+000) * r2.xz;
      r9.xy = r1.xy * _ShadowMapSize.zw + r9.zw;
      r9.z = 1.000000000e+000;
      r0.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r6.w, int2(0, 0)).x;
      r0.w = r3.z * r0.w;
      r0.y = r0.y * r0.z + r0.w;
      r0.zw = r3.xy * r2.xz;
      r4.zw = r8.wy;
      r9.xyzw = _ShadowMapSize.zwzw * r4.xzxw;
      r10.xy = r1.xy * _ShadowMapSize.zw + r9.xy;
      r10.z = 1.000000000e+000;
      r2.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r6.w, int2(0, 0)).x;
      r0.y = r0.z * r2.x + r0.y;
      r10.xyzw = _ShadowMapSize.zwzw * r8.xyzy;
      r11.xy = r1.xy * _ShadowMapSize.zw + r10.xy;
      r11.z = 1.000000000e+000;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r11.xyz, r6.w, int2(0, 0)).x;
      r0.y = r3.w * r0.z + r0.y;
      r10.xy = r1.xy * _ShadowMapSize.zw + r10.zw;
      r10.z = 1.000000000e+000;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r10.xyz, r6.w, int2(0, 0)).x;
      r0.y = r0.z * 4.900000000e+001 + r0.y;
      r2.xz = float2(7.000000e+000,7.000000e+000) * r3.xy;
      r9.xy = r1.xy * _ShadowMapSize.zw + r9.zw;
      r9.z = 1.000000000e+000;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r6.w, int2(0, 0)).x;
      r0.y = r2.x * r0.z + r0.y;
      r8.y = r4.y;
      r8.xyzw = _ShadowMapSize.zwzw * r8.xyzy;
      r9.xy = r1.xy * _ShadowMapSize.zw + r8.xy;
      r9.z = 1.000000000e+000;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r6.w, int2(0, 0)).x;
      r0.y = r0.w * r0.z + r0.y;
      r8.xy = r1.xy * _ShadowMapSize.zw + r8.zw;
      r8.z = 1.000000000e+000;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r8.xyz, r6.w, int2(0, 0)).x;
      r0.y = r2.z * r0.z + r0.y;
      r0.z = r3.x * r3.y;
      r1.xy = r4.xy * _ShadowMapSize.zw + r1.zw;
      r1.z = 1.000000000e+000;
      r0.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r1.xyz, r6.w, int2(0, 0)).x;
      r0.y = r0.z * r0.w + r0.y;
      r0.x = 6.944444496e-003 * r0.y;
    } else {
      r0.yz = r6.xy * _ShadowMapSize.xy + float2(5.000000e-001,5.000000e-001);
      r1.xy = floor(r0.yz);
      r0.yz = -r1.xy + r0.yz;
      r1.xy = float2(-5.000000e-001,-5.000000e-001) + r1.xy;
      r1.zw = _ShadowMapSize.zw * r1.xy;
      r3.xyzw = r0.yyyy * float4(1.100000e+001,1.100000e+001,5.000000e+000,5.000000e+000) + float4(-2.800000e+001,1.700000e+001,-6.000000e+000,1.000000e+000);
      r2.xzw = r0.yyy * float3(4.000000e+000,4.000000e+000,7.000000e+000) + float3(-5.000000e+000,-1.600000e+001,5.000000e+000);
      r2.xzw = r2.xzw / r3.zxy;
      r4.xyz = float3(-1.000000e+000,-3.000000e+000,1.000000e+000) + r2.zxw;
      r0.y = r0.y / r3.w;
      r8.x = 3.000000000e+000 + r0.y;
      r9.xyzw = r0.zzzz * float4(1.100000e+001,1.100000e+001,5.000000e+000,5.000000e+000) + float4(-2.800000e+001,1.700000e+001,-6.000000e+000,1.000000e+000);
      r2.xzw = r0.zzz * float3(4.000000e+000,4.000000e+000,7.000000e+000) + float3(-5.000000e+000,-1.600000e+001,5.000000e+000);
      r2.xzw = r2.xzw / r9.zxy;
      r10.xyz = float3(-3.000000e+000,-1.000000e+000,1.000000e+000) + r2.xzw;
      r0.y = r0.z / r9.w;
      r11.y = 3.000000000e+000 + r0.y;
      r12.xyzw = r9.zzxx * r3.zxzx;
      r4.w = r10.x;
      r13.xyzw = _ShadowMapSize.zwzw * r4.ywxw;
      r6.xy = r1.xy * _ShadowMapSize.zw + r13.xy;
      r0.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r6.xy = r1.xy * _ShadowMapSize.zw + r13.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.z = r12.y * r0.z;
      r0.y = r12.x * r0.y + r0.z;
      r13.xyzw = r9.zzxx * -r3.ywyw;
      r6.xy = r4.zw * _ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.x * r0.z + r0.y;
      r8.y = r4.w;
      r6.xy = r8.xy * _ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.y * r0.z + r0.y;
      r10.w = r4.y;
      r14.xyzw = _ShadowMapSize.zwzw * r10.wywz;
      r6.xy = r1.xy * _ShadowMapSize.zw + r14.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r12.z * r0.z + r0.y;
      r4.yw = r10.yz;
      r15.xyzw = _ShadowMapSize.zwzw * r4.xyzy;
      r6.xy = r1.xy * _ShadowMapSize.zw + r15.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r12.w * r0.z + r0.y;
      r6.xy = r1.xy * _ShadowMapSize.zw + r15.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.z * r0.z + r0.y;
      r8.zw = r4.yw;
      r12.xyzw = _ShadowMapSize.zwzw * r8.xzxw;
      r6.xy = r1.xy * _ShadowMapSize.zw + r12.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.w * r0.z + r0.y;
      r13.xyzw = -r9.yyww * r3.zxzx;
      r6.xy = r1.xy * _ShadowMapSize.zw + r14.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.x * r0.z + r0.y;
      r14.xyzw = _ShadowMapSize.zwzw * r4.xwzw;
      r6.xy = r1.xy * _ShadowMapSize.zw + r14.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.y * r0.z + r0.y;
      r3.xyzw = r9.yyww * r3.ywyw;
      r6.xy = r1.xy * _ShadowMapSize.zw + r14.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r3.x * r0.z + r0.y;
      r6.xy = r1.xy * _ShadowMapSize.zw + r12.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r3.y * r0.z + r0.y;
      r11.x = r10.w;
      r6.xy = r11.xy * _ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.z * r0.z + r0.y;
      r11.zw = r4.xz;
      r4.xyzw = _ShadowMapSize.zwzw * r11.zywy;
      r6.xy = r1.xy * _ShadowMapSize.zw + r4.xy;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r13.w * r0.z + r0.y;
      r6.xy = r1.xy * _ShadowMapSize.zw + r4.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r3.z * r0.z + r0.y;
      r11.x = r8.x;
      r6.xy = r11.xy * _ShadowMapSize.zw + r1.zw;
      r0.z = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r6.xyz, r6.w, int2(0, 0)).x;
      r0.y = r3.w * r0.z + r0.y;
      r0.x = 3.698224900e-004 * r0.y;
      r1.xyz = r7.xyz * float3(2.000000e+000,2.000000e+000,1.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-0.000000e+000);
      r1.xyz = float3(-8.000000e-001,-8.000000e-001,-8.000000e-001) + abs(r1.xyz);
      r1.xyz = saturate(float3(5.000000e+000,5.000000e+000,5.000000e+000) * r1.xyz);
      r1.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r1.xyz;
      r0.z = min(r1.y, r1.x);
      r0.z = min(r1.z, r0.z);
      r0.w = r0.z != 1.000000;
      if (r0.w != 0) {
        r1.xy = r5.xy * _ShadowMapSize.xy + float2(5.000000e-001,5.000000e-001);
        r1.zw = floor(r1.xy);
        r1.xy = r1.xy + -r1.zw;
        r1.zw = float2(-5.000000e-001,-5.000000e-001) + r1.zw;
        r2.xz = _ShadowMapSize.zw * r1.zw;
        r3.xy = -r1.yx * float2(3.000000e+000,3.000000e+000) + float2(4.000000e+000,4.000000e+000);
        r3.zw = r1.xy * float2(3.000000e+000,3.000000e+000) + float2(1.000000e+000,1.000000e+000);
        r4.xy = -r1.xy * float2(2.000000e+000,2.000000e+000) + float2(3.000000e+000,3.000000e+000);
        r4.xy = r4.xy / r3.yx;
        r4.zw = float2(3.000000e+000,3.000000e+000) + r1.xy;
        r1.xy = r1.xy / r3.zw;
        r6.xw = float2(-2.000000e+000,-2.000000e+000) + r4.xy;
        r6.yz = float2(1.428571e-001,1.428571e-001) * r4.wz;
        r4.xy = float2(2.000000e+000,2.000000e+000) + r1.xy;
        r0.w = r3.y * r3.x;
        r7.xyzw = _ShadowMapSize.zwzw * r6.xwzw;
        r8.xy = r1.zw * _ShadowMapSize.zw + r7.xy;
        r8.z = 1.000000000e+000;
        r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r8.xyz, r5.z, int2(0, 0)).x;
        r5.xy = float2(7.000000e+000,7.000000e+000) * r3.xy;
        r7.xy = r1.zw * _ShadowMapSize.zw + r7.zw;
        r7.z = 1.000000000e+000;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z, int2(0, 0)).x;
        r1.y = r5.x * r1.y;
        r0.w = r0.w * r1.x + r1.y;
        r1.xy = r3.zw * r3.xy;
        r4.zw = r6.wy;
        r7.xyzw = _ShadowMapSize.zwzw * r4.xzxw;
        r8.xy = r1.zw * _ShadowMapSize.zw + r7.xy;
        r8.z = 1.000000000e+000;
        r2.w = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r8.xyz, r5.z, int2(0, 0)).x;
        r0.w = r1.x * r2.w + r0.w;
        r8.xyzw = _ShadowMapSize.zwzw * r6.xyzy;
        r9.xy = r1.zw * _ShadowMapSize.zw + r8.xy;
        r9.z = 1.000000000e+000;
        r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r9.xyz, r5.z, int2(0, 0)).x;
        r0.w = r5.y * r1.x + r0.w;
        r8.xy = r1.zw * _ShadowMapSize.zw + r8.zw;
        r8.z = 1.000000000e+000;
        r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r8.xyz, r5.z, int2(0, 0)).x;
        r0.w = r1.x * 4.900000000e+001 + r0.w;
        r3.xy = float2(7.000000e+000,7.000000e+000) * r3.zw;
        r7.xy = r1.zw * _ShadowMapSize.zw + r7.zw;
        r7.z = 1.000000000e+000;
        r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z, int2(0, 0)).x;
        r0.w = r3.x * r1.x + r0.w;
        r6.y = r4.y;
        r6.xyzw = _ShadowMapSize.zwzw * r6.xyzy;
        r7.xy = r1.zw * _ShadowMapSize.zw + r6.xy;
        r7.z = 1.000000000e+000;
        r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r7.xyz, r5.z, int2(0, 0)).x;
        r0.w = r1.y * r1.x + r0.w;
        r1.xy = r1.zw * _ShadowMapSize.zw + r6.zw;
        r1.z = 1.000000000e+000;
        r1.x = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r1.xyz, r5.z, int2(0, 0)).x;
        r0.w = r3.y * r1.x + r0.w;
        r1.x = r3.z * r3.w;
        r3.xy = r4.xy * _ShadowMapSize.zw + r2.xz;
        r3.z = 1.000000000e+000;
        r1.y = ShadowCmpSampler_TextureObject.SampleCmpLevelZero(ShadowCmpSampler_s, r3.xyz, r5.z, int2(0, 0)).x;
        r0.w = r1.x * r1.y + r0.w;
        r0.w = 6.944444496e-003 * r0.w;
        r0.y = r0.y * 3.698224900e-004 + -r0.w;
        r0.x = r0.z * r0.y + r0.w;
      }
    }
  }
  o0.xyzw = r0.xxxx * r2.yyyy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16 [unused]
//   float4 _FogSHG;                    // Offset:  304 Size:    16 [unused]
//   float4 _FogSHR;                    // Offset:  320 Size:    16 [unused]
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
// cbuffer CNewLightingDataProvider
// {
//
//   float4 _CSMSlice0_0;               // Offset:    0 Size:    16
//   float4 _CSMSlice0_1;               // Offset:   16 Size:    16
//   float4 _CSMSlice0_2;               // Offset:   32 Size:    16
//   float4 _CSMSlice1_0;               // Offset:   48 Size:    16
//   float4 _CSMSlice1_1;               // Offset:   64 Size:    16
//   float4 _CSMSlice1_2;               // Offset:   80 Size:    16
//   float4 _CSMSlice2_0;               // Offset:   96 Size:    16
//   float4 _CSMSlice2_1;               // Offset:  112 Size:    16
//   float4 _CSMSlice2_2;               // Offset:  128 Size:    16
//   float4 _CSMSliceFade;              // Offset:  144 Size:    16 [unused]
//   float4 _LightUpWS_RcpSquaredLightRadius;// Offset:  160 Size:    16 [unused]
//   float4 _PointAttenuation_SpotFactors;// Offset:  176 Size:    16 [unused]
//   float4 _ShadowMapSize;             // Offset:  192 Size:    16
//   float4x4 _ShadowProjectionMatrix;  // Offset:  208 Size:    64 [unused]
//   float4x4 _ShadowRotProjectionMatrix;// Offset:  272 Size:    64 [unused]
//   float3 _LightColor;                // Offset:  336 Size:    12 [unused]
//   float3 _LightColorUpNormal;        // Offset:  352 Size:    12 [unused]
//   float3 _LightDirectionWS;          // Offset:  368 Size:    12 [unused]
//   float3 _LightPositionWS;           // Offset:  384 Size:    12 [unused]
//   float3 _LightRightWS;              // Offset:  400 Size:    12 [unused]
//
// }
//
// cbuffer CSceneTerrainShadowAtlasPrivateData
// {
//
//   float4 _SectorOffsetScale;         // Offset:    0 Size:    16
//   float2 _LongRangeShadowFade;       // Offset:   16 Size:     8
//
// }
//
// cbuffer CDepthReconstructionProvider
// {
//
//   float4x4 _InvViewRotProjectionMatrix;// Offset:    0 Size:    64
//   float4x4 _ReconsInvViewRotProjectionMatrix;// Offset:   64 Size:    64 [unused]
//   float3 _ReconsCamPosition;         // Offset:  128 Size:    12 [unused]
//   float _ReconsDepthMul;             // Offset:  140 Size:     4 [unused]
//   float _ReconsDepthOffset;          // Offset:  144 Size:     4 [unused]
//   float _ReconsViewFar;              // Offset:  148 Size:     4 [unused]
//   float _ReconsViewNear;             // Offset:  152 Size:     4 [unused]
//   float _ReconsViewOORange;          // Offset:  156 Size:     4 [unused]
//   float _ReconsViewRange;            // Offset:  160 Size:     4 [unused]
//
// }
//
// cbuffer CCloudShadowParameterProvider
// {
//
//   float4 _CloudSettings;             // Offset:    0 Size:    16
//   float4 _SunColor;                  // Offset:   16 Size:    16 [unused]
//   float3 _PlayerPosition;            // Offset:   32 Size:    12
//   float3 _SunDirection;              // Offset:   48 Size:    12
//
// }
//
// cbuffer CSceneTerrainVistaShadowPrivateData
// {
//
//   float4x4 _VistaShadowMatrix;       // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthVPSampler__SampObj__         sampler      NA          NA    0        1
// ShadowCmpSampler                sampler_c      NA          NA    1        1
// SkyDomeColorWrap                  sampler      NA          NA    2        1
// VistaShadowTexture              sampler_c      NA          NA    3        1
// DepthVPSampler__TexObj__          texture  float4          2d    0        1
// ShadowCmpSampler_TextureObject    texture  float4     2darray    1        1
// SectorAtlasTexture_UINT_TextureObject    texture   uint4          2d    2        1
// CloudShadowTexture                texture  float4          2d    3        1
// VistaShadowTexture_TextureObject    texture  float4          2d    4        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CNewLightingDataProvider          cbuffer      NA          NA    1        1
// CSceneTerrainShadowAtlasPrivateData    cbuffer      NA          NA    2        1
// CDepthReconstructionProvider      cbuffer      NA          NA    3        1
// CCloudShadowParameterProvider     cbuffer      NA          NA    4        1
// CSceneTerrainVistaShadowPrivateData    cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// SV_IsFrontFace           0   x           2    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[13], immediateIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb3[4], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb5[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_comparison
dcl_sampler s2, mode_default
dcl_sampler s3, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2darray (float,float,float,float) t1
dcl_resource_texture2d (uint,uint,uint,uint) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 16
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.x, cb0[14].y, r0.x, cb0[14].x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.y, cb0[4].y, cb0[4].x
mul r0.x, r0.x, cb0[4].z
div r0.x, r0.y, r0.x
add r0.x, -r0.x, cb0[4].y
mad r0.z, -r0.x, cb0[4].w, l(1.000000)
mad r0.xy, v1.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb3[0].xyzw
dp4 r1.y, r0.xyzw, cb3[1].xyzw
dp4 r1.z, r0.xyzw, cb3[2].xyzw
dp4 r0.x, r0.xyzw, cb3[3].xyzw
div r0.xyz, r1.xyzx, r0.xxxx
add r1.xyz, r0.xyzx, cb0[8].xyzx
add r2.xyz, r1.xyzx, -cb4[2].xyzx
dp3 r0.w, r2.xyzx, -cb4[3].xyzx
add r2.w, r0.w, r0.w
dp3 r3.x, r2.xyzx, r2.xyzx
mad r3.y, -cb4[0].z, cb4[0].z, r3.x
mul r3.y, r3.y, l(4.000000)
mad r2.w, r2.w, r2.w, -r3.y
sqrt r2.w, r2.w
mad r3.y, -r0.w, l(2.000000), -r2.w
mul r3.y, r3.y, l(0.500000)
mad r0.w, -r0.w, l(2.000000), r2.w
mul r0.w, r0.w, l(0.500000)
max r0.w, r3.y, r0.w
mul r3.yzw, r0.wwww, -cb4[3].xxyz
mad r2.xyz, -cb4[3].xyzx, r0.wwww, r2.xyzx
div r0.w, r2.y, r2.x
min r2.y, |r0.w|, l(1.000000)
max r2.w, |r0.w|, l(1.000000)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
mul r2.y, r2.w, r2.y
mul r2.w, r2.y, r2.y
mad r4.x, r2.w, l(0.020835), l(-0.085133)
mad r4.x, r2.w, r4.x, l(0.180141)
mad r4.x, r2.w, r4.x, l(-0.330299)
mad r2.w, r2.w, r4.x, l(0.999866)
mul r4.x, r2.w, r2.y
lt r4.y, l(1.000000), |r0.w|
mad r4.x, r4.x, l(-2.000000), l(1.570796)
and r4.x, r4.y, r4.x
mad r2.y, r2.y, r2.w, r4.x
min r0.w, r0.w, l(1.000000)
lt r0.w, r0.w, -r0.w
movc r0.w, r0.w, -r2.y, r2.y
lt r2.x, r2.x, l(0.000000)
add r2.yw, -r0.wwww, l(0.000000, -1.570796, 0.000000, -4.712389)
movc r0.w, r2.x, r2.w, r2.y
mul r2.x, r2.z, l(0.915000)
div r2.x, r2.x, cb4[0].z
add r2.y, -r2.x, l(1.000000)
mul r2.z, cb4[0].y, l(0.300000)
mad r2.x, r0.w, l(0.159155), r2.z
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb4[0].z
sqrt r2.z, r3.x
mul_sat r2.z, r0.w, r2.z
mad r2.w, r2.z, l(-2.000000), l(3.000000)
mul r2.z, r2.z, r2.z
mul r2.z, r2.z, r2.w
sample_l_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t3.wxyz, s2, l(0.000000)
add r2.y, r2.x, l(-0.100000)
mul_sat r2.y, r2.y, l(10.000000)
mad r2.w, r2.y, l(-2.000000), l(3.000000)
mul r2.y, r2.y, r2.y
mul r3.x, r2.y, r2.w
mad r2.y, -r2.w, r2.y, r2.x
mad r2.y, r2.z, r2.y, r3.x
add r2.w, cb4[0].x, cb4[0].x
mul r2.y, r2.y, r2.y
mul r2.y, r2.y, r2.w
mad r2.z, -r2.z, l(0.500000), l(1.000000)
mad_sat r2.y, -r2.y, r2.z, l(1.000000)
mov r1.w, l(1.000000)
dp4 r4.x, r1.xyzw, cb1[6].xyzw
dp4 r4.y, r1.xyzw, cb1[7].xyzw
dp4 r4.z, r1.xyzw, cb1[8].xyzw
dp4 r5.x, r1.xyzw, cb1[3].xyzw
dp4 r5.y, r1.xyzw, cb1[4].xyzw
dp4 r5.z, r1.xyzw, cb1[5].xyzw
ge r6.xyz, r5.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
and r6.xyz, r6.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
ge r7.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r5.xyzx
and r7.xyz, r7.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r6.xyz, r6.xyzx, r7.xyzx
dp3 r2.z, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ge r2.z, r2.z, l(3.000000)
mov r5.w, l(1.000000)
mov r4.w, l(2.000000)
movc r6.xyzw, r2.zzzz, r5.xyzw, r4.xyzw
dp4 r7.x, r1.xyzw, cb1[0].xyzw
dp4 r7.y, r1.xyzw, cb1[1].xyzw
dp4 r7.z, r1.xyzw, cb1[2].xyzw
ge r8.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
and r8.xyz, r8.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
ge r9.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r7.xyzx
and r9.xyz, r9.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r8.xyz, r8.xyzx, r9.xyzx
dp3 r2.z, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
ge r2.z, r2.z, l(3.000000)
mov r7.w, l(0)
movc r6.xyzw, r2.zzzz, r7.xywz, r6.xywz
eq r2.z, r6.z, l(2.000000)
if_nz r2.z
  dp4 r8.x, r1.xyzw, cb5[0].xyzw
  dp4 r8.y, r1.xyzw, cb5[1].xyzw
  dp4 r8.z, r1.xyzw, cb5[2].xyzw
  dp4 r1.w, r1.xyzw, cb5[3].xyzw
  div r8.xyz, r8.xyzx, r1.wwww
  resinfo_indexable(texture2d)(float,float,float,float) r2.zw, l(0), t4.zwxy
  div r9.xy, l(1.000000, 1.000000, 1.000000, 1.000000), r2.zwzz
  mad r2.zw, r8.xxxy, r2.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
  round_ni r9.zw, r2.zzzw
  add r2.zw, r2.zzzw, -r9.zzzw
  add r9.zw, r9.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
  mul r9.zw, r9.xxxy, r9.zzzw
  mad r10.xy, -r2.wzww, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
  mad r10.zw, r2.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
  add r11.xy, -r2.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000)
  div r11.xy, r11.xyxx, r10.yxyy
  div r2.zw, r2.zzzw, r10.zzzw
  add r11.zw, r11.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)
  add r11.xy, r2.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
  mul r1.w, r10.x, r10.y
  mad r12.xyzw, r11.zwxw, r9.xyxy, r9.zwzw
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.z, r12.xyxx, t4.xxxx, s3, r8.z
  mul r10.xy, r10.xyxx, r10.zwzz
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.w, r12.zwzz, t4.xxxx, s3, r8.z
  mul r2.w, r2.w, r10.x
  mad r1.w, r1.w, r2.z, r2.w
  mad r9.xyzw, r11.zyxy, r9.xyxy, r9.zwzw
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.z, r9.xyxx, t4.xxxx, s3, r8.z
  mad r1.w, r10.y, r2.z, r1.w
  mul r2.z, r10.w, r10.z
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2d)(float,float,float,float) r2.w, r9.zwzz, t4.xxxx, s3, r8.z
  mad r1.w, r2.z, r2.w, r1.w
  ge r9.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
  and r9.xyz, r9.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  ge r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  and r8.xyz, r8.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
  add r8.xyz, r8.xyzx, r9.xyzx
  mad r1.w, r1.w, l(0.062500), r8.x
  add r1.w, r8.y, r1.w
  add_sat r1.w, r8.z, r1.w
  dp3 r0.x, r0.xyzx, r0.xyzx
  sqrt r0.x, r0.x
  mad r0.yz, r1.yyxy, cb2[0].yyxy, cb2[0].wwzw
  resinfo_indexable(texture2d)(uint,uint,uint,uint)_uint r1.xy, l(0), t2.xyzw
  utof r2.zw, r1.xxxy
  mad r0.yz, r0.yyzy, r2.zzwz, l(0.000000, 0.500000, 0.500000, 0.000000)
  frc r2.zw, r0.zzzy
  add r8.xy, -r2.wzww, l(1.000000, 1.000000, 0.000000, 0.000000)
  mul r9.y, r2.z, r2.w
  mul r9.xz, r2.zzwz, r8.xxyx
  mul r9.w, r8.y, r8.x
  ftou r0.yz, r0.yyzy
  iadd r0.yz, r0.yyzy, r1.xxyx
  iadd r8.xyzw, r0.yzyz, l(-1, 0, 0, -1)
  udiv null, r10.xy, r0.yzyy, r1.xyxx
  udiv null, r8.xyzw, r8.zwxy, r1.xyxy
  iadd r0.yz, r0.yyzy, l(0, -1, -1, 0)
  udiv null, r11.xy, r0.yzyy, r1.xyxx
  mov r12.xy, r8.zwzz
  mov r12.zw, l(0,0,0,0)
  ld_indexable(texture2d)(uint,uint,uint,uint) r0.yz, r12.xyzw, t2.zxyw
  mov r10.zw, l(0,0,0,0)
  ld_indexable(texture2d)(uint,uint,uint,uint) r1.xy, r10.xyzw, t2.xyzw
  mov r8.zw, l(0,0,0,0)
  ld_indexable(texture2d)(uint,uint,uint,uint) r2.zw, r8.xyzw, t2.zwxy
  mov r11.zw, l(0,0,0,0)
  ld_indexable(texture2d)(uint,uint,uint,uint) r8.xw, r11.xyzw, t2.yzwx
  f16tof32 r10.x, r0.z
  f16tof32 r10.y, r1.y
  f16tof32 r10.z, r2.w
  f16tof32 r10.w, r8.x
  dp4 r0.z, r10.xyzw, r9.xyzw
  mov r8.x, r0.y
  mov r8.y, r1.x
  mov r8.z, r2.z
  or r8.xyzw, r8.xyzw, l(0xffff8000, 0xffff8000, 0xffff8000, 0xffff8000)
  add r0.y, -r0.z, r1.z
  mul r1.x, r0.y, l(0.250000)
  ftoi r1.x, r1.x
  imul null, r1.y, r1.x, l(3)
  ishl r2.z, l(7), r1.y
  and r10.xyzw, r2.zzzz, r8.xyzw
  ushr r10.xyzw, r10.xyzw, r1.yyyy
  utof r10.xyzw, r10.xyzw
  mul r10.xyzw, r10.xyzw, l(0.142857, 0.142857, 0.142857, 0.142857)
  dp4 r1.y, r10.xyzw, r9.xyzw
  iadd r1.x, r1.x, l(1)
  imul null, r1.x, r1.x, l(3)
  ishl r2.z, l(7), r1.x
  and r8.xyzw, r2.zzzz, r8.xyzw
  ushr r8.xyzw, r8.xyzw, r1.xxxx
  utof r8.xyzw, r8.xyzw
  mul r8.xyzw, r8.xyzw, l(0.142857, 0.142857, 0.142857, 0.142857)
  dp4 r1.x, r8.xyzw, r9.xyzw
  mul r0.y, |r0.y|, l(0.250000)
  ge r2.z, r0.y, -r0.y
  frc r0.y, r0.y
  movc r0.y, r2.z, r0.y, -r0.y
  add r1.x, -r1.y, r1.x
  mad r0.y, r0.y, r1.x, r1.y
  add r0.z, r0.z, l(20.000000)
  add r0.z, -r0.z, r1.z
  mul_sat r0.z, r0.z, l(0.050000)
  add r1.x, -r0.y, l(1.000000)
  mad r0.y, r0.z, r1.x, r0.y
  mad_sat r0.x, r0.x, cb2[1].x, cb2[1].y
  add r0.z, -r0.y, r1.w
  mad r0.x, r0.x, r0.z, r0.y
  dp3 r0.y, r3.yzwy, r3.yzwy
  sqrt r0.y, r0.y
  mul_sat r0.y, r0.w, r0.y
  mad r0.z, r0.y, l(-2.000000), l(3.000000)
  mul r0.y, r0.y, r0.y
  mul r0.y, r0.y, r0.z
  mul r0.z, cb4[0].x, l(4.000000)
  mul r0.w, r2.x, r2.x
  mul r0.z, r0.w, r0.z
  mad r0.y, -r0.y, l(0.500000), l(1.000000)
  mad_sat r0.y, -r0.z, r0.y, l(1.000000)
  mul r0.x, r0.y, r0.x
  mad r0.yzw, r4.xxyz, l(0.000000, 2.000000, 2.000000, 1.000000), l(0.000000, -1.000000, -1.000000, -0.000000)
  add r0.yzw, |r0.yyzw|, l(0.000000, -0.800000, -0.800000, -0.800000)
  mul_sat r0.yzw, r0.yyzw, l(0.000000, 5.000000, 5.000000, 5.000000)
  add r0.yzw, -r0.yyzw, l(0.000000, 1.000000, 1.000000, 1.000000)
  min r0.y, r0.z, r0.y
  min r0.y, r0.w, r0.y
  mad r0.zw, r6.xxxy, cb1[12].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)
  round_ni r1.xy, r0.zwzz
  add r0.zw, r0.zzzw, -r1.xxxy
  add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
  mad r1.zw, -r0.wwwz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
  mad r2.xz, r0.zzwz, l(2.000000, 0.000000, 2.000000, 0.000000), l(1.000000, 0.000000, 1.000000, 0.000000)
  add r3.xy, -r0.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000)
  div r3.xy, r3.xyxx, r1.wzww
  div r0.zw, r0.zzzw, r2.xxxz
  add r3.zw, r3.xxxy, l(0.000000, 0.000000, -1.000000, -1.000000)
  add r3.xy, r0.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
  mul r0.z, r1.z, r1.w
  mul r4.xyzw, r3.zwxw, cb1[12].zwzw
  mad r8.xy, r1.xyxx, cb1[12].zwzz, r4.xyxx
  mov r8.z, l(2.000000)
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.w, r8.xyzx, t1.xxxx, s1, r6.w
  mul r1.zw, r1.zzzw, r2.xxxz
  mad r4.xy, r1.xyxx, cb1[12].zwzz, r4.zwzz
  mov r4.z, l(2.000000)
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r2.w, r4.xyzx, t1.xxxx, s1, r6.w
  mul r1.z, r1.z, r2.w
  mad r0.z, r0.z, r0.w, r1.z
  mul r3.xyzw, r3.zyxy, cb1[12].zwzw
  mad r4.xy, r1.xyxx, cb1[12].zwzz, r3.xyxx
  mov r4.z, l(2.000000)
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.w, r4.xyzx, t1.xxxx, s1, r6.w
  mad r0.z, r1.w, r0.w, r0.z
  mul r0.w, r2.z, r2.x
  mad r1.xy, r1.xyxx, cb1[12].zwzz, r3.zwzz
  mov r1.z, l(2.000000)
  sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r1.xyzx, t1.xxxx, s1, r6.w
  mad r0.z, r0.w, r1.x, r0.z
  mad r0.z, r0.z, l(0.062500), -r0.x
  mad r0.x, r0.y, r0.z, r0.x
else 
  eq r0.y, r6.z, l(1.000000)
  if_nz r0.y
    mad r0.yz, r6.xxyx, cb1[12].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
    round_ni r1.xy, r0.yzyy
    add r0.yz, r0.yyzy, -r1.xxyx
    add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
    mul r1.zw, r1.xxxy, cb1[12].zzzw
    mad r2.xz, -r0.zzyz, l(3.000000, 0.000000, 3.000000, 0.000000), l(4.000000, 0.000000, 4.000000, 0.000000)
    mad r3.xy, r0.yzyy, l(3.000000, 3.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
    mad r3.zw, -r0.yyyz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
    div r3.zw, r3.zzzw, r2.zzzx
    add r4.xy, r0.yzyy, l(3.000000, 3.000000, 0.000000, 0.000000)
    div r0.yz, r0.yyzy, r3.xxyx
    add r8.xw, r3.zzzw, l(-2.000000, 0.000000, 0.000000, -2.000000)
    mul r8.yz, r4.yyxy, l(0.000000, 0.142857, 0.142857, 0.000000)
    add r4.xy, r0.yzyy, l(2.000000, 2.000000, 0.000000, 0.000000)
    mul r0.y, r2.x, r2.z
    mul r9.xyzw, r8.xwzw, cb1[12].zwzw
    mad r10.xy, r1.xyxx, cb1[12].zwzz, r9.xyxx
    mov r10.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r10.xyzx, t1.xxxx, s1, r6.w
    mul r3.zw, r2.xxxz, l(0.000000, 0.000000, 7.000000, 7.000000)
    mad r9.xy, r1.xyxx, cb1[12].zwzz, r9.zwzz
    mov r9.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.w, r9.xyzx, t1.xxxx, s1, r6.w
    mul r0.w, r0.w, r3.z
    mad r0.y, r0.y, r0.z, r0.w
    mul r0.zw, r2.xxxz, r3.xxxy
    mov r4.zw, r8.wwwy
    mul r9.xyzw, r4.xzxw, cb1[12].zwzw
    mad r10.xy, r1.xyxx, cb1[12].zwzz, r9.xyxx
    mov r10.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r2.x, r10.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r0.z, r2.x, r0.y
    mul r10.xyzw, r8.xyzy, cb1[12].zwzw
    mad r11.xy, r1.xyxx, cb1[12].zwzz, r10.xyxx
    mov r11.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r11.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r3.w, r0.z, r0.y
    mad r10.xy, r1.xyxx, cb1[12].zwzz, r10.zwzz
    mov r10.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r10.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r0.z, l(49.000000), r0.y
    mul r2.xz, r3.xxyx, l(7.000000, 0.000000, 7.000000, 0.000000)
    mad r9.xy, r1.xyxx, cb1[12].zwzz, r9.zwzz
    mov r9.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r9.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r2.x, r0.z, r0.y
    mov r8.y, r4.y
    mul r8.xyzw, r8.xyzy, cb1[12].zwzw
    mad r9.xy, r1.xyxx, cb1[12].zwzz, r8.xyxx
    mov r9.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r9.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r0.w, r0.z, r0.y
    mad r8.xy, r1.xyxx, cb1[12].zwzz, r8.zwzz
    mov r8.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r8.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r2.z, r0.z, r0.y
    mul r0.z, r3.y, r3.x
    mad r1.xy, r4.xyxx, cb1[12].zwzz, r1.zwzz
    mov r1.z, l(1.000000)
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.w, r1.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r0.z, r0.w, r0.y
    mul r0.x, r0.y, l(0.006944)
  else 
    mad r0.yz, r6.xxyx, cb1[12].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
    round_ni r1.xy, r0.yzyy
    add r0.yz, r0.yyzy, -r1.xxyx
    add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
    mul r1.zw, r1.xxxy, cb1[12].zzzw
    mad r3.xyzw, r0.yyyy, l(11.000000, 11.000000, 5.000000, 5.000000), l(-28.000000, 17.000000, -6.000000, 1.000000)
    mad r2.xzw, r0.yyyy, l(4.000000, 0.000000, 4.000000, 7.000000), l(-5.000000, 0.000000, -16.000000, 5.000000)
    div r2.xzw, r2.xxzw, r3.zzxy
    add r4.xyz, r2.zxwz, l(-1.000000, -3.000000, 1.000000, 0.000000)
    div r0.y, r0.y, r3.w
    add r8.x, r0.y, l(3.000000)
    mad r9.xyzw, r0.zzzz, l(11.000000, 11.000000, 5.000000, 5.000000), l(-28.000000, 17.000000, -6.000000, 1.000000)
    mad r2.xzw, r0.zzzz, l(4.000000, 0.000000, 4.000000, 7.000000), l(-5.000000, 0.000000, -16.000000, 5.000000)
    div r2.xzw, r2.xxzw, r9.zzxy
    add r10.xyz, r2.xzwx, l(-3.000000, -1.000000, 1.000000, 0.000000)
    div r0.y, r0.z, r9.w
    add r11.y, r0.y, l(3.000000)
    mul r12.xyzw, r3.zxzx, r9.zzxx
    mov r4.w, r10.x
    mul r13.xyzw, r4.ywxw, cb1[12].zwzw
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r13.xyxx
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.y, r6.xyzx, t1.xxxx, s1, r6.w
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r13.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mul r0.z, r0.z, r12.y
    mad r0.y, r12.x, r0.y, r0.z
    mul r13.xyzw, -r3.ywyw, r9.zzxx
    mad r6.xy, r4.zwzz, cb1[12].zwzz, r1.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.x, r0.z, r0.y
    mov r8.y, r4.w
    mad r6.xy, r8.xyxx, cb1[12].zwzz, r1.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.y, r0.z, r0.y
    mov r10.w, r4.y
    mul r14.xyzw, r10.wywz, cb1[12].zwzw
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r14.xyxx
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r12.z, r0.z, r0.y
    mov r4.yw, r10.yyyz
    mul r15.xyzw, r4.xyzy, cb1[12].zwzw
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r15.xyxx
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r12.w, r0.z, r0.y
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r15.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.z, r0.z, r0.y
    mov r8.zw, r4.yyyw
    mul r12.xyzw, r8.xzxw, cb1[12].zwzw
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r12.xyxx
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.w, r0.z, r0.y
    mul r13.xyzw, r3.zxzx, -r9.yyww
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r14.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.x, r0.z, r0.y
    mul r14.xyzw, r4.xwzw, cb1[12].zwzw
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r14.xyxx
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.y, r0.z, r0.y
    mul r3.xyzw, r3.ywyw, r9.yyww
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r14.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r3.x, r0.z, r0.y
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r12.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r3.y, r0.z, r0.y
    mov r11.x, r10.w
    mad r6.xy, r11.xyxx, cb1[12].zwzz, r1.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.z, r0.z, r0.y
    mov r11.zw, r4.xxxz
    mul r4.xyzw, r11.zywy, cb1[12].zwzw
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r4.xyxx
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r13.w, r0.z, r0.y
    mad r6.xy, r1.xyxx, cb1[12].zwzz, r4.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r3.z, r0.z, r0.y
    mov r11.x, r8.x
    mad r6.xy, r11.xyxx, cb1[12].zwzz, r1.zwzz
    sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r0.z, r6.xyzx, t1.xxxx, s1, r6.w
    mad r0.y, r3.w, r0.z, r0.y
    mul r0.x, r0.y, l(0.000370)
    mad r1.xyz, r7.xyzx, l(2.000000, 2.000000, 1.000000, 0.000000), l(-1.000000, -1.000000, -0.000000, 0.000000)
    add r1.xyz, |r1.xyzx|, l(-0.800000, -0.800000, -0.800000, 0.000000)
    mul_sat r1.xyz, r1.xyzx, l(5.000000, 5.000000, 5.000000, 0.000000)
    add r1.xyz, -r1.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    min r0.z, r1.y, r1.x
    min r0.z, r1.z, r0.z
    ne r0.w, r0.z, l(1.000000)
    if_nz r0.w
      mad r1.xy, r5.xyxx, cb1[12].xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
      round_ni r1.zw, r1.xxxy
      add r1.xy, -r1.zwzz, r1.xyxx
      add r1.zw, r1.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
      mul r2.xz, r1.zzwz, cb1[12].zzwz
      mad r3.xy, -r1.yxyy, l(3.000000, 3.000000, 0.000000, 0.000000), l(4.000000, 4.000000, 0.000000, 0.000000)
      mad r3.zw, r1.xxxy, l(0.000000, 0.000000, 3.000000, 3.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
      mad r4.xy, -r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
      div r4.xy, r4.xyxx, r3.yxyy
      add r4.zw, r1.xxxy, l(0.000000, 0.000000, 3.000000, 3.000000)
      div r1.xy, r1.xyxx, r3.zwzz
      add r6.xw, r4.xxxy, l(-2.000000, 0.000000, 0.000000, -2.000000)
      mul r6.yz, r4.wwzw, l(0.000000, 0.142857, 0.142857, 0.000000)
      add r4.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
      mul r0.w, r3.x, r3.y
      mul r7.xyzw, r6.xwzw, cb1[12].zwzw
      mad r8.xy, r1.zwzz, cb1[12].zwzz, r7.xyxx
      mov r8.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r8.xyzx, t1.xxxx, s1, r5.z
      mul r5.xy, r3.xyxx, l(7.000000, 7.000000, 0.000000, 0.000000)
      mad r7.xy, r1.zwzz, cb1[12].zwzz, r7.zwzz
      mov r7.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.y, r7.xyzx, t1.xxxx, s1, r5.z
      mul r1.y, r1.y, r5.x
      mad r0.w, r0.w, r1.x, r1.y
      mul r1.xy, r3.xyxx, r3.zwzz
      mov r4.zw, r6.wwwy
      mul r7.xyzw, r4.xzxw, cb1[12].zwzw
      mad r8.xy, r1.zwzz, cb1[12].zwzz, r7.xyxx
      mov r8.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r2.w, r8.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r1.x, r2.w, r0.w
      mul r8.xyzw, r6.xyzy, cb1[12].zwzw
      mad r9.xy, r1.zwzz, cb1[12].zwzz, r8.xyxx
      mov r9.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r9.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r5.y, r1.x, r0.w
      mad r8.xy, r1.zwzz, cb1[12].zwzz, r8.zwzz
      mov r8.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r8.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r1.x, l(49.000000), r0.w
      mul r3.xy, r3.zwzz, l(7.000000, 7.000000, 0.000000, 0.000000)
      mad r7.xy, r1.zwzz, cb1[12].zwzz, r7.zwzz
      mov r7.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r7.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r3.x, r1.x, r0.w
      mov r6.y, r4.y
      mul r6.xyzw, r6.xyzy, cb1[12].zwzw
      mad r7.xy, r1.zwzz, cb1[12].zwzz, r6.xyxx
      mov r7.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r7.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r1.y, r1.x, r0.w
      mad r1.xy, r1.zwzz, cb1[12].zwzz, r6.zwzz
      mov r1.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.x, r1.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r3.y, r1.x, r0.w
      mul r1.x, r3.w, r3.z
      mad r3.xy, r4.xyxx, cb1[12].zwzz, r2.xzxx
      mov r3.z, l(1.000000)
      sample_c_lz_aoffimmi_indexable(0,0,0)(texture2darray)(float,float,float,float) r1.y, r3.xyzx, t1.xxxx, s1, r5.z
      mad r0.w, r1.x, r1.y, r0.w
      mul r0.w, r0.w, l(0.006944)
      mad r0.y, r0.y, l(0.000370), -r0.w
      mad r0.x, r0.z, r0.y, r0.w
    endif 
  endif 
endif 
mul o0.xyzw, r2.yyyy, r0.xxxx
ret 
// Approximately 494 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
