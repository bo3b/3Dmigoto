// Clipped interior mask part 1/2
// This shader clears a 2D rectangle surrounding buildings with open windows
// and doors. A later shader will draw the mask
// VS 492c73b915631923 - clear rectangle to avoid stale data from previous frame
// VS 21ac1b95e1826465 - MSAA2 version of 492c73b915631923
// VS 438efe85d344ddd3 - draw mask on windows
// VS 6263f81e0c11b315 - MSAA2 version of 438efe85d344ddd3

cbuffer CDeferredInteriorAmbientProvider : register(b0)
{
  float4 _AmbientTextureSize : packoffset(c0);
  float4 _BlurOffsets[9] : packoffset(c1);
  float4 _InteriorAmbientParams : packoffset(c10);
  float4 _InteriorProbePartA : packoffset(c11);
  float4 _InteriorProbePartB : packoffset(c12);
  float4 _InteriorProbePartC : packoffset(c13);
  float4x4 _InteriorWorldMatrix : packoffset(c14);
  float4 _QuadParams : packoffset(c18);
  float4 _SrcTexHalfPixelOffset : packoffset(c19);
  float4 _g_blurTextureDim : packoffset(c20);
  float4 _g_vBlurWeights0_A : packoffset(c21);
  float4 _g_vBlurWeights0_B : packoffset(c22);
  float4 _g_vBlurWeights0_G : packoffset(c23);
  float4 _g_vBlurWeights0_R : packoffset(c24);
  float4 _g_vBlurWeights1_A : packoffset(c25);
  float4 _g_vBlurWeights1_B : packoffset(c26);
  float4 _g_vBlurWeights1_G : packoffset(c27);
  float4 _g_vBlurWeights1_R : packoffset(c28);
  float4 _g_vBlurWeights2_A : packoffset(c29);
  float4 _g_vBlurWeights2_B : packoffset(c30);
  float4 _g_vBlurWeights2_G : packoffset(c31);
  float4 _g_vBlurWeights2_R : packoffset(c32);
  float4 _verticalBlurWeights : packoffset(c33);
  float2 _HalfOffset : packoffset(c34);
  float3 _CamVectorOffset : packoffset(c35);
  float3 _CamVectorScaleX : packoffset(c36);
  float3 _CamVectorScaleY : packoffset(c37);
  float _MaskOffset : packoffset(c37.w);
  float _NormalizationFactor : packoffset(c38);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float2 o1 : TEXCOORD0,
  out float2 p1 : TEXCOORD1,

uint id : SV_VertexID

  )
{
  float4 r0;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.zw = float2(0,1);
  r0.xy = v0.xy * _QuadParams.xy + _QuadParams.zw;

// Adjust the bounds of the 2D rectangle to make sure it is covered in 3D:

// Approach 1 - expand rectangle, put it's depth at infinity. Works fine unless
// someone is playing with a lot of pop-out
// float4 stereo = StereoParams.Load(0);
// if ((stereo.z == 1 && (id == 0 || id == 1)) ||  // Left side in left eye
//     (stereo.z == -1 && (id == 2 || id == 3))) { // Right side in right eye
// 	// Adjust bounding box:
// 	r0.x += stereo.x * 2;
// }

// Approach 2 - move left side to screen left, move right side to screen right
// Works regardless of pop-out
if (id == 0 || id == 1) // Left side
	r0.x = -1;
else // Right side
	r0.x = 1;

  o0.xy = r0.xy;
  r0.xy = r0.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  p1.xy = _SrcTexHalfPixelOffset.zw + r0.xy;
  o1.xy = r0.xy;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CDeferredInteriorAmbientProvider
// {
//
//   float4 _AmbientTextureSize;        // Offset:    0 Size:    16 [unused]
//   float4 _BlurOffsets[9];            // Offset:   16 Size:   144 [unused]
//   float4 _InteriorAmbientParams;     // Offset:  160 Size:    16 [unused]
//   float4 _InteriorProbePartA;        // Offset:  176 Size:    16 [unused]
//   float4 _InteriorProbePartB;        // Offset:  192 Size:    16 [unused]
//   float4 _InteriorProbePartC;        // Offset:  208 Size:    16 [unused]
//   float4x4 _InteriorWorldMatrix;     // Offset:  224 Size:    64 [unused]
//   float4 _QuadParams;                // Offset:  288 Size:    16
//   float4 _SrcTexHalfPixelOffset;     // Offset:  304 Size:    16
//   float4 _g_blurTextureDim;          // Offset:  320 Size:    16 [unused]
//   float4 _g_vBlurWeights0_A;         // Offset:  336 Size:    16 [unused]
//   float4 _g_vBlurWeights0_B;         // Offset:  352 Size:    16 [unused]
//   float4 _g_vBlurWeights0_G;         // Offset:  368 Size:    16 [unused]
//   float4 _g_vBlurWeights0_R;         // Offset:  384 Size:    16 [unused]
//   float4 _g_vBlurWeights1_A;         // Offset:  400 Size:    16 [unused]
//   float4 _g_vBlurWeights1_B;         // Offset:  416 Size:    16 [unused]
//   float4 _g_vBlurWeights1_G;         // Offset:  432 Size:    16 [unused]
//   float4 _g_vBlurWeights1_R;         // Offset:  448 Size:    16 [unused]
//   float4 _g_vBlurWeights2_A;         // Offset:  464 Size:    16 [unused]
//   float4 _g_vBlurWeights2_B;         // Offset:  480 Size:    16 [unused]
//   float4 _g_vBlurWeights2_G;         // Offset:  496 Size:    16 [unused]
//   float4 _g_vBlurWeights2_R;         // Offset:  512 Size:    16 [unused]
//   float4 _verticalBlurWeights;       // Offset:  528 Size:    16 [unused]
//   float2 _HalfOffset;                // Offset:  544 Size:     8 [unused]
//   float3 _CamVectorOffset;           // Offset:  560 Size:    12 [unused]
//   float3 _CamVectorScaleX;           // Offset:  576 Size:    12 [unused]
//   float3 _CamVectorScaleY;           // Offset:  592 Size:    12 [unused]
//   float _MaskOffset;                 // Offset:  604 Size:     4 [unused]
//   float _NormalizationFactor;        // Offset:  608 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CDeferredInteriorAmbientProvider    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
//
vs_4_0
dcl_constantbuffer cb0[20], immediateIndexed
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_temps 1
mov o0.zw, l(0,0,0,1.000000)
mad r0.xy, v0.xyxx, cb0[18].xyxx, cb0[18].zwzz
mov o0.xy, r0.xyxx
mad r0.xy, r0.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
add o1.zw, r0.xxxy, cb0[19].zzzw
mov o1.xy, r0.xyxx
ret 
// Approximately 7 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
