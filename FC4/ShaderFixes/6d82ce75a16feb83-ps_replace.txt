// Lighting related/environment (specular highlights, environment reflection, fog, etc)
// Shader has several variants. Some AA variants have two - one for the fill,
// one for the anti-aliased polygon edges:
//
// Hash             |AA | Fill | Vegetation
//------------------+---+------+-----------
// 18d84611abd87606 | 0 | N/A  | Medium
// 6d82ce75a16feb83 | 0 | N/A  | High
// d4e77294d5c49a53 | 2 | Fill | Medium
// aa0ba3aefd2413b1 | 2 | Fill | High
// 8afc461f52eab3e6 | 2 | Edge | Medium
// 26d2628c45dfbeea | 2 | Edge | High
// bae6b98bfda33066 | 4 | Fill | Medium
// c73430e1895ff2f8 | 4 | Fill | High
// ea7ccc99799c7228 | 4 | Edge | Medium
// 54eae19b7f5cc5a0 | 4 | Edge | High
// 6ee0d5531150d4cd | 8 | Fill | Medium
// d120ec3d6d0ad200 | 8 | Fill | High
// 343df1da0e3edd9e | 8 | Edge | Medium
// 9a9b807b3669906a | 8 | Edge | High
//
// And even more variants without specular highlights (seen in some Himalayas missions):
// Hash             |AA | Fill | Vegetation
//------------------+---+------+-----------
// 8870ff9827077a28 | 0 | N/A  | Medium
// 40fdd63f0d945497 | 0 | N/A  | High
// 21bb80dc29b691bb | 2 | Fill | Medium
// 01f23eabdd55a4de | 2 | Fill | High
// 5b0fcbe11dff7344 | 2 | Edge | Medium
// 5059cf988234568b | 2 | Edge | High
// 325594ab3056df53 | 4 | Fill | Medium
// f22672f7d2f3e4d5 | 4 | Fill | High
// 72a6e709c250e563 | 4 | Edge | Medium
// ef62df7b760ff261 | 4 | Edge | High
// 375c5401a4ad4241 | 8 | Fill | Medium
// 775ad5671fae6770 | 8 | Fill | High
// 8a508f9327f97cf3 | 8 | Edge | Medium
// dd3d62e85908f373 | 8 | Edge | High

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

cbuffer CGlobalShaderParameterProvider : register(b1)
{
  float4 _BurnColor : packoffset(c0);
  float4 _BurnParams : packoffset(c1);
  float4 _BurnParams2 : packoffset(c2);
  float4 _BurnParams3 : packoffset(c3);
  float4 _CascadedShadowScaleOffsetTile0 : packoffset(c4);
  float4 _CascadedShadowScaleOffsetTile1 : packoffset(c5);
  float4 _GlobalScalars : packoffset(c6);
  float4 _SSS_MiscParams : packoffset(c7);
  float4 _WindSimParamsX : packoffset(c8);
  float4 _WindSimParamsY : packoffset(c9);
  float2 _RangeDepthCompression : packoffset(c10);
  float3 _SSS_Color : packoffset(c11);
  int _BRDFHighQuality : packoffset(c11.w);
}

cbuffer CDeferredLightingParameterProvider : register(b2)
{
  float4 _DistanceBoostParameters : packoffset(c0);
  float4 _ForceAlbedoOnlyDisableShadows : packoffset(c1);
  float4x4 _InvViewRotProjectionMatrix : packoffset(c2);
  float4 _LightClippingPlanes[24] : packoffset(c6);
  float4 _PointLightAttenuation[4] : packoffset(c30);
  float4 _PointLightClippingInfo[4] : packoffset(c34);
  float4 _PointLightColor[4] : packoffset(c38);
  float4 _PointLightMinMaxDepth[4] : packoffset(c42);
  float4 _PointLightPos[4] : packoffset(c46);
  float4 _QuadParams : packoffset(c50);
  float4 _SpotLightAttenuation[4] : packoffset(c51);
  float4 _SpotLightClippingInfo[4] : packoffset(c55);
  float4 _SpotLightColor[4] : packoffset(c59);
  float4 _SpotLightDirection[4] : packoffset(c63);
  float4 _SpotLightMinMaxDepth[4] : packoffset(c67);
  float4 _SpotLightPos[4] : packoffset(c71);
  float4 _SpotScaleOffsetUVS[4] : packoffset(c75);
  float4 _SpotShadowMapSize : packoffset(c79);
  float4x4 _SpotShadowProjectionMatrix[4] : packoffset(c80);
  float4 _SunColor : packoffset(c96);
  float4 _SunDirection : packoffset(c97);
  float3 _CamVectorOffset : packoffset(c98);
  float3 _CamVectorScaleX : packoffset(c99);
  float3 _CamVectorScaleY : packoffset(c100);
  float _AmbientRange : packoffset(c100.w);
  float _DebugLightComplexityBias : packoffset(c101);
  float _DirectLightOcclusion : packoffset(c101.y);
  float _SSAOPerMaterialIntensity : packoffset(c101.z);
  int _PointLightCount : packoffset(c101.w);
  int _SpotLightCount : packoffset(c102);
  int _SpotLightGoboCount : packoffset(c102.y);
}
SamplerState DepthVPSampler__SampObj___s : register(s0);
SamplerState DeferredReflectedAmbientTexture__SampObj___s : register(s1);
SamplerState EnvironmentMapTexture__SampObj___s : register(s2);
SamplerState EnvironmentMapAttenuationTexture__SampObj___s : register(s3);
SamplerState DeferredAmbientTexture_s : register(s4);
SamplerState DeferredLighting_DeferredShadowTexture__SampObj___s : register(s5);
SamplerState ColorPointClamp_s : register(s6);
SamplerState SkinDiffusePreIntegrated__SampObj___s : register(s7);
Texture2D<float4> DepthVPSampler__TexObj__ : register(t0);
Texture2D<float4> DeferredReflectedAmbientTexture__TexObj__ : register(t1);
TextureCube<float4> EnvironmentMapTexture__TexObj__ : register(t2);
Texture2D<float4> EnvironmentMapAttenuationTexture__TexObj__ : register(t3);
Texture2D<float4> DeferredAmbientTexture_TextureObject : register(t4);
Texture2D<float> SSToksvig : register(t5);
Texture2D<float4> GBufferT0 : register(t6);
Texture2D<float4> GBufferT1 : register(t7);
Texture2D<float4> GBufferT2 : register(t8);
Texture2D<float4> GBufferT3 : register(t9);
Texture2D<float4> DeferredLighting_DeferredShadowTexture__TexObj__ : register(t10);
Texture2D<float4> SkinDiffusePreIntegrated__TexObj__ : register(t11);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  uint v2 : SV_IsFrontFace0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,r20,r21,r22,r23,r24,r25,r26;
  uint4 bitmask;
  r0.xyzw = DepthVPSampler__TexObj__.SampleLevel(DepthVPSampler__SampObj___s, v1.xy, 0.000000000e+000).xyzw;
  r0.x = _DepthScale.y * r0.x + _DepthScale.x;
  r0.x = 1.000000e+000 / r0.x;

float depth = r0.x;

  r0.y = _CameraDistances.x * _CameraDistances.y;
  r0.x = _CameraDistances.z * r0.x;
  r0.x = r0.y / r0.x;
  r0.x = _CameraDistances.y + -r0.x;
  r0.z = -r0.x * _CameraDistances.w + 1.000000000e+000;
  r0.xy = v1.xy * float2(2.000000e+000,-2.000000e+000) + float2(-1.000000e+000,1.000000e+000);
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, _InvViewRotProjectionMatrix._m00_m10_m20_m30);
  r1.z = dot(r0.xyzw, _InvViewRotProjectionMatrix._m01_m11_m21_m31);
  r1.y = dot(r0.xyzw, _InvViewRotProjectionMatrix._m02_m12_m22_m32);
  r0.x = dot(r0.xyzw, _InvViewRotProjectionMatrix._m03_m13_m23_m33);
  r0.xyz = r1.xyz / r0.xxx;

// Do not adjust at this point!
float4 stereo = StereoParams.Load(0);

  r0.xyz = _CameraPosition_DistanceScale.xzy + r0.xyz;
  r1.xy = (int2)v0.xy;
  r1.zw = float2(0.000000e+000,0.000000e+000);
  r2.xyzw = GBufferT0.Load(r1.xyw).xyzw;
  r3.xyzw = GBufferT1.Load(r1.xyw).xyzw;
  r4.xyzw = GBufferT2.Load(r1.xyw).xyzw;
  r5.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(1, 0)).xzwy;
  r6.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(-1, 0)).xyzw;
  r7.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(0, 1)).xyzw;
  r8.xyzw = GBufferT0.Sample(ColorPointClamp_s, v1.xy, int2(0, -1)).xyzw;
  r9.x = r8.x;
  r9.y = r7.x;
  r9.z = r6.x;
  r9.w = r5.x;
  r9.xyzw = r9.xyzw + -r2.xxxx;
  r9.xyzw = abs(r9.xyzw) * float4(1.000000e+001,1.000000e+001,1.000000e+001,1.000000e+001) + float4(1.000000e-001,1.000000e-001,1.000000e-001,1.000000e-001);
  r9.xyzw = float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000) / r9.xyzw;
  r0.w = dot(r9.xyzw, float4(1.000000e+000,1.000000e+000,1.000000e+000,1.000000e+000));
  r0.w = 1.000000e+000 / r0.w;
  r9.xyzw = r9.xyzw * r0.wwww;
  r5.x = r8.y;
  r5.y = r7.y;
  r5.z = r6.y;
  r5.y = dot(r5.xyzw, r9.xyzw);
  r5.xw = (int2)r1.xy & int2(1,1);
  r0.w = r5.x != r5.w;
  r5.z = r2.y;
  r5.yz = r0.ww ? r5.yz : r5.zy;
  r5.x = r2.x * r2.x;
  r5.xyz = float3(-0.000000e+000,-4.980392e-001,-4.980392e-001) + r5.xyz;
  r6.yw = r5.xx + r5.zy;
  r6.x = r6.w + -r5.z;
  r0.w = r5.x + -r5.y;
  r6.z = r0.w + -r5.z;
  r6.xyz = saturate(r6.xyz);
  r2.xy = float2(2.550000e+002,1.300000e+001) * r2.wz;
  r0.w = (uint)r2.x;
  r2.x = (uint)r0.w >> 3;
  r2.x = (int)r2.x & 1;
  r2.x = r2.x;
  r0.w = (int)r0.w & 7;
  r2.w = 3.000000000e+000 * r3.w;
  r2.w = (uint)r2.w;
  r3.xyz = r3.xyz * float3(1.414214e+000,1.414214e+000,1.414214e+000) + float3(-7.071068e-001,-7.071068e-001,-7.071068e-001);
  r3.w = dot(r3.xyz, r3.xyz);
  r3.w = min(r3.w, 1.000000000e+000);
  r3.w = 1.000000000e+000 + -r3.w;
  r3.w = sqrt(r3.w);
  r5.w = r2.w ? r3.x : r3.w;
  r7.xy = r2.ww == float2(1.000000e+000,2.000000e+000);
  r5.yz = r7.xy ? r3.ww : r3.yz;
  r2.w = r2.w ? r3.w : r3.x;
  r2.w = r7.x ? r3.y : r2.w;
  r5.x = r7.y ? r3.z : r2.w;
  r3.xyzw = float4(-2.000000e+000,2.000000e+000,-2.000000e+000,2.000000e+000) * r5.yyzz;
  r7.xyz = r3.wwz * r5.yxz + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r8.xyz = float3(2.000000e+000,2.000000e+000,-2.000000e+000) * r5.www;
  r7.xyz = r8.zyz * r5.xyw + r7.xyz;
  r8.xyz = r8.xyz * r5.zxw + float3(0.000000e+000,0.000000e+000,1.000000e+000);
  r8.xyz = r3.xyx * r5.xzy + r8.xyz;
  r9.xyzw = r0.wwww == float4(1.000000e+000,5.000000e+000,6.000000e+000,3.000000e+000);
  if (r9.x != 0) {
    r10.xy = float2(3.200000e+001,2.550000e+002) * r4.xy;
    r2.w = (uint)r10.y;
    r6.w = (uint)r2.w >> 2;
    r6.w = r6.w;
    r11.x = 1.587301679e-002 * r6.w;
    r2.w = (int)r2.w & 3;
    r2.w = r2.w;
    r11.y = 3.333333433e-001 * r2.w;
    r10.yzw = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r13.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r14.xyz = r8.xyz;
    r15.x = 0.000000000e+000;
    r2.w = 1.500000060e-001;
    r6.w = r4.w;
    r16.x = 0.000000000e+000;
    r17.xw = float2(0.000000e+000,0.000000e+000);
    r12.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    r18.x = 0.000000000e+000;
  } else {
    r15.xyzw = GBufferT3.Load(r1.xyw).xyzw;
    r4.x = 2.550000000e+002 * r4.x;
    r4.x = (uint)r4.x;
    r7.w = (uint)r4.x >> 4;
    r7.w = r7.w;
    r16.x = 6.666667014e-002 * r7.w;
    r4.x = (int)r4.x & 15;
    r4.x = r4.x;
    r2.w = 6.666667014e-002 * r4.x;
    r4.x = r0.w == 3;
    if (r4.x != 0) {
      r19.xyz = r15.yzw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
      r4.x = dot(r19.xyz, r19.xyz);
      r4.x = rsqrt(r4.x);
      r14.xyz = r19.xyz * r4.xxx;
      r10.yzw = float3(0.000000e+000,0.000000e+000,0.000000e+000);
      r13.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
      r17.xw = float2(0.000000e+000,0.000000e+000);
      r12.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
      r18.x = r4.w;
    } else {
      r19.xyz = r15.yzw * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
      r4.x = dot(r19.xyz, r19.xyz);
      r4.x = rsqrt(r4.x);
      r19.xyz = r19.xyz * r4.xxx;
      r20.xyz = r0.www == float3(4.000000e+000,5.000000e+000,6.000000e+000);
      r21.xyz = r15.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
      r4.x = dot(r21.xyz, r21.xyz);
      r4.x = rsqrt(r4.x);
      r21.xyz = r21.xyz * r4.xxx;
      r4.x = 2.550000000e+002 * r15.w;
      r4.x = (uint)r4.x;
      r7.w = (uint)r4.x >> 4;
      r7.w = r7.w;
      r22.x = 6.666667014e-002 * r7.w;
      r4.x = (int)r4.x & 15;
      r4.x = r4.x;
      r22.y = 6.666667014e-002 * r4.x;
      r23.xyz = float3(2.550000e+002,2.550000e+002,2.550000e+002) * r4.wyz;
      r4.x = (uint)r23.x;
      r7.w = (uint)r4.x >> 4;
      r7.w = r7.w;
      r22.w = 6.666667014e-002 * r7.w;
      r4.x = (int)r4.x & 15;
      r4.x = r4.x;
      r23.w = 6.666667014e-002 * r4.x;
      r22.z = r23.y;
      r22.xyzw = r20.zzzz ? r22.xyzw : 0;
      r21.xyz = r20.zzz ? r21.xyz : 0;
      r23.zw = r20.zz ? r23.zw : 0;
      r24.xzw = float3(1.000000e+000,0.000000e+000,0.000000e+000);
      r24.y = r4.w;
      r23.xy = r24.yw;
      r24.xyzw = r20.yyyy ? r24.xyzw : r23.xyzw;
      r4.x = (int)r20.x | (int)r20.y;
      r12.xyzw = r4.xxxx ? float4(0.000000e+000,0.000000e+000,0.000000e+000,0.000000e+000) : r22.wxyz;
      r13.xyz = r4.xxx ? float3(0.000000e+000,0.000000e+000,0.000000e+000) : r21.xyz;
      r14.xyz = r20.xxx ? r19.xyz : r8.xyz;
      r15.yz = float2(0.000000e+000,0.000000e+000);
      r15.w = r24.y;
      r17.xw = r20.xx ? r15.yx : r15.wz;
      r18.xyz = r20.xxx ? r23.xyy : r24.xzw;
      r10.yzw = r12.yzw;
      r12.yz = r18.yz;
      r15.x = 0.000000000e+000;
    }
    r11.xy = r4.yy;
    r6.w = 1.000000000e+000;
    r10.x = 0.000000000e+000;
  }
  r1.xyzw = SSToksvig.Load(r1.xyz); //.xyzw;
  r1.y = exp2(r2.y);
  r1.z = 1.000000000e+000 + -r1.x;
  r1.y = r1.y * r1.z + r1.x;
  r1.x = r1.x / r1.y;
  r1.x = log2(abs(r1.x));
  r1.x = 1.109765396e-001 * r1.x;
  r1.x = exp2(r1.x);
  r1.x = r2.z * r1.x;
  r1.y = 5.699999928e-001 * r1.x;
  r1.y = _BRDFHighQuality ? r1.x : r1.y;
  r1.y = r9.y ? r1.y : r1.x;
  r12.w = 0.000000000e+000;
  r16.y = 0.000000000e+000;
  r12.xyzw = r9.zzzz ? r12.wxyz : r16.xyyy;

// Adjusted version of r0 for various fixes
// multiplier found through experimenting at different times of day/night
float multiplier = depth * 8192;
float3 adj_r0 = r0 - mul(float4(stereo.x * multiplier, 0, 0, 0), _InvViewRotProjectionMatrix).xzy; // Axis order XZY

  r0.xyz = _CameraPosition_DistanceScale.xzy + -r0.xyz;
  r1.z = dot(r0.xyz, r0.xyz);
  r1.z = sqrt(r1.z);
  r0.xyz = r0.xyz / r1.zzz;

// Do this second so r1.z is the adjusted version, which fixes fog
adj_r0.xyz = _CameraPosition_DistanceScale.xzy + -adj_r0.xyz;
r1.z = dot(adj_r0.xyz, adj_r0.xyz);
r1.z = sqrt(r1.z);
adj_r0.xyz = adj_r0.xyz / r1.zzz;

  r16.w = dot(r8.xzy, adj_r0.xyz); // Use adjusted position to fix highlights on surfaces

  r1.w = 1.300000000e+001 * r1.y;
  r2.y = r1.y * -2.554450035e-001 + 1.401520014e+000;
  r2.y = r2.y * r1.y + -1.946949959e+000;
  r2.y = r2.y * r1.y + 8.165000081e-001;
  r1.w = exp2(r1.w);
  r1.w = _BRDFHighQuality ? r2.y : r1.w;
  r2.y = r9.z ? 1.000000000e+000 : r18.x;
  r2.z = r2.w * 8.200000226e-002 + 1.799999923e-002;
  r4.xyw = r6.xyz + -r2.zzz;
  r4.xyw = r12.xxx * r4.xyw + r2.zzz;
  r2.w = 1.000000000e+000 + -r12.x;
  r15.yzw = r6.xyz * r2.www;
  r18.xyzw = DeferredAmbientTexture_TextureObject.Sample(DeferredAmbientTexture_s, v1.xy).xyzw;
  r18.xyz = r18.xyz * r18.xyz;
  r18.xyz = _AmbientRange * r18.xyz;
  r11.zw = r0.ww == float2(2.000000e+000,4.000000e+000);
  if (r11.z != 0) {
    r19.xyzw = DeferredLighting_DeferredShadowTexture__TexObj__.Sample(DeferredLighting_DeferredShadowTexture__SampObj___s, v1.xy).xyzw;
    r2.w = max(r19.x, _ForceAlbedoOnlyDisableShadows.y);
    r7.w = saturate(dot(-r8.xyz, _SunDirection.xyz));
    r8.w = saturate(r16.w);
    r11.z = r8.w + r7.w;
    r8.w = -r7.w * r8.w + r11.z;
    r8.w = max(r8.w, 9.999999776e-003);
    r8.w = 1.000000e+000 / r8.w;
    r8.w = _BRDFHighQuality ? r8.w : 1.000000000e+000;
    r19.xyz = -_SunDirection.xyz + r0.xzy;
    r11.z = dot(r19.xyz, r19.xyz);
    r11.z = rsqrt(r11.z);
    r19.xyz = r19.xyz * r11.zzz;
    r11.z = dot(r19.xzy, r0.xyz);
    r12.x = 1.000000000e+000 + -r11.z;
    r13.w = r12.x * r12.x;
    r13.w = r13.w * r13.w;
    r12.x = r13.w * r12.x;
    r20.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyw;
    r21.xyz = r20.xyz * r12.xxx + r4.xyw;
    r11.z = -8.656169891e+000 * r11.z;
    r11.z = exp2(r11.z);
    r20.xyz = r20.xyz * r11.zzz + r4.xyw;
    r20.xyz = _BRDFHighQuality ? r21.xyz : r20.xyz;
    r11.z = saturate(dot(r8.xyz, -_SunDirection.xyz));
    r21.xyz = _SunColor.xyz * r11.zzz;
    r21.xyz = r21.xyz * r2.www;
    r20.xyz = r20.xyz * r2.www;
    r20.xyz = r20.xyz * r7.www;
    r20.xyz = r20.xyz * r8.www;
    r2.w = saturate(dot(r19.xyz, r8.xyz));
    r7.w = r2.w * r2.w;
    r7.w = min(r7.w, 9.999989867e-001);
    r8.w = 1.000000000e+000 + -r7.w;
    r7.w = r7.w / r8.w;
    r8.w = r8.w * r8.w;
    r11.z = r1.w * r1.w;
    r11.z = r11.z * 4.000000000e+000 + 1.000000000e+000;
    r11.z = 1.000000e+000 / r11.z;
    r12.x = r1.w * r1.w + 9.999999975e-007;
    r7.w = -r7.w / r12.x;
    r7.w = 1.442695022e+000 * r7.w;
    r7.w = exp2(r7.w);
    r7.w = 4.000000000e+000 * r7.w;
    r7.w = r7.w / r8.w;
    r7.w = 1.000000000e+000 + r7.w;
    r7.w = r11.z * r7.w;
    r19.xyz = _SunColor.xyz * r7.www;
    r2.w = log2(r2.w);
    r2.w = r2.w * r1.w;
    r2.w = exp2(r2.w);
    r7.w = r1.w * 1.250000000e-001 + 2.500000000e-001;
    r2.w = r7.w * r2.w;
    r22.xyz = _SunColor.xyz * r2.www;
    r19.xyz = _BRDFHighQuality ? r19.xyz : r22.xyz;
    r19.xyz = r20.xyz * r19.xyz;
    r20.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
  } else {
    r2.w = r0.w == 4;
    if (r2.w != 0) {
      r22.xyzw = DeferredLighting_DeferredShadowTexture__TexObj__.Sample(DeferredLighting_DeferredShadowTexture__SampObj___s, v1.xy).xyzw;
      r2.w = max(r22.x, _ForceAlbedoOnlyDisableShadows.y);
      r7.w = saturate(dot(r14.xyz, -_SunDirection.xyz));
      r22.xyz = r14.xyz + -r8.xyz;
      r23.xyz = r22.xyz * float3(1.000000e-001,1.000000e-001,1.000000e-001) + r8.xyz;
      r8.w = dot(r23.xyz, r23.xyz);
      r8.w = rsqrt(r8.w);
      r23.xyz = r23.xyz * r8.www;
      r22.xyz = r22.xyz * float3(3.000000e-001,3.000000e-001,3.000000e-001) + r8.xyz;
      r8.w = dot(r22.xyz, r22.xyz);
      r8.w = rsqrt(r8.w);
      r22.xyz = r22.xyz * r8.www;
      r8.w = dot(r8.xyz, -_SunDirection.xyz);
      r11.z = dot(r23.xyz, -_SunDirection.xyz);
      r12.x = dot(r22.xyz, -_SunDirection.xyz);
      r17.z = r8.w * 5.000000000e-001 + 5.000000000e-001;
      r22.xy = r17.zw * float2(9.843750e-001,9.843750e-001) + float2(7.812500e-003,7.812500e-003);
      r22.xyzw = SkinDiffusePreIntegrated__TexObj__.SampleLevel(SkinDiffusePreIntegrated__SampObj___s, r22.xy, 0.000000000e+000).xyzw;
      r17.y = r11.z * 5.000000000e-001 + 5.000000000e-001;
      r17.yz = r17.yw * float2(9.843750e-001,9.843750e-001) + float2(7.812500e-003,7.812500e-003);
      r23.xyzw = SkinDiffusePreIntegrated__TexObj__.SampleLevel(SkinDiffusePreIntegrated__SampObj___s, r17.yz, 0.000000000e+000).xyzw;
      r17.x = r12.x * 5.000000000e-001 + 5.000000000e-001;
      r17.yz = r17.xw * float2(9.843750e-001,9.843750e-001) + float2(7.812500e-003,7.812500e-003);
      r24.xyzw = SkinDiffusePreIntegrated__TexObj__.SampleLevel(SkinDiffusePreIntegrated__SampObj___s, r17.yz, 0.000000000e+000).xyzw;
      r8.w = r7.w * r7.w;
      r11.z = r1.w * r1.w;
      r12.x = -r1.w * r1.w + 1.000000000e+000;
      r8.w = r8.w * r12.x + r11.z;
      r8.w = sqrt(r8.w);
      r8.w = r8.w + r7.w;
      r8.w = 1.000000e+000 / r8.w;
      r8.w = _BRDFHighQuality ? r8.w : 1.000000000e+000;
      r17.yzw = -_SunDirection.xyz + r0.xzy;
      r11.z = dot(r17.yzw, r17.yzw);
      r11.z = rsqrt(r11.z);
      r17.yzw = r17.yzw * r11.zzz;
      r11.z = dot(r17.ywz, r0.xyz);
      r12.x = 1.000000000e+000 + -r11.z;
      r13.w = r12.x * r12.x;
      r13.w = r13.w * r13.w;
      r12.x = r13.w * r12.x;
      r22.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyw;
      r23.xzw = r22.yzw * r12.xxx + r4.xyw;
      r11.z = -8.656169891e+000 * r11.z;
      r11.z = exp2(r11.z);
      r22.yzw = r22.yzw * r11.zzz + r4.xyw;
      r22.yzw = _BRDFHighQuality ? r23.xzw : r22.yzw;
      r23.xzw = _SunColor.xyz * r2.www;
      r24.x = r22.x;
      r24.y = r23.y;
      r21.xyz = r24.xyz * r23.xzw;
      r22.xyz = r22.yzw * r2.www;
      r22.xyz = r22.xyz * r7.www;
      r22.xyz = r22.xyz * r8.www;
      r2.w = saturate(dot(r17.yzw, r14.xyz));
      r7.w = r1.w * r1.w + -1.000000000e+000;
      r8.w = r2.w * r2.w;
      r7.w = r8.w * r7.w + 1.000000000e+000;
      r7.w = r1.w / r7.w;
      r7.w = r7.w * r7.w;
      r17.yzw = _SunColor.xyz * r7.www;
      r2.w = log2(r2.w);
      r2.w = r2.w * r1.w;
      r2.w = exp2(r2.w);
      r7.w = r1.w * 1.250000000e-001 + 2.500000000e-001;
      r2.w = r7.w * r2.w;
      r23.xyz = _SunColor.xyz * r2.www;
      r17.yzw = _BRDFHighQuality ? r17.yzw : r23.xyz;
      r19.xyz = r22.xyz * r17.yzw;
      r20.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
    } else {
      r17.yzw = r3.xyy * r5.ywx + float3(1.000000e+000,0.000000e+000,0.000000e+000);
      r3.xyz = r3.zzw * r5.zxw + r17.yzw;
      r2.w = r0.w == 0;
      r2.w = (int)r9.w | (int)r2.w;
      r2.w = (int)r9.y | (int)r2.w;
      r3.w = -r1.y * r2.y + r1.y;
      r5.x = 1.300000000e+001 * r3.w;
      r5.y = r3.w * -2.554450035e-001 + 1.401520014e+000;
      r5.y = r5.y * r3.w + -1.946949959e+000;
      r3.w = r5.y * r3.w + 8.165000081e-001;
      r5.x = exp2(r5.x);
      r3.w = _BRDFHighQuality ? r3.w : r5.x;
      r2.w = r2.w ? r1.w : r3.w;
      if (r9.y != 0) {
        r5.xyzw = DeferredLighting_DeferredShadowTexture__TexObj__.Sample(DeferredLighting_DeferredShadowTexture__SampObj___s, v1.xy).xyzw;
        r5.x = max(r5.x, _ForceAlbedoOnlyDisableShadows.y);
        r5.y = saturate(dot(r14.xyz, -_SunDirection.xyz));
        r5.yzw = _SunColor.xyz * r5.yyy;
        r21.xyz = r5.xxx * r5.yzw;
        r5.y = saturate(dot(r8.xyz, -_SunDirection.xyz));
        r5.z = r5.y * r5.y;
        r5.w = r1.w * r1.w;
        r7.w = -r1.w * r1.w + 1.000000000e+000;
        r5.z = r5.z * r7.w + r5.w;
        r5.z = sqrt(r5.z);
        r5.z = r5.y + r5.z;
        r5.z = 1.000000e+000 / r5.z;
        r5.z = _BRDFHighQuality ? r5.z : 1.000000000e+000;
        r17.yzw = -_SunDirection.xyz + r0.xzy;
        r5.w = dot(r17.yzw, r17.yzw);
        r5.w = rsqrt(r5.w);
        r17.yzw = r17.yzw * r5.www;
        r5.w = dot(r17.ywz, r0.xyz);
        r7.w = 1.000000000e+000 + -r5.w;
        r8.w = r7.w * r7.w;
        r8.w = r8.w * r8.w;
        r7.w = r8.w * r7.w;
        r22.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyw;
        r23.xyz = r22.xyz * r7.www + r4.xyw;
        r5.w = -8.656169891e+000 * r5.w;
        r5.w = exp2(r5.w);
        r22.xyz = r22.xyz * r5.www + r4.xyw;
        r22.xyz = _BRDFHighQuality ? r23.xyz : r22.xyz;
        if (_BRDFHighQuality != 0) {
          r5.w = r17.x + r17.x;
          r23.xyz = r22.xyz * r5.xxx;
          r23.xyz = r23.xyz * r5.yyy;
          r23.xyz = r23.xyz * r5.zzz;
          r24.x = dot(r17.yzw, r3.xyz);
          r24.y = dot(r17.wyz, r7.xyz);
          r7.w = dot(r17.yzw, r8.xyz);
          r24.xy = r24.xy * r24.xy;
          r8.w = r3.w * r3.w;
          r8.w = r24.x / r8.w;
          r7.w = r7.w * r7.w + r8.w;
          r8.w = r2.w * r2.w;
          r8.w = r24.y / r8.w;
          r7.w = r8.w + r7.w;
          r8.w = r3.w * r2.w;
          r7.w = r7.w * r7.w;
          r7.w = r7.w * r8.w;
          r7.w = 1.000000e+000 / r7.w;
          r24.xyz = _SunColor.xyz * r7.www;
          r23.xyz = r24.xyz * r23.xyz;
          r24.xyz = r7.yzx * r5.www;
          r24.xyz = r24.xyz * float3(5.000000e-001,5.000000e-001,5.000000e-001) + -_SunDirection.xyz;
          r5.w = dot(r24.xyz, r24.xyz);
          r5.w = rsqrt(r5.w);
          r24.xyz = r24.xyz * r5.www + r0.xzy;
          r5.w = dot(r24.xyz, r24.xyz);
          r5.w = rsqrt(r5.w);
          r24.xyz = r24.xyz * r5.www;
          r25.xyz = r2.zzz * r6.xyz;
          r5.w = dot(r24.xzy, r0.xyz);
          r5.w = 1.000000000e+000 + -r5.w;
          r7.w = r5.w * r5.w;
          r7.w = r7.w * r7.w;
          r5.w = r7.w * r5.w;
          r6.xyz = -r2.zzz * r6.xyz + float3(1.000000e+000,1.000000e+000,1.000000e+000);
          r6.xyz = r6.xyz * r5.www + r25.xyz;
          r25.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r6.xyz;
          r6.xyz = r6.xyz * r5.xxx;
          r6.xyz = r6.xyz * r5.yyy;
          r6.xyz = r6.xyz * r5.zzz;
          r5.w = r3.w + r3.w;
          r7.w = r2.w + r2.w;
          r26.x = dot(r24.xyz, r3.xyz);
          r26.y = dot(r24.zxy, r7.xyz);
          r8.w = dot(r24.xyz, r8.xyz);
          r24.xy = r26.xy * r26.xy;
          r11.z = r5.w * r5.w;
          r11.z = r24.x / r11.z;
          r8.w = r8.w * r8.w + r11.z;
          r11.z = r7.w * r7.w;
          r11.z = r24.y / r11.z;
          r8.w = r11.z + r8.w;
          r5.w = r7.w * r5.w;
          r7.w = r8.w * r8.w;
          r5.w = r7.w * r5.w;
          r5.w = 1.000000e+000 / r5.w;
          r24.xyz = _SunColor.xyz * r5.www;
          r6.xyz = r24.xyz * r6.xyz;
          r19.xyz = r23.xyz * r25.xyz + r6.xyz;
        } else {
          r6.xyz = r22.xyz * r5.xxx;
          r6.xyz = r6.xyz * r5.yyy;
          r5.xzw = r6.xyz * r5.zzz;
          r6.x = saturate(dot(r8.xyz, r17.yzw));
          r5.y = -r6.x + r5.y;
          r5.y = 1.000000000e+000 + -abs(-r5.y);
          r5.y = log2(r5.y);
          r5.y = r5.y * r1.w;
          r5.y = exp2(r5.y);
          r6.xyz = _SunColor.xyz * r5.yyy;
          r5.y = r1.w * 1.250000000e-001 + 2.500000000e-001;
          r6.xyz = r6.xyz * r5.yyy;
          r19.xyz = r6.xyz * r5.xzw;
        }
        r20.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
      } else {
        if (r9.z != 0) {
          r5.xyz = r9.zzz ? r13.xyz : 0;
          r6.xyz = r9.zzz ? r10.yzw : 0;
          r13.xyzw = DeferredLighting_DeferredShadowTexture__TexObj__.Sample(DeferredLighting_DeferredShadowTexture__SampObj___s, v1.xy).xyzw;
          r5.w = max(r13.x, _ForceAlbedoOnlyDisableShadows.y);
          r10.yzw = -_SunDirection.xyz + r0.xzy;
          r7.w = dot(r10.yzw, r10.yzw);
          r7.w = rsqrt(r7.w);
          r10.yzw = r10.yzw * r7.www;
          r7.w = dot(r5.xyz, -_SunDirection.xyz);
          r7.w = max(r7.w, -1.000000000e+000);
          r7.w = min(r7.w, 1.000000000e+000);
          r5.x = dot(r5.xyz, r10.yzw);
          r5.x = max(r5.x, -1.000000000e+000);
          r5.x = min(r5.x, 1.000000000e+000);
          r5.y = saturate(dot(r14.xyz, -_SunDirection.xyz));
          r10.yzw = _SunColor.xyz * r5.yyy;
          r5.y = -r7.w * r7.w + 1.000000000e+000;
          r5.y = sqrt(r5.y);
          r5.z = dot(r8.xyz, -_SunDirection.xyz);
          r5.z = max(r5.z, 0.000000000e+000);
          r5.z = r5.z + -r5.y;
          r5.y = r6.x * r5.z + r5.y;
          r10.yzw = r10.yzw * r5.www;
          r21.xyz = r10.yzw * r5.yyy;
          r5.y = -r5.x * r5.x + 1.000000000e+000;
          r5.y = sqrt(r5.y);
          r5.y = log2(r5.y);
          r5.y = r6.z * r5.y;
          r5.y = exp2(r5.y);
          r5.x = r5.x + r6.y;
          r5.x = min(r5.x, 1.000000000e+000);
          r5.x = -r5.x * r5.x + 1.000000000e+000;
          r5.x = sqrt(r5.x);
          r5.x = log2(r5.x);
          r5.x = r12.z * r5.x;
          r5.x = exp2(r5.x);
          r6.xyz = float3(5.000000e-001,5.000000e-001,5.000000e-001) * r10.yzw;
          r5.x = r12.w * r5.x;
          r5.x = r12.y * r5.y + r5.x;
          r19.xyz = r6.xyz * r5.xxx;
          r20.xyz = float3(0.000000e+000,0.000000e+000,0.000000e+000);
        } else {
          r5.xyzw = DeferredLighting_DeferredShadowTexture__TexObj__.Sample(DeferredLighting_DeferredShadowTexture__SampObj___s, v1.xy).xyzw;
          r5.x = max(r5.x, _ForceAlbedoOnlyDisableShadows.y);
          r5.y = dot(r8.xyz, _SunDirection.xyz);
          r5.y = saturate(-r5.y);
          r5.z = r5.y * r5.y;
          r5.w = r1.w * r1.w;
          r6.x = -r1.w * r1.w + 1.000000000e+000;
          r5.z = r5.z * r6.x + r5.w;
          r5.z = sqrt(r5.z);
          r5.z = r5.y + r5.z;
          r5.z = 1.000000e+000 / r5.z;
          r5.z = _BRDFHighQuality ? r5.z : 1.000000000e+000;

// Use adjusted r0 to fix specular reflections:
          // r6.xyz = -_SunDirection.xyz + r0.xzy;
r6.xyz = -_SunDirection.xyz + adj_r0.xzy;

          r5.w = dot(r6.xyz, r6.xyz);
          r5.w = rsqrt(r5.w);
          r6.xyz = r6.xyz * r5.www;

	  // Necessary to improve specular highlight accuracy, esp. fringing on tree leaves
          r5.w = dot(r6.xzy, adj_r0.xyz);

          r7.w = 1.000000000e+000 + -r5.w;
          r8.w = r7.w * r7.w;
          r8.w = r8.w * r8.w;
          r7.w = r8.w * r7.w;
          r10.yzw = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyw;
          r12.xyz = r10.yzw * r7.www + r4.xyw;
          r5.w = -8.656169891e+000 * r5.w;
          r5.w = exp2(r5.w);
          r10.yzw = r10.yzw * r5.www + r4.xyw;
          r10.yzw = _BRDFHighQuality ? r12.xyz : r10.yzw;
          r10.yzw = r10.yzw * r5.xxx;
          r10.yzw = r10.yzw * r5.yyy;
          r5.yzw = r10.yzw * r5.zzz;
          r3.x = dot(r6.xyz, r3.xyz);
          r3.y = dot(r6.zxy, r7.xyz);
          r6.x = dot(r6.xyz, r8.xyz);
          r3.xy = r3.xy * r3.xy;
          r3.z = r3.w * r3.w;
          r3.x = r3.x / r3.z;
          r3.x = r6.x * r6.x + r3.x;
          r3.z = r2.w * r2.w;
          r3.y = r3.y / r3.z;
          r3.x = r3.x + r3.y;
          r2.w = r3.w * r2.w;
          r3.x = r3.x * r3.x;
          r2.w = r3.x * r2.w;
          r2.w = 1.000000e+000 / r2.w;
          r3.xyz = _SunColor.xyz * r2.www;
          r3.xyz = r5.yzw * r3.xyz;
          r6.x = saturate(r6.x);
          r2.w = log2(r6.x);
          r2.w = r2.w * r1.w;
          r2.w = exp2(r2.w);
          r3.w = r1.w * 1.250000000e-001 + 2.500000000e-001;
          r2.w = r3.w * r2.w;
          r6.xyz = _SunColor.xyz * r2.www;
          r5.yzw = r6.xyz * r5.yzw;
          r19.xyz = _BRDFHighQuality ? r3.xyz : r5.yzw;
          r2.w = dot(r14.xyz, -_SunDirection.xyz);
          r3.xyz = _SunColor.xyz * r5.xxx;
          r3.w = saturate(r2.w);
          r21.xyz = r3.xyz * r3.www;
          r2.w = saturate(-r2.w);
          r3.xyz = r3.xyz * r2.www;
          r20.xyz = r9.xxx ? r3.xyz : 0;
        }
      }
    }
  }
  r2.w = saturate(r1.z * _DistanceBoostParameters.x + _DistanceBoostParameters.y);
  r2.w = _DistanceBoostParameters.z * r2.w;
  r2.x = r2.w * r2.x;
  r3.xyz = r18.yyy * r2.xxx + r18.xyz;
  r5.xyzw = DeferredReflectedAmbientTexture__TexObj__.Sample(DeferredReflectedAmbientTexture__SampObj___s, v1.xy).xyzw;
  r5.xyz = r5.xyz * r5.xyz;
  r2.x = dot(r5.xyz, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  r2.x = r2.x >= 9.999999747e-005;
  r2.x = r2.x ? 1.000000 : 0;
  r5.xyz = r5.xyz * _AmbientRange + -r18.xyz;
  r5.xyz = r2.xxx * r5.xyz + r18.xyz;
  r2.x = (int)r9.w | (int)r11.w;
  r2.x = (int)r2.x & 0x3f800000;
  r2.x = _SSAOPerMaterialIntensity * r2.x;
  r2.w = 1.000000000e+000 + -r18.w;
  r2.x = r2.x * r2.w + r18.w;
  r2.w = r9.x ? 0.250000 : 0;

  r12.yzw = -adj_r0.zyx; // Use adjusted position to fix fog while camera is tilted

  r12.x = 1.000000000e+000;
  r6.x = dot(_FogSHR.xyzw, r12.xyzw);
  r6.y = dot(_FogSHG.xyzw, r12.xyzw);
  r6.z = dot(_FogSHB.xyzw, r12.xyzw);
  r6.xyz = max(r6.xyz, float3(0.000000e+000,0.000000e+000,0.000000e+000));
  r3.w = r12.z * r1.z;
  r1.z = saturate(r1.z * _FogParams.y + _FogParams.x);
  r3.w = _HeightFogParams.y * r3.w;
  r3.w = max(r3.w, -1.250000000e+002);
  r5.w = 9.999999975e-007 < abs(r3.w);
  r7.w = exp2(-r3.w);
  r7.w = 1.000000000e+000 + -r7.w;
  r3.w = r7.w / r3.w;
  r3.w = r5.w ? r3.w : 1.000000000e+000;
  r3.w = r3.w * _HeightFogParams.x + _FogParams.w;
  r1.z = r3.w * r1.z;
  r1.z = -_FogParams.z * r1.z;
  r1.z = exp2(r1.z);
  r6.xyz = -r6.xyz * r1.zzz + r6.xyz;
  r1.x = abs(r16.w);
  r3.w = r1.x * r1.x;
  r5.w = r1.w * r1.w;
  r1.w = -r1.w * r1.w + 1.000000000e+000;
  r3.w = r3.w * r1.w + r5.w;
  r3.w = sqrt(r3.w);
  r3.w = r3.w + r1.x;
  r3.w = 1.000000e+000 / r3.w;
  r3.w = _BRDFHighQuality ? r3.w : 1.000000000e+000;
  r10.yzw = r19.xyz * r3.www;
  r0.w = r0.w != 2;
  r3.w = saturate(r16.w);
  r7.w = r3.w * r3.w;
  r1.w = r7.w * r1.w + r5.w;
  r1.w = sqrt(r1.w);
  r1.w = r3.w + r1.w;
  r1.w = 1.000000e+000 / r1.w;
  r1.w = _BRDFHighQuality ? r1.w : 1.000000000e+000;
  r12.xyz = r19.xyz * r1.www;
  r12.xyz = r0.www ? r12.xyz : r19.xyz;
  r10.yzw = r9.yyy ? r10.yzw : r12.xyz;
  r16.xyz = r11.www ? r14.xyz : r8.xyz;
  r8.xyz = r0.xzy * r7.xyz;
  r8.xyz = r0.yxz * r7.yzx + -r8.xyz;
  r12.xyz = r8.xyz * r7.xyz;
  r7.xyz = r7.zxy * r8.yzx + -r12.xyz;
  r7.xyz = r7.xyz + -r16.xyz;
  r7.xyz = r2.yyy * r7.xyz + r16.xyz;
  r0.w = dot(r7.xyz, r7.xyz);
  r0.w = rsqrt(r0.w);
  r7.xyz = r7.xyz * r0.www;

// Use adjusted position to fix environment map reflection with texture quality >= high:
  r7.w = dot(r7.xzy, adj_r0.xyz);

  r7.xyzw = _BRDFHighQuality ? r7.xyzw : r16.xyzw;
  r0.w = r7.w + r7.w;

// Use adjusted position to fix environment map reflection:
  r0.xyz = -r0.www * r7.xzy + adj_r0.xyz;

  r0.xyz = -r0.xyz;
  r0.w = -r1.y * 6.000000000e+000 + 6.000000000e+000;
  r0.xyzw = EnvironmentMapTexture__TexObj__.SampleLevel(EnvironmentMapTexture__SampObj___s, r0.xyz, r0.w).xyzw;
  r0.xyz = r0.xyz * _EnvironmentMapColorScale.xyz + _EnvironmentMapColorOffset.xyz;
  if (_BRDFHighQuality != 0) {
    r7.xyzw = EnvironmentMapAttenuationTexture__TexObj__.SampleLevel(EnvironmentMapAttenuationTexture__SampObj___s, r1.xy, 0.000000000e+000).xyzw;
    r7.xyz = saturate(r4.xyw * r7.yyy + r7.xxx);
    r7.xyz = r7.xyz * r0.xyz;
  } else {
    r8.xyz = float3(1.000000e+000,1.000000e+000,1.000000e+000) + -r4.xyw;
    r0.w = -8.656169891e+000 * r1.x;
    r0.w = exp2(r0.w);
    r1.x = r1.y * r1.y;
    r1.x = r1.x * 8.299999833e-001 + 1.700000018e-001;
    r0.w = r1.x * r0.w;
    r1.xyw = r8.xyz * r0.www + r4.xyw;
    r7.xyz = r1.xyw * r0.xyz;
  }
  r0.x = r9.x ? 7.500000000e-001 : 1.000000000e+000;
  r0.x = saturate(r2.x * r0.x + r2.w);
  r0.y = r9.z ? 1.000000000e+000 : r4.z;
  r0.y = r0.y * r0.x;
  r0.z = -1.000000000e+000 + r0.x;
  r0.z = saturate(_DirectLightOcclusion * r0.z + 1.000000000e+000);
  r1.xyw = r3.xyz * r0.yyy;
  r0.yw = r9.zz ? float2(1.000000e+000,1.000000e+000) : r11.xy;
  r2.xyw = r10.yzw * r0.yyy;
  r0.y = dot(r5.xyz, float3(2.126000e-001,7.152000e-001,7.220000e-002));
  r3.xyz = r7.xyz * r0.yyy;
  r3.xyz = r3.xyz * r0.www;
  r0.xyw = r3.xyz * r0.xxx;
  r3.x = r15.x * 4.000000000e+000 + 1.000000000e+000;
  r0.xyw = r3.xxx * r0.xyw;
  r2.z = 1.000000000e+000 + -r2.z;
  r3.x = 1.000000000e+000 + -r6.w;
  r3.y = 2.550000000e+002 * r6.w;
  r3.y = (uint)r3.y;
  r3.y = (int)r3.y & 1;
  r3.y = r3.y;
  r3.yzw = r3.yyy * float3(-5.000000e-001,-3.000000e-001,-8.000000e-001) + float3(1.000000e+000,1.000000e+000,1.000000e+000);
  r3.xyz = r3.yzw * r3.xxx;
  r3.xyz = r15.yzw * r3.xyz;
  r1.xyw = r21.xyz * r0.zzz + r1.xyw;
  r1.xyw = r15.yzw * r1.xyw;
  r3.xyz = r3.xyz * r20.xyz;
  r3.xyz = r3.xyz * r2.zzz;
  r1.xyw = r1.xyw * r2.zzz + r3.xyz;
  r0.xyz = r2.xyw * r0.zzz + r0.xyw;
  r1.xyw = r15.yzw * r10.xxx + r1.xyw;
  r0.xyz = r1.xyw + r0.xyz;
  r0.xyz = r0.xyz * r1.zzz + r6.xyz;
  r0.xyz = _BloomAdaptationFactor.zzz * r0.xyz;
  r0.w = 5.000000000e-001 < _ForceAlbedoOnlyDisableShadows.x;
  o0.xyz = r0.www ? r15.yzw : r0.xyz;
  o0.w = 1.000000000e+000;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16 [unused]
//   float4 _CameraDistances;           // Offset:   64 Size:    16
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16 [unused]
//   float4 _FogParams;                 // Offset:  272 Size:    16
//   float4 _FogSHB;                    // Offset:  288 Size:    16
//   float4 _FogSHG;                    // Offset:  304 Size:    16
//   float4 _FogSHR;                    // Offset:  320 Size:    16
//   float4 _HeightFogParams;           // Offset:  336 Size:    16
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64 [unused]
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64 [unused]
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12
//
// }
//
// cbuffer CGlobalShaderParameterProvider
// {
//
//   float4 _BurnColor;                 // Offset:    0 Size:    16 [unused]
//   float4 _BurnParams;                // Offset:   16 Size:    16 [unused]
//   float4 _BurnParams2;               // Offset:   32 Size:    16 [unused]
//   float4 _BurnParams3;               // Offset:   48 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile0;// Offset:   64 Size:    16 [unused]
//   float4 _CascadedShadowScaleOffsetTile1;// Offset:   80 Size:    16 [unused]
//   float4 _GlobalScalars;             // Offset:   96 Size:    16 [unused]
//   float4 _SSS_MiscParams;            // Offset:  112 Size:    16 [unused]
//   float4 _WindSimParamsX;            // Offset:  128 Size:    16 [unused]
//   float4 _WindSimParamsY;            // Offset:  144 Size:    16 [unused]
//   float2 _RangeDepthCompression;     // Offset:  160 Size:     8 [unused]
//   float3 _SSS_Color;                 // Offset:  176 Size:    12 [unused]
//   int _BRDFHighQuality;              // Offset:  188 Size:     4
//
// }
//
// cbuffer CDeferredLightingParameterProvider
// {
//
//   float4 _DistanceBoostParameters;   // Offset:    0 Size:    16
//   float4 _ForceAlbedoOnlyDisableShadows;// Offset:   16 Size:    16
//   float4x4 _InvViewRotProjectionMatrix;// Offset:   32 Size:    64
//   float4 _LightClippingPlanes[24];   // Offset:   96 Size:   384 [unused]
//   float4 _PointLightAttenuation[4];  // Offset:  480 Size:    64 [unused]
//   float4 _PointLightClippingInfo[4]; // Offset:  544 Size:    64 [unused]
//   float4 _PointLightColor[4];        // Offset:  608 Size:    64 [unused]
//   float4 _PointLightMinMaxDepth[4];  // Offset:  672 Size:    64 [unused]
//   float4 _PointLightPos[4];          // Offset:  736 Size:    64 [unused]
//   float4 _QuadParams;                // Offset:  800 Size:    16 [unused]
//   float4 _SpotLightAttenuation[4];   // Offset:  816 Size:    64 [unused]
//   float4 _SpotLightClippingInfo[4];  // Offset:  880 Size:    64 [unused]
//   float4 _SpotLightColor[4];         // Offset:  944 Size:    64 [unused]
//   float4 _SpotLightDirection[4];     // Offset: 1008 Size:    64 [unused]
//   float4 _SpotLightMinMaxDepth[4];   // Offset: 1072 Size:    64 [unused]
//   float4 _SpotLightPos[4];           // Offset: 1136 Size:    64 [unused]
//   float4 _SpotScaleOffsetUVS[4];     // Offset: 1200 Size:    64 [unused]
//   float4 _SpotShadowMapSize;         // Offset: 1264 Size:    16 [unused]
//   float4x4 _SpotShadowProjectionMatrix[4];// Offset: 1280 Size:   256 [unused]
//   float4 _SunColor;                  // Offset: 1536 Size:    16
//   float4 _SunDirection;              // Offset: 1552 Size:    16
//   float3 _CamVectorOffset;           // Offset: 1568 Size:    12 [unused]
//   float3 _CamVectorScaleX;           // Offset: 1584 Size:    12 [unused]
//   float3 _CamVectorScaleY;           // Offset: 1600 Size:    12 [unused]
//   float _AmbientRange;               // Offset: 1612 Size:     4
//   float _DebugLightComplexityBias;   // Offset: 1616 Size:     4 [unused]
//   float _DirectLightOcclusion;       // Offset: 1620 Size:     4
//   float _SSAOPerMaterialIntensity;   // Offset: 1624 Size:     4
//   int _PointLightCount;              // Offset: 1628 Size:     4 [unused]
//   int _SpotLightCount;               // Offset: 1632 Size:     4 [unused]
//   int _SpotLightGoboCount;           // Offset: 1636 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DepthVPSampler__SampObj__         sampler      NA          NA    0        1
// DeferredReflectedAmbientTexture__SampObj__    sampler      NA          NA    1        1
// EnvironmentMapTexture__SampObj__    sampler      NA          NA    2        1
// EnvironmentMapAttenuationTexture__SampObj__    sampler      NA          NA    3        1
// DeferredAmbientTexture            sampler      NA          NA    4        1
// DeferredLighting_DeferredShadowTexture__SampObj__    sampler      NA          NA    5        1
// ColorPointClamp                   sampler      NA          NA    6        1
// SkinDiffusePreIntegrated__SampObj__    sampler      NA          NA    7        1
// DepthVPSampler__TexObj__          texture  float4          2d    0        1
// DeferredReflectedAmbientTexture__TexObj__    texture  float4          2d    1        1
// EnvironmentMapTexture__TexObj__    texture  float4        cube    2        1
// EnvironmentMapAttenuationTexture__TexObj__    texture  float4          2d    3        1
// DeferredAmbientTexture_TextureObject    texture  float4          2d    4        1
// SSToksvig                         texture   float          2d    5        1
// GBufferT0                         texture  float4          2d    6        1
// GBufferT1                         texture  float4          2d    7        1
// GBufferT2                         texture  float4          2d    8        1
// GBufferT3                         texture  float4          2d    9        1
// DeferredLighting_DeferredShadowTexture__TexObj__    texture  float4          2d   10        1
// SkinDiffusePreIntegrated__TexObj__    texture  float4          2d   11        1
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
// CGlobalShaderParameterProvider    cbuffer      NA          NA    1        1
// CDeferredLightingParameterProvider    cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// SV_IsFrontFace           0   x           2    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[58], immediateIndexed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[102], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t11
dcl_input_ps_siv linear noperspective centroid v0.xy, position
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 27
sample_l r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)
mad r0.x, cb0[14].y, r0.x, cb0[14].x
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
mul r0.y, cb0[4].y, cb0[4].x
mul r0.x, r0.x, cb0[4].z
div r0.x, r0.y, r0.x
add r0.x, -r0.x, cb0[4].y
mad r0.z, -r0.x, cb0[4].w, l(1.000000)
mad r0.xy, v1.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb2[2].xyzw
dp4 r1.z, r0.xyzw, cb2[3].xyzw
dp4 r1.y, r0.xyzw, cb2[4].xyzw
dp4 r0.x, r0.xyzw, cb2[5].xyzw
div r0.xyz, r1.xyzx, r0.xxxx
add r0.xyz, r0.xyzx, cb0[8].xzyx
ftoi r1.xy, v0.xyxx
mov r1.zw, l(0,0,0,0)
ld r2.xyzw, r1.xyww, t6.xyzw
ld r3.xyzw, r1.xyww, t7.xyzw
ld r4.xyzw, r1.xyww, t8.xyzw
sample_aoffimmi(1,0,0) r5.xyzw, v1.xyxx, t6.xzwy, s6
sample_aoffimmi(-1,0,0) r6.xyzw, v1.xyxx, t6.xyzw, s6
sample_aoffimmi(0,1,0) r7.xyzw, v1.xyxx, t6.xyzw, s6
sample_aoffimmi(0,-1,0) r8.xyzw, v1.xyxx, t6.xyzw, s6
mov r9.x, r8.x
mov r9.y, r7.x
mov r9.z, r6.x
mov r9.w, r5.x
add r9.xyzw, -r2.xxxx, r9.xyzw
mad r9.xyzw, |r9.xyzw|, l(10.000000, 10.000000, 10.000000, 10.000000), l(0.100000, 0.100000, 0.100000, 0.100000)
div r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r9.xyzw
dp4 r0.w, r9.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r9.xyzw, r0.wwww, r9.xyzw
mov r5.x, r8.y
mov r5.y, r7.y
mov r5.z, r6.y
dp4 r5.y, r5.xyzw, r9.xyzw
and r5.xw, r1.xxxy, l(1, 0, 0, 1)
ine r0.w, r5.x, r5.w
mov r5.z, r2.y
movc r5.yz, r0.wwww, r5.yyzy, r5.zzyz
mul r5.x, r2.x, r2.x
add r5.xyz, r5.xyzx, l(-0.000000, -0.498039, -0.498039, 0.000000)
add r6.yw, r5.zzzy, r5.xxxx
add r6.x, -r5.z, r6.w
add r0.w, -r5.y, r5.x
add r6.z, -r5.z, r0.w
mov_sat r6.xyz, r6.xyzx
mul r2.xy, r2.wzww, l(255.000000, 13.000000, 0.000000, 0.000000)
ftou r0.w, r2.x
ushr r2.x, r0.w, l(3)
and r2.x, r2.x, l(1)
utof r2.x, r2.x
and r0.w, r0.w, l(7)
mul r2.w, r3.w, l(3.000000)
ftou r2.w, r2.w
mad r3.xyz, r3.xyzx, l(1.414214, 1.414214, 1.414214, 0.000000), l(-0.707107, -0.707107, -0.707107, 0.000000)
dp3 r3.w, r3.xyzx, r3.xyzx
min r3.w, r3.w, l(1.000000)
add r3.w, -r3.w, l(1.000000)
sqrt r3.w, r3.w
movc r5.w, r2.w, r3.x, r3.w
ieq r7.xy, r2.wwww, l(1, 2, 0, 0)
movc r5.yz, r7.xxyx, r3.wwww, r3.yyzy
movc r2.w, r2.w, r3.w, r3.x
movc r2.w, r7.x, r3.y, r2.w
movc r5.x, r7.y, r3.z, r2.w
mul r3.xyzw, r5.yyzz, l(-2.000000, 2.000000, -2.000000, 2.000000)
mad r7.xyz, r3.wwzw, r5.yxzy, l(0.000000, 0.000000, 1.000000, 0.000000)
mul r8.xyz, r5.wwww, l(2.000000, 2.000000, -2.000000, 0.000000)
mad r7.xyz, r8.zyzz, r5.xywx, r7.xyzx
mad r8.xyz, r8.xyzx, r5.zxwz, l(0.000000, 0.000000, 1.000000, 0.000000)
mad r8.xyz, r3.xyxx, r5.xzyx, r8.xyzx
ieq r9.xyzw, r0.wwww, l(1, 5, 6, 3)
if_nz r9.x
  mul r10.xy, r4.xyxx, l(32.000000, 255.000000, 0.000000, 0.000000)
  ftou r2.w, r10.y
  ushr r6.w, r2.w, l(2)
  utof r6.w, r6.w
  mul r11.x, r6.w, l(0.015873)
  and r2.w, r2.w, l(3)
  utof r2.w, r2.w
  mul r11.y, r2.w, l(0.333333)
  mov r10.yzw, l(0,0,0,0)
  mov r13.xyz, l(0,0,0,0)
  mov r14.xyz, r8.xyzx
  mov r15.x, l(0)
  mov r2.w, l(0.150000)
  mov r6.w, r4.w
  mov r16.x, l(0)
  mov r17.xw, l(0,0,0,0)
  mov r12.xyz, l(0,0,0,0)
  mov r18.x, l(0)
else 
  ld r15.xyzw, r1.xyww, t9.xyzw
  mul r4.x, r4.x, l(255.000000)
  ftou r4.x, r4.x
  ushr r7.w, r4.x, l(4)
  utof r7.w, r7.w
  mul r16.x, r7.w, l(0.066667)
  and r4.x, r4.x, l(15)
  utof r4.x, r4.x
  mul r2.w, r4.x, l(0.066667)
  ieq r4.x, r0.w, l(3)
  if_nz r4.x
    mad r19.xyz, r15.yzwy, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r4.x, r19.xyzx, r19.xyzx
    rsq r4.x, r4.x
    mul r14.xyz, r4.xxxx, r19.xyzx
    mov r10.yzw, l(0,0,0,0)
    mov r13.xyz, l(0,0,0,0)
    mov r17.xw, l(0,0,0,0)
    mov r12.xyz, l(0,0,0,0)
    mov r18.x, r4.w
  else 
    mad r19.xyz, r15.yzwy, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r4.x, r19.xyzx, r19.xyzx
    rsq r4.x, r4.x
    mul r19.xyz, r4.xxxx, r19.xyzx
    ieq r20.xyz, r0.wwww, l(4, 5, 6, 0)
    mad r21.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
    dp3 r4.x, r21.xyzx, r21.xyzx
    rsq r4.x, r4.x
    mul r21.xyz, r4.xxxx, r21.xyzx
    mul r4.x, r15.w, l(255.000000)
    ftou r4.x, r4.x
    ushr r7.w, r4.x, l(4)
    utof r7.w, r7.w
    mul r22.x, r7.w, l(0.066667)
    and r4.x, r4.x, l(15)
    utof r4.x, r4.x
    mul r22.y, r4.x, l(0.066667)
    mul r23.xyz, r4.wyzw, l(255.000000, 255.000000, 255.000000, 0.000000)
    ftou r4.x, r23.x
    ushr r7.w, r4.x, l(4)
    utof r7.w, r7.w
    mul r22.w, r7.w, l(0.066667)
    and r4.x, r4.x, l(15)
    utof r4.x, r4.x
    mul r23.w, r4.x, l(0.066667)
    mov r22.z, r23.y
    and r22.xyzw, r20.zzzz, r22.xyzw
    and r21.xyz, r20.zzzz, r21.xyzx
    and r23.zw, r20.zzzz, r23.zzzw
    mov r24.xzw, l(1.000000,0,0,0)
    mov r24.y, r4.w
    mov r23.xy, r24.ywyy
    movc r24.xyzw, r20.yyyy, r24.xyzw, r23.xyzw
    or r4.x, r20.x, r20.y
    movc r12.xyzw, r4.xxxx, l(0,0,0,0), r22.wxyz
    movc r13.xyz, r4.xxxx, l(0,0,0,0), r21.xyzx
    movc r14.xyz, r20.xxxx, r19.xyzx, r8.xyzx
    mov r15.yz, l(0,0,0,0)
    mov r15.w, r24.y
    movc r17.xw, r20.xxxx, r15.yyyx, r15.wwwz
    movc r18.xyz, r20.xxxx, r23.xyyx, r24.xzwx
    mov r10.yzw, r12.yyzw
    mov r12.yz, r18.yyzy
    mov r15.x, l(0)
  endif 
  mov r11.xy, r4.yyyy
  mov r6.w, l(1.000000)
  mov r10.x, l(0)
endif 
ld r1.xyzw, r1.xyzw, t5.xyzw
exp r1.y, r2.y
add r1.z, -r1.x, l(1.000000)
mad r1.y, r1.y, r1.z, r1.x
div r1.x, r1.x, r1.y
log r1.x, |r1.x|
mul r1.x, r1.x, l(0.110977)
exp r1.x, r1.x
mul r1.x, r1.x, r2.z
mul r1.y, r1.x, l(0.570000)
movc r1.y, cb1[11].w, r1.x, r1.y
movc r1.y, r9.y, r1.y, r1.x
mov r12.w, l(0)
mov r16.y, l(0)
movc r12.xyzw, r9.zzzz, r12.wxyz, r16.xyyy
add r0.xyz, -r0.xyzx, cb0[8].xzyx
dp3 r1.z, r0.xyzx, r0.xyzx
sqrt r1.z, r1.z
div r0.xyz, r0.xyzx, r1.zzzz
dp3 r16.w, r8.xzyx, r0.xyzx
mul r1.w, r1.y, l(13.000000)
mad r2.y, r1.y, l(-0.255445), l(1.401520)
mad r2.y, r2.y, r1.y, l(-1.946950)
mad r2.y, r2.y, r1.y, l(0.816500)
exp r1.w, r1.w
movc r1.w, cb1[11].w, r2.y, r1.w
movc r2.y, r9.z, l(1.000000), r18.x
mad r2.z, r2.w, l(0.082000), l(0.018000)
add r4.xyw, -r2.zzzz, r6.xyxz
mad r4.xyw, r12.xxxx, r4.xyxw, r2.zzzz
add r2.w, -r12.x, l(1.000000)
mul r15.yzw, r2.wwww, r6.xxyz
sample r18.xyzw, v1.xyxx, t4.xyzw, s4
mul r18.xyz, r18.xyzx, r18.xyzx
mul r18.xyz, r18.xyzx, cb2[100].wwww
ieq r11.zw, r0.wwww, l(0, 0, 2, 4)
if_nz r11.z
  sample r19.xyzw, v1.xyxx, t10.xyzw, s5
  max r2.w, r19.x, cb2[1].y
  dp3_sat r7.w, -r8.xyzx, cb2[97].xyzx
  mov_sat r8.w, r16.w
  add r11.z, r7.w, r8.w
  mad r8.w, -r7.w, r8.w, r11.z
  max r8.w, r8.w, l(0.010000)
  div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
  movc r8.w, cb1[11].w, r8.w, l(1.000000)
  add r19.xyz, r0.xzyx, -cb2[97].xyzx
  dp3 r11.z, r19.xyzx, r19.xyzx
  rsq r11.z, r11.z
  mul r19.xyz, r11.zzzz, r19.xyzx
  dp3 r11.z, r19.xzyx, r0.xyzx
  add r12.x, -r11.z, l(1.000000)
  mul r13.w, r12.x, r12.x
  mul r13.w, r13.w, r13.w
  mul r12.x, r12.x, r13.w
  add r20.xyz, -r4.xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r21.xyz, r20.xyzx, r12.xxxx, r4.xywx
  mul r11.z, r11.z, l(-8.656170)
  exp r11.z, r11.z
  mad r20.xyz, r20.xyzx, r11.zzzz, r4.xywx
  movc r20.xyz, cb1[11].wwww, r21.xyzx, r20.xyzx
  dp3_sat r11.z, r8.xyzx, -cb2[97].xyzx
  mul r21.xyz, r11.zzzz, cb2[96].xyzx
  mul r21.xyz, r2.wwww, r21.xyzx
  mul r20.xyz, r2.wwww, r20.xyzx
  mul r20.xyz, r7.wwww, r20.xyzx
  mul r20.xyz, r8.wwww, r20.xyzx
  dp3_sat r2.w, r19.xyzx, r8.xyzx
  mul r7.w, r2.w, r2.w
  min r7.w, r7.w, l(0.999999)
  add r8.w, -r7.w, l(1.000000)
  div r7.w, r7.w, r8.w
  mul r8.w, r8.w, r8.w
  mul r11.z, r1.w, r1.w
  mad r11.z, r11.z, l(4.000000), l(1.000000)
  div r11.z, l(1.000000, 1.000000, 1.000000, 1.000000), r11.z
  mad r12.x, r1.w, r1.w, l(0.000001)
  div r7.w, -r7.w, r12.x
  mul r7.w, r7.w, l(1.442695)
  exp r7.w, r7.w
  mul r7.w, r7.w, l(4.000000)
  div r7.w, r7.w, r8.w
  add r7.w, r7.w, l(1.000000)
  mul r7.w, r7.w, r11.z
  mul r19.xyz, r7.wwww, cb2[96].xyzx
  log r2.w, r2.w
  mul r2.w, r1.w, r2.w
  exp r2.w, r2.w
  mad r7.w, r1.w, l(0.125000), l(0.250000)
  mul r2.w, r2.w, r7.w
  mul r22.xyz, r2.wwww, cb2[96].xyzx
  movc r19.xyz, cb1[11].wwww, r19.xyzx, r22.xyzx
  mul r19.xyz, r19.xyzx, r20.xyzx
  mov r20.xyz, l(0,0,0,0)
else 
  ieq r2.w, r0.w, l(4)
  if_nz r2.w
    sample r22.xyzw, v1.xyxx, t10.xyzw, s5
    max r2.w, r22.x, cb2[1].y
    dp3_sat r7.w, r14.xyzx, -cb2[97].xyzx
    add r22.xyz, -r8.xyzx, r14.xyzx
    mad r23.xyz, r22.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r8.xyzx
    dp3 r8.w, r23.xyzx, r23.xyzx
    rsq r8.w, r8.w
    mul r23.xyz, r8.wwww, r23.xyzx
    mad r22.xyz, r22.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000), r8.xyzx
    dp3 r8.w, r22.xyzx, r22.xyzx
    rsq r8.w, r8.w
    mul r22.xyz, r8.wwww, r22.xyzx
    dp3 r8.w, r8.xyzx, -cb2[97].xyzx
    dp3 r11.z, r23.xyzx, -cb2[97].xyzx
    dp3 r12.x, r22.xyzx, -cb2[97].xyzx
    mad r17.z, r8.w, l(0.500000), l(0.500000)
    mad r22.xy, r17.zwzz, l(0.984375, 0.984375, 0.000000, 0.000000), l(0.007813, 0.007813, 0.000000, 0.000000)
    sample_l r22.xyzw, r22.xyxx, t11.xyzw, s7, l(0.000000)
    mad r17.y, r11.z, l(0.500000), l(0.500000)
    mad r17.yz, r17.yywy, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.007813, 0.007813, 0.000000)
    sample_l r23.xyzw, r17.yzyy, t11.xyzw, s7, l(0.000000)
    mad r17.x, r12.x, l(0.500000), l(0.500000)
    mad r17.yz, r17.xxwx, l(0.000000, 0.984375, 0.984375, 0.000000), l(0.000000, 0.007813, 0.007813, 0.000000)
    sample_l r24.xyzw, r17.yzyy, t11.xyzw, s7, l(0.000000)
    mul r8.w, r7.w, r7.w
    mul r11.z, r1.w, r1.w
    mad r12.x, -r1.w, r1.w, l(1.000000)
    mad r8.w, r8.w, r12.x, r11.z
    sqrt r8.w, r8.w
    add r8.w, r7.w, r8.w
    div r8.w, l(1.000000, 1.000000, 1.000000, 1.000000), r8.w
    movc r8.w, cb1[11].w, r8.w, l(1.000000)
    add r17.yzw, r0.xxzy, -cb2[97].xxyz
    dp3 r11.z, r17.yzwy, r17.yzwy
    rsq r11.z, r11.z
    mul r17.yzw, r11.zzzz, r17.yyzw
    dp3 r11.z, r17.ywzy, r0.xyzx
    add r12.x, -r11.z, l(1.000000)
    mul r13.w, r12.x, r12.x
    mul r13.w, r13.w, r13.w
    mul r12.x, r12.x, r13.w
    add r22.yzw, -r4.xxyw, l(0.000000, 1.000000, 1.000000, 1.000000)
    mad r23.xzw, r22.yyzw, r12.xxxx, r4.xxyw
    mul r11.z, r11.z, l(-8.656170)
    exp r11.z, r11.z
    mad r22.yzw, r22.yyzw, r11.zzzz, r4.xxyw
    movc r22.yzw, cb1[11].wwww, r23.xxzw, r22.yyzw
    mul r23.xzw, r2.wwww, cb2[96].xxyz
    mov r24.x, r22.x
    mov r24.y, r23.y
    mul r21.xyz, r23.xzwx, r24.xyzx
    mul r22.xyz, r2.wwww, r22.yzwy
    mul r22.xyz, r7.wwww, r22.xyzx
    mul r22.xyz, r8.wwww, r22.xyzx
    dp3_sat r2.w, r17.yzwy, r14.xyzx
    mad r7.w, r1.w, r1.w, l(-1.000000)
    mul r8.w, r2.w, r2.w
    mad r7.w, r8.w, r7.w, l(1.000000)
    div r7.w, r1.w, r7.w
    mul r7.w, r7.w, r7.w
    mul r17.yzw, r7.wwww, cb2[96].xxyz
    log r2.w, r2.w
    mul r2.w, r1.w, r2.w
    exp r2.w, r2.w
    mad r7.w, r1.w, l(0.125000), l(0.250000)
    mul r2.w, r2.w, r7.w
    mul r23.xyz, r2.wwww, cb2[96].xyzx
    movc r17.yzw, cb1[11].wwww, r17.yyzw, r23.xxyz
    mul r19.xyz, r17.yzwy, r22.xyzx
    mov r20.xyz, l(0,0,0,0)
  else 
    mad r17.yzw, r3.xxyy, r5.yywx, l(0.000000, 1.000000, 0.000000, 0.000000)
    mad r3.xyz, r3.zzwz, r5.zxwz, r17.yzwy
    ieq r2.w, r0.w, l(0)
    or r2.w, r9.w, r2.w
    or r2.w, r9.y, r2.w
    mad r3.w, -r1.y, r2.y, r1.y
    mul r5.x, r3.w, l(13.000000)
    mad r5.y, r3.w, l(-0.255445), l(1.401520)
    mad r5.y, r5.y, r3.w, l(-1.946950)
    mad r3.w, r5.y, r3.w, l(0.816500)
    exp r5.x, r5.x
    movc r3.w, cb1[11].w, r3.w, r5.x
    movc r2.w, r2.w, r1.w, r3.w
    if_nz r9.y
      sample r5.xyzw, v1.xyxx, t10.xyzw, s5
      max r5.x, r5.x, cb2[1].y
      dp3_sat r5.y, r14.xyzx, -cb2[97].xyzx
      mul r5.yzw, r5.yyyy, cb2[96].xxyz
      mul r21.xyz, r5.yzwy, r5.xxxx
      dp3_sat r5.y, r8.xyzx, -cb2[97].xyzx
      mul r5.z, r5.y, r5.y
      mul r5.w, r1.w, r1.w
      mad r7.w, -r1.w, r1.w, l(1.000000)
      mad r5.z, r5.z, r7.w, r5.w
      sqrt r5.z, r5.z
      add r5.z, r5.z, r5.y
      div r5.z, l(1.000000, 1.000000, 1.000000, 1.000000), r5.z
      movc r5.z, cb1[11].w, r5.z, l(1.000000)
      add r17.yzw, r0.xxzy, -cb2[97].xxyz
      dp3 r5.w, r17.yzwy, r17.yzwy
      rsq r5.w, r5.w
      mul r17.yzw, r5.wwww, r17.yyzw
      dp3 r5.w, r17.ywzy, r0.xyzx
      add r7.w, -r5.w, l(1.000000)
      mul r8.w, r7.w, r7.w
      mul r8.w, r8.w, r8.w
      mul r7.w, r7.w, r8.w
      add r22.xyz, -r4.xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
      mad r23.xyz, r22.xyzx, r7.wwww, r4.xywx
      mul r5.w, r5.w, l(-8.656170)
      exp r5.w, r5.w
      mad r22.xyz, r22.xyzx, r5.wwww, r4.xywx
      movc r22.xyz, cb1[11].wwww, r23.xyzx, r22.xyzx
      if_nz cb1[11].w
        add r5.w, r17.x, r17.x
        mul r23.xyz, r5.xxxx, r22.xyzx
        mul r23.xyz, r5.yyyy, r23.xyzx
        mul r23.xyz, r5.zzzz, r23.xyzx
        dp3 r24.x, r17.yzwy, r3.xyzx
        dp3 r24.y, r17.wyzw, r7.xyzx
        dp3 r7.w, r17.yzwy, r8.xyzx
        mul r24.xy, r24.xyxx, r24.xyxx
        mul r8.w, r3.w, r3.w
        div r8.w, r24.x, r8.w
        mad r7.w, r7.w, r7.w, r8.w
        mul r8.w, r2.w, r2.w
        div r8.w, r24.y, r8.w
        add r7.w, r7.w, r8.w
        mul r8.w, r2.w, r3.w
        mul r7.w, r7.w, r7.w
        mul r7.w, r8.w, r7.w
        div r7.w, l(1.000000, 1.000000, 1.000000, 1.000000), r7.w
        mul r24.xyz, r7.wwww, cb2[96].xyzx
        mul r23.xyz, r23.xyzx, r24.xyzx
        mul r24.xyz, r5.wwww, r7.yzxy
        mad r24.xyz, r24.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -cb2[97].xyzx
        dp3 r5.w, r24.xyzx, r24.xyzx
        rsq r5.w, r5.w
        mad r24.xyz, r24.xyzx, r5.wwww, r0.xzyx
        dp3 r5.w, r24.xyzx, r24.xyzx
        rsq r5.w, r5.w
        mul r24.xyz, r5.wwww, r24.xyzx
        mul r25.xyz, r6.xyzx, r2.zzzz
        dp3 r5.w, r24.xzyx, r0.xyzx
        add r5.w, -r5.w, l(1.000000)
        mul r7.w, r5.w, r5.w
        mul r7.w, r7.w, r7.w
        mul r5.w, r5.w, r7.w
        mad r6.xyz, -r2.zzzz, r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
        mad r6.xyz, r6.xyzx, r5.wwww, r25.xyzx
        add r25.xyz, -r6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
        mul r6.xyz, r5.xxxx, r6.xyzx
        mul r6.xyz, r5.yyyy, r6.xyzx
        mul r6.xyz, r5.zzzz, r6.xyzx
        add r5.w, r3.w, r3.w
        add r7.w, r2.w, r2.w
        dp3 r26.x, r24.xyzx, r3.xyzx
        dp3 r26.y, r24.zxyz, r7.xyzx
        dp3 r8.w, r24.xyzx, r8.xyzx
        mul r24.xy, r26.xyxx, r26.xyxx
        mul r11.z, r5.w, r5.w
        div r11.z, r24.x, r11.z
        mad r8.w, r8.w, r8.w, r11.z
        mul r11.z, r7.w, r7.w
        div r11.z, r24.y, r11.z
        add r8.w, r8.w, r11.z
        mul r5.w, r5.w, r7.w
        mul r7.w, r8.w, r8.w
        mul r5.w, r5.w, r7.w
        div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
        mul r24.xyz, r5.wwww, cb2[96].xyzx
        mul r6.xyz, r6.xyzx, r24.xyzx
        mad r19.xyz, r23.xyzx, r25.xyzx, r6.xyzx
      else 
        mul r6.xyz, r5.xxxx, r22.xyzx
        mul r6.xyz, r5.yyyy, r6.xyzx
        mul r5.xzw, r5.zzzz, r6.xxyz
        dp3_sat r6.x, r8.xyzx, r17.yzwy
        add r5.y, r5.y, -r6.x
        add r5.y, -|r5.y|, l(1.000000)
        log r5.y, r5.y
        mul r5.y, r1.w, r5.y
        exp r5.y, r5.y
        mul r6.xyz, r5.yyyy, cb2[96].xyzx
        mad r5.y, r1.w, l(0.125000), l(0.250000)
        mul r6.xyz, r5.yyyy, r6.xyzx
        mul r19.xyz, r5.xzwx, r6.xyzx
      endif 
      mov r20.xyz, l(0,0,0,0)
    else 
      if_nz r9.z
        and r5.xyz, r9.zzzz, r13.xyzx
        and r6.xyz, r9.zzzz, r10.yzwy
        sample r13.xyzw, v1.xyxx, t10.xyzw, s5
        max r5.w, r13.x, cb2[1].y
        add r10.yzw, r0.xxzy, -cb2[97].xxyz
        dp3 r7.w, r10.yzwy, r10.yzwy
        rsq r7.w, r7.w
        mul r10.yzw, r7.wwww, r10.yyzw
        dp3 r7.w, r5.xyzx, -cb2[97].xyzx
        max r7.w, r7.w, l(-1.000000)
        min r7.w, r7.w, l(1.000000)
        dp3 r5.x, r5.xyzx, r10.yzwy
        max r5.x, r5.x, l(-1.000000)
        min r5.x, r5.x, l(1.000000)
        dp3_sat r5.y, r14.xyzx, -cb2[97].xyzx
        mul r10.yzw, r5.yyyy, cb2[96].xxyz
        mad r5.y, -r7.w, r7.w, l(1.000000)
        sqrt r5.y, r5.y
        dp3 r5.z, r8.xyzx, -cb2[97].xyzx
        max r5.z, r5.z, l(0.000000)
        add r5.z, -r5.y, r5.z
        mad r5.y, r6.x, r5.z, r5.y
        mul r10.yzw, r5.wwww, r10.yyzw
        mul r21.xyz, r5.yyyy, r10.yzwy
        mad r5.y, -r5.x, r5.x, l(1.000000)
        sqrt r5.y, r5.y
        log r5.y, r5.y
        mul r5.y, r5.y, r6.z
        exp r5.y, r5.y
        add r5.x, r6.y, r5.x
        min r5.x, r5.x, l(1.000000)
        mad r5.x, -r5.x, r5.x, l(1.000000)
        sqrt r5.x, r5.x
        log r5.x, r5.x
        mul r5.x, r5.x, r12.z
        exp r5.x, r5.x
        mul r6.xyz, r10.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
        mul r5.x, r5.x, r12.w
        mad r5.x, r12.y, r5.y, r5.x
        mul r19.xyz, r5.xxxx, r6.xyzx
        mov r20.xyz, l(0,0,0,0)
      else 
        sample r5.xyzw, v1.xyxx, t10.xyzw, s5
        max r5.x, r5.x, cb2[1].y
        dp3 r5.y, r8.xyzx, cb2[97].xyzx
        mov_sat r5.y, -r5.y
        mul r5.z, r5.y, r5.y
        mul r5.w, r1.w, r1.w
        mad r6.x, -r1.w, r1.w, l(1.000000)
        mad r5.z, r5.z, r6.x, r5.w
        sqrt r5.z, r5.z
        add r5.z, r5.z, r5.y
        div r5.z, l(1.000000, 1.000000, 1.000000, 1.000000), r5.z
        movc r5.z, cb1[11].w, r5.z, l(1.000000)
        add r6.xyz, r0.xzyx, -cb2[97].xyzx
        dp3 r5.w, r6.xyzx, r6.xyzx
        rsq r5.w, r5.w
        mul r6.xyz, r5.wwww, r6.xyzx
        dp3 r5.w, r6.xzyx, r0.xyzx
        add r7.w, -r5.w, l(1.000000)
        mul r8.w, r7.w, r7.w
        mul r8.w, r8.w, r8.w
        mul r7.w, r7.w, r8.w
        add r10.yzw, -r4.xxyw, l(0.000000, 1.000000, 1.000000, 1.000000)
        mad r12.xyz, r10.yzwy, r7.wwww, r4.xywx
        mul r5.w, r5.w, l(-8.656170)
        exp r5.w, r5.w
        mad r10.yzw, r10.yyzw, r5.wwww, r4.xxyw
        movc r10.yzw, cb1[11].wwww, r12.xxyz, r10.yyzw
        mul r10.yzw, r5.xxxx, r10.yyzw
        mul r10.yzw, r5.yyyy, r10.yyzw
        mul r5.yzw, r5.zzzz, r10.yyzw
        dp3 r3.x, r6.xyzx, r3.xyzx
        dp3 r3.y, r6.zxyz, r7.xyzx
        dp3 r6.x, r6.xyzx, r8.xyzx
        mul r3.xy, r3.xyxx, r3.xyxx
        mul r3.z, r3.w, r3.w
        div r3.x, r3.x, r3.z
        mad r3.x, r6.x, r6.x, r3.x
        mul r3.z, r2.w, r2.w
        div r3.y, r3.y, r3.z
        add r3.x, r3.y, r3.x
        mul r2.w, r2.w, r3.w
        mul r3.x, r3.x, r3.x
        mul r2.w, r2.w, r3.x
        div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
        mul r3.xyz, r2.wwww, cb2[96].xyzx
        mul r3.xyz, r3.xyzx, r5.yzwy
        mov_sat r6.x, r6.x
        log r2.w, r6.x
        mul r2.w, r1.w, r2.w
        exp r2.w, r2.w
        mad r3.w, r1.w, l(0.125000), l(0.250000)
        mul r2.w, r2.w, r3.w
        mul r6.xyz, r2.wwww, cb2[96].xyzx
        mul r5.yzw, r5.yyzw, r6.xxyz
        movc r19.xyz, cb1[11].wwww, r3.xyzx, r5.yzwy
        dp3 r2.w, r14.xyzx, -cb2[97].xyzx
        mul r3.xyz, r5.xxxx, cb2[96].xyzx
        mov_sat r3.w, r2.w
        mul r21.xyz, r3.wwww, r3.xyzx
        mov_sat r2.w, -r2.w
        mul r3.xyz, r2.wwww, r3.xyzx
        and r20.xyz, r3.xyzx, r9.xxxx
      endif 
    endif 
  endif 
endif 
mad_sat r2.w, r1.z, cb2[0].x, cb2[0].y
mul r2.w, r2.w, cb2[0].z
mul r2.x, r2.x, r2.w
mad r3.xyz, r18.yyyy, r2.xxxx, r18.xyzx
sample r5.xyzw, v1.xyxx, t1.xyzw, s1
mul r5.xyz, r5.xyzx, r5.xyzx
dp3 r2.x, r5.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
ge r2.x, r2.x, l(0.000100)
and r2.x, r2.x, l(0x3f800000)
mad r5.xyz, r5.xyzx, cb2[100].wwww, -r18.xyzx
mad r5.xyz, r2.xxxx, r5.xyzx, r18.xyzx
or r2.x, r9.w, r11.w
and r2.x, r2.x, l(0x3f800000)
mul r2.x, r2.x, cb2[101].z
add r2.w, -r18.w, l(1.000000)
mad r2.x, r2.x, r2.w, r18.w
and r2.w, r9.x, l(0x3e800000)
mov r12.yzw, -r0.zzyx
mov r12.x, l(1.000000)
dp4 r6.x, cb0[20].xyzw, r12.xyzw
dp4 r6.y, cb0[19].xyzw, r12.xyzw
dp4 r6.z, cb0[18].xyzw, r12.xyzw
max r6.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r3.w, r1.z, r12.z
mad_sat r1.z, r1.z, cb0[17].y, cb0[17].x
mul r3.w, r3.w, cb0[21].y
max r3.w, r3.w, l(-125.000000)
lt r5.w, l(0.000001), |r3.w|
exp r7.w, -r3.w
add r7.w, -r7.w, l(1.000000)
div r3.w, r7.w, r3.w
movc r3.w, r5.w, r3.w, l(1.000000)
mad r3.w, r3.w, cb0[21].x, cb0[17].w
mul r1.z, r1.z, r3.w
mul r1.z, r1.z, -cb0[17].z
exp r1.z, r1.z
mad r6.xyz, -r6.xyzx, r1.zzzz, r6.xyzx
mov r1.x, |r16.w|
mul r3.w, r1.x, r1.x
mul r5.w, r1.w, r1.w
mad r1.w, -r1.w, r1.w, l(1.000000)
mad r3.w, r3.w, r1.w, r5.w
sqrt r3.w, r3.w
add r3.w, r1.x, r3.w
div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
movc r3.w, cb1[11].w, r3.w, l(1.000000)
mul r10.yzw, r3.wwww, r19.xxyz
ine r0.w, r0.w, l(2)
mov_sat r3.w, r16.w
mul r7.w, r3.w, r3.w
mad r1.w, r7.w, r1.w, r5.w
sqrt r1.w, r1.w
add r1.w, r1.w, r3.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
movc r1.w, cb1[11].w, r1.w, l(1.000000)
mul r12.xyz, r1.wwww, r19.xyzx
movc r12.xyz, r0.wwww, r12.xyzx, r19.xyzx
movc r10.yzw, r9.yyyy, r10.yyzw, r12.xxyz
movc r16.xyz, r11.wwww, r14.xyzx, r8.xyzx
mul r8.xyz, r7.xyzx, r0.xzyx
mad r8.xyz, r0.yxzy, r7.yzxy, -r8.xyzx
mul r12.xyz, r7.xyzx, r8.xyzx
mad r7.xyz, r7.zxyz, r8.yzxy, -r12.xyzx
add r7.xyz, -r16.xyzx, r7.xyzx
mad r7.xyz, r2.yyyy, r7.xyzx, r16.xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r7.xyz, r0.wwww, r7.xyzx
dp3 r7.w, r7.xzyx, r0.xyzx
movc r7.xyzw, cb1[11].wwww, r7.xyzw, r16.xyzw
add r0.w, r7.w, r7.w
mad r0.xyz, -r0.wwww, r7.xzyx, r0.xyzx
mov r0.xyz, -r0.xyzx
mad r0.w, -r1.y, l(6.000000), l(6.000000)
sample_l r0.xyzw, r0.xyzx, t2.xyzw, s2, r0.w
mad r0.xyz, r0.xyzx, cb0[57].xyzx, cb0[56].xyzx
if_nz cb1[11].w
  sample_l r7.xyzw, r1.xyxx, t3.xyzw, s3, l(0.000000)
  mad_sat r7.xyz, r4.xywx, r7.yyyy, r7.xxxx
  mul r7.xyz, r0.xyzx, r7.xyzx
else 
  add r8.xyz, -r4.xywx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r0.w, r1.x, l(-8.656170)
  exp r0.w, r0.w
  mul r1.x, r1.y, r1.y
  mad r1.x, r1.x, l(0.830000), l(0.170000)
  mul r0.w, r0.w, r1.x
  mad r1.xyw, r8.xyxz, r0.wwww, r4.xyxw
  mul r7.xyz, r0.xyzx, r1.xywx
endif 
movc r0.x, r9.x, l(0.750000), l(1.000000)
mad_sat r0.x, r2.x, r0.x, r2.w
movc r0.y, r9.z, l(1.000000), r4.z
mul r0.y, r0.x, r0.y
add r0.z, r0.x, l(-1.000000)
mad_sat r0.z, cb2[101].y, r0.z, l(1.000000)
mul r1.xyw, r0.yyyy, r3.xyxz
movc r0.yw, r9.zzzz, l(0,1.000000,0,1.000000), r11.xxxy
mul r2.xyw, r0.yyyy, r10.yzyw
dp3 r0.y, r5.xyzx, l(0.212600, 0.715200, 0.072200, 0.000000)
mul r3.xyz, r0.yyyy, r7.xyzx
mul r3.xyz, r0.wwww, r3.xyzx
mul r0.xyw, r0.xxxx, r3.xyxz
mad r3.x, r15.x, l(4.000000), l(1.000000)
mul r0.xyw, r0.xyxw, r3.xxxx
add r2.z, -r2.z, l(1.000000)
add r3.x, -r6.w, l(1.000000)
mul r3.y, r6.w, l(255.000000)
ftou r3.y, r3.y
and r3.y, r3.y, l(1)
utof r3.y, r3.y
mad r3.yzw, r3.yyyy, l(0.000000, -0.500000, -0.300000, -0.800000), l(0.000000, 1.000000, 1.000000, 1.000000)
mul r3.xyz, r3.xxxx, r3.yzwy
mul r3.xyz, r3.xyzx, r15.yzwy
mad r1.xyw, r21.xyxz, r0.zzzz, r1.xyxw
mul r1.xyw, r1.xyxw, r15.yzyw
mul r3.xyz, r20.xyzx, r3.xyzx
mul r3.xyz, r2.zzzz, r3.xyzx
mad r1.xyw, r1.xyxw, r2.zzzz, r3.xyxz
mad r0.xyz, r2.xywx, r0.zzzz, r0.xywx
mad r1.xyw, r15.yzyw, r10.xxxx, r1.xyxw
add r0.xyz, r0.xyzx, r1.xywx
mad r0.xyz, r0.xyzx, r1.zzzz, r6.xyzx
mul r0.xyz, r0.xyzx, cb0[2].zzzz
lt r0.w, l(0.500000), cb2[1].x
movc o0.xyz, r0.wwww, r15.yzwy, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 691 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
J:\SteamLibrary\steamapps\common\Far Cry 4\wrapper1349(289,13-39): error X3018: invalid subscript 'xyzw'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 
 
