// Distant misaligned lights at night?

cbuffer CViewportShaderParameterProvider : register(b0)
{
  float4 _AmbientColorMultiplier : packoffset(c0);
  float4 _AmbientOcclusionRanges_SunOcclusionFactor : packoffset(c1);
  float4 _BloomAdaptationFactor : packoffset(c2);
  float4 _CameraDirection_FOVDeg : packoffset(c3);
  float4 _CameraDistances : packoffset(c4);
  float4 _CameraNearPlaneSize : packoffset(c5);
  float4 _CameraPositionFractions_ZOffsetWS : packoffset(c6);
  float4 _CameraPositionFractions_ZOffsetWS_Previous : packoffset(c7);
  float4 _CameraPosition_DistanceScale : packoffset(c8);
  float4 _CameraPosition_DistanceScale_Previous : packoffset(c9);
  float4x4 _CullingViewProjectionMatrix : packoffset(c10);
  float4 _DepthScale : packoffset(c14);
  float4 _DepthTextureRcpSize : packoffset(c15);
  float4 _DepthTextureScaleOffset : packoffset(c16);
  float4 _FogParams : packoffset(c17);
  float4 _FogSHB : packoffset(c18);
  float4 _FogSHG : packoffset(c19);
  float4 _FogSHR : packoffset(c20);
  float4 _HeightFogParams : packoffset(c21);
  float4x4 _InvProjectionMatrix : packoffset(c22);
  float4x4 _InvViewMatrix : packoffset(c26);
  float4x4 _ProjectionMatrix : packoffset(c30);
  float4 _TempSunDirection : packoffset(c34);
  float4x4 _ViewMatrix : packoffset(c35);
  float4 _ViewPoint_ShadowProjDepthMin : packoffset(c39);
  float4x4 _ViewProjectionMatrix : packoffset(c40);
  float4x4 _ViewRotProjectionMatrix : packoffset(c44);
  float4x4 _ViewRotProjectionMatrix_Previous : packoffset(c48);
  float4 _ViewportSize : packoffset(c52);
  float2 _MotionVectorOffsets : packoffset(c53);
  float3 _CameraRight : packoffset(c54);
  float3 _CameraUp : packoffset(c55);
  float3 _EnvironmentMapColorOffset : packoffset(c56);
  float3 _EnvironmentMapColorScale : packoffset(c57);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main(
  float4 v0 : position0,
  float4 v1 : color0,
  float2 v2 : texcoord0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2,
  out float2 o4 : TEXCOORD3)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
//v0.x += stereo.x * (v0.w - stereo.y);

// This moves the light to infinity, but that's ok since this effect disappears
// when getting close so unless someone cranks up the convergence they would
// never notice:
v0.x += stereo.x;

  o0.xyzw = v0.xyzw;
  o1.xyzw = v1.xyzw;
  r0.xyz = v0.xyz;
  r0.w = 1.000000000e+000;
  r1.x = dot(r0.xyzw, _InvProjectionMatrix._m00_m10_m20_m30);
  r1.y = dot(r0.xyzw, _InvProjectionMatrix._m01_m11_m21_m31);
  r1.z = dot(r0.xyzw, _InvProjectionMatrix._m02_m12_m22_m32);
  r1.w = dot(r0.xyzw, _InvProjectionMatrix._m03_m13_m23_m33);
  r0.x = dot(r1.xyzw, _InvViewMatrix._m00_m10_m20_m30);
  r0.y = dot(r1.xyzw, _InvViewMatrix._m01_m11_m21_m31);
  r0.z = dot(r1.xyzw, _InvViewMatrix._m02_m12_m22_m32);
  r0.w = dot(r1.xyzw, _InvViewMatrix._m03_m13_m23_m33);
  r0.xyz = r0.xyz / r0.www;
  r1.xyz = _CameraPosition_DistanceScale.xyz + -r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r1.xyz = r1.xyz / r0.www;
  r0.w = -2.000000000e+003 + r0.w;
  r0.w = saturate(3.333333298e-004 * r0.w);
  r0.w = 2.500000000e+002 * r0.w;
  r0.xyz = r1.xyz * r0.www + r0.xyz;
  r1.xyz = -_CameraPosition_DistanceScale.xyz + r0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * _CameraPositionFractions_ZOffsetWS.www + r0.xyz;
  r1.xyz = -_CameraPosition_DistanceScale.xyz + r0.xyz;
  o3.xyz = r0.xyz;
  r0.x = dot(_CameraDirection_FOVDeg.xyz, r1.xyz);
  o2.w = _CameraDistances.w * r0.x;
  r0.xyzw = _DepthTextureScaleOffset.xyzw * v0.xyww;
  o2.xy = r0.xy + r0.zw;
  o2.z = v0.w;
  o4.xy = v2.xy;

//o0.x += stereo.x;

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer CViewportShaderParameterProvider
// {
//
//   float4 _AmbientColorMultiplier;    // Offset:    0 Size:    16 [unused]
//   float4 _AmbientOcclusionRanges_SunOcclusionFactor;// Offset:   16 Size:    16 [unused]
//   float4 _BloomAdaptationFactor;     // Offset:   32 Size:    16 [unused]
//   float4 _CameraDirection_FOVDeg;    // Offset:   48 Size:    16
//   float4 _CameraDistances;           // Offset:   64 Size:    16
//   float4 _CameraNearPlaneSize;       // Offset:   80 Size:    16 [unused]
//   float4 _CameraPositionFractions_ZOffsetWS;// Offset:   96 Size:    16
//   float4 _CameraPositionFractions_ZOffsetWS_Previous;// Offset:  112 Size:    16 [unused]
//   float4 _CameraPosition_DistanceScale;// Offset:  128 Size:    16
//   float4 _CameraPosition_DistanceScale_Previous;// Offset:  144 Size:    16 [unused]
//   float4x4 _CullingViewProjectionMatrix;// Offset:  160 Size:    64 [unused]
//   float4 _DepthScale;                // Offset:  224 Size:    16 [unused]
//   float4 _DepthTextureRcpSize;       // Offset:  240 Size:    16 [unused]
//   float4 _DepthTextureScaleOffset;   // Offset:  256 Size:    16
//   float4 _FogParams;                 // Offset:  272 Size:    16 [unused]
//   float4 _FogSHB;                    // Offset:  288 Size:    16 [unused]
//   float4 _FogSHG;                    // Offset:  304 Size:    16 [unused]
//   float4 _FogSHR;                    // Offset:  320 Size:    16 [unused]
//   float4 _HeightFogParams;           // Offset:  336 Size:    16 [unused]
//   float4x4 _InvProjectionMatrix;     // Offset:  352 Size:    64
//   float4x4 _InvViewMatrix;           // Offset:  416 Size:    64
//   float4x4 _ProjectionMatrix;        // Offset:  480 Size:    64 [unused]
//   float4 _TempSunDirection;          // Offset:  544 Size:    16 [unused]
//   float4x4 _ViewMatrix;              // Offset:  560 Size:    64 [unused]
//   float4 _ViewPoint_ShadowProjDepthMin;// Offset:  624 Size:    16 [unused]
//   float4x4 _ViewProjectionMatrix;    // Offset:  640 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix; // Offset:  704 Size:    64 [unused]
//   float4x4 _ViewRotProjectionMatrix_Previous;// Offset:  768 Size:    64 [unused]
//   float4 _ViewportSize;              // Offset:  832 Size:    16 [unused]
//   float2 _MotionVectorOffsets;       // Offset:  848 Size:     8 [unused]
//   float3 _CameraRight;               // Offset:  864 Size:    12 [unused]
//   float3 _CameraUp;                  // Offset:  880 Size:    12 [unused]
//   float3 _EnvironmentMapColorOffset; // Offset:  896 Size:    12 [unused]
//   float3 _EnvironmentMapColorScale;  // Offset:  912 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CViewportShaderParameterProvider    cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// position                 0   xyzw        0     NONE   float   xyzw
// color                    0   xyzw        1     NONE   float   xyzw
// texcoord                 0   xy          2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xy          4     NONE   float   xy  
//
vs_4_0
dcl_constantbuffer cb0[30], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xy
dcl_temps 2
mov o0.xyzw, v0.xyzw
mov o1.xyzw, v1.xyzw
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r0.xyzw, cb0[22].xyzw
dp4 r1.y, r0.xyzw, cb0[23].xyzw
dp4 r1.z, r0.xyzw, cb0[24].xyzw
dp4 r1.w, r0.xyzw, cb0[25].xyzw
dp4 r0.x, r1.xyzw, cb0[26].xyzw
dp4 r0.y, r1.xyzw, cb0[27].xyzw
dp4 r0.z, r1.xyzw, cb0[28].xyzw
dp4 r0.w, r1.xyzw, cb0[29].xyzw
div r0.xyz, r0.xyzx, r0.wwww
add r1.xyz, -r0.xyzx, cb0[8].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
div r1.xyz, r1.xyzx, r0.wwww
add r0.w, r0.w, l(-2000.000000)
mul_sat r0.w, r0.w, l(0.000333)
mul r0.w, r0.w, l(250.000000)
mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
add r1.xyz, r0.xyzx, -cb0[8].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[6].wwww, r0.xyzx
add r1.xyz, r0.xyzx, -cb0[8].xyzx
mov o3.xyz, r0.xyzx
dp3 r0.x, cb0[3].xyzx, r1.xyzx
mul o2.w, r0.x, cb0[4].w
mul r0.xyzw, v0.xyww, cb0[16].xyzw
add o2.xy, r0.zwzz, r0.xyxx
mov o2.z, v0.w
mov o4.xy, v2.xyxx
ret 
// Approximately 35 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
