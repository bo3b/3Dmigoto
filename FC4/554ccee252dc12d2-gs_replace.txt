// ---- Created with 3Dmigoto v1.2.32 on Sun Feb 28 04:28:16 2016

cbuffer cbPerFrame : register(b0)
{
  row_major float4x4 g_viewProjection : packoffset(c0);
  row_major float4x4 g_viewMatrix : packoffset(c4);
  row_major float4x4 g_modelToWorld : packoffset(c8);
  float3 g_camPosition : packoffset(c12);
  int g_cameraLHS : packoffset(c12.w);
  float g_hairDensity : packoffset(c13);
  float g_densityPass : packoffset(c13.y);
  int g_useViewfrustrumCulling : packoffset(c13.z);
  int g_usePixelDensity : packoffset(c13.w);
  float g_lengthNoise : packoffset(c14);
  float g_lengthScale : packoffset(c14.y);
  float g_useBackfaceCulling : packoffset(c14.z);
  float g_backfaceCullingThreshold : packoffset(c14.w);
  float g_baseWidth : packoffset(c15);
  float g_shadowDensityScale : packoffset(c15.y);
  float g_baseWidthShadowScale : packoffset(c15.z);
  float g_rootWidthScale : packoffset(c15.w);
  float g_tipWidthScale : packoffset(c16);
  float g_baseWidthNoise : packoffset(c16.y);
  uint g_shaderMask : packoffset(c16.z);
  float g_widthDummy3 : packoffset(c16.w);
  float g_clumpScale : packoffset(c17);
  float g_clumpNoise : packoffset(c17.y);
  float g_clumpRoundness : packoffset(c17.z);
  float g_clumpDummy1 : packoffset(c17.w);
  float g_volumeSpread : packoffset(c18);
  float g_otherDummy1 : packoffset(c18.y);
  float g_otherDummy2 : packoffset(c18.z);
  float g_otherDummy3 : packoffset(c18.w);
  float g_waveScale : packoffset(c19);
  float g_waveFreq : packoffset(c19.y);
  float g_waveScaleNoise : packoffset(c19.z);
  float g_waveFreqNoise : packoffset(c19.w);
  float g_waveCutoff : packoffset(c20);
  float g_waveDummy1 : packoffset(c20.y);
  float g_waveDummy2 : packoffset(c20.z);
  float g_waveDummy3 : packoffset(c20.w);
  int g_useDensityTexture : packoffset(c21);
  int g_useRootWidthTexture : packoffset(c21.y);
  int g_useTipWidthTexture : packoffset(c21.z);
  int g_useClumpScaleTexture : packoffset(c21.w);
  int g_useClumpNoiseTexture : packoffset(c22);
  int g_useWaveScaleTexture : packoffset(c22.y);
  int g_useWaveFreqTexture : packoffset(c22.z);
  int g_useLengthTexture : packoffset(c22.w);
}



// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

struct Tri_struct
{
  float4 Pos : SV_Position0;
  float4 o1 : ABCD0;
  float4 o2 : EFGH0;
};

struct Inputs_
{
  float3 Pos : Position0;
  float w0 : TEXALONGLENGTH0;
  float2 v1 : SCALPTEX0;
  float width : Width0;
  float3 v2 : Normal0;
  float3 v3 : Tangent0;
};

[maxvertexcount(4)]
void main( 
  line Inputs_ v[2],
  inout TriangleStream<Tri_struct> m0
  // float3 v0 : Position0,
  // float w0 : TEXALONGLENGTH0,
  // float2 v1 : SCALPTEX0,
  // float w1 : Width0,
  // float3 v2 : Normal0,
  // float3 v3 : Tangent0,
  // out float4 o0 : SV_Position0,
  // out float4 o1 : ABCD0,
  // out float4 o2 : EFGH0)
)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

// Needs manual fix for instruction: 
// unknown dcl_: dcl_inputprimitive line 
// Needs manual fix for instruction:  
//dcl_stream m0
// Needs manual fix for instruction: 
// unknown dcl_: dcl_outputtopology trianglestrip 

  r0.x = cmp(v[0].width == 0.0);
  r0.y = cmp(v[1].width == 0.0);
  r0.x = r0.y ? r0.x : 0;
  if (r0.x != 0) {
    return;
  }
  r0.x = dot(v[0].v3.xyz, v[0].v3.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v[0].v3.xyz * r0.xxx;
  r0.w = dot(v[1].v3.xyz, v[1].v3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v[1].v3.xyz * r0.www;
  r2.z = g_viewMatrix._m12;
  r2.x = g_viewMatrix._m22;
  r2.y = g_viewMatrix._m02;
  r3.xyz = r2.xyz * r0.yzx;
  r3.xyz = r2.zxy * r0.zxy + -r3.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r4.xyz = r2.xyz * r1.yzx;
  r2.xyz = r2.zxy * r1.zxy + -r4.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r4.xyz = -v[0].width * r3.xyz + v[0].Pos.xyz;
  r3.xyz = v[0].width * r3.xyz + v[0].Pos.xyz;
  r5.xyz = -v[1].width * r2.xyz + v[1].Pos.xyz;
  r2.xyz = v[1].width * r2.xyz + v[1].Pos.xyz;
  r6.xyzw = g_shaderMask & int4(4,2,1,8);
  r0.w = v[0].v1.y * 2048;
  r0.w = floor(r0.w);
  r0.w = v[0].v1.x + r0.w;
  r7.xy = max(v[0].v2.xy, float2(-1,-1));
  r7.xy = min(float2(1,1), r7.xy);
  r7.xy = r7.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r1.w = 2048 * r7.y;
  r1.w = floor(r1.w);
  r7.x = r1.w + r7.x;
  r7.y = v[0].v2.z;
  r7.z = 0;
  r7.xyz = r6.yyy ? r7.xyz : float3(0,0,0);
  r0.xyzw = r6.zzzx ? r0.xyzw : float4(0,0,0,0);
  r1.w = r6.w ? v[0].w0 : 0;
  r8.xyzw = g_viewProjection._m10_m11_m12_m13 * r4.yyyy;
  r8.xyzw = r4.xxxx * g_viewProjection._m00_m01_m02_m03 + r8.xyzw;
  r4.xyzw = r4.zzzz * g_viewProjection._m20_m21_m22_m23 + r8.xyzw;
  r4.xyzw = g_viewProjection._m30_m31_m32_m33 + r4.xyzw;
  
Tri_struct output;
float4 o0;  // Pos
float4 o1;  // ABCD0
float4 o2;  // EFGH0
  
  o0.xyzw = r4.xyzw;
  o1.xyz = r0.xyz;
  o1.w = r1.w;
  o2.x = r0.w;
  o2.yzw = r7.xyz;
  
output.Pos = o0;
output.o1 = o1;
output.o2 = o2;
  
// Needs manual fix for instruction, maybe. 
//emit_stream m0
m0.Append(output);
 
  r4.xyzw = g_viewProjection._m10_m11_m12_m13 * r3.yyyy;
  r4.xyzw = r3.xxxx * g_viewProjection._m00_m01_m02_m03 + r4.xyzw;
  r3.xyzw = r3.zzzz * g_viewProjection._m20_m21_m22_m23 + r4.xyzw;
  r3.xyzw = g_viewProjection._m30_m31_m32_m33 + r3.xyzw;
  o0.xyzw = r3.xyzw;
  o1.xyz = r0.xyz;
  o1.w = r1.w;
  o2.x = r0.w;
  o2.yzw = r7.xyz;
  
output.Pos = o0;
output.o1 = o1;
output.o2 = o2;
// Needs manual fix for instruction, maybe. 
//emit_stream m0
m0.Append(output);
 
  r0.xyz = r6.zzz ? r1.xyz : float3(0,0,0);
  r1.x = r6.w ? v[1].w0 : 0;
  r3.xyzw = g_viewProjection._m10_m11_m12_m13 * r5.yyyy;
  r3.xyzw = r5.xxxx * g_viewProjection._m00_m01_m02_m03 + r3.xyzw;
  r3.xyzw = r5.zzzz * g_viewProjection._m20_m21_m22_m23 + r3.xyzw;
  r3.xyzw = g_viewProjection._m30_m31_m32_m33 + r3.xyzw;
  o0.xyzw = r3.xyzw;
  o1.xyz = r0.xyz;
  o1.w = r1.x;
  o2.x = r0.w;
  o2.yzw = r7.xyz;
  
output.Pos = o0;
output.o1 = o1;
output.o2 = o2;
// Needs manual fix for instruction, maybe. 
//emit_stream m0
m0.Append(output);
 
  r3.xyzw = g_viewProjection._m10_m11_m12_m13 * r2.yyyy;
  r3.xyzw = r2.xxxx * g_viewProjection._m00_m01_m02_m03 + r3.xyzw;
  r2.xyzw = r2.zzzz * g_viewProjection._m20_m21_m22_m23 + r3.xyzw;
  r2.xyzw = g_viewProjection._m30_m31_m32_m33 + r2.xyzw;
  o0.xyzw = r2.xyzw;
  o1.xyz = r0.xyz;
  o1.w = r1.x;
  o2.x = r0.w;
  o2.yzw = r7.xyz;
  
// Needs manual fix for instruction, maybe. 
//emit_stream m0
m0.Append(output); 
// Needs manual fix for instruction, maybe. 
//cut_stream m0
m0.RestartStrip(); 
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer cbPerFrame
// {
//
//   row_major float4x4 g_viewProjection;// Offset:    0 Size:    64
//   row_major float4x4 g_viewMatrix;   // Offset:   64 Size:    64
//   row_major float4x4 g_modelToWorld; // Offset:  128 Size:    64 [unused]
//   float3 g_camPosition;              // Offset:  192 Size:    12 [unused]
//   int g_cameraLHS;                   // Offset:  204 Size:     4 [unused]
//   float g_hairDensity;               // Offset:  208 Size:     4 [unused]
//   float g_densityPass;               // Offset:  212 Size:     4 [unused]
//   int g_useViewfrustrumCulling;      // Offset:  216 Size:     4 [unused]
//   int g_usePixelDensity;             // Offset:  220 Size:     4 [unused]
//   float g_lengthNoise;               // Offset:  224 Size:     4 [unused]
//   float g_lengthScale;               // Offset:  228 Size:     4 [unused]
//   float g_useBackfaceCulling;        // Offset:  232 Size:     4 [unused]
//   float g_backfaceCullingThreshold;  // Offset:  236 Size:     4 [unused]
//   float g_baseWidth;                 // Offset:  240 Size:     4 [unused]
//   float g_shadowDensityScale;        // Offset:  244 Size:     4 [unused]
//   float g_baseWidthShadowScale;      // Offset:  248 Size:     4 [unused]
//   float g_rootWidthScale;            // Offset:  252 Size:     4 [unused]
//   float g_tipWidthScale;             // Offset:  256 Size:     4 [unused]
//   float g_baseWidthNoise;            // Offset:  260 Size:     4 [unused]
//   uint g_shaderMask;                 // Offset:  264 Size:     4
//   float g_widthDummy3;               // Offset:  268 Size:     4 [unused]
//   float g_clumpScale;                // Offset:  272 Size:     4 [unused]
//   float g_clumpNoise;                // Offset:  276 Size:     4 [unused]
//   float g_clumpRoundness;            // Offset:  280 Size:     4 [unused]
//   float g_clumpDummy1;               // Offset:  284 Size:     4 [unused]
//   float g_volumeSpread;              // Offset:  288 Size:     4 [unused]
//   float g_otherDummy1;               // Offset:  292 Size:     4 [unused]
//   float g_otherDummy2;               // Offset:  296 Size:     4 [unused]
//   float g_otherDummy3;               // Offset:  300 Size:     4 [unused]
//   float g_waveScale;                 // Offset:  304 Size:     4 [unused]
//   float g_waveFreq;                  // Offset:  308 Size:     4 [unused]
//   float g_waveScaleNoise;            // Offset:  312 Size:     4 [unused]
//   float g_waveFreqNoise;             // Offset:  316 Size:     4 [unused]
//   float g_waveCutoff;                // Offset:  320 Size:     4 [unused]
//   float g_waveDummy1;                // Offset:  324 Size:     4 [unused]
//   float g_waveDummy2;                // Offset:  328 Size:     4 [unused]
//   float g_waveDummy3;                // Offset:  332 Size:     4 [unused]
//   int g_useDensityTexture;           // Offset:  336 Size:     4 [unused]
//   int g_useRootWidthTexture;         // Offset:  340 Size:     4 [unused]
//   int g_useTipWidthTexture;          // Offset:  344 Size:     4 [unused]
//   int g_useClumpScaleTexture;        // Offset:  348 Size:     4 [unused]
//   int g_useClumpNoiseTexture;        // Offset:  352 Size:     4 [unused]
//   int g_useWaveScaleTexture;         // Offset:  356 Size:     4 [unused]
//   int g_useWaveFreqTexture;          // Offset:  360 Size:     4 [unused]
//   int g_useLengthTexture;            // Offset:  364 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// cbPerFrame                        cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// Position                 0   xyz         0     NONE   float   xyz 
// TEXALONGLENGTH           0      w        0     NONE   float      w
// SCALPTEX                 0   xy          1     NONE   float   xy  
// Width                    0     z         1     NONE   float     z 
// Normal                   0   xyz         2     NONE   float   xyz 
// Tangent                  0   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// ABCD                     0   xyzw        1     NONE   float   xyzw
// EFGH                     0   xyzw        2     NONE   float   xyzw
//
gs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_input v[2][0].xyz
dcl_input v[2][0].w
dcl_input v[2][1].xy
dcl_input v[2][1].z
dcl_input v[2][2].xyz
dcl_input v[2][3].xyz
dcl_temps 9
dcl_inputprimitive line 
dcl_stream m0
dcl_outputtopology trianglestrip 
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_maxout 4
eq r0.x, v[0][1].z, l(0.000000)
eq r0.y, v[1][1].z, l(0.000000)
and r0.x, r0.y, r0.x
if_nz r0.x
  ret 
endif 
dp3 r0.x, v[0][3].xyzx, v[0][3].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v[0][3].xyzx
dp3 r0.w, v[1][3].xyzx, v[1][3].xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v[1][3].xyzx
mov r2.z, cb0[5].z
mov r2.x, cb0[6].z
mov r2.y, cb0[4].z
mul r3.xyz, r0.yzxy, r2.xyzx
mad r3.xyz, r2.zxyz, r0.zxyz, -r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mul r4.xyz, r1.yzxy, r2.xyzx
mad r2.xyz, r2.zxyz, r1.zxyz, -r4.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mad r4.xyz, -v[0][1].zzzz, r3.xyzx, v[0][0].xyzx
mad r3.xyz, v[0][1].zzzz, r3.xyzx, v[0][0].xyzx
mad r5.xyz, -v[1][1].zzzz, r2.xyzx, v[1][0].xyzx
mad r2.xyz, v[1][1].zzzz, r2.xyzx, v[1][0].xyzx
and r6.xyzw, cb0[16].zzzz, l(4, 2, 1, 8)
mul r0.w, l(2048.000000), v[0][1].y
round_ni r0.w, r0.w
add r0.w, r0.w, v[0][1].x
max r7.xy, l(-1.000000, -1.000000, 0.000000, 0.000000), v[0][2].xyxx
min r7.xy, r7.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mul r1.w, r7.y, l(2048.000000)
round_ni r1.w, r1.w
add r7.x, r7.x, r1.w
mov r7.y, v[0][2].z
mov r7.z, l(0)
movc r7.xyz, r6.yyyy, r7.xyzx, l(0,0,0,0)
movc r0.xyzw, r6.zzzx, r0.xyzw, l(0,0,0,0)
movc r1.w, r6.w, v[0][0].w, l(0)
mul r8.xyzw, r4.yyyy, cb0[1].xyzw
mad r8.xyzw, r4.xxxx, cb0[0].xyzw, r8.xyzw
mad r4.xyzw, r4.zzzz, cb0[2].xyzw, r8.xyzw
add r4.xyzw, r4.xyzw, cb0[3].xyzw
mov o0.xyzw, r4.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.w
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
mul r4.xyzw, r3.yyyy, cb0[1].xyzw
mad r4.xyzw, r3.xxxx, cb0[0].xyzw, r4.xyzw
mad r3.xyzw, r3.zzzz, cb0[2].xyzw, r4.xyzw
add r3.xyzw, r3.xyzw, cb0[3].xyzw
mov o0.xyzw, r3.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.w
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
movc r0.xyz, r6.zzzz, r1.xyzx, l(0,0,0,0)
movc r1.x, r6.w, v[1][0].w, l(0)
mul r3.xyzw, r5.yyyy, cb0[1].xyzw
mad r3.xyzw, r5.xxxx, cb0[0].xyzw, r3.xyzw
mad r3.xyzw, r5.zzzz, cb0[2].xyzw, r3.xyzw
add r3.xyzw, r3.xyzw, cb0[3].xyzw
mov o0.xyzw, r3.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.x
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
mul r3.xyzw, r2.yyyy, cb0[1].xyzw
mad r3.xyzw, r2.xxxx, cb0[0].xyzw, r3.xyzw
mad r2.xyzw, r2.zzzz, cb0[2].xyzw, r3.xyzw
add r2.xyzw, r2.xyzw, cb0[3].xyzw
mov o0.xyzw, r2.xyzw
mov o1.xyz, r0.xyzx
mov o1.w, r1.x
mov o2.x, r0.w
mov o2.yzw, r7.xxyz
emit_stream m0
cut_stream m0
ret 
// Approximately 88 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
T:\Games\Far Cry 4\bin\wrapper1349(83,14): error X3004: undeclared identifier 'v'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
