//Helicopter bloom - disable
Texture3D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[4];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[25];
}


#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TANGENT0,
  float2 v2 : BLENDWEIGHT0,
  float2 v3 : TEXCOORD0,
  float4 v4 : TEXCOORD1,
  float4 v5 : TEXCOORD2,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD5,
  out float4 o4 : TEXCOORD6,
  out float4 o5 : TEXCOORD8,
  out float4 o6 : SV_POSITION0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = v3.xy;
  o1.xyzw = v4.xyzw;
  o2.xyzw = v5.xyzw;
  r0.xyzw = cb0[1].xyzw * v0.yyyy;
  r0.xyzw = cb0[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb0[2].xyzw * v0.zzzz + r0.xyzw;
  r0.xyzw = cb0[3].xyzw * v0.wwww + r0.xyzw;
  r1.xy = v1.xy * v1.zw;
  r1.zw = float2(-5.000000e-001,-5.000000e-001) + v3.xy;
  r1.xy = r1.xy * r1.zw;
  sincos(v2.x, r2.x, r3.x);
  r4.xyzw = cb0[23].xyzw * r2.xxxx;
  r4.xyzw = -r3.xxxx * cb0[24].xyzw + r4.xyzw;
  r0.xyzw = r1.xxxx * r4.xyzw + r0.xyzw;
  r3.xyzw = cb0[23].xyzw * r3.xxxx;
  r2.xyzw = r2.xxxx * cb0[24].xyzw + r3.xyzw;
  r0.xyzw = r1.yyyy * r2.xyzw + r0.xyzw;
  r1.xyzw = cb1[1].xyzw * r0.yyyy;
  r1.xyzw = cb1[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb1[2].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb1[3].xyzw * r0.wwww + r1.xyzw;
  
float4 s=StereoParams.Load(0);
float4 r10;
r10=r0;
r10.x -= s.x*(r10.w-s.y);  
  
  
  o3.xyzw = r0.xyzw;
  o4.xyzw = v4.xyzw;
  r1.x = saturate(3.004807804e-004 * r0.w);
  r1.x = r1.x * 3.906250000e-001 + 7.812500000e-003;
  r1.yzw = float3(-3.328000e+003,-1.971200e+004,-1.671680e+005) + r0.www;
  r1.yzw = saturate(float3(6.103516e-005,1.356337e-005,7.629395e-006) * r1.yzw);
  r1.x = r1.y * 2.343750000e-001 + r1.x;
  r1.x = r1.z * 2.812500000e-001 + r1.x;
  r1.z = r1.w * 6.250000000e-002 + r1.x;
  r2.xy = r0.xy / r0.ww;
o6.xyzw = r10.xyzw;
  r1.xy = r2.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.xyzw = t0.SampleLevel(s0_s, r1.xyz, 0.000000000e+000).xyzw;
  o5.xyz = r0.xyz * r0.xyz;
  o5.w = r0.w;
  
  
  o6=0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.1.30 on Fri Jul 10 00:09:25 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TANGENT                  0   xyzw        1     NONE   float   xyzw
// BLENDWEIGHT              0   xy          2     NONE   float   x   
// TEXCOORD                 0   xy          3     NONE   float   xy  
// TEXCOORD                 1   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 5   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float   xyzw
// TEXCOORD                 8   xyzw        5     NONE   float   xyzw
// SV_POSITION              0   xyzw        6      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.x
dcl_input v3.xy
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output o0.xy
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output_siv o6.xyzw, position
dcl_temps 5
mov o0.xy, v3.xyxx
mov o1.xyzw, v4.xyzw
mov o2.xyzw, v5.xyzw
mul r0.xyzw, v0.yyyy, cb0[1].xyzw
mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb0[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb0[3].xyzw, v0.wwww, r0.xyzw
mul r1.xy, v1.zwzz, v1.xyxx
add r1.zw, v3.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r1.xy, r1.zwzz, r1.xyxx
sincos r2.x, r3.x, v2.x
mul r4.xyzw, r2.xxxx, cb0[23].xyzw
mad r4.xyzw, -r3.xxxx, cb0[24].xyzw, r4.xyzw
mad r0.xyzw, r1.xxxx, r4.xyzw, r0.xyzw
mul r3.xyzw, r3.xxxx, cb0[23].xyzw
mad r2.xyzw, r2.xxxx, cb0[24].xyzw, r3.xyzw
mad r0.xyzw, r1.yyyy, r2.xyzw, r0.xyzw
mul r1.xyzw, r0.yyyy, cb1[1].xyzw
mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb1[3].xyzw, r0.wwww, r1.xyzw
mov o3.xyzw, r0.xyzw
mov o4.xyzw, v4.xyzw
mul_sat r1.x, r0.w, l(0.000300)
mad r1.x, r1.x, l(0.390625), l(0.007813)
add r1.yzw, r0.wwww, l(0.000000, -3328.000000, -19712.000000, -167168.000000)
mul_sat r1.yzw, r1.yyzw, l(0.000000, 0.000061, 0.000014, 0.000008)
mad r1.x, r1.y, l(0.234375), r1.x
mad r1.x, r1.z, l(0.281250), r1.x
mad r1.z, r1.w, l(0.062500), r1.x
div r2.xy, r0.xyxx, r0.wwww
mov o6.xyzw, r0.xyzw
mad r1.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
mul o5.xyz, r0.xyzx, r0.xyzx
mov o5.w, r0.w
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
