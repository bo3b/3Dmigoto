//Halos on the sea (FRockOceanWavesVertexShader<0>)
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[4];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[34];
}


#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float v0 : SPLITPOS0,
  float v1 : SPLITPOS1,
  float v2 : SPLITPOS2,
  float2 v3 : TEXCOORD0,
  float4 v4 : COLOR0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : SV_POSITION0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = cb0[7].xyzw * v1.xxxx;
  r0.xyzw = cb0[6].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb0[8].xyzw * v2.xxxx + r0.xyzw;
  r0.xyzw = cb0[9].xyzw + r0.xyzw;
  r1.xyzw = cb0[11].xyxy + r0.xyxy;
  r2.xy = -cb0[18].xy + r1.zw;
  r2.xy = cb0[17].xy * r2.xy;
  r2.xyz = t1.SampleLevel(s1_s, r2.xy, 0.000000000e+000).xyz;
  r3.xyzw = r2.xyxy * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r4.xyzw = cb0[15].xyzw * cb0[10].xxxx;
  r5.xyzw = cb0[16].xyxy * r4.xxyy;
  r5.xyzw = r1.zwzw * cb0[13].xxyy + r5.xyzw;
  r6.xy = r3.zw * float2(-1.750000e-001,-1.750000e-001) + r5.xy;
  r6.zw = r3.xy * float2(-1.531250e-001,-1.531250e-001) + r5.zw;
  r4.xyzw = cb0[16].xyxy * r4.zzww;
  r1.xyzw = r1.xyzw * cb0[13].zzww + r4.xyzw;
  r4.xy = r3.zw * float2(-4.375000e-002,-4.375000e-002) + r1.xy;
  r4.zw = r3.zw * float2(-2.187500e-002,-2.187500e-002) + r1.zw;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = sqrt(r1.x);
  r1.xyz = float3(6.666667e-005,5.000000e-005,3.333333e-005) * r1.xxx;
  r2.xyw = t0.SampleLevel(s0_s, r6.xy, r1.x).xyz;
  r2.xyw = r2.xyw * float3(2.000000e+000,2.000000e+000,1.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-0.000000e+000);
  r1.xyw = t0.SampleLevel(s0_s, r6.zw, r1.y).xyz;
  r1.xyw = r1.xyw * float3(2.000000e+000,2.000000e+000,1.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-0.000000e+000);
  r1.xyw = cb0[14].yyy * r1.xyw;
  r1.xyw = float3(1.000000e+000,1.000000e+000,7.500000e-001) * r1.xyw;
  r1.xyw = r2.xyw * cb0[14].xxx + r1.xyw;
  r2.xyw = t0.SampleLevel(s0_s, r4.xy, r1.z).xyz;
  r2.xyw = r2.xyw * float3(2.000000e+000,2.000000e+000,1.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-0.000000e+000);
  r2.xyw = cb0[14].zzz * r2.xyw;
  r1.xyw = r2.xyw * float3(1.000000e+000,1.000000e+000,5.000000e-001) + r1.xyw;
  r2.xyw = t0.SampleLevel(s0_s, r4.zw, r1.z).xyz;
  r2.xyw = r2.xyw * float3(2.000000e+000,2.000000e+000,1.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-0.000000e+000);
  r2.xyw = cb0[14].www * r2.xyw;
  r1.xyz = r2.xyw * float3(1.000000e+000,1.000000e+000,5.000000e-001) + r1.xyw;
  r1.z = r1.z * r2.z;
  r0.z = -cb0[12].x + r0.z;
  r1.w = cb0[12].y * r1.z;
  r0.z = r1.w * cb0[12].x + r0.z;
  r1.w = r1.z * r1.z;
  r1.z = -r1.w * r1.z + 1.000000000e+000;
  r1.z = cb0[12].y * r1.z;
  r1.xy = -cb0[12].xx * r1.xy;
  r1.xy = r1.zz * r1.xy;
  r1.xy = r1.xy * float2(8.000000e-001,8.000000e-001) + r0.xy;
  r1.w = r0.z;
  r0.x = 0.000000000e+000;
  while (true) {
    r0.y = cmp((uint)r0.x >= asuint(cb0[18].w));
    if (r0.y != 0) break;
    r1.z = r1.w;
    r2.xyz = cb0[11].xyz + r1.xyz;
    r0.y = (uint)r0.x << 2;
    r3.xyz = cb0[r0.y+23].xyz * r2.yyy;
    r2.xyw = cb0[r0.y+22].xyz * r2.xxx + r3.xyz;
    r2.xyw = cb0[r0.y+24].xyz * r2.zzz + r2.xyw;
    r2.xyw = cb0[r0.y+25].xyz + r2.xyw;
    r2.xy = float2(-5.000000e-001,-5.000000e-001) + r2.xy;
    r2.xy = abs(r2.xy) + abs(r2.xy);
    r0.y = max(r2.x, r2.y);
    r1.z = -cb0[r0.x+19].x + 1.000000000e+000;
    r0.y = -r1.z + r0.y;
    r0.y = saturate(r0.y / cb0[r0.x+19].x);
    r1.z = 5.000000000e-001 + -r2.w;
    r1.z = 5.000000000e-001 * r1.z;
    r1.z = -cb0[r0.x+19].y * r1.z + r2.z;
    r1.z = min(r2.z, r1.z);
    r2.x = r2.z + -r1.z;
    r0.y = r0.y * r2.x + r1.z;
    r1.w = -cb0[11].z + r0.y;
    r0.x = (int)r0.x + 1;
  }
  o3.xyz = cb0[11].xyz + r1.xyw;
  r2.xyzw = cb1[1].xyzw * r1.yyyy;
  r2.xyzw = cb1[0].xyzw * r1.xxxx + r2.xyzw;
  r2.xyzw = cb1[2].xyzw * r1.wwww + r2.xyzw;
  r0.xyzw = cb1[3].xyzw * r0.wwww + r2.xyzw;
  
float4 s=StereoParams.Load(0);
float4 r10;
r10=r0;
r0.x += s.x*(r0.w-s.y);
  
  o0.xyzw = r0.xyzw;
  o1.xyzw = r6.xyzw;
  o2.xyzw = r4.xyzw;
  o3.w = r0.w;
  o4.xyz = r1.xyw;
  o4.w = cb0[12].y;
o5.xyzw = r10.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.1.30 on Fri Jul 10 00:36:34 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SPLITPOS                 0   x           0     NONE   float   x   
// SPLITPOS                 1   x           1     NONE   float   x   
// SPLITPOS                 2   x           2     NONE   float   x   
// TEXCOORD                 0   xy          3     NONE   float       
// COLOR                    0   xyzw        4     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// SV_POSITION              0   xyzw        5      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[34], dynamicIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input v0.x
dcl_input v1.x
dcl_input v2.x
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output_siv o5.xyzw, position
dcl_temps 7
mul r0.xyzw, v1.xxxx, cb0[7].xyzw
mad r0.xyzw, cb0[6].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb0[8].xyzw, v2.xxxx, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[9].xyzw
add r1.xyzw, r0.xyxy, cb0[11].xyxy
add r2.xy, r1.zwzz, -cb0[18].xyxx
mul r2.xy, r2.xyxx, cb0[17].xyxx
sample_l_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s1, l(0.000000)
mad r3.xyzw, r2.xyxy, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r4.xyzw, cb0[10].xxxx, cb0[15].xyzw
mul r5.xyzw, r4.xxyy, cb0[16].xyxy
mad r5.xyzw, r1.zwzw, cb0[13].xxyy, r5.xyzw
mad r6.xy, r3.zwzz, l(-0.175000, -0.175000, 0.000000, 0.000000), r5.xyxx
mad r6.zw, r3.xxxy, l(0.000000, 0.000000, -0.153125, -0.153125), r5.zzzw
mul r4.xyzw, r4.zzww, cb0[16].xyxy
mad r1.xyzw, r1.xyzw, cb0[13].zzww, r4.xyzw
mad r4.xy, r3.zwzz, l(-0.043750, -0.043750, 0.000000, 0.000000), r1.xyxx
mad r4.zw, r3.zzzw, l(0.000000, 0.000000, -0.021875, -0.021875), r1.zzzw
dp3 r1.x, r0.xyzx, r0.xyzx
sqrt r1.x, r1.x
mul r1.xyz, r1.xxxx, l(0.000067, 0.000050, 0.000033, 0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.xyw, r6.xyxx, t0.xywz, s0, r1.x
mad r2.xyw, r2.xyxw, l(2.000000, 2.000000, 0.000000, 1.000000), l(-1.000000, -1.000000, 0.000000, -0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.xyw, r6.zwzz, t0.xywz, s0, r1.y
mad r1.xyw, r1.xyxw, l(2.000000, 2.000000, 0.000000, 1.000000), l(-1.000000, -1.000000, 0.000000, -0.000000)
mul r1.xyw, r1.xyxw, cb0[14].yyyy
mul r1.xyw, r1.xyxw, l(1.000000, 1.000000, 0.000000, 0.750000)
mad r1.xyw, r2.xyxw, cb0[14].xxxx, r1.xyxw
sample_l_indexable(texture2d)(float,float,float,float) r2.xyw, r4.xyxx, t0.xywz, s0, r1.z
mad r2.xyw, r2.xyxw, l(2.000000, 2.000000, 0.000000, 1.000000), l(-1.000000, -1.000000, 0.000000, -0.000000)
mul r2.xyw, r2.xyxw, cb0[14].zzzz
mad r1.xyw, r2.xyxw, l(1.000000, 1.000000, 0.000000, 0.500000), r1.xyxw
sample_l_indexable(texture2d)(float,float,float,float) r2.xyw, r4.zwzz, t0.xywz, s0, r1.z
mad r2.xyw, r2.xyxw, l(2.000000, 2.000000, 0.000000, 1.000000), l(-1.000000, -1.000000, 0.000000, -0.000000)
mul r2.xyw, r2.xyxw, cb0[14].wwww
mad r1.xyz, r2.xywx, l(1.000000, 1.000000, 0.500000, 0.000000), r1.xywx
mul r1.z, r2.z, r1.z
add r0.z, r0.z, -cb0[12].x
mul r1.w, r1.z, cb0[12].y
mad r0.z, r1.w, cb0[12].x, r0.z
mul r1.w, r1.z, r1.z
mad r1.z, -r1.w, r1.z, l(1.000000)
mul r1.z, r1.z, cb0[12].y
mul r1.xy, r1.xyxx, -cb0[12].xxxx
mul r1.xy, r1.xyxx, r1.zzzz
mad r1.xy, r1.xyxx, l(0.800000, 0.800000, 0.000000, 0.000000), r0.xyxx
mov r1.w, r0.z
mov r0.x, l(0)
loop 
  uge r0.y, r0.x, cb0[18].w
  breakc_nz r0.y
  mov r1.z, r1.w
  add r2.xyz, r1.xyzx, cb0[11].xyzx
  ishl r0.y, r0.x, l(2)
  mul r3.xyz, r2.yyyy, cb0[r0.y + 23].xyzx
  mad r2.xyw, cb0[r0.y + 22].xyxz, r2.xxxx, r3.xyxz
  mad r2.xyw, cb0[r0.y + 24].xyxz, r2.zzzz, r2.xyxw
  add r2.xyw, r2.xyxw, cb0[r0.y + 25].xyxz
  add r2.xy, r2.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
  add r2.xy, |r2.xyxx|, |r2.xyxx|
  max r0.y, r2.y, r2.x
  add r1.z, l(1.000000), -cb0[r0.x + 19].x
  add r0.y, r0.y, -r1.z
  div_sat r0.y, r0.y, cb0[r0.x + 19].x
  add r1.z, -r2.w, l(0.500000)
  mul r1.z, r1.z, l(0.500000)
  mad r1.z, -cb0[r0.x + 19].y, r1.z, r2.z
  min r1.z, r1.z, r2.z
  add r2.x, -r1.z, r2.z
  mad r0.y, r0.y, r2.x, r1.z
  add r1.w, r0.y, -cb0[11].z
  iadd r0.x, r0.x, l(1)
endloop 
add o3.xyz, r1.xywx, cb0[11].xyzx
mul r2.xyzw, r1.yyyy, cb1[1].xyzw
mad r2.xyzw, cb1[0].xyzw, r1.xxxx, r2.xyzw
mad r2.xyzw, cb1[2].xyzw, r1.wwww, r2.xyzw
mad r0.xyzw, cb1[3].xyzw, r0.wwww, r2.xyzw
mov o0.xyzw, r0.xyzw
mov o1.xyzw, r6.xyzw
mov o2.xyzw, r4.xyzw
mov o3.w, r0.w
mov o4.xyz, r1.xywx
mov o4.w, cb0[12].y
mov o5.xyzw, r0.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
