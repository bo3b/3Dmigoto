//Haloing - fix World Coord
Texture3D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[11];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[23];
}


#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float v0 : SPLITPOS0,
  float v1 : SPLITPOS1,
  float v2 : SPLITPOS2,
  float3 v3 : TANGENT0,
  float4 v4 : NORMAL0,
  float4 v5 : COLOR1,
  float2 v6 : TEXCOORD0,
  float2 v7 : TEXCOORD1,
  float2 v8 : TEXCOORD2,
  out float3 o0 : TEXCOORD10,
  out float4 o1 : TEXCOORD11,
  out float3 o2 : TEXCOORD0,
  out float3 o3 : TEXCOORD1,
  out float3 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : TEXCOORD8,
  out float4 o8 : SV_POSITION0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;


  
//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb1[0].xyzw;
a2.xyzw = cb1[1].xyzw;
a3.xyzw = cb1[2].xyzw;
a4.xyzw = cb1[3].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse  

  
  r0.xyz = v3.xyz * float3(2.000000e+000,2.000000e+000,2.000000e+000) + float3(-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r1.xyzw = v4.xyzw * float4(2.000000e+000,2.000000e+000,2.000000e+000,2.000000e+000) + float4(-1.000000e+000,-1.000000e+000,-1.000000e+000,-1.000000e+000);
  r2.xyz = r1.yzx * r0.xyz;
  r0.xyz = r1.xyz * r0.yzx + -r2.xyz;
  r0.xyz = r0.xyz * r1.www;
  r2.xyz = r0.xyz * r1.yzx;
  r2.xyz = r0.zxy * r1.zxy + -r2.xyz;
  r2.xyz = r2.xyz * r1.www;
  r2.yw = cb0[1].xz * r2.yy;
  r2.xy = cb0[0].xz * r2.xx + r2.yw;
  r2.xy = cb0[2].xz * r2.zz + r2.xy;
  r0.zw = cb0[1].xz * r0.zz;
  r0.yz = cb0[0].xz * r0.yy + r0.zw;
  r0.xy = cb0[2].xz * r0.xx + r0.yz;
  r2.z = r0.x;
  o1.y = r0.y;
  r0.xy = cb0[1].xz * r1.yy;
  r0.xy = cb0[0].xz * r1.xx + r0.xy;
  r0.xy = cb0[2].xz * r1.zz + r0.xy;
  o1.w = cb0[22].w * r1.w;
  r2.w = r0.x;
  o1.z = r0.y;
  o0.xyz = r2.xzw;
  o1.x = r2.y;
  o2.xy = v6.xy;
  o3.xy = v7.xy;
  o4.xy = v8.xy;
  r0.xy = float2(-5.000000e-001,-5.000000e-001) + v5.wx;
  r0.xy = r0.xy * float2(1.300708e+005,1.300708e+005) + float2(-8.641600e+004,-7.689600e+004);
  r0.xy = -cb1[10].xy + r0.xy;
  r0.z = -cb1[10].z + cb0[13].z;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -r0.x * 2.816999950e-005 + 1.000000000e+000;
  r0.x = max(0.000000000e+000, r0.x);
  r0.x = max(9.999999975e-007, r0.x);
  r0.x = r0.x * r0.x;
  r0.x = r0.x * r0.x;
  r1.xyzw = cb0[1].xyzw * v1.xxxx;
  r1.xyzw = cb0[0].xyzw * v0.xxxx + r1.xyzw;
  r1.xyzw = cb0[2].xyzw * v2.xxxx + r1.xyzw;
  r1.xyzw = cb0[3].xyzw + r1.xyzw;
  r1.xyzw = cb1[9].xyzw + r1.xyzw;
  r0.xyz = r0.xxx * float3(0.000000e+000,0.000000e+000,-6.000000e+004) + r1.xyz;
  o5.xyz = r0.xyz;
  o5.w = r1.w;
  
  
float4 r20, r21, r22;
r20.xyzw = cb1[1].xyzw * r0.yyyy;
r20.xyzw = cb1[0].xyzw * r0.xxxx + r20.xyzw;
r20.xyzw = cb1[2].xyzw * r0.zzzz + r20.xyzw;
r20.xyzw = cb1[3].xyzw * r1.wwww + r20.xyzw;
  
float4 s=StereoParams.Load(0);
r20.x += s.x*(r20.w-s.y); 
  
o5.xyzw = b2.xyzw * r20.yyyy;
o5.xyzw = b1.xyzw * r20.xxxx + o5.xyzw;
o5.xyzw = b3.xyzw * r20.zzzz + o5.xyzw;
o5.xyzw = b4.xyzw * r20.wwww + o5.xyzw;  
  
  
  
  
  
  
  
  
  o6.xyzw = v5.zyxw;
  r2.xyzw = cb1[1].xyzw * r0.yyyy;
  r2.xyzw = cb1[0].xyzw * r0.xxxx + r2.xyzw;
  r0.xyzw = cb1[2].xyzw * r0.zzzz + r2.xyzw;
  r0.xyzw = cb1[3].xyzw * r1.wwww + r0.xyzw;
  

  
  r1.x = saturate(3.004807804e-004 * r0.w);
  r1.x = r1.x * 3.906250000e-001 + 7.812500000e-003;
  r1.yzw = float3(-3.328000e+003,-1.971200e+004,-1.671680e+005) + r0.www;
  r1.yzw = saturate(float3(6.103516e-005,1.356337e-005,7.629395e-006) * r1.yzw);
  r1.x = r1.y * 2.343750000e-001 + r1.x;
  r1.x = r1.z * 2.812500000e-001 + r1.x;
  r1.z = r1.w * 6.250000000e-002 + r1.x;
  r2.xy = r0.xy / r0.ww;
o8.xyzw = r0.xyzw;
  r1.xy = r2.xy * float2(5.000000e-001,-5.000000e-001) + float2(5.000000e-001,5.000000e-001);
  r0.xyzw = t0.SampleLevel(s0_s, r1.xyz, 0.000000000e+000).xyzw;
  o7.xyz = r0.xyz * r0.xyz;
  o7.w = r0.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.1.30 on Thu Jul 09 23:29:21 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SPLITPOS                 0   x           0     NONE   float   x   
// SPLITPOS                 1   x           1     NONE   float   x   
// SPLITPOS                 2   x           2     NONE   float   x   
// TANGENT                  0   xyz         3     NONE   float   xyz 
// NORMAL                   0   xyzw        4     NONE   float   xyzw
// COLOR                    1   xyzw        5     NONE   float   xyzw
// TEXCOORD                 0   xy          6     NONE   float   xy  
// TEXCOORD                 1   xy          7     NONE   float   xy  
// TEXCOORD                 2   xy          8     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyz         0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xy          3     NONE   float   xy  
// TEXCOORD                 2   xy          4     NONE   float   xy  
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[23], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_input v0.x
dcl_input v1.x
dcl_input v2.x
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xy
dcl_input v7.xy
dcl_input v8.xy
dcl_output o0.xyz
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xy
dcl_output o4.xy
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output_siv o8.xyzw, position
dcl_temps 3
mad r0.xyz, v3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r1.xyzw, v4.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mul r2.xyz, r0.xyzx, r1.yzxy
mad r0.xyz, r1.xyzx, r0.yzxy, -r2.xyzx
mul r0.xyz, r1.wwww, r0.xyzx
mul r2.xyz, r1.yzxy, r0.xyzx
mad r2.xyz, r0.zxyz, r1.zxyz, -r2.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
mul r2.yw, r2.yyyy, cb0[1].xxxz
mad r2.xy, cb0[0].xzxx, r2.xxxx, r2.ywyy
mad r2.xy, cb0[2].xzxx, r2.zzzz, r2.xyxx
mul r0.zw, r0.zzzz, cb0[1].xxxz
mad r0.yz, cb0[0].xxzx, r0.yyyy, r0.zzwz
mad r0.xy, cb0[2].xzxx, r0.xxxx, r0.yzyy
mov r2.z, r0.x
mov o1.y, r0.y
mul r0.xy, r1.yyyy, cb0[1].xzxx
mad r0.xy, cb0[0].xzxx, r1.xxxx, r0.xyxx
mad r0.xy, cb0[2].xzxx, r1.zzzz, r0.xyxx
mul o1.w, r1.w, cb0[22].w
mov r2.w, r0.x
mov o1.z, r0.y
mov o0.xyz, r2.xzwx
mov o1.x, r2.y
mov o2.xy, v6.xyxx
mov o3.xy, v7.xyxx
mov o4.xy, v8.xyxx
add r0.xy, v5.wxww, l(-0.500000, -0.500000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(130070.773438, 130070.773438, 0.000000, 0.000000), l(-86416.000000, -76896.000000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, -cb1[10].xyxx
add r0.z, cb0[13].z, -cb1[10].z
dp3 r0.x, r0.xyzx, r0.xyzx
sqrt r0.x, r0.x
mad r0.x, -r0.x, l(0.000028), l(1.000000)
max r0.x, r0.x, l(0.000000)
max r0.x, r0.x, l(0.000001)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r0.x
mul r1.xyzw, v1.xxxx, cb0[1].xyzw
mad r1.xyzw, cb0[0].xyzw, v0.xxxx, r1.xyzw
mad r1.xyzw, cb0[2].xyzw, v2.xxxx, r1.xyzw
add r1.xyzw, r1.xyzw, cb0[3].xyzw
add r1.xyzw, r1.xyzw, cb1[9].xyzw
mad r0.xyz, r0.xxxx, l(0.000000, 0.000000, -60000.000000, 0.000000), r1.xyzx
mov o5.xyz, r0.xyzx
mov o5.w, r1.w
mov o6.xyzw, v5.zyxw
mul r2.xyzw, r0.yyyy, cb1[1].xyzw
mad r2.xyzw, cb1[0].xyzw, r0.xxxx, r2.xyzw
mad r0.xyzw, cb1[2].xyzw, r0.zzzz, r2.xyzw
mad r0.xyzw, cb1[3].xyzw, r1.wwww, r0.xyzw
mul_sat r1.x, r0.w, l(0.000300)
mad r1.x, r1.x, l(0.390625), l(0.007813)
add r1.yzw, r0.wwww, l(0.000000, -3328.000000, -19712.000000, -167168.000000)
mul_sat r1.yzw, r1.yyzw, l(0.000000, 0.000061, 0.000014, 0.000008)
mad r1.x, r1.y, l(0.234375), r1.x
mad r1.x, r1.z, l(0.281250), r1.x
mad r1.z, r1.w, l(0.062500), r1.x
div r2.xy, r0.xyxx, r0.wwww
mov o8.xyzw, r0.xyzw
mad r1.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
mul o7.xyz, r0.xyzx, r0.xyzx
mov o7.w, r0.w
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 