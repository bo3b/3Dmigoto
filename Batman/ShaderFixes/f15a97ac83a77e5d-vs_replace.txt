//Halo - fix world coord
Texture3D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[33];
}


#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float3 v2 : TANGENT0,
  float2 v3 : BLENDWEIGHT0,
  float4 v4 : TEXCOORD0,
  float4 v5 : TEXCOORD1,
  float4 v6 : TEXCOORD3,
  out float4 o0 : TEXCOORD10,
  out float4 o1 : TEXCOORD11,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : TEXCOORD8,
  out float4 o8 : SV_POSITION0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;

//Work out Inverse
//...Variables
float4 a1, a2, a3, a4;
float4 b1, b2, b3, b4;
float det;
//...Original Matrix
a1.xyzw = cb1[0].xyzw;
a2.xyzw = cb1[1].xyzw;
a3.xyzw = cb1[2].xyzw;
a4.xyzw = cb1[3].xyzw;
//...Determinant
det  = a1.x*(a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y));
det += a1.y*(a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.z) + a2.w*(a3.z*a4.x - a3.x*a4.z));
det += a1.z*(a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x));
det += a1.w*(a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y));
//...Inverse Matrix Elements
b1.x = a2.y*(a3.z*a4.w - a3.w*a4.z) + a2.z*(a3.w*a4.y - a3.y*a4.w) + a2.w*(a3.y*a4.z - a3.z*a4.y);
b1.y = a1.y*(a3.w*a4.z - a3.z*a4.w) + a1.z*(a3.y*a4.w - a3.w*a4.y) + a1.w*(a3.z*a4.y - a3.y*a4.z);
b1.z = a1.y*(a2.z*a4.w - a2.w*a4.z) + a1.z*(a2.w*a4.y - a2.y*a4.w) + a1.w*(a2.y*a4.z - a2.z*a4.y);
b1.w = a1.y*(a2.w*a3.z - a2.z*a3.w) + a1.z*(a2.y*a3.w - a2.w*a3.y) + a1.w*(a2.z*a3.y - a2.y*a3.z);
b2.x = a2.x*(a3.w*a4.z - a3.z*a4.w) + a2.z*(a3.x*a4.w - a3.w*a4.x) + a2.w*(a3.z*a4.x - a3.x*a4.z);
b2.y = a1.x*(a3.z*a4.w - a3.w*a4.z) + a1.z*(a3.w*a4.x - a3.x*a4.w) + a1.w*(a3.x*a4.z - a3.z*a4.x);
b2.z = a1.x*(a2.w*a4.z - a2.z*a4.w) + a1.z*(a2.x*a4.w - a2.w*a4.x) + a1.w*(a2.z*a4.x - a2.x*a4.z);
b2.w = a1.x*(a2.z*a3.w - a2.w*a3.z) + a1.z*(a2.w*a3.x - a2.x*a3.w) + a1.w*(a2.x*a3.z - a2.z*a3.x);
b3.x = a2.x*(a3.y*a4.w - a3.w*a4.y) + a2.y*(a3.w*a4.x - a3.x*a4.w) + a2.w*(a3.x*a4.y - a3.y*a4.x);
b3.y = a1.x*(a3.w*a4.y - a3.y*a4.w) + a1.y*(a3.x*a4.w - a3.w*a4.x) + a1.w*(a3.y*a4.x - a3.x*a4.y);
b3.z = a1.x*(a2.y*a4.w - a2.w*a4.y) + a1.y*(a2.w*a4.x - a2.x*a4.w) + a1.w*(a2.x*a4.y - a2.y*a4.x);
b3.w = a1.x*(a2.w*a3.y - a2.y*a3.w) + a1.y*(a2.x*a3.w - a2.w*a3.x) + a1.w*(a2.y*a3.x - a2.x*a3.y);
b4.x = a2.x*(a3.z*a4.y - a3.y*a4.z) + a2.y*(a3.x*a4.z - a3.z*a4.x) + a2.z*(a3.y*a4.x - a3.x*a4.y);
b4.y = a1.x*(a3.y*a4.z - a3.z*a4.y) + a1.y*(a3.z*a4.x - a3.x*a4.z) + a1.z*(a3.x*a4.y - a3.y*a4.x);
b4.z = a1.x*(a2.z*a4.y - a2.y*a4.z) + a1.y*(a2.x*a4.z - a2.z*a4.x) + a1.z*(a2.y*a4.x - a2.x*a4.y);
b4.w = a1.x*(a2.y*a3.z - a2.z*a3.y) + a1.y*(a2.z*a3.x - a2.x*a3.z) + a1.z*(a2.x*a3.y - a2.y*a3.x);
b1.xyzw /= det;
b2.xyzw /= det;
b3.xyzw /= det;
b4.xyzw /= det;
//End Inverse  

  float4 x0[4];
  x0[0].xy = float2(0,0);
  x0[1].xy = float2(0,1);
  x0[2].xy = float2(1,1);
  x0[3].xy = float2(1,0);
  r0.w = 0;
  r1.xyz = cb0[1].xyz * v1.yyy;
  r1.xyz = cb0[0].xyz * v1.xxx + r1.xyz;
  r1.xyz = cb0[2].xyz * v1.zzz + r1.xyz;
  r1.xyz = cb0[3].xyz * v1.www + r1.xyz;
  r2.xyzw = cb0[1].xyzw * v0.yyyy;
  r2.xyzw = cb0[0].xyzw * v0.xxxx + r2.xyzw;
  r2.xyzw = cb0[2].xyzw * v0.zzzz + r2.xyzw;
  r2.xyzw = cb0[3].xyzw * v0.wwww + r2.xyzw;
  r1.xyz = r2.xyz + -r1.xyz;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = max(0.00999999978, r1.w);
  r1.w = sqrt(r1.w);
  r1.xyz = r1.xyz / r1.www;
  r3.xyz = cb1[8].zxy + -r2.zxy;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = max(0.00999999978, r1.w);
  r1.w = sqrt(r1.w);
  r3.xyz = r3.xyz / r1.www;
  r4.xyz = r3.xyz * r1.yzx;
  r4.xyz = r3.zxy * r1.zxy + -r4.xyz;
  r1.xyz = cb0[32].yyy * -r1.xyz;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = max(0.00999999978, r3.w);
  r3.w = sqrt(r3.w);
  r4.xyz = r4.xyz / r3.www;
  r4.xyz = cb0[32].yyy * r4.xyz;
  r4.w = 0;
  sincos(v3.x, r5.x, r6.x);
  r7.xyzw = cb0[23].xyzw * r5.xxxx;
  r7.xyzw = -r6.xxxx * cb0[24].xyzw + r7.xyzw;
  r4.xyzw = r7.xyzw * cb0[32].xxxx + r4.xyzw;
  r3.w = (int)cb0[29].x;
  r5.yzw = cb0[r3.w+30].yzx * r3.xyz;
  r5.yzw = r3.zxy * cb0[r3.w+30].zxy + -r5.yzw;
  r6.y = dot(r5.yzw, r5.yzw);
  r6.y = max(0.00999999978, r6.y);
  r6.y = sqrt(r6.y);
  r5.yzw = r5.yzw / r6.yyy;
  r5.yzw = cb0[r3.w+30].www * r5.yzw;
  r7.x = (int)r3.w ? cb0[r3.w+30].x : r5.y; r8.x = (int)r3.w ? r5.y : cb0[r3.w+30].x;
  r7.y = (int)r3.w ? cb0[r3.w+30].y : r5.z; r8.y = (int)r3.w ? r5.z : cb0[r3.w+30].y;
  r7.z = (int)r3.w ? cb0[r3.w+30].z : r5.w; r8.z = (int)r3.w ? r5.w : cb0[r3.w+30].z;
  r0.xyz = cb0[32].zzz * r8.xyz;
  r7.xyz = cb0[32].zzz * r7.xyz;
  r0.xyzw = r4.xyzw + r0.xyzw;
  r4.xyz = float3(0,1,0) * r3.xyz;
  r4.xyz = r3.zxy * float3(1,0,0) + -r4.xyz;
  r3.w = dot(r4.xy, r4.xy);
  r3.w = max(0.00999999978, r3.w);
  r3.w = sqrt(r3.w);
  r4.xyz = r4.xyz / r3.www;
  r5.yzw = r4.zxy * r3.zxy;
  r3.xyz = r4.yzx * r3.xyz + -r5.yzw;
  r3.w = dot(r3.xyz, r3.xyz);
  r3.w = max(0.00999999978, r3.w);
  r3.w = sqrt(r3.w);
  r3.xyz = r3.xyz / r3.www;
  r8.w = 0;
  r8.xyz = r5.xxx * r4.xyz;
  r4.xyz = r6.xxx * r4.xyz;
  r3.w = 0;
  r8.xyzw = r6.xxxx * r3.xyzw + r8.xyzw;
  r0.xyzw = r8.xyzw * cb0[32].wwww + r0.xyzw;
  r6.xyzw = cb0[23].xyzw * r6.xxxx;
  r6.xyzw = r5.xxxx * cb0[24].xyzw + r6.xyzw;
  r1.w = 0;
  r1.xyzw = r6.xyzw * cb0[32].xxxx + r1.xyzw;
  r7.w = 0;
  r1.xyzw = r7.xyzw + r1.xyzw;
  r4.w = 0;
  r3.xyzw = r5.xxxx * -r3.xyzw + r4.xyzw;
  r1.xyzw = r3.xyzw * cb0[32].wwww + r1.xyzw;
  r3.xyz = r1.zxy * r0.xyz;
  r3.xyz = r0.zxy * r1.xyz + -r3.xyz;
  r3.w = dot(r3.xyz, r3.xyz);
  r3.w = rsqrt(r3.w);
  r3.xyz = r3.xyz * r3.www;
  r4.xyz = -cb0[27].xyz + r2.xyz;
  r3.w = dot(cb0[28].xyz, r4.xyz);
  r5.xyz = r3.www * cb0[28].yzx + cb0[27].yzx;
  r5.xyz = -r5.xyz + r2.yzx;
  r3.w = dot(r5.xyz, r5.xyz);
  r3.w = rsqrt(r3.w);
  r5.xyz = r5.xyz * r3.www;
  r3.w = dot(r4.xyz, r4.xyz);
  r3.w = rsqrt(r3.w);
  r4.xyz = r4.yzx * r3.www;
  r6.xy = cmp(cb0[26].xx < float2(0.5,1.5));
  r4.xyz = r6.yyy ? r4.xyz : r5.xyz;
  r3.xyz = r6.xxx ? r3.xyz : r4.xyz;
  r4.xy = cb0[1].xz * r3.xx;
  r4.xy = cb0[0].xz * r3.zz + r4.xy;
  r4.xy = cb0[2].xz * r3.yy + r4.xy;
  o0.z = r4.x;
  o1.z = r4.y;
  r4.xy = cb0[1].xz * r0.yy;
  r4.xy = cb0[0].xz * r0.xx + r4.xy;
  r4.xy = cb0[2].xz * r0.zz + r4.xy;
  o0.x = r4.x;
  o1.x = r4.y;
  r4.xy = cb0[1].xz * r1.yy;
  r4.xy = cb0[0].xz * r1.xx + r4.xy;
  r4.xy = cb0[2].xz * r1.zz + r4.xy;
  o0.y = r4.x;
  o1.y = r4.y;
  o0.w = 0;
  r4.xyz = r3.xyz * r1.zxy;
  r3.xyz = r1.yzx * r3.yzx + -r4.xyz;
  r3.x = dot(r3.xyz, r0.xyz);
  r3.y = cmp(0 < r3.x);
  r3.x = cmp(r3.x < 0);
  r3.x = (int)-r3.y + (int)r3.x;
  o1.w = (int)r3.x;
  o2.xy = v4.xy;
  o3.xyzw = v5.xyzw;
  o4.xyzw = v6.xyzw;
  r3.x = (uint)v3.y;
  r3.y = x0[r3.x+0].x;
  r3.x = x0[r3.x+0].y;
  r3.xy = cb0[25].zy + r3.xy;
  r3.xy = v2.yx * r3.xy;
  r0.xyzw = r3.yyyy * r0.xyzw + r2.xyzw;
  r0.xyzw = r3.xxxx * r1.xyzw + r0.xyzw;
  o5.xyzw = r0.xyzw;

float4 r20, r21, r22;
r20.xyzw = cb1[1].xyzw * r0.yyyy;
r20.xyzw = cb1[0].xyzw * r0.xxxx + r20.xyzw;
r20.xyzw = cb1[2].xyzw * r0.zzzz + r20.xyzw;
r20.xyzw = cb1[3].xyzw * r1.wwww + r20.xyzw;
  
float4 s=StereoParams.Load(0);
r20.x += s.x*(r20.w-s.y); 
  
o5.xyzw = b2.xyzw * r20.yyyy;
o5.xyzw = b1.xyzw * r20.xxxx + o5.xyzw;
o5.xyzw = b3.xyzw * r20.zzzz + o5.xyzw;
o5.xyzw = b4.xyzw * r20.wwww + o5.xyzw;    
  
  o6.xyzw = v5.xyzw;
  r1.xyzw = cb1[1].xyzw * r0.yyyy;
  r1.xyzw = cb1[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb1[2].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb1[3].xyzw * r0.wwww + r1.xyzw;
  r1.x = saturate(0.00030048078 * r0.w);
  r1.x = r1.x * 0.390625 + 0.0078125;
  r1.yzw = float3(-3328,-19712,-167168) + r0.www;
  r1.yzw = saturate(float3(6.10351563e-005,1.35633682e-005,7.62939453e-006) * r1.yzw);
  r1.x = r1.y * 0.234375 + r1.x;
  r1.x = r1.z * 0.28125 + r1.x;
  r1.z = r1.w * 0.0625 + r1.x;
  r2.xy = r0.xy / r0.ww;
  o8.xyzw = r0.xyzw;
  r1.xy = r2.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  r0.xyzw = t0.SampleLevel(s0_s, r1.xyz, 0).xyzw;
  o7.xyz = r0.xyz * r0.xyz;
  o7.w = r0.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.1.33 on Tue Jul 14 21:47:15 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TANGENT                  0   xyz         2     NONE   float   xy  
// BLENDWEIGHT              0   xy          3     NONE   float   xy  
// TEXCOORD                 0   xy          4     NONE   float   xy  
// TEXCOORD                 1   xyzw        5     NONE   float   xyzw
// TEXCOORD                 3   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyzw        0     NONE   float   xyzw
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 8   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[33], dynamicIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture3d (float,float,float,float) t0
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xy
dcl_input v4.xy
dcl_input v5.xyzw
dcl_input v6.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output_siv o8.xyzw, position
dcl_temps 9
dcl_indexableTemp x0[4], 4
mov x0[0].xy, l(0,0,0,0)
mov x0[1].xy, l(0,1.000000,0,0)
mov x0[2].xy, l(1.000000,1.000000,0,0)
mov x0[3].xy, l(1.000000,0,0,0)
mov r0.w, l(0)
mul r1.xyz, v1.yyyy, cb0[1].xyzx
mad r1.xyz, cb0[0].xyzx, v1.xxxx, r1.xyzx
mad r1.xyz, cb0[2].xyzx, v1.zzzz, r1.xyzx
mad r1.xyz, cb0[3].xyzx, v1.wwww, r1.xyzx
mul r2.xyzw, v0.yyyy, cb0[1].xyzw
mad r2.xyzw, cb0[0].xyzw, v0.xxxx, r2.xyzw
mad r2.xyzw, cb0[2].xyzw, v0.zzzz, r2.xyzw
mad r2.xyzw, cb0[3].xyzw, v0.wwww, r2.xyzw
add r1.xyz, -r1.xyzx, r2.xyzx
dp3 r1.w, r1.xyzx, r1.xyzx
max r1.w, r1.w, l(0.010000)
sqrt r1.w, r1.w
div r1.xyz, r1.xyzx, r1.wwww
add r3.xyz, -r2.zxyz, cb1[8].zxyz
dp3 r1.w, r3.xyzx, r3.xyzx
max r1.w, r1.w, l(0.010000)
sqrt r1.w, r1.w
div r3.xyz, r3.xyzx, r1.wwww
mul r4.xyz, r1.yzxy, r3.xyzx
mad r4.xyz, r3.zxyz, r1.zxyz, -r4.xyzx
mul r1.xyz, -r1.xyzx, cb0[32].yyyy
dp3 r3.w, r4.xyzx, r4.xyzx
max r3.w, r3.w, l(0.010000)
sqrt r3.w, r3.w
div r4.xyz, r4.xyzx, r3.wwww
mul r4.xyz, r4.xyzx, cb0[32].yyyy
mov r4.w, l(0)
sincos r5.x, r6.x, v3.x
mul r7.xyzw, r5.xxxx, cb0[23].xyzw
mad r7.xyzw, -r6.xxxx, cb0[24].xyzw, r7.xyzw
mad r4.xyzw, r7.xyzw, cb0[32].xxxx, r4.xyzw
ftoi r3.w, cb0[29].x
mul r5.yzw, r3.xxyz, cb0[r3.w + 30].yyzx
mad r5.yzw, r3.zzxy, cb0[r3.w + 30].zzxy, -r5.yyzw
dp3 r6.y, r5.yzwy, r5.yzwy
max r6.y, r6.y, l(0.010000)
sqrt r6.y, r6.y
div r5.yzw, r5.yyzw, r6.yyyy
mul r5.yzw, r5.yyzw, cb0[r3.w + 30].wwww
swapc r7.xyz, r8.xyz, r3.wwww, r5.yzwy, cb0[r3.w + 30].xyzx
mul r0.xyz, r8.xyzx, cb0[32].zzzz
mul r7.xyz, r7.xyzx, cb0[32].zzzz
add r0.xyzw, r0.xyzw, r4.xyzw
mul r4.xyz, r3.xyzx, l(0.000000, 1.000000, 0.000000, 0.000000)
mad r4.xyz, r3.zxyz, l(1.000000, 0.000000, 0.000000, 0.000000), -r4.xyzx
dp2 r3.w, r4.xyxx, r4.xyxx
max r3.w, r3.w, l(0.010000)
sqrt r3.w, r3.w
div r4.xyz, r4.xyzx, r3.wwww
mul r5.yzw, r3.zzxy, r4.zzxy
mad r3.xyz, r4.yzxy, r3.xyzx, -r5.yzwy
dp3 r3.w, r3.xyzx, r3.xyzx
max r3.w, r3.w, l(0.010000)
sqrt r3.w, r3.w
div r3.xyz, r3.xyzx, r3.wwww
mov r8.w, l(0)
mul r8.xyz, r4.xyzx, r5.xxxx
mul r4.xyz, r4.xyzx, r6.xxxx
mov r3.w, l(0)
mad r8.xyzw, r6.xxxx, r3.xyzw, r8.xyzw
mad r0.xyzw, r8.xyzw, cb0[32].wwww, r0.xyzw
mul r6.xyzw, r6.xxxx, cb0[23].xyzw
mad r6.xyzw, r5.xxxx, cb0[24].xyzw, r6.xyzw
mov r1.w, l(0)
mad r1.xyzw, r6.xyzw, cb0[32].xxxx, r1.xyzw
mov r7.w, l(0)
add r1.xyzw, r1.xyzw, r7.xyzw
mov r4.w, l(0)
mad r3.xyzw, r5.xxxx, -r3.xyzw, r4.xyzw
mad r1.xyzw, r3.xyzw, cb0[32].wwww, r1.xyzw
mul r3.xyz, r0.xyzx, r1.zxyz
mad r3.xyz, r0.zxyz, r1.xyzx, -r3.xyzx
dp3 r3.w, r3.xyzx, r3.xyzx
rsq r3.w, r3.w
mul r3.xyz, r3.wwww, r3.xyzx
add r4.xyz, r2.xyzx, -cb0[27].xyzx
dp3 r3.w, cb0[28].xyzx, r4.xyzx
mad r5.xyz, r3.wwww, cb0[28].yzxy, cb0[27].yzxy
add r5.xyz, r2.yzxy, -r5.xyzx
dp3 r3.w, r5.xyzx, r5.xyzx
rsq r3.w, r3.w
mul r5.xyz, r3.wwww, r5.xyzx
dp3 r3.w, r4.xyzx, r4.xyzx
rsq r3.w, r3.w
mul r4.xyz, r3.wwww, r4.yzxy
lt r6.xy, cb0[26].xxxx, l(0.500000, 1.500000, 0.000000, 0.000000)
movc r4.xyz, r6.yyyy, r4.xyzx, r5.xyzx
movc r3.xyz, r6.xxxx, r3.xyzx, r4.xyzx
mul r4.xy, r3.xxxx, cb0[1].xzxx
mad r4.xy, cb0[0].xzxx, r3.zzzz, r4.xyxx
mad r4.xy, cb0[2].xzxx, r3.yyyy, r4.xyxx
mov o0.z, r4.x
mov o1.z, r4.y
mul r4.xy, r0.yyyy, cb0[1].xzxx
mad r4.xy, cb0[0].xzxx, r0.xxxx, r4.xyxx
mad r4.xy, cb0[2].xzxx, r0.zzzz, r4.xyxx
mov o0.x, r4.x
mov o1.x, r4.y
mul r4.xy, r1.yyyy, cb0[1].xzxx
mad r4.xy, cb0[0].xzxx, r1.xxxx, r4.xyxx
mad r4.xy, cb0[2].xzxx, r1.zzzz, r4.xyxx
mov o0.y, r4.x
mov o1.y, r4.y
mov o0.w, l(0)
mul r4.xyz, r1.zxyz, r3.xyzx
mad r3.xyz, r1.yzxy, r3.yzxy, -r4.xyzx
dp3 r3.x, r3.xyzx, r0.xyzx
lt r3.y, l(0.000000), r3.x
lt r3.x, r3.x, l(0.000000)
iadd r3.x, -r3.y, r3.x
itof o1.w, r3.x
mov o2.xy, v4.xyxx
mov o3.xyzw, v5.xyzw
mov o4.xyzw, v6.xyzw
ftou r3.x, v3.y
mov r3.y, x0[r3.x + 0].x
mov r3.x, x0[r3.x + 0].y
add r3.xy, r3.xyxx, cb0[25].zyzz
mul r3.xy, r3.xyxx, v2.yxyy
mad r0.xyzw, r3.yyyy, r0.xyzw, r2.xyzw
mad r0.xyzw, r3.xxxx, r1.xyzw, r0.xyzw
mov o5.xyzw, r0.xyzw
mov o6.xyzw, v5.xyzw
mul r1.xyzw, r0.yyyy, cb1[1].xyzw
mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb1[3].xyzw, r0.wwww, r1.xyzw
mul_sat r1.x, r0.w, l(0.000300)
mad r1.x, r1.x, l(0.390625), l(0.007813)
add r1.yzw, r0.wwww, l(0.000000, -3328.000000, -19712.000000, -167168.000000)
mul_sat r1.yzw, r1.yyzw, l(0.000000, 0.000061, 0.000014, 0.000008)
mad r1.x, r1.y, l(0.234375), r1.x
mad r1.x, r1.z, l(0.281250), r1.x
mad r1.z, r1.w, l(0.062500), r1.x
div r2.xy, r0.xyxx, r0.wwww
mov o8.xyzw, r0.xyzw
mad r1.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_l_indexable(texture3d)(float,float,float,float) r0.xyzw, r1.xyzx, t0.xyzw, s0, l(0.000000)
mul o7.xyz, r0.xyzx, r0.xyzx
mov o7.w, r0.w
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
