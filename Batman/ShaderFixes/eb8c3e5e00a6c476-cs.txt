// Custom Tile lighting shader: FTileShadingComputeShaderTSCS_Wetness00NVOPS_KeplerOptimised

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.20 on Tue Dec 29 02:01:27 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[25], immediateIndexed
dcl_constantbuffer cb1[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default

// SceneDepthTexture (UnrealEngine/Engine/Shaders/Common.usf:487)
dcl_resource_texture2d (float,float,float,float) t0

// Normal buffer:
dcl_resource_texture2d (float,float,float,float) t1

// SceneColorTexture (UnrealEngine/Engine/Shaders/Common.usf:490)
dcl_resource_texture2d (float,float,float,float) t2

// ?? Green:
dcl_resource_texture2d (float,float,float,float) t3

// AO buffer?:
dcl_resource_texture2d (float,float,float,float) t4

// Batman's reflection:
dcl_resource_texture2d (float,float,float,float) t5

dcl_resource_texture2d (float,float,float,float) t6

// Overview map:
dcl_resource_texture2d (float,float,float,float) t7

// Weird blue thing (output from cs 15a1e2efe71084c6):
dcl_resource_texture2d (float,float,float,float) t8

// Turbulance texture?
dcl_resource_texture2d (float,float,float,float) t9






// This structured buffer is divided up into 8 sections of up to 512 entries
// each plus a special section at the end (at offset 0x4000).

// The final section contains 8 integers. When looking at the sky these are all
// 5, while when looking down at the city it's more like 99, 117, 135, 120, 83,
// 72, 77, 67.

// I believe that these 8 numbers are the lengths of the first 8 sections and
// represent the number of lights active in a part of the screen.

// The first 8 sections contain integers which at first glance appear to be
// *almost* sequential, but closer examination shows that some numbers are
// skipped. Only the top n numbers of each section should be considered -
// anything below that is stale data from previous frames.

// I believe that these numbers are indexes into the other structured buffers
// and correspond to specific lights in the scene.

// The 8 sections represent a larger grid on the screen, divided up like so
// (confirmed through experimentation):

// -------------------------
// |     |     |     |     |
// |  0  |  1  |  2  |  3  |
// |     |     |     |     |
// -------------------------
// |     |     |     |     |
// |  4  |  5  |  7  |  8  |
// |     |     |     |     |
// -------------------------

// Each of those large tiles will be broken up into 10 x 22 smaller tiles in
// this shader.

// The problem is that once we move lights into their stereo position they
// might now be in different tiles, which will cause them to clip along the
// edges between tiles because the new tile won't even consider drawing them.
// This buffer is populated by the CPU via a Map() call, so we can't fix it in
// an existing previous shader.

// We now merge this list using a custom compute shader injected immediately
// before this one. This is necessary for performance reasons to remove
// contention associated with accessing the buffer from multiple thread groups
// simultaneously (which we would have to do if we merged it here. This was
// found to *triple* the cost of this already very expensive shader - on my box
// this shader costs 5fps unmodified in 3D, or 15 if doing the merge here)

dcl_resource_structured t10, 4 



//??
dcl_resource_texture2d (float,float,float,float) t11

// Shadow map?:
dcl_resource_texture2d (float,float,float,float) t12




// This structured buffer holds information about each light in the scene, such
// as it's type, world-space position, radius, oriientation, etc:
dcl_resource_structured t13, 160 




//??
dcl_resource_texture2darray (float,float,float,float) t14

//??
dcl_resource_texture2d (float,float,float,float) t15

//??
dcl_resource_texturecubearray (float,float,float,float) t16

//??
dcl_resource_structured t17, 112 

//??
dcl_resource_texture3d (float,float,float,float) t18

//??
dcl_resource_texture3d (float,float,float,float) t19

//??
dcl_resource_texture3d (float,float,float,float) t20

dcl_uav_typed_texture2d (float,float,float,float) u0
dcl_uav_structured_opc u7, 256
dcl_input vThreadGroupID.xy
dcl_input vThreadIDInGroup.xy
dcl_input vThreadID.xy

// Add 10 extra temps:
dcl_temps 38

dcl_tgsm_raw g0, 4
dcl_tgsm_raw g1, 4
dcl_tgsm_raw g2, 4

// This shared memory structured buffer is used to store whether a light in the
// large 4x2 grid is in a specific tile:
dcl_tgsm_structured g3, 4, 512

dcl_tgsm_structured g4, 4, 256
dcl_tgsm_structured g5, 4, 32
dcl_tgsm_raw g6, 4
dcl_tgsm_structured g7, 4, 32
dcl_tgsm_raw g8, 4
dcl_tgsm_structured g9, 12, 16
dcl_tgsm_structured g10, 12, 16
dcl_tgsm_structured g11, 4, 16
dcl_tgsm_structured g12, 4, 16
dcl_tgsm_structured g13, 4, 16
dcl_tgsm_structured g14, 4, 16
dcl_tgsm_raw g15, 4
dcl_thread_group 16, 16, 1

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r28.xyzw, l(0, 0, 0, 0), t125.xyzw

div r0.xyzw, l(2.000000, -2.000000, 0.500000, 0.500000), cb0[10].xyxy
imad r1.x, vThreadIDInGroup.y, l(16), vThreadIDInGroup.x
ishl r1.yz, vThreadID.xxyx, l(0, 1, 0, 0)
and r2.x, vThreadID.y, l(1)
mov r2.yw, l(0,0,0,0)
iadd r1.yz, r1.yyzy, r2.xxyx
utof r1.yz, r1.yyzy
add r1.yz, r1.yyzy, cb0[12].zzwz
ftou r3.xy, r1.yzyy
itof r4.xyzw, vThreadID.xyyy
add r4.xyzw, r4.xyzw, cb0[12].zwww
ftou r4.xyzw, r4.xyzw
uge r1.yz, r4.xxwx, cb0[19].zzwz
if_nz r1.y
  mov r1.y, l(3)
else 
  uge r2.xy, r4.xxxx, cb0[19].yxyy
  and r1.w, r2.y, l(1)
  movc r1.y, r2.x, l(2), r1.w
endif 
if_nz r1.z
  iadd r1.y, r1.y, l(4)
endif 
ishl r1.z, r1.y, l(9)
mov r3.zw, l(0,0,0,0)

// Game samples depth buffer:
ld_indexable(texture2d)(float,float,float,float) r1.w, r3.xyww, t0.yzwx

// scales depth buffer:
min r2.x, r1.w, l(0.999999881)
mad r2.x, r2.x, cb1[20].z, -cb1[20].w
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x

eq r1.w, r1.w, l(1.000000)
ld_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xyww, t2.xyzw
mul r2.y, r5.w, l(255.000000)
round_ne r2.y, r2.y
ftou r2.y, r2.y
movc r1.w, r1.w, l(0), r2.y
ult r6.xy, r1.xxxx, l(16, 32, 0, 0)
if_nz r6.x
  store_structured g11.x, r1.x, l(0), l(340282346638528860000000000000000000000.000000)
  store_structured g12.x, r1.x, l(0), l(-1.175494491E-038)
  store_structured g13.x, r1.x, l(0), l(0)
endif 
store_structured g3.x, r1.x, l(0), l(0)
iadd r2.y, r1.x, l(256)
store_structured g3.x, r2.y, l(0), l(0)
store_structured g4.x, r1.x, l(0), l(0)

// This is reading the number of light indexes in each of the 8 sections of the
// t10 structured buffer:

iadd r1.y, r1.y, l(4096)
ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r1.y, r1.y, l(0), t10.xxxx

if_z r1.x
  store_raw g6.x, l(0), l(0)
  store_raw g15.x, l(0), l(0)
  store_raw g8.x, l(0), l(0)
  store_raw g2.x, l(0), l(0)
  store_raw g0.x, l(0), l(340282346638528860000000000000000000000.000000)
  store_raw g1.x, l(0), l(0)
endif 
sync_g_t
if_nz r1.w
  atomic_umin g0, l(0), r2.x
  atomic_umax g1, l(0), r2.x
endif 
atomic_or g2, l(0), r1.w
sync_g_t
ld_raw r2.y, l(0), g0.xxxx
ld_raw r5.w, l(0), g1.xxxx
utof r6.zw, r3.xxxy
add r7.xy, r6.zwzz, -cb0[12].zwzz
add r7.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.xy, r7.xyxx, r0.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)
div r7.x, r0.x, cb0[6].x
div r7.y, r0.y, cb0[7].y

// 2D coordinate multiplied by depth (r2.x is used later as the 3rd dimension):
mul r0.xy, r2.xxxx, r7.xyxx

// View-space stereo correction using projection matrix found via frame
// analysis in cb0[6:9]:
add r28.w, r2.x, -r28.y
div r28.w, r28.w, cb0[6].x
mad r0.x, -r28.w, r28.x, r0.x

ld_raw r7.x, l(0), g2.xxxx
if_nz r7.x
  add r5.w, -r2.y, r5.w
  mul r7.y, r5.w, l(0.015625)
  round_pi r7.y, r7.y
  min r7.y, r7.y, l(15.000000)
  add r7.z, -r2.y, r2.x
  div r5.w, r7.z, r5.w
  sqrt r5.w, r5.w
  mul r5.w, r7.y, r5.w
  round_ni r5.w, r5.w
  ftou r5.w, r5.w
  ieq r8.xyzw, r5.wwww, l(0, 1, 2, 3)
  ine r7.y, r1.w, l(0)
  and r8.xyzw, r7.yyyy, r8.xyzw

  // Hmmm... Depth within certain ranges?
  if_nz r8.x
    atomic_imin g11, l(0, 0, 0, 0), r2.x
    atomic_imax g12, l(0, 0, 0, 0), r2.x
    atomic_or g13, l(0, 0, 0, 0), r1.w
  endif 
  if_nz r8.y
    atomic_imin g11, l(1, 0, 0, 0), r2.x
    atomic_imax g12, l(1, 0, 0, 0), r2.x
    atomic_or g13, l(1, 0, 0, 0), r1.w
  endif 
  if_nz r8.z
    atomic_imin g11, l(2, 0, 0, 0), r2.x
    atomic_imax g12, l(2, 0, 0, 0), r2.x
    atomic_or g13, l(2, 0, 0, 0), r1.w
  endif 
  if_nz r8.w
    atomic_imin g11, l(3, 0, 0, 0), r2.x
    atomic_imax g12, l(3, 0, 0, 0), r2.x
    atomic_or g13, l(3, 0, 0, 0), r1.w
  endif 
  ieq r8.xyzw, r5.wwww, l(4, 5, 6, 7)
  and r8.xyzw, r7.yyyy, r8.xyzw
  if_nz r8.x
    atomic_imin g11, l(4, 0, 0, 0), r2.x
    atomic_imax g12, l(4, 0, 0, 0), r2.x
    atomic_or g13, l(4, 0, 0, 0), r1.w
  endif 
  if_nz r8.y
    atomic_imin g11, l(5, 0, 0, 0), r2.x
    atomic_imax g12, l(5, 0, 0, 0), r2.x
    atomic_or g13, l(5, 0, 0, 0), r1.w
  endif 
  if_nz r8.z
    atomic_imin g11, l(6, 0, 0, 0), r2.x
    atomic_imax g12, l(6, 0, 0, 0), r2.x
    atomic_or g13, l(6, 0, 0, 0), r1.w
  endif 
  if_nz r8.w
    atomic_imin g11, l(7, 0, 0, 0), r2.x
    atomic_imax g12, l(7, 0, 0, 0), r2.x
    atomic_or g13, l(7, 0, 0, 0), r1.w
  endif 
  ieq r8.xyzw, r5.wwww, l(8, 9, 10, 11)
  and r8.xyzw, r7.yyyy, r8.xyzw
  if_nz r8.x
    atomic_imin g11, l(8, 0, 0, 0), r2.x
    atomic_imax g12, l(8, 0, 0, 0), r2.x
    atomic_or g13, l(8, 0, 0, 0), r1.w
  endif 
  if_nz r8.y
    atomic_imin g11, l(9, 0, 0, 0), r2.x
    atomic_imax g12, l(9, 0, 0, 0), r2.x
    atomic_or g13, l(9, 0, 0, 0), r1.w
  endif 
  if_nz r8.z
    atomic_imin g11, l(10, 0, 0, 0), r2.x
    atomic_imax g12, l(10, 0, 0, 0), r2.x
    atomic_or g13, l(10, 0, 0, 0), r1.w
  endif 
  if_nz r8.w
    atomic_imin g11, l(11, 0, 0, 0), r2.x
    atomic_imax g12, l(11, 0, 0, 0), r2.x
    atomic_or g13, l(11, 0, 0, 0), r1.w
  endif 
  ieq r8.xyzw, r5.wwww, l(12, 13, 14, 15)
  and r8.xyzw, r7.yyyy, r8.xyzw
  if_nz r8.x
    atomic_imin g11, l(12, 0, 0, 0), r2.x
    atomic_imax g12, l(12, 0, 0, 0), r2.x
    atomic_or g13, l(12, 0, 0, 0), r1.w
  endif 
  if_nz r8.y
    atomic_imin g11, l(13, 0, 0, 0), r2.x
    atomic_imax g12, l(13, 0, 0, 0), r2.x
    atomic_or g13, l(13, 0, 0, 0), r1.w
  endif 
  if_nz r8.z
    atomic_imin g11, l(14, 0, 0, 0), r2.x
    atomic_imax g12, l(14, 0, 0, 0), r2.x
    atomic_or g13, l(14, 0, 0, 0), r1.w
  endif 
  if_nz r8.w
    atomic_imin g11, l(15, 0, 0, 0), r2.x
    atomic_imax g12, l(15, 0, 0, 0), r2.x
    atomic_or g13, l(15, 0, 0, 0), r1.w
  endif 
endif 
sync_g_t
if_nz r6.x
  ld_structured r5.w, r1.x, l(0), g13.xxxx
  if_nz r5.w
    imm_atomic_iadd r8.x, g15, l(0), l(1)
    store_structured g14.x, r8.x, l(0), r1.x
  endif 

// Hmmm, g11 is min depth, g12 is max depth within certain ranges?
  ld_structured r8.z, r1.x, l(0), g11.xxxx
  ld_structured r9.z, r1.x, l(0), g12.xxxx

  div r7.yz, l(0.000000, 32.000000, 16.000000, 0.000000), cb0[10].xxyx
  utof r10.xy, vThreadGroupID.xyxx
  mul r10.zw, r7.yyyz, r10.xxxy
  mad r10.zw, r10.zzzw, l(0.000000, 0.000000, 2.000000, -2.000000), l(0.000000, 0.000000, -1.000000, 1.000000)
  div r11.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[6].x
  div r11.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[7].y
  mul r10.zw, r10.zzzw, r11.xxxy
  mad r7.yz, r10.xxyx, r7.yyzy, r7.yyzy
  mad r7.yz, r7.yyzy, l(0.000000, 2.000000, -2.000000, 0.000000), l(0.000000, -1.000000, 1.000000, 0.000000)
  mul r7.yz, r11.xxyx, r7.yyzy

// Hmmm... Multiplying depth within certain ranges by something:
  mul r10.xy, r8.zzzz, r10.zwzz
  mul r10.zw, r9.zzzz, r10.zzzw

// BINGO!!!
// This is the key to fixing the clipping issue on the small tiles - remove a
// view-space stereo correction from what I am guessing is the tile position:

add r28.w, r8.z, -r28.y
div r28.w, r28.w, cb0[6].x
mad r10.x, -r28.w, r28.x, r10.x

add r28.w, r9.z, -r28.y
div r28.w, r28.w, cb0[6].x
mad r10.z, -r28.w, r28.x, r10.z

  mul r11.xy, r8.zzzz, r7.yzyy
  mul r7.yz, r9.zzzz, r7.yyzy

add r28.w, r8.z, -r28.y
div r28.w, r28.w, cb0[6].x
mad r11.x, -r28.w, r28.x, r11.x

add r28.w, r9.z, -r28.y
div r28.w, r28.w, cb0[6].x
mad r7.y, -r28.w, r28.x, r7.y

  min r11.zw, r10.zzzw, r10.xxxy
  min r11.zw, r11.xxxy, r11.zzzw
  min r11.zw, r7.yyyz, r11.zzzw
  max r10.xy, r10.zwzz, r10.xyxx
  max r10.xy, r11.xyxx, r10.xyxx
  max r7.yz, r7.yyzy, r10.xxyx
  min r8.xy, r11.zwzz, r11.zwzz
  max r9.xy, r7.yzyy, r7.yzyy

  // Hmmm...
  store_structured g9.xyz, r1.x, l(0), r8.xyzx
  store_structured g10.xyz, r1.x, l(0), r9.xyzx
endif 
sync_g_t
ld_raw r5.w, l(0), g15.xxxx
imul null, r6.x, r5.w, cb0[11].x
mov r8.w, l(1.000000)
mov r7.y, r1.x
loop 
  uge r7.z, r7.y, r6.x
  breakc_nz r7.z
  udiv r9.x, r10.x, r7.y, r5.w
  ld_structured r7.z, r10.x, l(0), g14.xxxx
  ld_structured r9.yzw, r7.z, l(0), g9.xxyz
  ld_structured r10.xyz, r7.z, l(0), g10.xyzx
  add r10.xyz, -r9.yzwy, r10.xyzx
  mad r9.yzw, r10.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000), r9.yyzw
  mul r11.xyz, r9.zzzz, cb1[16].xyzx
  mad r11.xyz, cb1[15].xyzx, r9.yyyy, r11.xyzx
  mad r9.yzw, cb1[17].xxyz, r9.wwww, r11.xxyz
  add r8.xyz, r9.yzwy, cb1[18].xyzx
  dp3 r7.z, r10.xyzx, r10.xyzx
  sqrt r7.z, r7.z
  mul r7.z, r7.z, l(0.500000)
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r7.w, r9.x, l(36), t17.xxxx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r9.yzw, r9.x, l(48), t17.xxyz
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r10.xyz, r9.x, l(64), t17.xyzx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r11.xyz, r9.x, l(80), t17.xyzx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r12.xyw, r9.x, l(96), t17.xyxz
  mov r13.x, r9.y
  mov r13.y, r10.x
  mov r13.z, r11.x
  mov r13.w, r12.x
  dp4 r13.x, r13.xyzw, r8.xyzw
  mov r14.x, r9.z
  mov r14.y, r10.y
  mov r14.z, r11.y
  mov r14.w, r12.y
  dp4 r13.y, r14.xyzw, r8.xyzw
  mov r12.x, r9.w
  mov r12.y, r10.z
  mov r12.z, r11.z
  dp4 r13.z, r12.xyzw, r8.xyzw
  add r8.xyz, r13.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mad r7.z, r7.z, r7.w, l(0.500000)
  add_sat r8.xyz, -r7.zzzz, |r8.xyzx|
  dp3 r7.z, r8.xyzx, r8.xyzx
  eq r7.z, r7.z, l(0.000000)
  and r7.z, r7.z, l(1)
  mov r2.z, r9.x
  atomic_or g4, r2.zwzz, r7.z
  iadd r7.y, r7.y, l(256)
endloop 
ld_raw r2.z, l(0), g15.xxxx
imul null, r2.w, r1.y, r2.z
mov r8.y, l(0)
mov r5.w, r1.x

// This loop is iterating over each of the lights to decide which will be drawn in which tiles:
loop 
  uge r6.x, r5.w, r2.w
  breakc_nz r6.x
  udiv r8.x, r6.x, r5.w, r2.z
  iadd r7.y, r1.z, r8.x
  ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r7.y, r7.y, l(0), t10.xxxx
  ld_structured r6.x, r6.x, l(0), g14.xxxx

// Think this is world XYZ and W might be radius?
  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r9.xyzw, r7.y, l(0), t13.xyzw

// XYZ are floats in the range -1:+1. Are 0 for a number of lights (directional
// for sure + some others) - guessing this is the orientation of spot lights.
// W is an integer out of 1,2,3,16,32,34,35... Type of light? Flags?
  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r10.xyzw, r7.y, l(128), t13.xyzw

  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r7.z, r7.y, l(144), t13.xxxx
  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r7.y, r7.y, l(152), t13.xxxx

// Hmmm... there's a position here?
  ld_structured r11.xyz, r6.x, l(0), g9.xyzx
  ld_structured r12.xyz, r6.x, l(0), g10.xyzx

  rcp r7.w, r9.w
  add r11.xyz, r11.xyzx, r12.xyzx

  mul r13.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r12.xyz, -r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r12.xyzx
  dp3 r8.z, r12.xyzx, r12.xyzx
  sqrt r8.z, r8.z

// World position of light * something. This does not include a projection
// matrix - it is made up of a translation and rotations in euclidean space.
  mul r14.xyz, r9.yyyy, cb1[12].xyzx
  mad r14.xyz, cb1[11].xyzx, r9.xxxx, r14.xyzx
  mad r14.xyz, cb1[13].xyzx, r9.zzzz, r14.xyzx
  add r14.xyz, r14.xyzx, cb1[14].xyzx

  mad r11.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), -r14.xyzx
  add r11.xyz, -r12.xyzx, |r11.xyzx|
  max r11.xyz, r11.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  dp3 r8.w, r11.xyzx, r11.xyzx
  mul r7.w, r7.w, r7.w
  lt r7.w, r8.w, r7.w

// This is also a euclidean transformation made up of a translation and rotations.
  mul r11.xyz, r13.yyyy, cb1[16].xyzx
  mad r11.xyz, cb1[15].xyzx, r13.xxxx, r11.xyzx
  mad r11.xyz, cb1[17].xyzx, r13.zzzz, r11.xyzx
  add r11.xyz, r11.xyzx, cb1[18].xyzx

  div r7.y, r8.z, r7.y
  mad r9.xyz, -r7.yyyy, r10.xyzx, r9.xyzx
  add r9.xyz, -r9.xyzx, r11.xyzx
  eq r7.y, r7.z, l(-1.000000)
  dp3 r8.z, r9.xyzx, r10.xyzx
  dp3 r8.w, r9.xyzx, r9.xyzx
  sqrt r8.w, r8.w
  mul r7.z, r7.z, r8.w
  ge r7.z, r8.z, r7.z
  or r7.y, r7.z, r7.y
  and r7.y, r7.y, r7.w
  ld_structured r6.x, r6.x, l(0), g13.xxxx
  and r6.x, r10.w, r6.x
  ine r6.x, r6.x, l(0)
  and r6.x, r7.y, r6.x
  and r6.x, r6.x, l(1)

  // This flags the light to be drawn in this tile:
  atomic_or g3, r8.xyxx, r6.x

  iadd r5.w, r5.w, l(256)
endloop 
sync_g_t
mov r2.z, r1.x
loop 
  uge r2.w, r2.z, r1.y
  breakc_nz r2.w
  ld_structured r2.w, r2.z, l(0), g3.xxxx
  if_nz r2.w
    imm_atomic_iadd r8.x, g6, l(0), l(1)
    ult r2.w, r8.x, l(32)
    if_nz r2.w
      iadd r2.w, r1.z, r2.z
      ld_structured_indexable(structured_buffer, stride=4)(mixed,mixed,mixed,mixed) r2.w, r2.w, l(0), t10.xxxx
      store_structured g5.x, r8.x, l(0), r2.w
    endif 
  endif 
  iadd r2.z, r2.z, l(256)
endloop 
ine r1.y, r7.x, l(0)
and r1.y, r6.y, r1.y
if_nz r1.y
  mov r1.y, l(0)
  mov r1.z, r1.x
  loop 
    ult r2.z, r1.z, cb0[11].x
    ult r2.w, r1.y, l(32)
    and r2.z, r2.w, r2.z
    breakc_z r2.z
    iadd r2.z, -r1.y, l(32)
    ld_structured r2.w, r1.z, l(0), g4.xxxx
    ine r5.w, r2.w, l(0)
    movc r2.w, r2.w, l(1), l(0)
    imm_atomic_alloc r7.x, u7
    store_structured u7.x, r7.x, l(76), r2.w
    store_structured u7.x, r7.x, l(0), l(7)
    imm_atomic_alloc r7.x, u7
    countbits r2.w, r7.x
    ubfe r6.x, r1.x, l(0), r7.x
    countbits r6.x, r6.x
    ult r2.z, r6.x, r2.z
    and r2.z, r2.z, r5.w
    if_nz r2.z
      iadd r2.z, r1.y, r6.x
      store_structured g7.x, r2.z, l(0), r1.z
    endif 
    iadd r1.y, r1.y, r2.w
    iadd r1.z, r1.z, l(32)
  endloop 
  if_z r1.x
    umin r1.x, r1.y, l(32)
    store_raw g8.x, l(0), r1.x
  endif 
endif 
sync_g_t
ld_indexable(texture2d)(float,float,float,float) r1.xyz, r3.xyww, t3.yxwz
ld_indexable(texture2d)(float,float,float,float) r7.xyz, r3.xyww, t1.xyzw
mad r7.xyz, r7.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r2.z, r7.xyzx, r7.xyzx
rsq r2.z, r2.z
mul r8.xyz, r2.zzzz, r7.xyzx
mov_sat r1.x, r1.x
max r1.x, r1.x, l(0.000196078006)

// 3D coordinate multiplied by matrix:
mul r9.xyz, r0.yyyy, cb1[16].xyzx
mad r9.xyz, cb1[15].xyzx, r0.xxxx, r9.xyzx
mad r9.xyz, cb1[17].xyzx, r2.xxxx, r9.xyzx
add r9.xyz, r9.xyzx, cb1[18].xyzx

add r10.xyz, -r9.xyzx, -cb1[9].xyzx
dp3 r0.x, r10.xyzx, r10.xyzx
rsq r0.x, r0.x
mul r11.xyz, r0.xxxx, r10.xyzx
add r6.xy, r9.xyxx, -cb0[13].xyxx
mul r12.y, r6.y, cb0[14].y
mad r12.z, -r6.x, cb0[14].x, l(1.000000)
sample_l_indexable(texture2d)(float,float,float,float) r12.xyz, r12.yzyy, t7.xzwy, s1, l(0.000000)
mul r0.y, r12.y, cb0[14].z
ld_indexable(texture2d)(float,float,float,float) r13.xyzw, r3.xyzw, t4.xyzw
mov r14.zw, l(0,0,0,0)
mov r15.xyzw, r13.xyzw
mov r2.w, l(1.000000)
mov r3.z, l(0)
loop 
  uge r3.w, r3.z, l(3)
  breakc_nz r3.w
  iadd r3.w, -r3.z, l(2)
  ult r6.xy, r3.zzzz, l(2, 1, 0, 0)
  movc r16.x, r6.x, r3.w, l(3)
  movc r16.y, r6.y, l(0), l(1)
  iadd r14.xy, r3.xyxx, r16.xyxx
  ld_indexable(texture2d)(float,float,float,float) r16.xyz, r14.xyww, t1.xyzw
  mad r16.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  dp3 r3.w, r16.xyzx, r16.xyzx
  rsq r3.w, r3.w
  mul r16.xyz, r3.wwww, r16.xyzx
  dp3 r3.w, r8.xyzx, r16.xyzx
  mad_sat r3.w, r3.w, l(2.000000), l(-1.000000)
  ld_indexable(texture2d)(float,float,float,float) r16.xyzw, r14.xyzw, t4.xyzw
  mad r15.xyzw, r16.xyzw, r3.wwww, r15.xyzw
  add r2.w, r2.w, r3.w
  iadd r3.z, r3.z, l(1)
endloop 
div r13.xyzw, r15.wxyz, r2.wwww
mov_sat r13.x, r13.x
add r2.w, -r13.x, l(1.000000)
mul r14.xyz, r13.zzzz, cb1[16].xyzx
mad r13.xyz, cb1[15].xyzx, r13.yyyy, r14.xyzx
mad r13.xyz, cb1[17].xyzx, r13.wwww, r13.xyzx
and r3.zw, r1.wwww, l(0, 0, 1, 3)
if_nz r3.z
  add r3.z, r9.z, -cb0[13].z
  mad r3.z, r12.x, cb0[14].z, -r3.z
  mov_sat r5.w, r8.z
  mad r3.z, r5.w, l(-512.000000), r3.z
  add r3.z, r3.z, l(512.000000)
  mad r5.w, r5.w, l(-896.000000), l(1024.000000)
  div_sat r3.z, r3.z, r5.w
  add r3.z, -r3.z, l(1.000000)
  mul r3.z, r3.z, r3.z
  mul r3.z, r3.z, r3.z
  mad r5.w, r7.z, r2.z, l(0.250000)
  add_sat r5.w, r5.w, r5.w
  mul r6.x, r3.z, r5.w
  mad r6.y, r1.x, l(2.000000), l(0.250000)
  min r6.y, r6.y, l(1.000000)
  mad_sat r12.xyw, |r8.xyxz|, l(2.000000, 2.000000, 0.000000, 2.000000), l(-1.000000, -1.000000, 0.000000, -1.000000)
  mul r14.xyzw, r9.xyxz, l(0.001520, 0.001520, 0.001419, 0.001419)
  sample_l_indexable(texture2d)(float,float,float,float) r7.w, r14.xyxx, t9.yzwx, s0, l(0.000000)
  add r7.w, r7.w, l(0.500000)
  sample_l_indexable(texture2d)(float,float,float,float) r8.w, r14.zwzz, t9.xzwy, s0, l(0.000000)
  dp2 r8.w, r12.yyyy, r8.wwww
  mul r14.xy, r9.yzyy, l(0.001419, 0.001419, 0.000000, 0.000000)
  sample_l_indexable(texture2d)(float,float,float,float) r10.w, r14.xyxx, t9.xzwy, s0, l(0.000000)
  dp2 r10.w, r12.xxxx, r10.wwww
  add r8.w, r8.w, r10.w
  add_sat r8.w, r12.w, r8.w
  mul r7.w, r7.w, r8.w
  mul r8.w, r7.w, r7.w
  dp2 r8.w, r8.wwww, r6.xxxx
  mad r3.z, r3.z, r5.w, -r8.w
  mad_sat r3.z, r6.x, r3.z, r8.w
  mul r5.w, r12.z, r7.w
  mul_sat r5.w, r5.w, cb0[15].z
  add r6.x, -r2.x, l(13000.000000)
  mul_sat r6.x, r6.x, l(0.000488281250)
  add r14.xy, r5.wwww, -cb0[15].yxyy
  mul_sat r5.w, r14.x, l(5.714286)
  mul r7.w, r3.z, cb0[15].w
  mul r7.w, r7.w, cb0[15].z
  max r5.w, r5.w, r7.w
  min r5.w, r5.w, l(1.000000)
  mul r5.w, r3.z, r5.w
  mul r5.w, r6.x, r5.w
  dp2_sat r7.w, r14.yyyy, cb0[15].zzzz
  mul r3.z, r3.z, r7.w
  mul r3.z, r6.x, r3.z
  mad_sat r7.w, r8.z, l(6.000000), l(-5.000000)
  mul r3.z, r3.z, r7.w
  lt r2.y, r2.y, l(4096.000000)
  if_nz r2.y
    dp3 r2.y, r8.xyzx, r11.xyzx
    add_sat r2.y, -r2.y, l(0.750000)
    mul r7.w, r2.y, r2.y
    mul r2.y, r2.y, r7.w
    mul r14.xy, r2.xxxx, l(0.000244140625, 0.000333333330, 0.000000, 0.000000)
    max r2.y, r2.y, r14.y
    mul r14.yz, r8.xxyx, l(0.000000, 0.125000, 0.125000, 0.000000)
    mad r14.yz, r9.xxyx, l(0.000000, 0.0112499995, 0.0112499995, 0.000000), r14.yyzy
    mul r2.y, r2.y, l(10.000000)
    sample_l_indexable(texture2d)(float,float,float,float) r15.xy, r14.yzyy, t8.xwyz, s2, r2.y
    mov r16.xw, cb0[17].xxxy
    mov r16.yz, l(0,0,0,0)
    add r17.xyzw, r14.yzyz, r16.xyzw
    sample_l_indexable(texture2d)(float,float,float,float) r14.yz, r17.xyxx, t8.yxwz, s2, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r17.yw, r17.zwzz, t8.yxzw, s2, r2.y
    add r7.w, -r6.y, l(1.000000)
    mul r7.w, r7.w, l(0.500000)
    mov r18.z, r15.y
    mov r18.x, r14.z
    mov r18.y, r17.w
    mul r15.yzw, r7.wwww, r18.xxyz
    mul r19.xyz, r8.yzxy, l(0.125000, 0.125000, 0.125000, 0.000000)
    mad r19.xyz, r9.yzxy, l(-0.015000, -0.015000, -0.015000, 0.000000), r19.xyzx
    sample_l_indexable(texture2d)(float,float,float,float) r20.z, r19.xyxx, t8.xyzw, s2, r2.y
    add r21.xyzw, r16.xyzw, r19.xyxy
    sample_l_indexable(texture2d)(float,float,float,float) r20.x, r21.xyxx, t8.zxyw, s2, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r20.y, r21.zwzz, t8.xzyw, s2, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r21.z, r19.zyzz, t8.xyzw, s2, r2.y
    add r16.xyzw, r16.xyzw, r19.zyzy
    sample_l_indexable(texture2d)(float,float,float,float) r21.x, r16.xyxx, t8.zxyw, s2, r2.y
    sample_l_indexable(texture2d)(float,float,float,float) r21.y, r16.zwzz, t8.xzyw, s2, r2.y
    mad r14.zw, r6.yyyy, l(0.000000, 0.000000, -11.970000, -59.849998), l(0.000000, 0.000000, 12.000000, 60.000000)
    lt r16.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r8.xyzx
    lt r19.xyz, r8.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    iadd r16.xyz, -r16.xyzx, r19.xyzx
    itof r16.xyz, r16.xyzx
    mul r16.xyz, r12.xywx, r16.xyzx
    mul r12.xyz, r12.xywx, r6.xxxx
    mul r19.xyz, r16.xxxx, r20.xyzx
    mul r19.xyz, r12.xxxx, r19.xyzx
    mul r20.xyz, r16.yyyy, r21.xyzx
    mul r12.xyw, r12.yyyy, r20.xyxz
    mul r12.xyw, r14.zzzz, r12.xyxw
    mad r12.xyw, r19.xyxz, r14.zzzz, r12.xyxw
    mov r17.z, r15.x
    mov r17.x, r14.y
    mad r17.xyz, -r18.xyzx, r7.wwww, r17.xyzx
    mad r15.xyz, r3.zzzz, r17.xyzx, r15.yzwy
    mul r15.xyz, r12.zzzz, r15.xyzx
    mad r12.xyz, r15.xyzx, r14.wwww, r12.xywx
    add r12.xyz, -r12.zzyz, r12.xyzx
    mov r12.w, l(1.000000)
    mul r14.yzw, r12.xxwy, r16.yyyy
    mad r14.yzw, r16.xxxx, r12.wwxy, r14.yyzw
    mad r12.xyz, r16.zzzz, r12.xzwx, r14.yzwy
    mov_sat r14.x, r14.x
    add r2.y, -r14.x, l(1.000000)
    max r6.x, r5.w, r3.z
    mul r2.y, r2.y, r6.x
    mad r7.xyz, -r7.xyzx, r2.zzzz, r12.xyzx
    mad r7.xyz, r2.yyyy, r7.xyzx, r8.xyzx
    dp3 r2.z, r7.xyzx, r7.xyzx
    rsq r2.z, r2.z
    mul r7.xyz, r2.zzzz, r7.xyzx
  else 
    mov r7.xyz, r8.xyzx
    mov r2.y, l(0)
  endif 
  max r2.z, r5.w, r3.z
  mul r3.z, r2.z, cb0[16].w
  mad r5.w, r6.y, l(-0.636000037), l(-0.237999976)
  mad r3.z, r3.z, r5.w, l(1.000000)
  mad r2.y, r2.y, l(-0.024900), l(0.025000)
  add r2.y, -r1.x, r2.y
  mad r1.x, r2.z, r2.y, r1.x
  dp3 r2.y, r11.xyzx, r7.xyzx
  add r5.w, -r2.y, l(1.000000)
  mul r6.x, r5.w, r5.w
  mul_sat r5.w, r5.w, r6.x
  mad r5.w, r5.w, l(0.918520), l(0.081480)
  mul_sat r2.y, r2.y, l(4.000000)
  max r6.x, r1.y, l(0.00392156886)
  div r5.w, r5.w, r6.x
  add r5.w, r5.w, l(-1.000000)
  mad r2.y, r2.y, r5.w, l(1.000000)
  lt r1.y, l(0.000000), r1.y
  and r1.y, r1.y, l(0x3f800000)
  mad r1.y, r2.y, r1.y, l(-1.000000)
  mad r1.y, r2.z, r1.y, l(1.000000)
else 
  mov r7.xyz, r8.xyzx
  mov r1.y, l(1.000000)
  mov r3.z, l(1.000000)
endif 
div r2.yz, r6.zzwz, cb0[10].xxyx
mad r0.zw, r2.yyyz, cb0[12].xxxy, r0.zzzw

// Depth buffer accessed:
gather4_aoffimmi_indexable(-1,-1,0)(texture2d)(float,float,float,float) r2.yz, r0.zwzz, t0.yxzw, s1.x
gather4_indexable(texture2d)(float,float,float,float) r0.zw, r0.zwzz, t0.ywxz, s1.x

min r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.999999881, 0.999999881)
mad r0.zw, r0.zzzw, cb1[20].zzzz, -cb1[20].wwww
div r0.zw, l(1.000000, 1.000000, 1.000000, 1.000000), r0.zzzw
min r2.yz, r2.yyzy, l(0.000000, 0.999999881, 0.999999881, 0.000000)
mad r2.yz, r2.yyzy, cb1[20].zzzz, -cb1[20].wwww
div r2.yz, l(1.000000, 1.000000, 1.000000, 1.000000), r2.yyzy
iadd r6.xyzw, r3.xyxy, l(0, 1, 1, 0)
utof r6.xyzw, r6.xyzw
add r12.xyzw, cb0[10].xyxy, l(-1.000000, -1.000000, -1.000000, -1.000000)
min r6.xyzw, r6.xyzw, r12.xyzw
ftoi r6.xyzw, r6.zwxy
iadd r14.xyzw, r3.xyxy, l(-1, 0, 0, -1)
utof r14.xyzw, r14.xyzw
min r12.xyzw, r12.xyzw, r14.xyzw
ftoi r12.xyzw, r12.zwxy
mov r14.xy, r6.zwzz
mov r14.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r14.xyz, r14.xyzw, t1.xyzw
mad r14.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r5.w, r14.xyzx, r14.xyzx
rsq r5.w, r5.w
mul r14.xyz, r5.wwww, r14.xyzx
mov r6.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyzw, t1.xyzw
mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r5.w, r6.xyzx, r6.xyzx
rsq r5.w, r5.w
mul r6.xyz, r5.wwww, r6.xyzx
mov r15.xy, r12.zwzz
mov r15.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r15.xyz, r15.xyzw, t1.xyzw
mad r15.xyz, r15.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r5.w, r15.xyzx, r15.xyzx
rsq r5.w, r5.w
mul r15.xyz, r5.wwww, r15.xyzx
mov r12.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r12.xyz, r12.xyzw, t1.xyzw
mad r12.xyz, r12.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r5.w, r12.xyzx, r12.xyzx
rsq r5.w, r5.w
mul r12.xyz, r5.wwww, r12.xyzx
add r16.xyz, r7.xyzx, r7.xyzx
add r0.zw, -r2.xxxx, r0.zzzw
mad r0.zw, -|r0.zzzw|, l(0.000000, 0.000000, 0.200000, 0.200000), l(0.000000, 0.000000, 1.000000, 1.000000)
max r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r5.w, r7.xyzx, r14.xyzx
mul_sat r5.w, r5.w, l(6.000000)
mul r6.w, r0.z, r5.w
mad r14.xyz, r14.xyzx, r6.wwww, r16.xyzx
mad r0.z, r0.z, r5.w, l(2.000000)
dp3 r5.w, r7.xyzx, r6.xyzx
mul_sat r5.w, r5.w, l(6.000000)
mul r6.w, r0.w, r5.w
mad r6.xyz, r6.xyzx, r6.wwww, r14.xyzx
mad r0.z, r0.w, r5.w, r0.z
add r2.yz, -r2.xxxx, r2.yyzy
mad r2.yz, -|r2.yyzy|, l(0.000000, 0.200000, 0.200000, 0.000000), l(0.000000, 1.000000, 1.000000, 0.000000)
max r2.yz, r2.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
dp3 r0.w, r7.xyzx, r15.xyzx
mul_sat r0.w, r0.w, l(6.000000)
mul r5.w, r0.w, r2.y
mad r6.xyz, r15.xyzx, r5.wwww, r6.xyzx
mad r0.z, r2.y, r0.w, r0.z
dp3 r0.w, r7.xyzx, r12.xyzx
mul_sat r0.w, r0.w, l(6.000000)
mul r2.y, r0.w, r2.z
mad r6.xyz, r12.xyzx, r2.yyyy, r6.xyzx
mad r0.z, r2.z, r0.w, r0.z
div r6.xyz, r6.xyzx, r0.zzzz
dp3 r0.z, r6.xyzx, r6.xyzx
sqrt r0.w, r0.z
mul r0.w, r0.w, l(1.002004)
min r0.w, r0.w, l(1.000000)
mul r2.y, r1.x, r1.x
mad r2.z, r2.y, r2.y, l(-1.000000)
add r5.w, -r0.w, l(1.000000)
div r0.w, r5.w, r0.w
dp2 r0.w, r2.zzzz, r0.wwww
mad r2.y, -r2.y, r2.y, r0.w
add r0.w, r0.w, l(-1.000000)
div r0.w, r2.y, r0.w
sqrt r0.w, r0.w
sqrt r0.w, r0.w
add r1.x, -r0.w, r1.x
mad r0.w, r1.x, l(0.850000), r0.w
rsq r0.z, r0.z
mul r7.xyz, r0.zzzz, r6.xyzx
div r2.yz, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[10].xxyx
mul r2.yz, r2.yyzy, r2.xxxx
mul r2.yz, r2.yyzy, l(0.000000, 0.00732421875, 0.00732421875, 0.000000)
div r2.yz, r2.yyzy, cb0[5].wwww
max r2.yz, r0.wwww, r2.yyzy
div r12.xy, r0.wwww, r2.yzyy
dp2 r0.w, r12.xyxx, r12.xyxx
sqrt r0.w, r0.w
min r0.w, r0.w, l(1.000000)
max r12.z, r2.y, l(0.000196078006)
dp3 r1.x, -r11.xyzx, r7.xyzx
add r1.x, r1.x, r1.x
mad r14.xyz, r7.xyzx, -r1.xxxx, -r11.xyzx
dp3 r1.x, r7.xyzx, r11.xyzx
max r2.y, r1.x, l(0.000010)
mad r2.z, r2.y, l(-5.554730), l(-6.983160)
mul r2.y, r2.y, r2.z
exp r2.y, r2.y
add r2.z, -r12.z, l(1.000000)
mad r2.y, r2.y, r2.z, l(1.000000)
max r2.y, r2.y, l(0.000000)
mad r6.xyz, r6.xyzx, r0.zzzz, -r11.xyzx
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, r6.xyzx
dp3 r0.z, r6.xyzx, r13.xyzx
mad_sat r0.z, r0.z, l(2.000000), l(1.000000)
mul r2.z, r2.w, r2.w
mul r5.w, r2.z, r2.z
mul r5.w, r2.z, r5.w
mul r0.z, r0.z, r5.w
mul r2.y, r0.z, r2.y
add r5.w, r12.z, r12.z
min r5.w, r5.w, l(1.000000)
mad r6.x, r5.w, l(3.000000), l(1.000000)
add r6.x, r6.x, r6.x
itof r3.xy, r3.xyxx
add r3.xy, r3.xyxx, -cb0[12].zwzz
add r3.xy, r3.xyxx, l(0.000000, 4.000000, 0.000000, 0.000000)
div r3.xy, r3.xyxx, cb0[10].xyxx
div r6.xy, r6.xxxx, cb0[10].xyxx
mad r15.xyzw, r6.xyxy, l(0.000000, -1.000000, 1.000000, 0.000000), r3.xyxy
sample_l_indexable(texture2d)(float,float,float,float) r6.z, r15.xyxx, t5.yzxw, s1, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r6.w, r15.zwzz, t5.yzwx, s1, l(0.000000)
add r6.z, r6.w, r6.z
mad r3.xy, r6.xyxx, l(-0.707000, 0.707000, 0.000000, 0.000000), r3.xyxx
sample_l_indexable(texture2d)(float,float,float,float) r3.x, r3.xyxx, t5.xyzw, s1, l(0.000000)
add r3.x, r3.x, r6.z
mul r3.y, r3.x, l(0.333332)
mad_sat r3.x, r3.x, l(0.333332), r5.w
add r5.w, -cb0[17].z, l(1.000000)
mul r3.x, r3.x, r5.w
if_nz r3.w
  add r3.w, r9.z, -cb0[13].z
  max r0.y, r0.y, l(0.000010)
  div_sat r0.y, r3.w, r0.y
  log r0.y, r0.y
  mul r0.y, r0.y, cb0[13].w
  exp r0.y, r0.y
  min r0.y, r0.y, l(1.000000)
  mul r6.xyzw, r0.yyyy, l(1.000000, 0.562500, 0.250000, 0.062500)
  mul r15.x, r6.x, cb0[21].x
  mul r15.y, r6.y, cb0[22].x
  mul r15.z, r6.z, cb0[23].x
  mul r15.w, r6.w, cb0[24].x
  mul r16.x, r6.x, cb0[21].y
  mul r16.y, r6.y, cb0[22].y
  mul r16.z, r6.z, cb0[23].y
  mul r16.w, r6.w, cb0[24].y
  mul r17.x, r6.x, cb0[21].z
  mul r17.y, r6.y, cb0[22].z
  mul r17.z, r6.z, cb0[23].z
  mul r17.w, r6.w, cb0[24].z
  add r6.xyz, r9.xyzx, cb1[9].xyzx
  mul r6.w, r6.z, l(1.66666663)
  dp3 r0.y, r6.xywx, r6.xywx
  sqrt r0.y, r0.y
  add r0.y, r0.y, l(-8960.000000)
  mad_sat r0.y, -r0.y, l(0.000781250012), l(1.000000)
  lt r3.w, l(0.000000), r0.y
  if_nz r3.w
    add r6.xyz, r9.xyzx, -cb0[20].xyzx
    mad r6.xyz, r6.xyzx, l(0.0000488281257, 0.0000488281257, 0.0000813802108, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
    sample_l_indexable(texture3d)(float,float,float,float) r18.xyzw, r6.xyzx, t18.xyzw, s3, l(0.000000)
    sample_l_indexable(texture3d)(float,float,float,float) r19.xyzw, r6.xyzx, t19.xyzw, s3, l(0.000000)
    sample_l_indexable(texture3d)(float,float,float,float) r6.xyzw, r6.xyzx, t20.xyzw, s3, l(0.000000)
    mad r15.xyzw, r0.yyyy, r18.xyzw, r15.xyzw
    mad r16.xyzw, r0.yyyy, r19.xyzw, r16.xyzw
    mad r17.xyzw, r0.yyyy, r6.xyzw, r17.xyzw
  endif 
  mul r6.xyz, r8.yzxy, l(-2.000000, -2.000000, -2.000000, 0.000000)
  max r6.xyz, r6.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  min r6.yzw, r6.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
  mov r6.x, l(0.500000)
  mul r6.xyzw, r6.xyzw, l(0.282094806, -0.488602519, 0.488602519, -0.488602519)
  dp4 r18.x, r15.xyzw, r6.xyzw
  dp4 r18.y, r16.xyzw, r6.xyzw
  dp4 r18.z, r17.xyzw, r6.xyzw
  max r6.xyz, r18.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r0.y, r12.z, l(0.975000), l(0.025000)
  mad r18.xyz, -r8.yzxy, r0.yyyy, r11.yzxy
  dp3 r0.y, r18.xyzx, r18.xyzx
  rsq r0.y, r0.y
  mul r18.xyz, r0.yyyy, r18.xyzx
  add r18.xyz, r18.xyzx, r18.xyzx
  max r18.xyz, r18.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  min r18.yzw, r18.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)
  mov r18.x, l(0.500000)
  mul r18.xyzw, r18.xyzw, l(0.282094806, -0.488602519, 0.488602519, -0.488602519)
  dp4 r19.x, r15.xyzw, r18.xyzw
  dp4 r19.y, r16.xyzw, r18.xyzw
  dp4 r19.z, r17.xyzw, r18.xyzw
  max r18.xyz, r19.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mul r18.xyz, r1.zzzz, r18.xyzx
  add r0.y, -r2.w, l(2.000000)
  mul r18.xyz, r0.yyyy, r18.xyzx
  dp3 r0.y, -r11.xyzx, r8.xyzx
  add r0.y, r0.y, r0.y
  mad r19.xyz, r8.yzxy, -r0.yyyy, -r11.yzxy
  dp3 r0.y, -r19.xyzx, -r19.xyzx
  rsq r0.y, r0.y
  mul r19.xyz, r0.yyyy, -r19.xyzx
  mul r19.xyz, r19.xyzx, l(-1.02332675, 1.02332675, -1.02332675, 0.000000)
  dp3 r15.x, r15.yzwy, r19.xyzx
  dp3 r15.y, r16.yzwy, r19.xyzx
  dp3 r15.z, r17.yzwy, r19.xyzx
  max r15.xyz, r15.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mul r0.y, r12.z, r12.z
  mad r3.w, r1.x, r0.y, -r1.x
  mad r1.x, r3.w, r1.x, l(1.000100)
  mul r1.x, r1.x, r1.x
  mul r1.x, r1.x, l(3.14159274)
  div r0.y, r0.y, r1.x
  min r0.y, r0.y, l(1.500000)
  mul r15.xyz, r15.xyzx, r0.yyyy
  mul r15.xyz, r2.yyyy, r15.xyzx
  mul r15.xyz, r0.zzzz, r15.xyzx
  mul r15.xyz, r15.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)
  mul r16.xyz, r5.xyzx, r18.xyzx
  mad r6.xyz, r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r6.xyzx
  mul r6.xyz, r2.zzzz, r6.xyzx
  mul r6.xyz, r6.xyzx, l(16.000000, 16.000000, 16.000000, 0.000000)
else 
  mov r6.xyz, l(0,0,0,0)
  mov r15.xyz, l(0,0,0,0)
endif 
ld_raw r0.y, l(0), g8.xxxx
add_sat r1.x, r12.z, l(-0.00787401572)
sqrt r1.x, r1.x
add r1.x, -r1.x, l(1.000000)
mul r2.z, r1.x, r1.x
mad r1.x, -r2.z, r1.x, l(1.000000)
mad r1.x, r1.x, l(7.000000), l(-1.000000)
max r1.x, r1.x, l(0.000000)
mov r9.w, l(1.000000)
mov r16.xyz, l(0,0,0,0)
mov r2.z, l(0)
mov r3.w, l(0)
loop 
  uge r5.w, r3.w, r0.y
  breakc_nz r5.w
  ld_structured r5.w, r3.w, l(0), g7.xxxx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r17.xyz, r5.w, l(0), t17.xyzx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r18.xyzw, r5.w, l(16), t17.xyzw
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r6.w, r5.w, l(32), t17.xxxx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r7.w, r5.w, l(40), t17.xxxx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r19.xyz, r5.w, l(48), t17.xyzx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r20.xyz, r5.w, l(64), t17.xyzx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r21.xyz, r5.w, l(80), t17.xyzx
  ld_structured_indexable(structured_buffer, stride=112)(mixed,mixed,mixed,mixed) r22.xyw, r5.w, l(96), t17.xyxz
  mov r23.x, r19.x
  mov r23.y, r20.x
  mov r23.z, r21.x
  mov r23.w, r22.x
  dp4 r24.x, r23.xyzw, r9.xyzw
  mov r25.x, r19.y
  mov r25.y, r20.y
  mov r25.z, r21.y
  mov r25.w, r22.y
  dp4 r24.y, r25.xyzw, r9.xyzw
  mov r22.x, r19.z
  mov r22.y, r20.z
  mov r22.z, r21.z
  dp4 r24.z, r22.xyzw, r9.xyzw
  add r19.xyz, r24.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  add r19.xyz, |r19.xyzx|, |r19.xyzx|
  max r5.w, r19.y, r19.x
  max r5.w, r19.z, r5.w
  add r8.w, -r6.w, l(1.000000)
  add r5.w, r5.w, -r8.w
  div_sat r5.w, r5.w, r6.w
  add r5.w, -r5.w, l(1.000000)
  dp3 r19.x, r23.xyzx, r14.xyzx
  dp3 r19.y, r25.xyzx, r14.xyzx
  dp3 r19.z, r22.xyzx, r14.xyzx
  add r20.xyz, -r24.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  div r20.xyz, r20.xyzx, r19.xyzx
  div r21.xyz, -r24.xyzx, r19.xyzx
  lt r22.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r19.xyzx
  movc r20.xyz, r22.xyzx, r20.xyzx, r21.xyzx
  min r6.w, r20.y, r20.x
  min r6.w, r20.z, r6.w
  mad r19.xyz, r19.xyzx, r6.wwww, r24.xyzx
  add r19.xyz, r19.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  dp3 r6.w, r19.xyzx, r19.xyzx
  rsq r6.w, r6.w
  mul r19.xyz, r6.wwww, r19.xyzx
  mov r19.w, r18.w
  sample_l_indexable(texturecubearray)(float,float,float,float) r19.xyz, r19.xyzw, t16.xyzw, s3, r1.x
  log r19.xyz, r19.xyzx
  mul r19.xyz, r19.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
  exp r19.xyz, r19.xyzx
  mad r17.xyz, r19.xyzx, r17.xyzx, r18.xyzx
  mad_sat r6.w, r5.w, r7.w, -r2.z
  mad r16.xyz, r17.xyzx, r6.wwww, r16.xyzx
  mad r2.z, r5.w, r7.w, r2.z
  iadd r3.w, r3.w, l(1)
endloop 
mul r0.y, r2.y, r3.x
movc r0.y, r1.w, r0.y, l(0)
mad r14.xyz, r16.xyzx, r0.yyyy, r15.xyzx
ld_raw r0.y, l(0), g6.xxxx
umin r0.y, r0.y, l(32)
resinfo_indexable(texture2d)(float,float,float,float)_uint r2.yz, l(0), t11.zxyw
ishl r2.yz, r2.yyzy, l(0, 1, 1, 0)
utof r2.yz, r2.yyzy
add r3.xw, r2.xxxx, l(-2000.000000, 0.000000, 0.000000, -8192.000000)
mul_sat r3.xw, r3.xxxw, l(0.000500, 0.000000, 0.000000, 0.000244140625)
mad r1.x, r3.x, l(-0.950000), l(1.000000)
mul r1.x, r1.x, l(1.200000)
mad r2.x, r12.z, l(0.975000), l(0.025000)
add r3.x, -r3.w, l(1.000000)
min r3.w, r12.z, l(1.000000)
mad r3.w, r3.w, l(-56.000000), l(64.000000)
add r2.w, -r2.w, l(2.000000)
mov r15.w, l(1.000000)
mov r9.w, l(1.000000)
mov r16.xyz, r6.xyzx
mov r17.xyz, r14.xyzx
mov r5.w, l(0)

// This loop finally draws the tile lighting:
loop 
  uge r6.w, r5.w, r0.y
  breakc_nz r6.w

  // Loads the index of the light to draw this iteration:
  ld_structured r6.w, r5.w, l(0), g5.xxxx

  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r18.xyzw, r6.w, l(96), t13.xyzw
  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r19.xyzw, r6.w, l(128), t13.xyzw
  ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r7.w, r6.w, l(156), t13.xxxx
  ushr r8.w, r7.w, l(28)
  utof r8.w, r8.w
  eq r10.w, r8.w, l(5.000000)
  if_nz r10.w
    and r20.xy, r18.zwzz, l(0x0000ffff, 0x0000ffff, 0, 0)
    ushr r20.zw, r18.zzzw, l(0, 0, 16, 16)
    f16tof32 r21.xyzw, r20.xzyw
  else 
    and r20.xy, r18.zwzz, l(0x0000ffff, 0x0000ffff, 0, 0)
    utof r20.xy, r20.xyxx
    ushr r18.zw, r18.zzzw, l(0, 0, 16, 16)
    utof r18.zw, r18.zzzw
    div r21.xz, r20.xxyx, r2.yyyy
    div r21.yw, r18.zzzw, r2.zzzz
    add r21.zw, -r21.xxxy, r21.zzzw
  endif 
  and r11.w, r1.w, r19.w
  if_nz r11.w
    ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r20.xyzw, r6.w, l(0), t13.xyzw
    ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r18.zw, r6.w, l(144), t13.xxxy
    and r22.xy, r18.xyxx, l(0x0000ffff, 0x0000ffff, 0, 0)
    ushr r18.xy, r18.xyxx, l(16, 16, 0, 0)
    f16tof32 r22.xz, r22.xxyx
    f16tof32 r22.yw, r18.xxxy
    and r11.w, r7.w, l(511)
    iadd r11.w, r11.w, l(-1)
    add r15.xyz, r9.xyzx, -r20.xyzx
    dp3 r12.w, r15.xyzx, r15.xyzx
    rsq r13.w, r12.w
    mul r20.xyz, r13.wwww, r15.xyzx
    lt r13.w, l(0.000000), r22.w
    if_nz r13.w
      mul r23.xyz, r20.wwww, r15.xyzx
      dp3 r13.w, r23.xyzx, r23.xyzx
      min r13.w, r13.w, l(1.000000)
      add r13.w, -r13.w, l(1.000000)
      log r13.w, r13.w
      mul r13.w, r13.w, r22.w
      exp r13.w, r13.w
    else 
      mul r14.w, r20.w, r20.w
      mul r14.w, r12.w, r14.w
      mad r14.w, -r14.w, r14.w, l(1.000000)
      max r14.w, r14.w, l(0.000000)
      mul r14.w, r14.w, r14.w
      max r12.w, r12.w, l(256.000000)
      div r12.w, l(1.000000, 1.000000, 1.000000, 1.000000), r12.w
      mul r12.w, r14.w, r12.w
      mul r13.w, r12.w, l(65536.000000)
    endif 
    dp3 r12.w, -r20.xyzx, -r19.xyzx
    add r12.w, -r18.z, r12.w
    mul_sat r12.w, r18.w, r12.w
    mul r12.w, r12.w, r13.w
    eq r18.xyzw, r8.wwww, l(2.000000, 3.000000, 1.000000, 4.000000)
    ige r8.w, r11.w, l(0)
    and r13.w, r8.w, r18.x
    or r13.w, r18.y, r13.w
    if_nz r13.w
      div r13.w, l(1.000000, 1.000000, 1.000000, 1.000000), r20.w
      dp2 r14.w, r15.xzxx, l(0.888073862, -0.459700823, 0.000000, 0.000000)
      dp3 r16.w, r15.xyzx, l(-0.888073862, -7.763787835E-008, -0.459700823, 0.000000)
      dp3 r17.w, r15.xyzx, l(-3.881894273E-008, -0.888073862, 0.459700823, 0.000000)
      dp3 r19.x, r15.xyzx, l(-3.881894273E-008, 0.888073862, 0.459700823, 0.000000)
      max r19.y, r14.w, r16.w
      max r19.x, r17.w, r19.x
      max r19.x, r19.x, r19.y
      eq r14.w, r14.w, r19.x
      if_nz r14.w
        mov r19.yzw, l(0,0.444036931,0.0614556149,-0.229850411)
        mov r23.xyz, l(0.632301211,3.209569943E-009,-0.409983695,0)
        mov r24.xyz, l(0.888073862,0,-0.459700823,0)
        mov r25.xyz, l(0.888073862,0,-0.459700823,0)
      else 
        eq r14.w, r16.w, r19.x
        if_nz r14.w
          mov r19.yzw, l(0,-0.444036931,0.0614555776,-0.229850411)
          mov r23.xyz, l(-0.255772650,-2.148475353E-008,-0.0497171432,0)
          mov r24.xyz, l(-0.888073862,-7.763788545E-008,-0.459700823,0)
          mov r25.xyz, l(-0.888073862,-7.763788545E-008,-0.459700823,0)
        else 
          eq r14.w, r17.w, r19.x
          movc r19.yzw, r14.wwww, l(0,-1.464843358E-008,-0.188264295,0.180133268), l(0,-3.058964992E-008,0.699809551,0.279567540)
          movc r23.xyz, r14.wwww, l(0.0614555962,-0.444036931,0.229850411,0), l(0.0614555962,0.444036931,0.229850411,0)
          movc r25.xyz, r14.wwww, l(-3.881894273E-008,-0.888073862,0.459700823,0), l(-3.881894273E-008,0.888073862,0.459700823,0)
          mov r24.xyz, r25.xyzx
        endif 
      endif 
      add r13.w, r13.w, l(-0.100000)
      div r13.w, l(1.000000, 1.000000, 1.000000, 1.000000), r13.w
      mul r25.xyz, r13.wwww, r25.xyzx
      mov r25.w, -r13.w
      dp3 r19.x, r19.yzwy, r15.xyzx
      dp3 r19.y, r23.xyzx, r15.xyzx
      dp4 r13.w, r25.xyzw, r15.xyzw
      dp3 r14.w, r24.xyzx, r15.xyzx
      div r15.xy, r19.xyxx, r14.wwww
    else 
      ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r19.xyzw, r6.w, l(16), t13.xyzw
      ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r23.xyzw, r6.w, l(32), t13.xyzw
      ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r24.xyzw, r6.w, l(48), t13.xyzw
      ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r25.xyzw, r6.w, l(64), t13.xyzw
      mov r26.x, r19.x
      mov r26.y, r23.x
      mov r26.z, r24.x
      mov r26.w, r25.x
      dp4 r26.x, r26.xyzw, r9.xyzw
      mov r27.x, r19.y
      mov r27.y, r23.y
      mov r27.z, r24.y
      mov r27.w, r25.y
      dp4 r26.y, r27.xyzw, r9.xyzw
      mov r27.x, r19.z
      mov r27.y, r23.z
      mov r27.z, r24.z
      mov r27.w, r25.z
      dp4 r13.w, r27.xyzw, r9.xyzw
      mov r25.x, r19.w
      mov r25.y, r23.w
      mov r25.z, r24.w
      dp4 r14.w, r25.xyzw, r9.xyzw
      div r15.xy, r26.xyxx, r14.wwww
    endif 
    or r14.w, r18.z, r18.y
    or r14.w, r18.w, r14.w
    if_nz r14.w
      mad r19.xy, r15.xyxx, r21.zwzz, r21.xyxx
      if_nz r18.w
        mul r12.w, r3.x, r12.w
        mov r14.w, l(200.000000)
        mov r16.w, l(0)
      else 
        mov r14.w, r1.x
        mov r16.w, l(0.050000)
      endif 
      div r17.w, l(1.000000, 1.000000, 1.000000, 1.000000), r20.w
      sample_l_indexable(texture2d)(float,float,float,float) r18.zw, r19.xyxx, t11.zwxy, s0, l(0.000000)
      mul r14.w, r14.w, r17.w
      mul r19.xy, r14.wwww, l(1.000000, 0.040000, 0.000000, 0.000000)
      add r18.zw, -r13.wwww, r18.zzzw
      mul r18.zw, r18.zzzw, r19.xxxy
      mul r18.zw, r18.zzzw, l(0.000000, 0.000000, 1.442695, 1.442695)
      exp r18.zw, r18.zzzw
      add_sat r18.zw, -r16.wwww, r18.zzzw
      min r14.w, r18.w, r18.z
      mul r12.w, r12.w, r14.w
    endif 
    if_nz r10.w
      mad r18.zw, r15.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
      mul r10.w, r21.w, l(0.500000)
      mul r18.zw, r10.wwww, r18.zzzw
      dp2 r10.w, r18.zwzz, r21.xyxx
      mad r10.w, r21.z, l(0.500000), -r10.w
      div r10.w, r10.w, r21.z
      sample_l_indexable(texture2d)(float,float,float,float) r14.w, r15.xyxx, t12.yzwx, s4, l(0.000000)
      mad r10.w, -r14.w, l(0.250000), r10.w
      add r10.w, -r13.w, r10.w
      mul r10.w, r10.w, l(1772.783569)
      exp r10.w, r10.w
      min r10.w, r10.w, l(1.000000)
      mul r10.w, r3.y, r10.w
      mul r12.w, r10.w, r12.w
    endif 
    dp3 r10.w, r8.xyzx, -r20.xyzx
    mov_sat r14.w, r10.w
    mad r19.xyz, -r8.xyzx, r2.xxxx, -r20.xyzx
    dp3 r16.w, r19.xyzx, r19.xyzx
    rsq r16.w, r16.w
    mul r19.xyz, r16.wwww, r19.xyzx
    dp3_sat r16.w, r11.xyzx, -r19.xyzx
    log r16.w, r16.w
    mul r16.w, r3.w, r16.w
    exp r16.w, r16.w
    mad_sat r10.w, r10.w, l(-0.500000), l(0.500000)
    mad r10.w, r10.w, r12.w, r16.w
    mul r10.w, r1.z, r10.w
    mad r19.xyz, r10.xyzx, r0.xxxx, -r20.xyzx
    dp3 r16.w, r19.xyzx, r19.xyzx
    rsq r16.w, r16.w
    mul r19.xyz, r16.wwww, r19.xyzx
    dp3_sat r16.w, r7.xyzx, -r20.xyzx
    dp3_sat r12.x, -r20.xyzx, r19.xyzx
    dp3_sat r17.w, r7.xyzx, r19.xyzx
    log r17.w, r17.w
    mul r17.w, r17.w, l(32.000000)
    exp r12.y, r17.w
    sample_l_indexable(texture2d)(float,float,float,float) r12.y, r12.yzyy, t6.xyzw, s1, l(0.000000)
    mul r12.y, r16.w, r12.y
    sample_l_indexable(texture2d)(float,float,float,float) r16.w, r12.xzxx, t6.yzwx, s1, l(0.000000)
    mul r18.zw, r16.wwww, l(0.000000, 0.000000, 128.000000, 32.000000)
    mul r12.x, r12.x, l(-8.656170)
    exp r12.x, r12.x
    mul r12.x, r18.z, r12.x
    mad r12.x, r12.x, l(0.750000), r18.w
    mul r12.x, r12.y, r12.x
    mul r12.x, r0.w, r12.x
    mul r12.x, r12.x, l(256.000000)
    dp3 r12.y, r19.xyzx, r13.xyzx
    add_sat r12.y, r12.y, l(1.000000)
    mul r12.y, r0.z, r12.y
    dp3 r16.w, r20.xyzx, r13.xyzx
    add_sat r16.w, -r16.w, l(1.000000)
    mul r12.x, r12.y, r12.x
    mul r12.y, r12.w, r16.w
    mul r10.w, r2.w, r10.w
    if_nz r8.w
      ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r19.xyzw, r6.w, l(80), t13.xyzw
      ld_structured_indexable(structured_buffer, stride=160)(mixed,mixed,mixed,mixed) r20.xyz, r6.w, l(112), t13.xyzx
      and r21.xyzw, r19.xyzw, l(0x0000ffff, 0x0000ffff, 0x0000ffff, 0x0000ffff)
      ushr r19.xyzw, r19.xyzw, l(16, 16, 16, 16)
      f16tof32 r21.xyzw, r21.xyzw
      f16tof32 r19.xyzw, r19.xwyz
      ubfe r23.xyz, l(5, 9, 5, 0), l(9, 14, 23, 0), r7.wwww
      iadd r6.w, r23.y, l(-1)
      mov r24.xz, r21.yyxy
      mov r24.yw, r19.zzzx
      mad r18.zw, r15.xxxy, r24.xxxy, r24.zzzw
      frc r24.xy, r18.zwzz
      itof r24.z, r11.w
      or r7.w, r18.x, r18.y
      if_nz r7.w
        add r15.z, r13.w, r24.z
        mov r24.xyz, r15.xyzx
      endif 
      itof r18.xy, r23.xzxx
      sample_l_indexable(texture2darray)(float,float,float,float) r18.xzw, r24.xyzx, t14.xwyz, s0, r18.x
      ige r7.w, r11.w, l(255)
      if_nz r7.w
        sample_l_indexable(texture2d)(float,float,float,float) r23.xyz, r24.xyxx, t15.xyzw, s0, l(0.000000)
        log r23.xyz, r23.xyzx
        mul r23.xyz, r23.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
        exp r18.xzw, r23.xxyz
      endif 
      mov r19.xz, r21.wwzw
      mad r15.xy, r15.xyxx, r19.xyxx, r19.zwzz
      frc r15.xy, r15.xyxx
      itof r15.z, r6.w
      sample_l_indexable(texture2darray)(float,float,float,float) r15.xyz, r15.xyzx, t14.xyzw, s0, r18.y
      mul r19.xyz, r15.xyzx, r20.yyyy
      mad r19.xyz, r20.xxxx, r18.xzwx, r19.xyzx
      mul r18.xyz, r18.xzwx, r20.zzzz
      mad r15.xyz, r18.xyzx, r15.xyzx, r19.xyzx
      mul r22.xyz, r15.xyzx, r22.xyzx
    endif 
    mul r15.xyz, r12.yyyy, r22.xyzx
    min r15.xyz, r15.xyzx, l(500.000000, 500.000000, 500.000000, 0.000000)
    mul r18.xyz, r5.xyzx, r10.wwww
    mad r18.xyz, r18.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r14.wwww
    mad r16.xyz, r18.xyzx, r15.xyzx, r16.xyzx
    mad r17.xyz, r12.xxxx, r15.xyzx, r17.xyzx
  endif 
  iadd r5.w, r5.w, l(1)
endloop 
mul r0.xyz, r3.zzzz, r16.xyzx
mul r1.xyz, r1.yyyy, r17.xyzx
mov r0.w, l(0)
store_uav_typed u0.xyzw, r4.xwww, r0.xyzw
mul r0.x, cb0[10].x, l(0.500000)
ftoi r0.x, r0.x
mov r0.yzw, l(0,0,0,0)
iadd r0.xyzw, r0.xyzw, r4.xyzw
mov r1.w, l(0)
store_uav_typed u0.xyzw, r0.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used
