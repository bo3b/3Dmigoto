//Fog
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[32];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[28];
}

// Copied from CS eb8c3e5e00a6c476 with 3DMigoto to get access to projection matrix:
cbuffer cb13 : register(b13)
{
  matrix projection : packoffset(c6);
}

#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : TEXCOORD10,
  float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  uint v7 : SV_IsFrontFace0,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = cb0[24].w + -cb0[24].z;
  r0.y = cmp(0 < r0.x);
  r0.z = cmp(r0.x < 0);
  r0.x = max(9.99999997e-007, abs(r0.x));
  r0.y = (int)-r0.y + (int)r0.z;
  r0.y = cmp((int)r0.y < 0);
  r0.y = r0.y ? -1 : 1;
  r0.x = r0.y * r0.x;
  r0.yzw = cb1[21].xyz + v5.xyz;
  r1.xyz = cb1[10].xyz + -r0.yzw;
  r0.y = -cb0[13].z + r0.w;
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = sqrt(r0.z);
  r0.z = -cb0[24].z + r0.z;
  r0.x = saturate(r0.z / r0.x);
  r0.z = r0.x * r0.x;
  r0.x = -r0.x * 2 + 3;
  r0.x = r0.z * r0.x;
  r0.zw = float2(-0.5,-0.5) + v2.xy;
  r0.z = dot(r0.zw, r0.zw);
  r0.z = sqrt(r0.z);
  r0.z = -r0.z * 2 + 1;
  r0.z = max(0, r0.z);
  r0.z = max(9.99999997e-007, r0.z);
  r0.z = r0.z * r0.z;
  r0.y = r0.y * r0.z;
  r1.x = cb1[31].x * -0.0149999997 + v2.x;
  r1.y = v2.y;
  r0.z = t1.SampleBias(s0_s, r1.xy, 0).y;
  r0.y = r0.z * r0.y;
  r0.y = 3.9999999e-005 * r0.y;
  r0.x = r0.x * r0.y;
  r0.x = saturate(cb0[25].x * r0.x);
  
 // float4 s=StereoParams.Load(0);
// v5.x -= s.x*(v5.z-s.y)/projection._m00; ///cb1[0].x;  
  
  r1.xyzw = cb1[1].xyzw * v5.yyyy;
  r1.xyzw = cb1[0].xyzw * v5.xxxx + r1.xyzw;
  r1.xyzw = cb1[2].xyzw * v5.zzzz + r1.xyzw;
  r1.xyzw = cb1[3].xyzw * v5.wwww + r1.xyzw;
 
 float4 s=StereoParams.Load(0);
r1.x += s.x*(r1.w-s.y); //*0.935; ///cb1[0].x;  
  
  r0.yz = r1.xy / r1.ww;
  r0.yz = r0.yz * cb1[19].xy + cb1[19].wz;
  r1.xy = cb0[10].xy * r0.yz;
  r2.xy = (uint2)r1.xy;
  r2.zw = float2(0,0);
  r0.w = t0.Load(r2.xyz).x;
  r0.w = min(0.999999881, r0.w);
  r0.w = r0.w * cb1[20].z + -cb1[20].w;
  r0.w = 1 / r0.w;
  r0.w = r0.w + -r1.w;
  r0.w = saturate(0.000571428565 * r0.w);
  r2.w = r0.w * r0.x;
  r0.x = cmp(0 >= r2.w);
  if (r0.x != 0) discard;
  t2.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
  r0.xw = uiDest.xy;
  r0.xw = (uint2)r0.xw;
  r0.xy = r0.yz * r0.xw;
  r0.xy = (uint2)r0.xy;
  r0.zw = float2(0,0);
  r0.x = t2.Load(r0.xyz).x;
  r0.x = min(0.999999881, r0.x);
  r0.x = r0.x * cb1[20].z + -cb1[20].w;
  r0.x = 1 / r0.x;
  r0.x = cmp(r1.z < r0.x);
  r0.x = r0.x ? 1.000000 : 0;
  r0.y = -cb0[27].x * r0.x + 1;
  r0.x = cb0[27].x * r0.x;
  r0.z = dot(v6.xyz, float3(0.300000012,0.589999974,0.109999999));
  r1.xyz = -v6.xyz + r0.zzz;
  r1.xyz = cb0[24].xxx * r1.xyz + v6.xyz;
  r2.xyz = r1.xyz * cb0[23].xyz + cb0[22].xyz;
  o0.xyzw = r2.xyzw * r0.yyyy;
  o1.xyzw = r2.xyzw * r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.1.33 on Fri Sep 25 09:29:16 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyz         0     NONE   float       
// TEXCOORD                11   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xy          3     NONE   float       
// TEXCOORD                 2   xy          4     NONE   float       
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyz 
// SV_IsFrontFace           0   x           7    FFACE    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[28], immediateIndexed
dcl_constantbuffer cb1[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v2.xy
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 3
add r0.x, -cb0[24].z, cb0[24].w
lt r0.y, l(0.000000), r0.x
lt r0.z, r0.x, l(0.000000)
max r0.x, |r0.x|, l(0.000001)
iadd r0.y, -r0.y, r0.z
ilt r0.y, r0.y, l(0)
movc r0.y, r0.y, l(-1.000000), l(1.000000)
mul r0.x, r0.x, r0.y
add r0.yzw, v5.xxyz, cb1[21].xxyz
add r1.xyz, -r0.yzwy, cb1[10].xyzx
add r0.y, r0.w, -cb0[13].z
dp3 r0.z, r1.xyzx, r1.xyzx
sqrt r0.z, r0.z
add r0.z, r0.z, -cb0[24].z
div_sat r0.x, r0.z, r0.x
mul r0.z, r0.x, r0.x
mad r0.x, -r0.x, l(2.000000), l(3.000000)
mul r0.x, r0.x, r0.z
add r0.zw, v2.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
dp2 r0.z, r0.zwzz, r0.zwzz
sqrt r0.z, r0.z
mad r0.z, -r0.z, l(2.000000), l(1.000000)
max r0.z, r0.z, l(0.000000)
max r0.z, r0.z, l(0.000001)
mul r0.z, r0.z, r0.z
mul r0.y, r0.z, r0.y
mad r1.x, cb1[31].x, l(-0.015000), v2.x
mov r1.y, v2.y
sample_b_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t1.xzyw, s0, l(0.000000)
mul r0.y, r0.y, r0.z
mul r0.y, r0.y, l(0.000040)
mul r0.x, r0.y, r0.x
mul_sat r0.x, r0.x, cb0[25].x
mul r1.xyzw, v5.yyyy, cb1[1].xyzw
mad r1.xyzw, cb1[0].xyzw, v5.xxxx, r1.xyzw
mad r1.xyzw, cb1[2].xyzw, v5.zzzz, r1.xyzw
mad r1.xyzw, cb1[3].xyzw, v5.wwww, r1.xyzw
div r0.yz, r1.xxyx, r1.wwww
mad r0.yz, r0.yyzy, cb1[19].xxyx, cb1[19].wwzw
mul r1.xy, r0.yzyy, cb0[10].xyxx
ftou r2.xy, r1.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.w, r2.xyzw, t0.yzwx
min r0.w, r0.w, l(1.000000)
mad r0.w, r0.w, cb1[20].z, -cb1[20].w
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r0.w, -r1.w, r0.w
mul_sat r0.w, r0.w, l(0.000571)
mul r2.w, r0.x, r0.w
ge r0.x, l(0.000000), r2.w
discard_nz r0.x
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.xw, l(0), t2.xzwy
utof r0.xw, r0.xxxw
mul r0.xy, r0.xwxx, r0.yzyy
ftou r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t2.xyzw
min r0.x, r0.x, l(1.000000)
mad r0.x, r0.x, cb1[20].z, -cb1[20].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
lt r0.x, r1.z, r0.x
and r0.x, r0.x, l(0x3f800000)
mad r0.y, -cb0[27].x, r0.x, l(1.000000)
mul r0.x, r0.x, cb0[27].x
dp3 r0.z, v6.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
add r1.xyz, r0.zzzz, -v6.xyzx
mad r1.xyz, cb0[24].xxxx, r1.xyzx, v6.xyzx
mad r2.xyz, r1.xyzx, cb0[23].xyzx, cb0[22].xyzx
mul o0.xyzw, r0.yyyy, r2.xyzw
mul o1.xyzw, r0.xxxx, r2.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
