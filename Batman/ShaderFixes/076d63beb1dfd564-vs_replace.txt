// Batman's reflection - apply stereo correction to output position + texcoord
// 82056f0020d634b0-vs_replace.txt
// 076d63beb1dfd564-vs_replace.txt
// d88f567d36ec2e5c-vs_replace.txt

// ---- Created with 3Dmigoto v1.2.20 on Tue Dec 29 01:18:56 2015
cbuffer cb2 : register(b2)
{
  float4 cb2[768];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[41];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include <ShaderFixes/matrix.hlsl>

void main( 
  float4 v0 : POSITION0,
  float3 v1 : TANGENT0,
  float4 v2 : NORMAL0,
  uint4 v3 : BLENDINDICES0,
  float4 v4 : BLENDWEIGHT0,
  int4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD0,
  float4 v7 : TEXCOORD1,
  float2 v8 : TEXCOORD2,
  float4 v9 : COLOR0,
  out float4 o0 : TEXCOORD10,
  out float4 o1 : TEXCOORD11,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float4 o4 : TEXCOORD2,
  out float4 o5 : TEXCOORD5,
  out float3 o6 : TEXCOORD6,
  out float4 o7 : SV_POSITION0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.xyzw = (int4)v3.xyzw * int4(3,3,3,3);
  r2.xyzw = cb2[r1.y+0].xyzw * v4.yyyy;
  r2.xyzw = v4.xxxx * cb2[r1.x+0].xyzw + r2.xyzw;
  r2.xyzw = v4.zzzz * cb2[r1.z+0].xyzw + r2.xyzw;
  r2.xyzw = v4.wwww * cb2[r1.w+0].xyzw + r2.xyzw;
  r3.xy = (int2)v5.zw;
  r3.xy = float2(0.00392156886,0.00392156886) * r3.xy;
  r3.zw = (int2)v5.xy * int2(3,3);
  r2.xyzw = r3.xxxx * cb2[r3.z+0].xyzw + r2.xyzw;
  r2.xyzw = r3.yyyy * cb2[r3.w+0].xyzw + r2.xyzw;
  r4.z = dot(r0.xyz, r2.xyz);
  r5.xyzw = cb2[r1.y+1].xyzw * v4.yyyy;
  r5.xyzw = v4.xxxx * cb2[r1.x+1].xyzw + r5.xyzw;
  r5.xyzw = v4.zzzz * cb2[r1.z+1].xyzw + r5.xyzw;
  r5.xyzw = v4.wwww * cb2[r1.w+1].xyzw + r5.xyzw;
  r5.xyzw = r3.xxxx * cb2[r3.z+1].xyzw + r5.xyzw;
  r5.xyzw = r3.yyyy * cb2[r3.w+1].xyzw + r5.xyzw;
  r4.x = dot(r0.xyz, r5.xyz);
  r6.xyzw = cb2[r1.y+2].xyzw * v4.yyyy;
  r6.xyzw = v4.xxxx * cb2[r1.x+2].xyzw + r6.xyzw;
  r6.xyzw = v4.zzzz * cb2[r1.z+2].xyzw + r6.xyzw;
  r1.xyzw = v4.wwww * cb2[r1.w+2].xyzw + r6.xyzw;
  r1.xyzw = r3.xxxx * cb2[r3.z+2].xyzw + r1.xyzw;
  r1.xyzw = r3.yyyy * cb2[r3.w+2].xyzw + r1.xyzw;
  r4.y = dot(r0.xyz, r1.xyz);
  r0.xyzw = v2.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r3.y = dot(r0.xyz, r2.xyz);
  r3.z = dot(r0.xyz, r5.xyz);
  r3.x = dot(r0.xyz, r1.xyz);
  r0.xyz = r3.xyz * r4.xyz;
  r0.xyz = r3.zxy * r4.yzx + -r0.xyz;
  r4.xw = cb0[1].xz * r4.xx;
  r4.xz = cb0[0].xz * r4.zz + r4.xw;
  r4.xy = cb0[2].xz * r4.yy + r4.xz;
  r3.zw = cb0[1].xz * r3.zz;
  r3.yz = cb0[0].xz * r3.yy + r3.zw;
  r3.xy = cb0[2].xz * r3.xx + r3.yz;
  r0.xyz = r0.xyz * r0.www;
  o1.w = cb0[24].w * r0.w;
  r0.yw = cb0[1].xz * r0.yy;
  r0.xy = cb0[0].xz * r0.xx + r0.yw;
  r0.xy = cb0[2].xz * r0.zz + r0.xy;
  r4.z = r0.x;
  o1.y = r0.y;
  r4.w = r3.x;
  o1.z = r3.y;
  o0.xyz = r4.xzw;
  o1.x = r4.y;
  o2.xy = v6.xy;
  o3.xy = v7.xy;
  o4.xy = v8.xy;
  r0.xyz = v0.xyz * cb0[32].xyz + cb0[31].xyz;
  r3.xyz = v9.zyx * float3(2,-2,2) + float3(-0.995999992,0.995999992,-0.995999992);
  r0.xyz = cb0[22].zzz * r3.xyz + r0.xyz;
  r0.w = 1;
  r3.x = dot(r0.xyzw, r5.xyzw);
  r3.xyzw = cb0[1].xyzw * r3.xxxx;
  r2.x = dot(r0.xyzw, r2.xyzw);
  r0.x = dot(r0.xyzw, r1.xyzw);
  r1.xyzw = cb0[0].xyzw * r2.xxxx + r3.xyzw;
  r0.xyzw = cb0[2].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = cb0[3].xyzw + r0.xyzw;
  r1.xyzw = cb0[38].xyzw * r0.yyyy;
  r1.xyzw = cb0[37].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb0[39].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb0[40].xyzw * r0.wwww + r1.xyzw;
  r1.xyzw = cb0[34].xyzw * r0.yyyy;
  r1.xyzw = cb0[33].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb0[35].xyzw * r0.zzzz + r1.xyzw;
  r1.xyzw = cb0[36].xyzw * r0.wwww + r1.xyzw;
  o6.xyz = r0.xyz;

// Apply stereo correction to both output position & texcoord:
float4 stereo = StereoParams.Load(0);
r1.x += stereo.x * (r1.w - stereo.y);

  o5.xyzw = r1.xyzw;
  o7.xyzw = r1.xyzw;

// Not sure if this is necessary or not, didn't notice any difference:
//o6.xyz = mul(r1, inverse(cb0[32], cb0[33], cb0[34], cb0[35]));

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TANGENT                  0   xyz         1     NONE   float   xyz 
// NORMAL                   0   xyzw        2     NONE   float   xyzw
// BLENDINDICES             0   xyzw        3     NONE    uint   xyzw
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE     int   xyzw
// TEXCOORD                 0   xy          6     NONE   float   xy  
// TEXCOORD                 1   xy          7     NONE   float   xy  
// TEXCOORD                 2   xy          8     NONE   float   xy  
// COLOR                    0   xyzw        9     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyz         0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xy          3     NONE   float   xy  
// TEXCOORD                 2   xy          4     NONE   float   xy  
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyz         6     NONE   float   xyz 
// SV_POSITION              0   xyzw        7      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[41], immediateIndexed
dcl_constantbuffer cb2[768], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.xy
dcl_input v7.xy
dcl_input v8.xy
dcl_input v9.xyz
dcl_output o0.xyz
dcl_output o1.xyzw
dcl_output o2.xy
dcl_output o3.xy
dcl_output o4.xy
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output_siv o7.xyzw, position
dcl_temps 7
mad r0.xyz, v1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
imul null, r1.xyzw, v3.xyzw, l(3, 3, 3, 3)
mul r2.xyzw, v4.yyyy, cb2[r1.y + 0].xyzw
mad r2.xyzw, v4.xxxx, cb2[r1.x + 0].xyzw, r2.xyzw
mad r2.xyzw, v4.zzzz, cb2[r1.z + 0].xyzw, r2.xyzw
mad r2.xyzw, v4.wwww, cb2[r1.w + 0].xyzw, r2.xyzw
itof r3.xy, v5.zwzz
mul r3.xy, r3.xyxx, l(0.003922, 0.003922, 0.000000, 0.000000)
imul null, r3.zw, v5.xxxy, l(0, 0, 3, 3)
mad r2.xyzw, r3.xxxx, cb2[r3.z + 0].xyzw, r2.xyzw
mad r2.xyzw, r3.yyyy, cb2[r3.w + 0].xyzw, r2.xyzw
dp3 r4.z, r0.xyzx, r2.xyzx
mul r5.xyzw, v4.yyyy, cb2[r1.y + 1].xyzw
mad r5.xyzw, v4.xxxx, cb2[r1.x + 1].xyzw, r5.xyzw
mad r5.xyzw, v4.zzzz, cb2[r1.z + 1].xyzw, r5.xyzw
mad r5.xyzw, v4.wwww, cb2[r1.w + 1].xyzw, r5.xyzw
mad r5.xyzw, r3.xxxx, cb2[r3.z + 1].xyzw, r5.xyzw
mad r5.xyzw, r3.yyyy, cb2[r3.w + 1].xyzw, r5.xyzw
dp3 r4.x, r0.xyzx, r5.xyzx
mul r6.xyzw, v4.yyyy, cb2[r1.y + 2].xyzw
mad r6.xyzw, v4.xxxx, cb2[r1.x + 2].xyzw, r6.xyzw
mad r6.xyzw, v4.zzzz, cb2[r1.z + 2].xyzw, r6.xyzw
mad r1.xyzw, v4.wwww, cb2[r1.w + 2].xyzw, r6.xyzw
mad r1.xyzw, r3.xxxx, cb2[r3.z + 2].xyzw, r1.xyzw
mad r1.xyzw, r3.yyyy, cb2[r3.w + 2].xyzw, r1.xyzw
dp3 r4.y, r0.xyzx, r1.xyzx
mad r0.xyzw, v2.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
dp3 r3.y, r0.xyzx, r2.xyzx
dp3 r3.z, r0.xyzx, r5.xyzx
dp3 r3.x, r0.xyzx, r1.xyzx
mul r0.xyz, r4.xyzx, r3.xyzx
mad r0.xyz, r3.zxyz, r4.yzxy, -r0.xyzx
mul r4.xw, r4.xxxx, cb0[1].xxxz
mad r4.xz, cb0[0].xxzx, r4.zzzz, r4.xxwx
mad r4.xy, cb0[2].xzxx, r4.yyyy, r4.xzxx
mul r3.zw, r3.zzzz, cb0[1].xxxz
mad r3.yz, cb0[0].xxzx, r3.yyyy, r3.zzwz
mad r3.xy, cb0[2].xzxx, r3.xxxx, r3.yzyy
mul r0.xyz, r0.wwww, r0.xyzx
mul o1.w, r0.w, cb0[24].w
mul r0.yw, r0.yyyy, cb0[1].xxxz
mad r0.xy, cb0[0].xzxx, r0.xxxx, r0.ywyy
mad r0.xy, cb0[2].xzxx, r0.zzzz, r0.xyxx
mov r4.z, r0.x
mov o1.y, r0.y
mov r4.w, r3.x
mov o1.z, r3.y
mov o0.xyz, r4.xzwx
mov o1.x, r4.y
mov o2.xy, v6.xyxx
mov o3.xy, v7.xyxx
mov o4.xy, v8.xyxx
mad r0.xyz, v0.xyzx, cb0[32].xyzx, cb0[31].xyzx
mad r3.xyz, v9.zyxz, l(2.000000, -2.000000, 2.000000, 0.000000), l(-0.996000, 0.996000, -0.996000, 0.000000)
mad r0.xyz, cb0[22].zzzz, r3.xyzx, r0.xyzx
mov r0.w, l(1.000000)
dp4 r3.x, r0.xyzw, r5.xyzw
mul r3.xyzw, r3.xxxx, cb0[1].xyzw
dp4 r2.x, r0.xyzw, r2.xyzw
dp4 r0.x, r0.xyzw, r1.xyzw
mad r1.xyzw, cb0[0].xyzw, r2.xxxx, r3.xyzw
mad r0.xyzw, cb0[2].xyzw, r0.xxxx, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mul r1.xyzw, r0.yyyy, cb0[38].xyzw
mad r1.xyzw, cb0[37].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb0[39].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb0[40].xyzw, r0.wwww, r1.xyzw
mul r1.xyzw, r0.yyyy, cb0[34].xyzw
mad r1.xyzw, cb0[33].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb0[35].xyzw, r0.zzzz, r1.xyzw
mad r1.xyzw, cb0[36].xyzw, r0.wwww, r1.xyzw
mov o6.xyz, r0.xyzx
mov o5.xyzw, r1.xyzw
mov o7.xyzw, r1.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\SteamLibrary\steamapps\common\Batman Arkham Knight\Binaries\Win64\wrapper1349(32,14-15): warning X3578: Output value 'o0' is not completely initialized
D:\SteamLibrary\steamapps\common\Batman Arkham Knight\Binaries\Win64\wrapper1349(34,14-15): warning X3578: Output value 'o2' is not completely initialized
D:\SteamLibrary\steamapps\common\Batman Arkham Knight\Binaries\Win64\wrapper1349(35,14-15): warning X3578: Output value 'o3' is not completely initialized
D:\SteamLibrary\steamapps\common\Batman Arkham Knight\Binaries\Win64\wrapper1349(36,14-15): warning X3578: Output value 'o4' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
