// Smoke halos - uses both corrected & uncorrected world coords from vertex shader
// VS 12d7bd0ffecd2f74
// PS 51706b09de830f6c (turbulant density - needs both corrected & uncorrected)
// PS fb5f47e7dd64055e (uniform density - only needs corrected)

// ---- Created with 3Dmigoto v1.2.20 on Tue Dec 29 01:49:49 2015
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[32];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[36];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3_corrected : TEXCOORD5,
  float4 v4 : TEXCOORD6,
  float4 v5 : TEXCOORD7,
  float4 v6 : TEXCOORD8,
  float4 v3_uncorrected : TEXCOORD9,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.zw = float2(0,0);

float4 r1_corrected, r1_uncorrected;

r1_corrected.xyzw = cb1[1].xyzw * v3_corrected.yyyy;
r1_corrected.xyzw = cb1[0].xyzw * v3_corrected.xxxx + r1_corrected.xyzw;
r1_corrected.xyzw = cb1[2].xyzw * v3_corrected.zzzz + r1_corrected.xyzw;
r1_corrected.xyzw = cb1[3].xyzw * v3_corrected.wwww + r1_corrected.xyzw;

r1_uncorrected.xyzw = cb1[1].xyzw * v3_uncorrected.yyyy;
r1_uncorrected.xyzw = cb1[0].xyzw * v3_uncorrected.xxxx + r1_uncorrected.xyzw;
r1_uncorrected.xyzw = cb1[2].xyzw * v3_uncorrected.zzzz + r1_uncorrected.xyzw;
r1_uncorrected.xyzw = cb1[3].xyzw * v3_uncorrected.wwww + r1_uncorrected.xyzw;

  r2.xy = r1_corrected.xy / r1_corrected.ww;
  r2.xy = r2.xy * cb1[19].xy + cb1[19].wz;
  r2.zw = cb0[10].xy * r2.xy;
  r0.xy = (uint2)r2.zw;
  r0.x = t0.Load(r0.xyz).x;
  r0.x = min(0.999999881, r0.x);
  r0.x = r0.x * cb1[20].z + -cb1[20].w;
  r0.x = 1 / r0.x;
  r0.x = r0.x + -r1_uncorrected.w;
  r0.x = saturate(0.0078125 * r0.x);
  r0.yz = -cb0[16].xy + r1_uncorrected.xy;
  r0.yz = r0.yz * cb0[18].xy + float2(0.5,0.5);
  r0.yz = float2(0.5,0.5) * r0.yz;
  r0.yz = cb1[31].xx * float2(0.0250000004,0.0250000004) + r0.yz;
  r0.y = t1.SampleBias(s0_s, r0.yz, 0).y;
  r0.yz = r0.yy * float2(0.125,0.125) + v0.xy;
  r0.y = t2.SampleBias(s1_s, r0.yz, 0).y;
  r0.z = saturate(r0.y);
  r0.y = r0.z * r0.y;
  r0.y = v2.y * r0.y;
  r0.x = r0.y * r0.x;
  r0.y = saturate(v4.w);
  r0.x = r0.x * r0.y;
  r0.w = saturate(0.600000024 * r0.x);
  r1.x = cmp(0 >= r0.w);
  if (r1.x != 0) discard;
  t3.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
  r1.xy = uiDest.xy;
  r1.xy = (uint2)r1.xy;
  r1.xy = r2.xy * r1.xy;
  r2.xy = (uint2)r1.xy;
  r2.zw = float2(0,0);
  r1.x = t3.Load(r2.xyz).x;
  r1.x = min(0.999999881, r1.x);
  r1.x = r1.x * cb1[20].z + -cb1[20].w;
  r1.x = 1 / r1.x;
  r1.x = cmp(r1_corrected.z < r1.x);
  r1.x = r1.x ? 1.000000 : 0;
  r1.y = -cb0[35].x * r1.x + 1;
  r1.x = cb0[35].x * r1.x;
  r2.xyz = float3(1,1,1) + -cb0[23].xyz;
  r3.xyz = float3(0.125,0.125,0.125) + cb0[23].xyz;
  r2.xyz = r2.xyz * v5.xyz + r3.xyz;
  r1.z = 1 + -v6.w;
  r0.xyz = r2.xyz * r1.zzz + v6.xyz;
  o0.xyzw = r1.yyyy * r0.xyzw;
  o1.xyzw = r1.xxxx * r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 1   xyzw        1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float    y  
// TEXCOORD                 5   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float      w
// TEXCOORD                 7   xyz         5     NONE   float   xyz 
// TEXCOORD                 8   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[36], immediateIndexed
dcl_constantbuffer cb1[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v0.xy
dcl_input_ps linear v2.y
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.w
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4
mov r0.zw, l(0,0,0,0)
mul r1.xyzw, v3.yyyy, cb1[1].xyzw
mad r1.xyzw, cb1[0].xyzw, v3.xxxx, r1.xyzw
mad r1.xyzw, cb1[2].xyzw, v3.zzzz, r1.xyzw
mad r1.xyzw, cb1[3].xyzw, v3.wwww, r1.xyzw
div r2.xy, r1.xyxx, r1.wwww
mad r2.xy, r2.xyxx, cb1[19].xyxx, cb1[19].wzww
mul r2.zw, r2.xxxy, cb0[10].xxxy
ftou r0.xy, r2.zwzz
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t0.xyzw
min r0.x, r0.x, l(1.000000)
mad r0.x, r0.x, cb1[20].z, -cb1[20].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
add r0.x, -r1.w, r0.x
mul_sat r0.x, r0.x, l(0.007813)
add r0.yz, r1.xxyx, -cb0[16].xxyx
mad r0.yz, r0.yyzy, cb0[18].xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
mul r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
mad r0.yz, cb1[31].xxxx, l(0.000000, 0.025000, 0.025000, 0.000000), r0.yyzy
sample_b_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t1.xyzw, s0, l(0.000000)
mad r0.yz, r0.yyyy, l(0.000000, 0.125000, 0.125000, 0.000000), v0.xxyx
sample_b_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t2.xyzw, s1, l(0.000000)
mov_sat r0.z, r0.y
mul r0.y, r0.y, r0.z
mul r0.y, r0.y, v2.y
mul r0.x, r0.x, r0.y
mov_sat r0.y, v4.w
mul r0.x, r0.y, r0.x
mul_sat r0.w, r0.x, l(0.600000)
ge r1.x, l(0.000000), r0.w
discard_nz r1.x
resinfo_indexable(texture2d)(float,float,float,float)_uint r1.xy, l(0), t3.xyzw
utof r1.xy, r1.xyxx
mul r1.xy, r1.xyxx, r2.xyxx
ftou r2.xy, r1.xyxx
mov r2.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r2.xyzw, t3.xyzw
min r1.x, r1.x, l(1.000000)
mad r1.x, r1.x, cb1[20].z, -cb1[20].w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
lt r1.x, r1.z, r1.x
and r1.x, r1.x, l(0x3f800000)
mad r1.y, -cb0[35].x, r1.x, l(1.000000)
mul r1.x, r1.x, cb0[35].x
add r2.xyz, -cb0[23].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r3.xyz, cb0[23].xyzx, l(0.125000, 0.125000, 0.125000, 0.000000)
mad r2.xyz, r2.xyzx, v5.xyzx, r3.xyzx
add r1.z, -v6.w, l(1.000000)
mad r0.xyz, r2.xyzx, r1.zzzz, v6.xyzx
mul o0.xyzw, r0.xyzw, r1.yyyy
mul o1.xyzw, r0.xyzw, r1.xxxx
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
