// ---- Created with 3Dmigoto v1.2.21 on Wed Dec 30 19:07:15 2015
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[32];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[32];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  float4 v0 : TEXCOORD10,
  float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD5,
  float4 v4 : TEXCOORD6,
  float4 v5 : TEXCOORD8,
  float4 v7 : TEXCOORD9,  //replace v3
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = cb1[21].xyz + v7.xyz;
  r0.xyz = -cb0[14].xyz + r0.xyz;
  r1.xyz = cb1[12].xyz * r0.yyy;
  r0.xyw = cb1[11].xyz * r0.xxx + r1.xyz;
  r0.xyz = cb1[13].xyz * r0.zzz + r0.xyw;
  r1.xyz = cb1[10].xyz + -cb0[14].xyz;
  r2.xyz = cb1[12].xyz * r1.yyy;
  r1.xyw = cb1[11].xyz * r1.xxx + r2.xyz;
  r1.xyz = cb1[13].xyz * r1.zzz + r1.xyw;
  r0.xyz = -r1.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = sqrt(r0.w);
  r0.xyz = r0.xyz / r0.www;
  r0.z = r0.z / r1.z;
  r0.xy = r0.xy / r0.zz;
  r0.xy = r1.xy + -r0.xy;
  r0.xy = float2(0.000150000007,0.000150000007) * r0.xy;
  r0.y = cb1[31].x * -0.075000003 + r0.y;
  r0.x = t1.SampleBias(s0_s, r0.xy, 0).y;
  r0.x = 0.5 + r0.x;
  r0.y = max(9.99999975e-006, cb0[26].z);
  r0.y = 1 / r0.y;
  r1.xyz = v2.xxy * float3(2,2,2) + -cb0[26].xxy;
  r0.z = dot(r1.yz, r1.yz);
  r0.w = log2(r1.x);
  r0.w = cb0[29].y * r0.w;
  r0.w = exp2(r0.w);
  r0.w = min(1, r0.w);
  r0.z = sqrt(r0.z);
  r0.y = -r0.z * r0.y + 1;
  r0.y = saturate(3.33333325 * r0.y);
  r0.y = max(9.99999997e-007, r0.y);
  r0.yw = r0.yw * r0.yw;
  r0.y = cb0[24].w * r0.y;
  r1.zw = float2(0,0);
  r2.xyzw = cb1[1].xyzw * v3.yyyy;
  r2.xyzw = cb1[0].xyzw * v3.xxxx + r2.xyzw;
  r2.xyzw = cb1[2].xyzw * v3.zzzz + r2.xyzw;
  r2.xyzw = cb1[3].xyzw * v3.wwww + r2.xyzw;
  r2.xy = r2.xy / r2.ww;
  r2.xy = r2.xy * cb1[19].xy + cb1[19].wz;
  r3.xy = cb0[10].xy * r2.xy;
  r1.xy = (uint2)r3.xy;
  r0.z = t0.Load(r1.xyz).x;
  r0.z = min(0.999999881, r0.z);
  r0.z = r0.z * cb1[20].z + -cb1[20].w;
  r0.z = 1 / r0.z;
  r0.z = r0.z + -r2.w;
  r1.xy = saturate(float2(0.0078125,0.015625) * r0.zz);
  r0.z = r1.x * r0.y;
  r3.xyzw = cb0[25].wxyz * r0.yyyy;
  r0.x = r0.x * r0.z;
  r0.y = saturate(cb0[29].z);
  r0.x = r0.y * r0.x;
  r0.yz = float2(-1250,-10000) + r2.ww;
  r0.yz = saturate(float2(0.000444439996,4.64999994e-006) * r0.yz);
  r0.x = r0.y * r0.x;
  r0.x = r0.w * r0.x;
  r0.x = r0.x * r1.y;
  r1.xy = cb1[10].xy + -cb0[13].xy;
  r0.w = dot(r1.xy, r1.xy);
  r0.w = sqrt(r0.w);
  r0.w = -r0.w * cb0[29].x + 1;
  r0.w = saturate(r0.w + r0.w);
  r0.w = 1 + -r0.w;
  r0.x = saturate(r0.w * r0.x);
  r1.xyz = cb0[24].xyz * r3.xxx;
  r0.z = r0.z * 0.5 + 0.5;
  r1.xyz = r0.zzz * r1.xyz + r3.yzw;
  r0.zw = cb0[27].xz + -cb0[27].yw;
  r0.zw = v2.xx * r0.zw + cb0[27].yw;
  r0.z = max(9.99999975e-006, r0.z);
  r0.w = 1 + -r0.w;
  r0.w = max(9.99999975e-006, r0.w);
  r0.w = 1 / r0.w;
  r0.z = 1 / r0.z;
  r1.w = -0.5 + v2.y;
  r0.z = -abs(r1.w) * r0.z + 1;
  r0.z = saturate(r0.z * r0.w);
  r1.xyz = r0.zzz * r1.xyz;
  r3.xyz = saturate(cb0[23].xyz * r1.xyz);
  r1.xyz = cb0[28].yyy * r1.xyz;
  r1.xyz = cb0[28].xxx * r3.xyz + r1.xyz;
  r1.xyz = r0.yyy * r1.xyz + cb0[22].xyz;
  r0.y = 1 + -v5.w;
  r1.w = 1;
  r1.xyzw = r1.xyzw * r0.yyyy;
  r0.xyzw = r1.xyzw * r0.xxxx;
  t2.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
  r1.xy = uiDest.xy;
  r1.xy = (uint2)r1.xy;
  r1.xy = r2.xy * r1.xy;
  r1.xy = (uint2)r1.xy;
  r1.zw = float2(0,0);
  r1.x = t2.Load(r1.xyz).x;
  r1.x = min(0.999999881, r1.x);
  r1.x = r1.x * cb1[20].z + -cb1[20].w;
  r1.x = 1 / r1.x;
  r1.x = cmp(r2.z < r1.x);
  r1.x = r1.x ? 1.000000 : 0;
  r1.y = -cb0[31].x * r1.x + 1;
  r1.x = cb0[31].x * r1.x;
  o1.xyzw = r1.xxxx * r0.xyzw;
  o0.xyzw = r1.yyyy * r0.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.21 on Wed Dec 30 19:07:15 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyz         0     NONE   float       
// TEXCOORD                11   xyzw        1     NONE   float       
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 5   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float       
// TEXCOORD                 8   xyzw        5     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[32], immediateIndexed
dcl_constantbuffer cb1[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v5.w
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 4
add r0.xyz, v3.xyzx, cb1[21].xyzx
add r0.xyz, r0.xyzx, -cb0[14].xyzx
mul r1.xyz, r0.yyyy, cb1[12].xyzx
mad r0.xyw, cb1[11].xyxz, r0.xxxx, r1.xyxz
mad r0.xyz, cb1[13].xyzx, r0.zzzz, r0.xywx
add r1.xyz, -cb0[14].xyzx, cb1[10].xyzx
mul r2.xyz, r1.yyyy, cb1[12].xyzx
mad r1.xyw, cb1[11].xyxz, r1.xxxx, r2.xyxz
mad r1.xyz, cb1[13].xyzx, r1.zzzz, r1.xywx
add r0.xyz, r0.xyzx, -r1.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w
div r0.xyz, r0.xyzx, r0.wwww
div r0.z, r0.z, r1.z
div r0.xy, r0.xyxx, r0.zzzz
add r0.xy, -r0.xyxx, r1.xyxx
mul r0.xy, r0.xyxx, l(0.000150, 0.000150, 0.000000, 0.000000)
mad r0.y, cb1[31].x, l(-0.075000), r0.y
sample_b_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t1.yxzw, s0, l(0.000000)
add r0.x, r0.x, l(0.500000)
max r0.y, cb0[26].z, l(0.000010)
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r1.xyz, v2.xxyx, l(2.000000, 2.000000, 2.000000, 0.000000), -cb0[26].xxyx
dp2 r0.z, r1.yzyy, r1.yzyy
log r0.w, r1.x
mul r0.w, r0.w, cb0[29].y
exp r0.w, r0.w
min r0.w, r0.w, l(1.000000)
sqrt r0.z, r0.z
mad r0.y, -r0.z, r0.y, l(1.000000)
mul_sat r0.y, r0.y, l(3.33333325)
max r0.y, r0.y, l(0.000001)
mul r0.yw, r0.yyyw, r0.yyyw
mul r0.y, r0.y, cb0[24].w
mov r1.zw, l(0,0,0,0)
mul r2.xyzw, v3.yyyy, cb1[1].xyzw
mad r2.xyzw, cb1[0].xyzw, v3.xxxx, r2.xyzw
mad r2.xyzw, cb1[2].xyzw, v3.zzzz, r2.xyzw
mad r2.xyzw, cb1[3].xyzw, v3.wwww, r2.xyzw
div r2.xy, r2.xyxx, r2.wwww
mad r2.xy, r2.xyxx, cb1[19].xyxx, cb1[19].wzww
mul r3.xy, r2.xyxx, cb0[10].xyxx
ftou r1.xy, r3.xyxx
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t0.yzxw
min r0.z, r0.z, l(0.999999881)
mad r0.z, r0.z, cb1[20].z, -cb1[20].w
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r0.z, -r2.w, r0.z
mul_sat r1.xy, r0.zzzz, l(0.00781250000, 0.015625, 0.000000, 0.000000)
mul r0.z, r0.y, r1.x
mul r3.xyzw, r0.yyyy, cb0[25].wxyz
mul r0.x, r0.z, r0.x
mov_sat r0.y, cb0[29].z
mul r0.x, r0.x, r0.y
add r0.yz, r2.wwww, l(0.000000, -1250.000000, -10000.000000, 0.000000)
mul_sat r0.yz, r0.yyzy, l(0.000000, 0.000444439996, 0.00000464999994, 0.000000)
mul r0.x, r0.x, r0.y
mul r0.x, r0.x, r0.w
mul r0.x, r1.y, r0.x
add r1.xy, -cb0[13].xyxx, cb1[10].xyxx
dp2 r0.w, r1.xyxx, r1.xyxx
sqrt r0.w, r0.w
mad r0.w, -r0.w, cb0[29].x, l(1.000000)
add_sat r0.w, r0.w, r0.w
add r0.w, -r0.w, l(1.000000)
mul_sat r0.x, r0.x, r0.w
mul r1.xyz, r3.xxxx, cb0[24].xyzx
mad r0.z, r0.z, l(0.500000), l(0.500000)
mad r1.xyz, r0.zzzz, r1.xyzx, r3.yzwy
add r0.zw, -cb0[27].yyyw, cb0[27].xxxz
mad r0.zw, v2.xxxx, r0.zzzw, cb0[27].yyyw
max r0.z, r0.z, l(0.000010)
add r0.w, -r0.w, l(1.000000)
max r0.w, r0.w, l(0.000010)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
add r1.w, v2.y, l(-0.500000)
mad r0.z, -|r1.w|, r0.z, l(1.000000)
mul_sat r0.z, r0.w, r0.z
mul r1.xyz, r1.xyzx, r0.zzzz
mul_sat r3.xyz, r1.xyzx, cb0[23].xyzx
mul r1.xyz, r1.xyzx, cb0[28].yyyy
mad r1.xyz, cb0[28].xxxx, r3.xyzx, r1.xyzx
mad r1.xyz, r0.yyyy, r1.xyzx, cb0[22].xyzx
add r0.y, -v5.w, l(1.000000)
mov r1.w, l(1.000000)
mul r1.xyzw, r0.yyyy, r1.xyzw
mul r0.xyzw, r0.xxxx, r1.xyzw
resinfo_indexable(texture2d)(float,float,float,float)_uint r1.xy, l(0), t2.xyzw
utof r1.xy, r1.xyxx
mul r1.xy, r1.xyxx, r2.xyxx
ftou r1.xy, r1.xyxx
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r1.x, r1.xyzw, t2.xyzw
min r1.x, r1.x, l(0.999999881)
mad r1.x, r1.x, cb1[20].z, -cb1[20].w
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
lt r1.x, r2.z, r1.x
and r1.x, r1.x, l(0x3f800000)
mad r1.y, -cb0[31].x, r1.x, l(1.000000)
mul r1.x, r1.x, cb0[31].x
mul o1.xyzw, r0.xyzw, r1.xxxx
mul o0.xyzw, r0.xyzw, r1.yyyy
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

 