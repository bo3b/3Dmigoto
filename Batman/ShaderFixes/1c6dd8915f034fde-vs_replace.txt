//Halos
cbuffer cb1 : register(b1)
{
  float4 cb1[10];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[4];
}


#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float v0 : SPLITPOS0,
  float v1 : SPLITPOS1,
  float v2 : SPLITPOS2,
  float3 v3 : TANGENT0,
  float4 v4 : NORMAL0,
  float4 v5 : COLOR1,
  float2 v6 : TEXCOORD0,
  out float2 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD5,
  out float4 o2 : TEXCOORD6,
  out float4 o3 : SV_POSITION0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = v6.xy;
  r0.xyzw = cb0[1].xyzw * v1.xxxx;
  r0.xyzw = cb0[0].xyzw * v0.xxxx + r0.xyzw;
  r0.xyzw = cb0[2].xyzw * v2.xxxx + r0.xyzw;
  r0.xyzw = cb0[3].xyzw + r0.xyzw;
  r0.xyzw = cb1[9].xyzw + r0.xyzw;
  r1.xyzw = cb1[1].xyzw * r0.yyyy;
  r1.xyzw = cb1[0].xyzw * r0.xxxx + r1.xyzw;
  r1.xyzw = cb1[2].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb1[3].xyzw * r0.wwww + r1.xyzw;
  
float4 s=StereoParams.Load(0);
float4 r10;
r10=r0;
r0.x += s.x*(r0.w-s.y);  
  
  o1.xyzw = r0.xyzw;
  o3.xyzw = r10.xyzw;
  o2.xyzw = v5.zyxw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.1.30 on Fri Jul 10 00:06:17 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SPLITPOS                 0   x           0     NONE   float   x   
// SPLITPOS                 1   x           1     NONE   float   x   
// SPLITPOS                 2   x           2     NONE   float   x   
// TANGENT                  0   xyz         3     NONE   float       
// NORMAL                   0   xyzw        4     NONE   float       
// COLOR                    1   xyzw        5     NONE   float   xyzw
// TEXCOORD                 0   xy          6     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 5   xyzw        1     NONE   float   xyzw
// TEXCOORD                 6   xyzw        2     NONE   float   xyzw
// SV_POSITION              0   xyzw        3      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[10], immediateIndexed
dcl_input v0.x
dcl_input v1.x
dcl_input v2.x
dcl_input v5.xyzw
dcl_input v6.xy
dcl_output o0.xy
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output_siv o3.xyzw, position
dcl_temps 2
mov o0.xy, v6.xyxx
mul r0.xyzw, v1.xxxx, cb0[1].xyzw
mad r0.xyzw, cb0[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb0[2].xyzw, v2.xxxx, r0.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
add r0.xyzw, r0.xyzw, cb1[9].xyzw
mul r1.xyzw, r0.yyyy, cb1[1].xyzw
mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
mad r0.xyzw, cb1[3].xyzw, r0.wwww, r1.xyzw
mov o1.xyzw, r0.xyzw
mov o3.xyzw, r0.xyzw
mov o2.xyzw, v5.zyxw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
