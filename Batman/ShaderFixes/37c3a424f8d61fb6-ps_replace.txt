Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[32];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[20];
}

// Copied from CS eb8c3e5e00a6c476 with 3DMigoto to get access to projection matrix:
cbuffer cb13 : register(b13)
{
  matrix projection : packoffset(c6);
}

#define cmp -
Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float3 v1 : TANGENT0,
  float3 v2 : BINORMAL0,
  float3 v3 : NORMAL0,
  float4 v4 : TEXCOORD0,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  float4 v11 : TEXCOORD10,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1,
  out float4 o2 : SV_TARGET2,
  out float4 o3 : SV_TARGET3)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v4.xy / v4.ww;
  r0.zw = r0.xy * cb1[19].xy + cb1[19].wz;
  r0.xy = cb0[19].xy * r0.xy;
  r0.zw = cb1[23].xy * r0.zw;
  r1.xy = (uint2)r0.zw;
  r1.zw = float2(0,0);
  r0.z = t0.Load(r1.xyz).x;
  r0.z = min(0.999999881, r0.z);
  r0.w = r0.z * cb1[20].z + -cb1[20].w;
  r0.z = -cb1[20].x + r0.z;
  r0.z = r0.z / cb1[20].y;
  r0.w = 1 / r0.w;
  r1.x = cmp(cb0[19].z >= 1);
  r0.z = r1.x ? r0.z : r0.w;
  r0.w = cmp(cb0[19].z < 1);
  r0.w = r0.w ? r0.z : 1;
  r0.xy = r0.xy * r0.ww;


//Mike_ar69 - Stereo Shift
float4 stereo = StereoParams.Load(0);
r0.x -= stereo.x * (r0.w - stereo.y)/projection._m00;

  r1.xyzw = cb1[16].xyzw * r0.yyyy;
  r1.xyzw = cb1[15].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = cb1[17].xyzw * r0.zzzz + r1.xyzw;
  r0.xyzw = cb1[18].xyzw + r0.xyzw;
  r1.xyz = v6.xyz * r0.yyy;
  r1.xyz = v5.xyz * r0.xxx + r1.xyz;
  r1.xyz = v7.xyz * r0.zzz + r1.xyz;
  r1.xyz = v8.xyz * r0.www + r1.xyz;
  r2.xyz = cmp(r1.xyz < float3(0,0,0));
  r3.xyz = cmp(float3(1,1,1) < r1.xyz);
  r0.zw = r1.xy * v10.xy + v10.zw;
  r1.xyz = (int3)r2.xyz | (int3)r3.xyz;
  r1.x = (int)r1.y | (int)r1.x;
  r1.x = (int)r1.z | (int)r1.x;
  if (r1.x != 0) discard;
  r1.x = 0;
  r1.y = -cb1[31].x;
  r1.xy = r1.xy + r0.zw;
  r1.x = t3.SampleBias(s2_s, r1.xy, 0).x;
  r2.xz = float2(0,0);
  r2.yw = float2(-0.300000012,-0.400000006) * cb1[31].xx;
  r1.yz = r2.zw + r0.zw;
  r1.y = t3.SampleBias(s2_s, r1.yz, 0).x;
  r1.x = r1.x + r1.y;
  r1.y = t4.SampleBias(s3_s, r0.zw, 0).y;
  r1.x = r1.y * r1.x;
  r1.x = max(0, r1.x);
  r1.x = min(0.800000012, r1.x);
  r1.yz = float2(-0.5,-0.5) + r0.zw;
  r1.y = dot(r1.yz, r1.yz);
  r1.y = sqrt(r1.y);
  r1.y = -r1.y * 2 + 1;
  r1.y = saturate(r1.y + r1.y);
  r1.x = r1.y * r1.x;
  r1.y = cmp(0 >= r1.x);
  if (r1.y != 0) discard;
  o0.xyzw = float4(0,0,0,0);
  r0.xy = r0.xy * r0.zw;
  r0.xy = r0.xy * float2(0.00130208337,0.00130208337) + r2.zw;
  r1.yz = r0.zw * float2(1.39999998,1.39999998) + r2.xy;
  r0.zw = t1.SampleBias(s0_s, r0.zw, 0).xy;
  r2.xyz = r0.zww * float3(2,2,2) + float3(-1,-1,-1);
  r0.zw = r2.xy * float2(0.25,0.25) + r1.yz;
  r0.xy = r2.zz * float2(0.200000003,0.200000003) + r0.xy;
  r1.yzw = t2.SampleBias(s1_s, r0.xy, 0).xyz;
  r0.xyz = t2.SampleBias(s1_s, r0.zw, 0).xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = -1;
  r0.xyw = r1.yzw * float3(2,2,2) + r0.xyw;
  r2.z = r0.z * r0.w;
  r2.xy = float2(-1,-1) + r0.xy;
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  r2.x = dot(v1.xyz, r0.xyz);
  r2.y = dot(v2.xyz, r0.xyz);
  r2.z = dot(v3.xyz, r0.xyz);
  r0.x = dot(r2.xyz, r2.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = r2.xyz * r0.xxx;
  o1.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  o1.w = r1.x;
  o3.w = r1.x;
  o2.xyzw = float4(0,0,0,0);
  o3.x = v11.x;
  o3.yz = float2(0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TANGENT                  0   xyz         1     NONE   float   xyz 
// BINORMAL                 0   xyz         2     NONE   float   xyz 
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xyzw        4     NONE   float   xy w
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// TEXCOORD                 7   xyzw        8     NONE   float   xyz 
// TEXCOORD                 8   xyzw        9     NONE   float       
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
// TEXCOORD                10   xyzw       11     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[20], immediateIndexed
dcl_constantbuffer cb1[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps constant v1.xyz
dcl_input_ps constant v2.xyz
dcl_input_ps constant v3.xyz
dcl_input_ps linear v4.xyw
dcl_input_ps constant v5.xyz
dcl_input_ps constant v6.xyz
dcl_input_ps constant v7.xyz
dcl_input_ps constant v8.xyz
dcl_input_ps constant v10.xyzw
dcl_input_ps constant v11.x
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4
div r0.xy, v4.xyxx, v4.wwww
mad r0.zw, r0.xxxy, cb1[19].xxxy, cb1[19].wwwz
mul r0.xy, r0.xyxx, cb0[19].xyxx
mul r0.zw, r0.zzzw, cb1[23].xxxy
ftou r1.xy, r0.zwzz
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t0.yzxw
min r0.z, r0.z, l(1.000000)
mad r0.w, r0.z, cb1[20].z, -cb1[20].w
add r0.z, r0.z, -cb1[20].x
div r0.z, r0.z, cb1[20].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
ge r1.x, cb0[19].z, l(1.000000)
movc r0.z, r1.x, r0.z, r0.w
lt r0.w, cb0[19].z, l(1.000000)
movc r0.w, r0.w, r0.z, l(1.000000)
mul r0.xy, r0.wwww, r0.xyxx
mul r1.xyzw, r0.yyyy, cb1[16].xyzw
mad r1.xyzw, cb1[15].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb1[17].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb1[18].xyzw
mul r1.xyz, r0.yyyy, v6.xyzx
mad r1.xyz, v5.xyzx, r0.xxxx, r1.xyzx
mad r1.xyz, v7.xyzx, r0.zzzz, r1.xyzx
mad r1.xyz, v8.xyzx, r0.wwww, r1.xyzx
lt r2.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r3.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r1.xyzx
mad r0.zw, r1.xxxy, v10.xxxy, v10.zzzw
or r1.xyz, r2.xyzx, r3.xyzx
or r1.x, r1.y, r1.x
or r1.x, r1.z, r1.x
discard_nz r1.x
mov r1.x, l(0)
mov r1.y, -cb1[31].x
add r1.xy, r0.zwzz, r1.xyxx
sample_b_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t3.xyzw, s2, l(0.000000)
mov r2.xz, l(0,0,0,0)
mul r2.yw, cb1[31].xxxx, l(0.000000, -0.300000, 0.000000, -0.400000)
add r1.yz, r0.zzwz, r2.zzwz
sample_b_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t3.yxzw, s2, l(0.000000)
add r1.x, r1.y, r1.x
sample_b_indexable(texture2d)(float,float,float,float) r1.y, r0.zwzz, t4.xyzw, s3, l(0.000000)
mul r1.x, r1.x, r1.y
max r1.x, r1.x, l(0.000000)
min r1.x, r1.x, l(0.800000)
add r1.yz, r0.zzwz, l(0.000000, -0.500000, -0.500000, 0.000000)
dp2 r1.y, r1.yzyy, r1.yzyy
sqrt r1.y, r1.y
mad r1.y, -r1.y, l(2.000000), l(1.000000)
add_sat r1.y, r1.y, r1.y
mul r1.x, r1.x, r1.y
ge r1.y, l(0.000000), r1.x
discard_nz r1.y
mov o0.xyzw, l(0,0,0,0)
mul r0.xy, r0.zwzz, r0.xyxx
mad r0.xy, r0.xyxx, l(0.001302, 0.001302, 0.000000, 0.000000), r2.zwzz
mad r1.yz, r0.zzwz, l(0.000000, 1.400000, 1.400000, 0.000000), r2.xxyx
sample_b_indexable(texture2d)(float,float,float,float) r0.zw, r0.zwzz, t1.zwxy, s0, l(0.000000)
mad r2.xyz, r0.zwwz, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r0.zw, r2.xxxy, l(0.000000, 0.000000, 0.250000, 0.250000), r1.yyyz
mad r0.xy, r2.zzzz, l(0.200000, 0.200000, 0.000000, 0.000000), r0.xyxx
sample_b_indexable(texture2d)(float,float,float,float) r1.yzw, r0.xyxx, t2.wxyz, s1, l(0.000000)
sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.zwzz, t2.xyzw, s1, l(0.000000)
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r0.w, l(-1.000000)
mad r0.xyw, r1.yzyw, l(2.000000, 2.000000, 0.000000, 2.000000), r0.xyxw
mul r2.z, r0.w, r0.z
add r2.xy, r0.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
dp3 r2.x, v1.xyzx, r0.xyzx
dp3 r2.y, v2.xyzx, r0.xyzx
dp3 r2.z, v3.xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o1.w, r1.x
mov o3.w, r1.x
mov o2.xyzw, l(0,0,0,0)
mov o3.x, v11.x
mov o3.yz, l(0,0,0,0)
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.20789
//
//   using 3Dmigoto v1.1.33 on Tue Jul 14 16:05:20 2015
//
//
// Buffer Definitions: 
//
// cbuffer cb1
// {
//
//   float4 cb1[32];                    // Offset:    0 Size:   512
//
// }
//
// cbuffer cb0
// {
//
//   float4 cb0[20];                    // Offset:    0 Size:   320
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// s0_s                              sampler      NA          NA    0        1
// s1_s                              sampler      NA          NA    1        1
// s2_s                              sampler      NA          NA    2        1
// s3_s                              sampler      NA          NA    3        1
// t0                                texture  float4          2d    0        1
// t1                                texture  float4          2d    1        1
// t2                                texture  float4          2d    2        1
// t3                                texture  float4          2d    3        1
// t4                                texture  float4          2d    4        1
// cb0                               cbuffer      NA          NA    0        1
// cb1                               cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TANGENT                  0   xyz         1     NONE   float   xyz 
// BINORMAL                 0   xyz         2     NONE   float   xyz 
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TEXCOORD                 0   xyzw        4     NONE   float   xy w
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   xyz 
// TEXCOORD                 6   xyzw        7     NONE   float   xyz 
// TEXCOORD                 7   xyzw        8     NONE   float   xyz 
// TEXCOORD                 8   xyzw        9     NONE   float       
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
// TEXCOORD                10   xyzw       11     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
// SV_TARGET                2   xyzw        2   TARGET   float   xyzw
// SV_TARGET                3   xyzw        3   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[32], immediateIndexed
dcl_constantbuffer cb0[20], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_input_ps linear v8.xyz
dcl_input_ps linear v10.xyzw
dcl_input_ps linear v11.x
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 4
div r0.xy, v4.xyxx, v4.wwww
mad r0.zw, r0.xxxy, cb1[19].xxxy, cb1[19].wwwz
mul r0.xy, r0.xyxx, cb0[19].xyxx
mul r0.zw, r0.zzzw, cb1[23].xxxy
ftou r0.zw, r0.zzzw
utof r0.zw, r0.zzzw
ftoi r1.xy, r0.zwzz
mov r1.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzw, t0.yzxw
min r0.z, r0.z, l(1.000000)
mad r0.w, r0.z, cb1[20].z, -cb1[20].w
add r0.z, r0.z, -cb1[20].x
div r0.z, r0.z, cb1[20].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
ge r1.x, cb0[19].z, l(1.000000)
movc r0.z, r1.x, r0.z, r0.w
lt r0.w, cb0[19].z, l(1.000000)
movc r0.w, r0.w, r0.z, l(1.000000)
mul r0.xy, r0.wwww, r0.xyxx
mul r1.xyzw, r0.yyyy, cb1[16].xyzw
mad r1.xyzw, cb1[15].xyzw, r0.xxxx, r1.xyzw
mad r0.xyzw, cb1[17].xyzw, r0.zzzz, r1.xyzw
add r0.xyzw, r0.xyzw, cb1[18].xyzw
mul r1.xyz, r0.yyyy, v6.xyzx
mad r1.xyz, v5.xyzx, r0.xxxx, r1.xyzx
mad r1.xyz, v7.xyzx, r0.zzzz, r1.xyzx
mad r1.xyz, v8.xyzx, r0.wwww, r1.xyzx
lt r2.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
lt r3.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), r1.xyzx
or r2.xyz, r2.xyzx, r3.xyzx
or r0.z, r2.x, r2.y
or r0.z, r0.z, r2.z
discard_nz r0.z
mad r0.zw, r1.xxxy, v10.xxxy, v10.zzzw
mov r1.xz, l(0,0,0,0)
mov r1.y, -cb1[31].x
add r1.xy, r0.zwzz, r1.xyxx
sample_b_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t3.xyzw, s2, l(0.000000)
mul r1.w, cb1[31].x, l(-0.400000)
add r2.xy, r0.zwzz, r1.zwzz
sample_b_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t3.yxzw, s2, l(0.000000)
add r1.x, r1.y, r1.x
sample_b_indexable(texture2d)(float,float,float,float) r1.y, r0.zwzz, t4.xyzw, s3, l(0.000000)
mul r1.x, r1.x, r1.y
max r1.x, r1.x, l(0.000000)
min r1.x, r1.x, l(0.800000)
add r2.xy, r0.zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r1.y, r2.xyxx, r2.xyxx
sqrt r1.y, r1.y
mad r1.y, r1.y, l(-2.000000), l(1.000000)
add_sat r1.y, r1.y, r1.y
mul r1.x, r1.x, r1.y
ge r1.y, l(0.000000), r1.x
discard_nz r1.y
mul r0.xy, r0.zwzz, r0.xyxx
mad r0.xy, r0.xyxx, l(0.001302, 0.001302, 0.000000, 0.000000), r1.zwzz
mov r2.x, l(0)
mul r2.y, cb1[31].x, l(-0.300000)
mad r1.yz, r0.zzwz, l(0.000000, 1.400000, 1.400000, 0.000000), r2.xxyx
sample_b_indexable(texture2d)(float,float,float,float) r0.zw, r0.zwzz, t1.zwxy, s0, l(0.000000)
mad r2.xyz, r0.zwwz, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r0.zw, r2.xxxy, l(0.000000, 0.000000, 0.250000, 0.250000), r1.yyyz
mad r0.xy, r2.zzzz, l(0.200000, 0.200000, 0.000000, 0.000000), r0.xyxx
sample_b_indexable(texture2d)(float,float,float,float) r1.yzw, r0.xyxx, t2.wxyz, s1, l(0.000000)
sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, r0.zwzz, t2.xyzw, s1, l(0.000000)
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
mov r0.w, l(-1.000000)
mad r0.xyw, r1.yzyw, l(2.000000, 2.000000, 0.000000, 2.000000), r0.xyxw
mul r2.z, r0.w, r0.z
add r2.xy, r0.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
dp3 r2.x, v1.xyzx, r0.xyzx
dp3 r2.y, v2.xyzx, r0.xyzx
dp3 r2.z, v3.xyzx, r0.xyzx
dp3 r0.x, r2.xyzx, r2.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, r2.xyzx
mad o1.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mov o0.xyzw, l(0,0,0,0)
mov o1.w, r1.x
mov o2.xyzw, l(0,0,0,0)
mov o3.x, v11.x
mov o3.yz, l(0,0,0,0)
mov o3.w, r1.x
ret 
// Approximately 87 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
