// White smoke from chimneys - use uncorrected world coord for density
// VS adccc89ecf13f52e
// ---- Created with 3Dmigoto v1.2.20 on Thu Dec 31 00:10:51 2015
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[32];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[29];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main( 
  linear centroid float4 v0 : TEXCOORD10,
  linear centroid float4 v1 : TEXCOORD11,
  float4 v2 : TEXCOORD0,
  float4 v3_corrected : TEXCOORD5,
  float4 v4 : TEXCOORD6,
  float4 v5 : TEXCOORD8,
  float4 v3_uncorrected : TEXCOORD9,
  out float4 o0 : SV_TARGET0,
  out float4 o1 : SV_TARGET1)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v0.xyz, v0.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v0.xyz * r0.xxx;
  r0.w = dot(v1.xyz, v1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = v1.xyz * r0.www;
  r0.x = r1.y * r0.x;
  r0.x = r1.x * r0.y + -r0.x;
  r0.x = v1.w * r0.x;
  r0.y = dot(-v3_uncorrected.xyz, -v3_uncorrected.xyz);
  r0.y = rsqrt(r0.y);
  r2.xyz = -v3_uncorrected.xyz * r0.yyy;
  r0.x = r2.y * r0.x;
  r0.x = r2.x * r0.z + r0.x;
  r0.x = saturate(r2.z * r1.z + r0.x);
  r0.x = max(9.99999997e-007, r0.x);
  r0.y = r0.x * r0.x;
  r0.x = r0.x * r0.y;
  r0.y = cb0[26].y + -cb0[26].x;
  r0.z = cmp(0 < r0.y);
  r0.w = cmp(r0.y < 0);
  r0.y = max(9.99999997e-007, abs(r0.y));
  r0.z = (int)-r0.z + (int)r0.w;
  r0.z = cmp((int)r0.z < 0);
  r0.z = r0.z ? -1 : 1;
  r0.y = r0.z * r0.y;
  r0.zw = v2.xy * float2(0.800000012,2) + float2(0.099999994,0);
  r1.w = cb1[31].x * cb0[23].x;
  r2.x = 0.100000001 * r1.w;
  r2.yz = float2(0.099999994,0);
  r0.zw = r0.zw * float2(1,1.5) + r2.zx;
  r2.xy = v2.xy * float2(0.800000012,2) + r2.yx;
  r2.zw = t0.SampleBias(s0_s, v2.xy, 0).xy;
  r2.zw = r2.zw * float2(2,2) + float2(-1,-1);
  r0.zw = r2.zw * float2(-0.100000001,0.100000001) + r0.zw;
  r2.xy = r2.zw * float2(-0.100000001,0.100000001) + r2.xy;
  r1.w = t1.SampleBias(s1_s, r2.xy, 0).y;
  r0.z = t1.SampleBias(s1_s, r0.zw, 0).y;
  r0.z = r1.w + r0.z;
  r0.w = r0.z * 0.5 + -cb0[26].x;
  r0.y = saturate(r0.w / r0.y);
  r0.w = r0.y * r0.y;
  r0.y = -r0.y * 2 + 3;
  r0.y = r0.w * r0.y;
  r0.y = saturate(cb0[25].w * r0.y);
  r2.x = 2 * v2.y;
  r2.x = saturate(r2.x);
  r0.y = r2.x * r0.y;
  r0.w = 1 + -v2.y;
  r1.w = max(9.99999997e-007, r0.w);
  r1.w = log2(r1.w);
  r1.w = 0.100000001 * r1.w;
  r1.w = exp2(r1.w);
  r1.w = min(1, r1.w);
  r0.y = r1.w * r0.y;
  r2.xyzw = cb1[1].xyzw * v3_corrected.yyyy;
  r2.xyzw = cb1[0].xyzw * v3_corrected.xxxx + r2.xyzw;
  r2.xyzw = cb1[2].xyzw * v3_corrected.zzzz + r2.xyzw;
  r2.xyzw = cb1[3].xyzw * v3_corrected.wwww + r2.xyzw;
  r1.w = -3000 + r2.w;
  r1.w = saturate(0.000333330012 * r1.w);
  r0.y = r1.w * r0.y;
  r0.x = r0.x * r0.y;
  r0.x = saturate(cb0[24].w * r0.x);
  r3.w = saturate(r0.w * r0.x);
  r0.x = cmp(0 >= r3.w);
  if (r0.x != 0) discard;
  r4.x = -0.5 + v2.x;
  r4.yz = float2(0.5,1);
  r0.x = dot(r1.xyz, r4.xyz);
  r0.x = r0.x * 0.5 + 0.5;
  r0.x = max(9.99999997e-007, r0.x);
  r0.x = r0.x * r0.x;
  r0.xyw = cb0[24].xyz * r0.xxx;
  r0.xyz = r0.zzz * r0.xyw + cb0[22].xyz;
  r0.w = 1 + -v5.w;
  r3.xyz = r0.xyz * r0.www + v5.xyz;
  r0.xy = r2.xy / r2.ww;
  r0.xy = r0.xy * cb1[19].xy + cb1[19].wz;
  t2.GetDimensions(0, uiDest.x, uiDest.y, uiDest.z);
  r0.zw = uiDest.xy;
  r0.zw = (uint2)r0.zw;
  r0.xy = r0.xy * r0.zw;
  r0.xy = (uint2)r0.xy;
  r0.zw = float2(0,0);
  r0.x = t2.Load(r0.xyz).x;
  r0.x = min(0.999999881, r0.x);
  r0.x = r0.x * cb1[20].z + -cb1[20].w;
  r0.x = 1 / r0.x;
  r0.x = cmp(r2.z < r0.x);
  r0.x = r0.x ? 1.000000 : 0;
  r0.y = -cb0[28].x * r0.x + 1;
  r0.x = cb0[28].x * r0.x;
  o1.xyzw = r3.xyzw * r0.xxxx;
  o0.xyzw = r3.xyzw * r0.yyyy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.20 on Thu Dec 31 00:10:51 2015
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                10   xyz         0     NONE   float   xyz 
// TEXCOORD                11   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 5   xyzw        3     NONE   float   xyzw
// TEXCOORD                 6   xyzw        4     NONE   float       
// TEXCOORD                 8   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[29], immediateIndexed
dcl_constantbuffer cb1[32], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear centroid v0.xyz
dcl_input_ps linear centroid v1.xyzw
dcl_input_ps linear v2.xy
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v5.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 5
dp3 r0.x, v0.xyzx, v0.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v0.xyzx
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v1.xyzx
mul r0.x, r0.x, r1.y
mad r0.x, r1.x, r0.y, -r0.x
mul r0.x, r0.x, v1.w
dp3 r0.y, -v3.xyzx, -v3.xyzx
rsq r0.y, r0.y
mul r2.xyz, r0.yyyy, -v3.xyzx
mul r0.x, r0.x, r2.y
mad r0.x, r2.x, r0.z, r0.x
mad_sat r0.x, r2.z, r1.z, r0.x
max r0.x, r0.x, l(0.000001)
mul r0.y, r0.x, r0.x
mul r0.x, r0.y, r0.x
add r0.y, -cb0[26].x, cb0[26].y
lt r0.z, l(0.000000), r0.y
lt r0.w, r0.y, l(0.000000)
max r0.y, |r0.y|, l(0.000001)
iadd r0.z, -r0.z, r0.w
ilt r0.z, r0.z, l(0)
movc r0.z, r0.z, l(-1.000000), l(1.000000)
mul r0.y, r0.y, r0.z
mad r0.zw, v2.xxxy, l(0.000000, 0.000000, 0.800000, 2.000000), l(0.000000, 0.000000, 0.0999999940, 0.000000)
mul r1.w, cb0[23].x, cb1[31].x
mul r2.x, r1.w, l(0.100000)
mov r2.yz, l(0,00.0999999940,0,0)
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 1.000000, 1.500000), r2.zzzx
mad r2.xy, v2.xyxx, l(0.800000, 2.000000, 0.000000, 0.000000), r2.yxyy
sample_b_indexable(texture2d)(float,float,float,float) r2.zw, v2.xyxx, t0.zwxy, s0, l(0.000000)
mad r2.zw, r2.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
mad r0.zw, r2.zzzw, l(0.000000, 0.000000, -0.100000, 0.100000), r0.zzzw
mad r2.xy, r2.zwzz, l(-0.100000, 0.100000, 0.000000, 0.000000), r2.xyxx
sample_b_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t1.xzwy, s1, l(0.000000)
sample_b_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t1.xzyw, s1, l(0.000000)
add r0.z, r0.z, r1.w
mad r0.w, r0.z, l(0.500000), -cb0[26].x
div_sat r0.y, r0.w, r0.y
mul r0.w, r0.y, r0.y
mad r0.y, -r0.y, l(2.000000), l(3.000000)
mul r0.y, r0.y, r0.w
mul_sat r0.y, r0.y, cb0[25].w
mul r2.x, v2.y, l(2.000000)
mov_sat r2.x, r2.x
mul r0.y, r0.y, r2.x
add r0.w, -v2.y, l(1.000000)
max r1.w, r0.w, l(0.000001)
log r1.w, r1.w
mul r1.w, r1.w, l(0.100000)
exp r1.w, r1.w
min r1.w, r1.w, l(1.000000)
mul r0.y, r0.y, r1.w
mul r2.xyzw, v3.yyyy, cb1[1].xyzw
mad r2.xyzw, cb1[0].xyzw, v3.xxxx, r2.xyzw
mad r2.xyzw, cb1[2].xyzw, v3.zzzz, r2.xyzw
mad r2.xyzw, cb1[3].xyzw, v3.wwww, r2.xyzw
add r1.w, r2.w, l(-3000.000000)
mul_sat r1.w, r1.w, l(0.000333330012)
mul r0.y, r0.y, r1.w
mul r0.x, r0.y, r0.x
mul_sat r0.x, r0.x, cb0[24].w
mul_sat r3.w, r0.x, r0.w
ge r0.x, l(0.000000), r3.w
discard_nz r0.x
add r4.x, v2.x, l(-0.500000)
mov r4.yz, l(0,0.500000,1.000000,0)
dp3 r0.x, r1.xyzx, r4.xyzx
mad r0.x, r0.x, l(0.500000), l(0.500000)
max r0.x, r0.x, l(0.000001)
mul r0.x, r0.x, r0.x
mul r0.xyw, r0.xxxx, cb0[24].xyxz
mad r0.xyz, r0.zzzz, r0.xywx, cb0[22].xyzx
add r0.w, -v5.w, l(1.000000)
mad r3.xyz, r0.xyzx, r0.wwww, v5.xyzx
div r0.xy, r2.xyxx, r2.wwww
mad r0.xy, r0.xyxx, cb1[19].xyxx, cb1[19].wzww
resinfo_indexable(texture2d)(float,float,float,float)_uint r0.zw, l(0), t2.zwxy
utof r0.zw, r0.zzzw
mul r0.xy, r0.zwzz, r0.xyxx
ftou r0.xy, r0.xyxx
mov r0.zw, l(0,0,0,0)
ld_indexable(texture2d)(float,float,float,float) r0.x, r0.xyzw, t2.xyzw
min r0.x, r0.x, l(0.999999881)
mad r0.x, r0.x, cb1[20].z, -cb1[20].w
div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
lt r0.x, r2.z, r0.x
and r0.x, r0.x, l(0x3f800000)
mad r0.y, -cb0[28].x, r0.x, l(1.000000)
mul r0.x, r0.x, cb0[28].x
mul o1.xyzw, r0.xxxx, r3.xyzw
mul o0.xyzw, r0.yyyy, r3.xyzw
ret 
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
