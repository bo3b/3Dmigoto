cbuffer cb4 : register(b4)
{
  float4 cb4[8];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[3];
}


cbuffer PER_BATCH : register(b0)
{
  float4 LSPos : packoffset(c0);
  float4 fDepthTestBias : packoffset(c1);
  float4 fOneDivFarDist : packoffset(c2);
  float4 CameraFrontVector : packoffset(c3);
  row_major float4x4 g_gridMatrix : packoffset(c4);
  float4 fDepthShift : packoffset(c8);
  float4 g_vGIAttenuation : packoffset(c9);
  float4 g_gridSize : packoffset(c10);
  float4 vInvShadowMapWH : packoffset(c11);
  float4 PS_NearFarClipDist : packoffset(c12);
  float4 g_gridCenter : packoffset(c13);
  float4 AnimGenParams : packoffset(c14);
  float4 irreg_kernel_2d[8] : packoffset(c15);
  row_major float4x4 TexGen0 : packoffset(c23);
  float4 GlowParams : packoffset(c27);
  float4 g_invGridSize : packoffset(c28);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 Ambient : packoffset(c0);
  float4 AvgFogVolumeContrib : packoffset(c1);
}

cbuffer PER_FRAME : register(b3)
{
  float4 g_PS_SunLightDir : packoffset(c2);
}

cbuffer PER_MATERIAL : register(b4)
{
  float3 __0DeformTile__1DeformAmount__2DeformAnimSpeed__3 : packoffset(c5);
  float2 __0AlphaScale__1SoftParticlesVolumeScale__2__3 : packoffset(c7);
  float4 __0FresnelScale__1FresnelPower__2FresnelBias__3GlobalIlluminationAmount : packoffset(c8);
}
SamplerState diffuseSampler_s : register(s0);
SamplerState customSampler_s : register(s2);
SamplerState diffuseCMSampler_s : register(s3);
Texture2D<float4> diffuseSampler : register(t0);
Texture2D<float4> customSampler : register(t2);
TextureCube<float4> diffuseCMSampler : register(t3);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : COLOR0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v5.xyz * r0.xxx;
  r1.xyzw = diffuseCMSampler.Sample(diffuseCMSampler_s, r0.xyz).xyzw;
  r0.x = saturate(dot(CameraFrontVector.xyz, r0.xyz));
  r0.xyz = Ambient.xyz * r0.xxx;
  r0.w = 96 * r1.w;
  r1.xyz = r1.xyz * r0.www;
  r0.xyz = r1.xyz * Ambient.www + r0.xyz;
  r1.xz = v1.ww;
  r1.yw = v3.zz;
  r1.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r1.xyzw;
  r1.xyzw = cb4[5].xxxx * r1.xyzw;
  r0.w = cb4[5].z * AnimGenParams.z;
  r2.xyzw = r0.wwww * float4(0.899999976,0.899999976,2,2) + float4(0.5,0.5,0.75,1);
  r1.xyzw = r1.xyzw * float4(1,1,2,2) + r2.xyzw;
  r1.xy = customSampler.Sample(customSampler_s, r1.xy).xy;
  r1.zw = customSampler.Sample(customSampler_s, r1.zw).xy;
  r1.xy = r1.yx + r1.wz;
  r1.xy = r1.xy * float2(2,2) + float2(-2,-2);
  r1.xy = r1.xy * cb4[5].yy + v1.xy;
  r1.xyzw = diffuseSampler.Sample(diffuseSampler_s, r1.xy).xyzw;
  r2.xyzw = diffuseSampler.Sample(diffuseSampler_s, v2.xy).xyzw;
  r2.xyzw = r2.xyzw + -r1.xyzw;
  r1.xyzw = r2.xyzw * v2.zzzz + r1.xyzw;
  r1.xyzw = v6.xyzw * r1.xyzw;
  r0.xyz = r0.xyz * r1.xyz + -v4.xyz;
  r0.xyz = v4.www * r0.xyz + v4.xyz;
  r0.xyz = -AvgFogVolumeContrib.xyz + r0.xyz;
  r0.xyz = AvgFogVolumeContrib.www * r0.xyz + AvgFogVolumeContrib.xyz;
  r1.xyz = r1.www * r1.xyz;
  o0.w = saturate(r1.w * cb4[7].x + r1.w);
  r0.xyz = r1.xyz * GlowParams.xyz + r0.xyz;
  o0.xyz = cb3[2].www * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Wed Aug 12 23:36:26 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 LSPos;                      // Offset:    0 Size:    16 [unused]
//   float4 fDepthTestBias;             // Offset:   16 Size:    16 [unused]
//   float4 fOneDivFarDist;             // Offset:   32 Size:    16 [unused]
//   float4 CameraFrontVector;          // Offset:   48 Size:    16
//   row_major float4x4 g_gridMatrix;   // Offset:   64 Size:    64 [unused]
//   float4 fDepthShift;                // Offset:  128 Size:    16 [unused]
//   float4 g_vGIAttenuation;           // Offset:  144 Size:    16 [unused]
//   float4 g_gridSize;                 // Offset:  160 Size:    16 [unused]
//   float4 vInvShadowMapWH;            // Offset:  176 Size:    16 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  192 Size:    16 [unused]
//   float4 g_gridCenter;               // Offset:  208 Size:    16 [unused]
//   float4 AnimGenParams;              // Offset:  224 Size:    16
//   float4 irreg_kernel_2d[8];         // Offset:  240 Size:   128 [unused]
//   row_major float4x4 TexGen0;        // Offset:  368 Size:    64 [unused]
//   float4 GlowParams;                 // Offset:  432 Size:    16
//   float4 g_invGridSize;              // Offset:  448 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 Ambient;                    // Offset:    0 Size:    16
//   float4 AvgFogVolumeContrib;        // Offset:   16 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_PS_SunLightDir;           // Offset:   32 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0DeformTile__1DeformAmount__2DeformAnimSpeed__3;// Offset:   80 Size:    12
//   float2 __0AlphaScale__1SoftParticlesVolumeScale__2__3;// Offset:  112 Size:     8
//   float4 __0FresnelScale__1FresnelPower__2FresnelBias__3GlobalIlluminationAmount;// Offset:  128 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// diffuseSampler                    sampler      NA          NA    0        1
// customSampler                     sampler      NA          NA    2        1
// diffuseCMSampler                  sampler      NA          NA    3        1
// diffuseSampler                    texture  float4          2d    0        1
// customSampler                     texture  float4          2d    2        1
// diffuseCMSampler                  texture  float4        cube    3        1
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyz 
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[28], immediateIndexed
dcl_constantbuffer cb1[2], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texturecube (float,float,float,float) t3
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.z
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyzw
dcl_output o0.xyzw
dcl_temps 3
dp3 r0.x, v5.xyzx, v5.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v5.xyzx
sample_indexable(texturecube)(float,float,float,float) r1.xyzw, r0.xyzx, t3.xyzw, s3
dp3_sat r0.x, cb0[3].xyzx, r0.xyzx
mul r0.xyz, r0.xxxx, cb1[0].xyzx
mul r0.w, r1.w, l(96.000000)
mul r1.xyz, r0.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb1[0].wwww, r0.xyzx
mov r1.xz, v1.wwww
mov r1.yw, v3.zzzz
add r1.xyzw, r1.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
mul r1.xyzw, r1.xyzw, cb4[5].xxxx
mul r0.w, cb0[14].z, cb4[5].z
mad r2.xyzw, r0.wwww, l(0.900000, 0.900000, 2.000000, 2.000000), l(0.500000, 0.500000, 0.750000, 1.000000)
mad r1.xyzw, r1.xyzw, l(1.000000, 1.000000, 2.000000, 2.000000), r2.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t2.zwxy, s2
add r1.xy, r1.wzww, r1.yxyy
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-2.000000, -2.000000, 0.000000, 0.000000)
mad r1.xy, r1.xyxx, cb4[5].yyyy, v1.xyxx
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v2.xyxx, t0.xyzw, s0
add r2.xyzw, -r1.xyzw, r2.xyzw
mad r1.xyzw, r2.xyzw, v2.zzzz, r1.xyzw
mul r1.xyzw, r1.xyzw, v6.xyzw
mad r0.xyz, r0.xyzx, r1.xyzx, -v4.xyzx
mad r0.xyz, v4.wwww, r0.xyzx, v4.xyzx
add r0.xyz, r0.xyzx, -cb1[1].xyzx
mad r0.xyz, cb1[1].wwww, r0.xyzx, cb1[1].xyzx
mul r1.xyz, r1.xyzx, r1.wwww
mad_sat o0.w, r1.w, cb4[7].x, r1.w
mad r0.xyz, r1.xyzx, cb0[27].xyzx, r0.xyzx
mul o0.xyz, r0.xyzx, cb3[2].wwww
ret 
// Approximately 35 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
