//Halo smoke
cbuffer PER_BATCH : register(b0)
{
  float4 eyePosInWS : packoffset(c0);
  row_major float3x4 invObjSpaceMatrix : packoffset(c1);
  float4 nearCutoff : packoffset(c4);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 vpMatrix : packoffset(c0);
  row_major float4x4 objMatrix : packoffset(c4);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(vpMatrix._m20_m21_m22_m23, v0.xyzw);
  r0.y = 1 + -eyePosInWS.w;
  r1.w = dot(vpMatrix._m30_m31_m32_m33, v0.xyzw);
  r0.z = nearCutoff.x * r1.w;
  r0.y = r0.z * r0.y;
  o0.z = r0.x * eyePosInWS.w + r0.y;
  o3.z = r0.x;
  r1.x = dot(vpMatrix._m00_m01_m02_m03, v0.xyzw);
  r1.y = dot(vpMatrix._m10_m11_m12_m13, v0.xyzw);
  o0.xyw = r1.xyw;
  
    float4 stereo = StereoParams.Load(0);
  r1.x += stereo.x * (r1.w - stereo.y);
  
  r0.x = r1.x + r1.w;
  o3.x = 0.5 * r0.x;
  r0.x = -r1.y + r1.w;
  o3.w = r1.w;
  o3.y = 0.5 * r0.x;
  r0.x = dot(objMatrix._m00_m01_m02_m03, v0.xyzw);
  r0.y = dot(objMatrix._m10_m11_m12_m13, v0.xyzw);
  r0.z = dot(objMatrix._m20_m21_m22_m23, v0.xyzw);
  r0.xyz = -eyePosInWS.xyz + r0.xyz;
  o1.xyz = r0.xyz;
  o2.x = dot(invObjSpaceMatrix._m00_m01_m02, r0.xyz);
  o2.y = dot(invObjSpaceMatrix._m10_m11_m12, r0.xyz);
  o2.z = dot(invObjSpaceMatrix._m20_m21_m22, r0.xyz);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Thu Aug 06 21:58:37 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 eyePosInWS;                 // Offset:    0 Size:    16
//   row_major float3x4 invObjSpaceMatrix;// Offset:   16 Size:    48
//   float4 nearCutoff;                 // Offset:   64 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 vpMatrix;       // Offset:    0 Size:    64
//   row_major float4x4 objMatrix;      // Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[5], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_input v0.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_temps 2
dp4 r0.x, cb1[2].xyzw, v0.xyzw
add r0.y, -cb0[0].w, l(1.000000)
dp4 r1.w, cb1[3].xyzw, v0.xyzw
mul r0.z, r1.w, cb0[4].x
mul r0.y, r0.y, r0.z
mad o0.z, r0.x, cb0[0].w, r0.y
mov o3.z, r0.x
dp4 r1.x, cb1[0].xyzw, v0.xyzw
dp4 r1.y, cb1[1].xyzw, v0.xyzw
mov o0.xyw, r1.xyxw
add r0.x, r1.w, r1.x
mul o3.x, r0.x, l(0.500000)
add r0.x, r1.w, -r1.y
mov o3.w, r1.w
mul o3.y, r0.x, l(0.500000)
dp4 r0.x, cb1[4].xyzw, v0.xyzw
dp4 r0.y, cb1[5].xyzw, v0.xyzw
dp4 r0.z, cb1[6].xyzw, v0.xyzw
add r0.xyz, r0.xyzx, -cb0[0].xyzx
mov o1.xyz, r0.xyzx
dp3 o2.x, cb0[1].xyzx, r0.xyzx
dp3 o2.y, cb0[2].xyzx, r0.xyzx
dp3 o2.z, cb0[3].xyzx, r0.xyzx
ret 
// Approximately 24 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
