
cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float4 vfParams : packoffset(c1);
  float4 vfRampParams : packoffset(c2);
  float4 _InstancingParams : packoffset(c3);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 Ambient : packoffset(c4);
  float4 AmbientOp : packoffset(c5);
  float4 AvgFogVolumeContrib : packoffset(c6);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r0.xyz = ObjWorldMatrix._m00_m01_m02;
  r1.xyz = v0.xyz;
  r1.w = 1;
  r0.x = dot(r0.xyzw, r1.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r0.y = dot(r2.xyzw, r1.xyzw);
  r0.w = 1;
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r0.z = dot(r2.xyzw, r1.xyzw);
  r1.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r0.xyzw);
  r1.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r0.xyzw);
  r1.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r0.xyzw);
  r1.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r0.xyzw);
  o0.xyzw = r1.xyzw;
  
    float4 stereo = StereoParams.Load(0);
  r1.x += stereo.x * (r1.w - stereo.y);
  
  r1.xy = r1.xy * float2(1,-1) + r1.ww;
  o5.zw = r1.zw;
  o5.xy = float2(0.5,0.5) * r1.xy;
  o1.xyzw = v1.xyzw;
  r1.xyz = float3(9.99999997e-007,1.40129846e-045,1.40129846e-045) + v3.xyz;
  r2.x = dot(ObjWorldMatrix._m00_m01_m02, r1.xyz);
  r2.y = dot(ObjWorldMatrix._m10_m11_m12, r1.xyz);
  r2.z = dot(ObjWorldMatrix._m20_m21_m22, r1.xyz);
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r2.xyz * r0.www;
  r2.xyz = float3(-9.99999997e-007,1.40129846e-045,1.40129846e-045) + v4.xyz;
  r3.x = dot(ObjWorldMatrix._m00_m01_m02, r2.xyz);
  r3.y = dot(ObjWorldMatrix._m10_m11_m12, r2.xyz);
  r3.z = dot(ObjWorldMatrix._m20_m21_m22, r2.xyz);
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r3.xyz * r0.www;
  r3.xyz = r2.yzx * r1.zxy;
  r3.xyz = r1.yzx * r2.zxy + -r3.xyz;
  o2.xyz = r1.xyz;
  o3.xyz = r2.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r3.xyz * r0.www;
  r1.xyz = v3.www * r1.xyz;
  r0.w = dot(-r0.xyz, -r0.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = -r0.xyz * r0.www;
  r0.w = dot(r2.xyz, r1.xyz);
  r1.x = 0 < r0.w;
  r0.w = r0.w < 0;
  r0.w = ((int)r0.w ? -1 : 0) + ((int)r1.x ? 1 : 0);
  r0.w = (int)r0.w;
  o2.w = v3.w * r0.w;
  o3.w = 0;
  r0.w = vfParams.x * r0.z;
  r1.x = -1.44269502 * r0.w;
  r1.x = exp2(r1.x);
  r1.x = 1 + -r1.x;
  r0.w = r1.x / r0.w;
  r1.x = 0.00999999978 < abs(r0.z);
  r0.w = r1.x ? r0.w : 1;
  r1.x = dot(r0.xyz, r0.xyz);
  o4.xyz = r0.xyz;
  r0.x = sqrt(r1.x);
  r0.y = vfParams.y * r0.x;
  r0.x = saturate(r0.x * vfRampParams.x + vfRampParams.y);
  r0.y = r0.w * r0.y + -vfParams.w;
  r0.y = exp2(-r0.y);
  r0.y = min(1, r0.y);
  r0.y = 1 + -r0.y;
  r0.z = 2 + -r0.x;
  r0.x = r0.x * r0.z;
  r0.x = r0.x * vfRampParams.z + vfRampParams.w;
  r0.x = -r0.y * r0.x + 1;
  o4.w = r0.x;
  o6.w = AvgFogVolumeContrib.w * r0.x;
  o6.xyz = float3(0,0,0);
  o7.xyzw = AmbientOp.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Wed Aug 12 20:57:57 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float4 vfParams;                   // Offset:   16 Size:    16
//   float4 vfRampParams;               // Offset:   32 Size:    16
//   float4 _InstancingParams;          // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 Ambient;                    // Offset:   64 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//   float4 AvgFogVolumeContrib;        // Offset:   96 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_temps 4
add r0.w, cb1[0].w, -cb3[6].x
mov r0.xyz, cb1[0].xyzx
mov r1.xyz, v0.xyzx
mov r1.w, l(1.000000)
dp4 r0.x, r0.xyzw, r1.xyzw
add r2.w, cb1[1].w, -cb3[6].y
mov r2.xyz, cb1[1].xyzx
dp4 r0.y, r2.xyzw, r1.xyzw
mov r0.w, l(1.000000)
add r2.w, cb1[2].w, -cb3[6].z
mov r2.xyz, cb1[2].xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.z, cb3[12].xyzw, r0.xyzw
dp4 r1.w, cb3[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mov o5.zw, r1.zzzw
mul o5.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, v1.xyzw
add r1.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r2.x, cb1[0].xyzx, r1.xyzx
dp3 r2.y, cb1[1].xyzx, r1.xyzx
dp3 r2.z, cb1[2].xyzx, r1.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r2.xyzx
add r2.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r3.x, cb1[0].xyzx, r2.xyzx
dp3 r3.y, cb1[1].xyzx, r2.xyzx
dp3 r3.z, cb1[2].xyzx, r2.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r3.xyzx
mul r3.xyz, r1.zxyz, r2.yzxy
mad r3.xyz, r1.yzxy, r2.zxyz, -r3.xyzx
mov o2.xyz, r1.xyzx
mov o3.xyz, r2.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r3.xyzx
mul r1.xyz, r1.xyzx, v3.wwww
dp3 r0.w, -r0.xyzx, -r0.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, -r0.xyzx
dp3 r0.w, r2.xyzx, r1.xyzx
lt r1.x, l(0.000000), r0.w
lt r0.w, r0.w, l(0.000000)
iadd r0.w, r0.w, -r1.x
itof r0.w, r0.w
mul o2.w, r0.w, v3.w
mov o3.w, l(0)
mul r0.w, r0.z, cb0[1].x
mul r1.x, r0.w, l(-1.442695)
exp r1.x, r1.x
add r1.x, -r1.x, l(1.000000)
div r0.w, r1.x, r0.w
lt r1.x, l(0.010000), |r0.z|
movc r0.w, r1.x, r0.w, l(1.000000)
dp3 r1.x, r0.xyzx, r0.xyzx
mov o4.xyz, r0.xyzx
sqrt r0.x, r1.x
mul r0.y, r0.x, cb0[1].y
mad_sat r0.x, r0.x, cb0[2].x, cb0[2].y
mad r0.y, r0.w, r0.y, -cb0[1].w
exp r0.y, -r0.y
min r0.y, r0.y, l(1.000000)
add r0.y, -r0.y, l(1.000000)
add r0.z, -r0.x, l(2.000000)
mul r0.x, r0.z, r0.x
mad r0.x, r0.x, cb0[2].z, cb0[2].w
mad r0.x, -r0.y, r0.x, l(1.000000)
mov o4.w, r0.x
mul o6.w, r0.x, cb1[6].w
mov o6.xyz, l(0,0,0,0)
mov o7.xyzw, cb1[5].xyzw
ret 
// Approximately 78 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
