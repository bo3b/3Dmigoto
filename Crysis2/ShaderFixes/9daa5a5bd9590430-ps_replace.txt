//Lights PS 1
cbuffer PER_BATCH : register(b0)
{
  float4 g_LightPos : packoffset(c0);
  float4 g_LightDiffuse : packoffset(c1);
  float4 g_GeneralParams : packoffset(c2);
  float4 vWBasisX : packoffset(c3);
  float4 vWBasisY : packoffset(c4);
  float4 vWBasisZ : packoffset(c5);
  row_major float4x4 g_mLightShadowProj : packoffset(c6);
  float4 irreg_kernel_2d[8] : packoffset(c10);
  float4 SSDOParams : packoffset(c18);
}
SamplerState _tex0_s : register(s0);
SamplerState _tex1_s : register(s1);
SamplerState _tex7_s : register(s7);
SamplerState _tex8_s : register(s8);
SamplerComparisonState SAMPLER_STATE_depthMapSampler_s : register(s3);
Texture2D<float4> _tex0 : register(t0);
Texture2D<float4> _tex1 : register(t1);
Texture2D<float4> _tex3_d3d10 : register(t3);
Texture2D<float4> _tex7 : register(t7);
Texture2D<float4> _tex8 : register(t8);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  
      row_major matrix vp : TEXCOORD2,
  row_major matrix ivp : TEXCOORD6)
  
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = 1;
  r1.x = _tex0.Sample(_tex0_s, v1.xy).x;
  
    float4 stereo = StereoParams.Load(0);
  float4 tmp = mul(vp, v2 * r1.x);
  tmp.x -= stereo.x * (tmp.w - stereo.y);
  v2 = mul(ivp, tmp) / r1.x;
  
  r0.xyz = v2.xyz * r1.xxx;
  r1.xyz = -r1.xxx * v2.xyz + g_LightPos.xyz;
  r2.x = dot(g_mLightShadowProj._m00_m01_m02_m03, r0.xyzw);
  r2.y = dot(g_mLightShadowProj._m10_m11_m12_m13, r0.xyzw);
  r1.w = dot(g_mLightShadowProj._m30_m31_m32_m33, r0.xyzw);
  r0.w = dot(g_mLightShadowProj._m20_m21_m22_m23, r0.xyzw);
  r0.w = -0.00300000003 + r0.w;
  r2.xyzw = r2.xyxy / r1.wwww;
  r3.xy = float2(1000,0.001953125) * g_GeneralParams.xx;
  r3.xz = r3.xx * r2.zw;
  r3.xz = _tex7.Sample(_tex7_s, r3.xz).xy;
  r3.xyz = r3.zxx * r3.yyy;
  r3.w = -r3.x;
  r4.xyzw = irreg_kernel_2d[0].yyzz * r3.xzzw;
  r4.xyzw = r3.zwxz * irreg_kernel_2d[0].xxww + r4.xyzw;
  r4.xyzw = r4.xyzw + r2.zwzw;
  r5.x = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.xy, r0.w).x;
  r5.y = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.zw, r0.w).x;
  r4.xyzw = irreg_kernel_2d[1].yyzz * r3.xzzw;
  r4.xyzw = r3.zwxz * irreg_kernel_2d[1].xxww + r4.xyzw;
  r4.xyzw = r4.xyzw + r2.zwzw;
  r5.z = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.xy, r0.w).x;
  r5.w = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.zw, r0.w).x;
  r1.w = dot(r5.xyzw, float4(0.125,0.125,0.125,0.125));
  r4.xyzw = irreg_kernel_2d[2].yyzz * r3.xzzw;
  r4.xyzw = r3.zwxz * irreg_kernel_2d[2].xxww + r4.xyzw;
  r4.xyzw = r4.xyzw + r2.zwzw;
  r5.x = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.xy, r0.w).x;
  r5.y = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r4.zw, r0.w).x;
  r4.xyzw = irreg_kernel_2d[3].yyzz * r3.xyzw;
  r3.xyzw = r3.zwxz * irreg_kernel_2d[3].xxww + r4.xyzw;
  r2.xyzw = r3.xyzw + r2.xyzw;
  r5.z = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.xy, r0.w).x;
  r5.w = _tex3_d3d10.SampleCmp(SAMPLER_STATE_depthMapSampler_s, r2.zw, r0.w).x;
  r0.w = dot(r5.xyzw, float4(0.125,0.125,0.125,0.125));
  r0.w = r1.w + r0.w;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r1.xyz * r1.www;
  r1.xyz = g_LightPos.www * r1.xyz;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = 1 + -r1.x;
  r1.x = max(0, r1.x);
  r1.x = r1.x * r1.x;
  r3.xyzw = _tex1.Sample(_tex1_s, v1.xy).xyzw;
  r1.yzw = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r3.xy = r3.ww * float2(40.5845261,255) + float2(0.318309993,9.99999997e-007);
  r2.w = dot(r1.yzw, r1.yzw);
  r2.w = rsqrt(r2.w);
  r1.yzw = r2.www * r1.yzw;
  r2.w = saturate(dot(r2.xyz, r1.yzw));
  r0.w = r2.w * r0.w;
  r4.xyz = g_LightDiffuse.xyz * r0.www;
  r4.xyz = r4.xyz * r1.xxx;
  r5.xyzw = _tex8.Sample(_tex8_s, v1.xy).xyzw;
  r5.xyz = r5.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = saturate(dot(r2.xyz, r5.xyz));
  r0.w = r2.w + -r0.w;
  r0.w = max(0, r0.w);
  r0.w = sqrt(r0.w);
  r0.w = r0.w * r5.w;
  r0.w = saturate(SSDOParams.x * r0.w);
  r0.w = 1 + -r0.w;
  r4.xyz = r4.xyz * r0.www;
  o0.xyz = r4.xyz;
  r4.xyz = g_LightDiffuse.www * r4.xyz;
  o0.w = 0;
  r0.w = dot(-r0.xyz, -r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = -r0.xyz * r0.www + r2.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = saturate(dot(r1.yzw, r0.xyz));
  r0.x = log2(r0.x);
  r0.x = r3.y * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r3.x * r0.x;
  o1.xyz = r4.xyz * r0.xxx;
  o1.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Wed Aug 05 11:02:09 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 g_LightPos;                 // Offset:    0 Size:    16
//   float4 g_LightDiffuse;             // Offset:   16 Size:    16
//   float4 g_GeneralParams;            // Offset:   32 Size:    16
//   float4 vWBasisX;                   // Offset:   48 Size:    16 [unused]
//   float4 vWBasisY;                   // Offset:   64 Size:    16 [unused]
//   float4 vWBasisZ;                   // Offset:   80 Size:    16 [unused]
//   row_major float4x4 g_mLightShadowProj;// Offset:   96 Size:    64
//   float4 irreg_kernel_2d[8];         // Offset:  160 Size:   128
//   float4 SSDOParams;                 // Offset:  288 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// _tex0                             sampler      NA          NA    0        1
// _tex1                             sampler      NA          NA    1        1
// SAMPLER_STATE_depthMapSampler   sampler_c      NA          NA    3        1
// _tex7                             sampler      NA          NA    7        1
// _tex8                             sampler      NA          NA    8        1
// _tex0                             texture  float4          2d    0        1
// _tex1                             texture  float4          2d    1        1
// _tex3_d3d10                       texture  float4          2d    3        1
// _tex7                             texture  float4          2d    7        1
// _tex8                             texture  float4          2d    8        1
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_comparison
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 6
mov r0.w, l(1.000000)
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t0.xyzw, s0
mul r0.xyz, r1.xxxx, v2.xyzx
mad r1.xyz, -r1.xxxx, v2.xyzx, cb0[0].xyzx
dp4 r2.x, cb0[6].xyzw, r0.xyzw
dp4 r2.y, cb0[7].xyzw, r0.xyzw
dp4 r1.w, cb0[9].xyzw, r0.xyzw
dp4 r0.w, cb0[8].xyzw, r0.xyzw
add r0.w, r0.w, l(-0.003000)
div r2.xyzw, r2.xyxy, r1.wwww
mul r3.xy, cb0[2].xxxx, l(1000.000000, 0.001953, 0.000000, 0.000000)
mul r3.xz, r2.zzwz, r3.xxxx
sample_indexable(texture2d)(float,float,float,float) r3.xz, r3.xzxx, t7.xzyw, s7
mul r3.xyz, r3.yyyy, r3.zxxz
mov r3.w, -r3.x
mul r4.xyzw, r3.xzzw, cb0[10].yyzz
mad r4.xyzw, r3.zwxz, cb0[10].xxww, r4.xyzw
add r4.xyzw, r2.zwzw, r4.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r5.x, r4.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r5.y, r4.zwzz, t3.xxxx, s3, r0.w
mul r4.xyzw, r3.xzzw, cb0[11].yyzz
mad r4.xyzw, r3.zwxz, cb0[11].xxww, r4.xyzw
add r4.xyzw, r2.zwzw, r4.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r5.z, r4.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r5.w, r4.zwzz, t3.xxxx, s3, r0.w
dp4 r1.w, r5.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
mul r4.xyzw, r3.xzzw, cb0[12].yyzz
mad r4.xyzw, r3.zwxz, cb0[12].xxww, r4.xyzw
add r4.xyzw, r2.zwzw, r4.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r5.x, r4.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r5.y, r4.zwzz, t3.xxxx, s3, r0.w
mul r4.xyzw, r3.xyzw, cb0[13].yyzz
mad r3.xyzw, r3.zwxz, cb0[13].xxww, r4.xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
sample_c_indexable(texture2d)(float,float,float,float) r5.z, r2.xyxx, t3.xxxx, s3, r0.w
sample_c_indexable(texture2d)(float,float,float,float) r5.w, r2.zwzz, t3.xxxx, s3, r0.w
dp4 r0.w, r5.xyzw, l(0.125000, 0.125000, 0.125000, 0.125000)
add r0.w, r0.w, r1.w
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r1.xyzx
mul r1.xyz, r1.xyzx, cb0[0].wwww
dp3 r1.x, r1.xyzx, r1.xyzx
add r1.x, -r1.x, l(1.000000)
max r1.x, r1.x, l(0.000000)
mul r1.x, r1.x, r1.x
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t1.xyzw, s1
mad r1.yzw, r3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mad r3.xy, r3.wwww, l(40.584526, 255.000000, 0.000000, 0.000000), l(0.318310, 0.000001, 0.000000, 0.000000)
dp3 r2.w, r1.yzwy, r1.yzwy
rsq r2.w, r2.w
mul r1.yzw, r1.yyzw, r2.wwww
dp3_sat r2.w, r2.xyzx, r1.yzwy
mul r0.w, r0.w, r2.w
mul r4.xyz, r0.wwww, cb0[1].xyzx
mul r4.xyz, r1.xxxx, r4.xyzx
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, v1.xyxx, t8.xyzw, s8
mad r5.xyz, r5.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3_sat r0.w, r2.xyzx, r5.xyzx
add r0.w, -r0.w, r2.w
max r0.w, r0.w, l(0.000000)
sqrt r0.w, r0.w
mul r0.w, r5.w, r0.w
mul_sat r0.w, r0.w, cb0[18].x
add r0.w, -r0.w, l(1.000000)
mul r4.xyz, r0.wwww, r4.xyzx
mov o0.xyz, r4.xyzx
mul r4.xyz, r4.xyzx, cb0[1].wwww
mov o0.w, l(0)
dp3 r0.w, -r0.xyzx, -r0.xyzx
rsq r0.w, r0.w
mad r0.xyz, -r0.xyzx, r0.wwww, r2.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3_sat r0.x, r1.yzwy, r0.xyzx
log r0.x, r0.x
mul r0.x, r0.x, r3.y
exp r0.x, r0.x
mul r0.x, r0.x, r3.x
mul o1.xyz, r0.xxxx, r4.xyzx
mov o1.w, l(0)
ret 
// Approximately 83 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
