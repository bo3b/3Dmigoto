
cbuffer PER_BATCH : register(b0)
{
  float3 vfFogColor : packoffset(c0);
  float3 slHazeColPartialRayleighInScatter : packoffset(c1);
  float3 vfColGradBase : packoffset(c2);
  float3 slPhaseFunctionConstants : packoffset(c3);
  float3 slSunDirection : packoffset(c4);
  float4 PS_NearFarClipDist : packoffset(c5);
  float4 vfRampParams : packoffset(c6);
  float3 vfColGradDelta : packoffset(c7);
  float4 miscCamFront : packoffset(c8);
  row_major float4x4 ViewProjMatrPrev : packoffset(c9);
  float4 CameraUpVector : packoffset(c13);
  float4 vfParams : packoffset(c14);
  float4 GlowParams : packoffset(c15);
  float3 slHazeColPartialMieInScatter : packoffset(c16);
  float4 TimeParams : packoffset(c17);
  float4 vfViewPos : packoffset(c18);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 Ambient : packoffset(c0);
  float4 TexTileSize : packoffset(c1);
  float4 MotionBlurInfo : packoffset(c2);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatDifColor : packoffset(c0);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float __0SoftParticlesScale__1__2__3 : packoffset(c5);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float3 v3 : TEXCOORD1,
  float4 v4 : COLOR1,
  float4 v5 : PSIZE0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float p2 : TEXCOORD5,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : TEXCOORD7,
  out float4 o8 : TEXCOORD8,
  out float4 o9 : TEXCOORD9,
  out float4 o10 : COLOR0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = vfViewPos.zxy + -v3.zxy;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = CameraUpVector.zxy * r0.zxy;
  r1.xyz = CameraUpVector.yzx * r0.xyz + -r1.xyz;
  r2.xyz = r1.yzx * r0.xyz;
  r0.xyz = r0.zxy * r1.zxy + -r2.xyz;
  r2.xyzw = v4.xxyy * float4(2,2,-2,-2) + float4(-1,-1,1,1);
  r3.xyzw = v1.xyzw * r2.yyww;
  r2.xyzw = v5.xyzw * r2.xyzw;
  r4.xyz = r3.yyy * r0.xyz;
  r0.xyz = r3.www * r0.xyz;
  r0.xyz = r1.xyz * r3.zzz + r0.xyz;
  r1.xyz = r1.xyz * r3.xxx + r4.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.xyz = v3.xyz + r0.xyz;
  r0.w = abs(v5.x) + abs(v5.y);
  r0.w = 0 < r0.w;
  r0.w = (int)-r0.w;
  r0.w = 0 != r0.w;
  r1.xyz = r0.www ? r0.xyz : v3.xyz;
  r1.w = 1;
  r3.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r1.xyzw);
  r0.x = dot(ViewProjMatrPrev._m00_m01_m02_m03, v0.xyzw);
  r0.y = dot(ViewProjMatrPrev._m10_m11_m12_m13, v0.xyzw);
  r0.z = dot(ViewProjMatrPrev._m30_m31_m32_m33, v0.xyzw);
  r0.xy = r0.xy / r0.zz;
  r4.z = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, v0.xyzw);
  r4.w = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, v0.xyzw);
  r0.z = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, v0.xyzw);
  r4.xy = r4.zw / r0.zz;
  r0.xy = r4.xy + -r0.xy;
  r5.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r1.xyzw);
  r5.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r1.xyzw);
  r3.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r1.xyzw);
  r1.xy = r5.xy / r3.ww;
  r6.xyz = vfViewPos.zxy + -v0.zxy;
  r0.z = dot(r6.xyz, r6.xyz);
  r0.z = rsqrt(r0.z);
  r6.xyz = r6.xyz * r0.zzz;
  r7.xyz = CameraUpVector.xyz * r6.xyz;
  r7.xyz = CameraUpVector.zxy * r6.yzx + -r7.xyz;
  r8.xyz = r7.yzx * r6.yzx;
  r8.xyz = r6.xyz * r7.zxy + -r8.xyz;
  r9.xyz = r8.xyz * r2.yyy;
  r9.xyz = r7.xyz * r2.xxx + r9.xyz;
  r10.xyz = r8.zxy * r2.www;
  r10.xyz = r7.zxy * r2.zzz + r10.xyz;
  r7.xyz = r0.www ? r9.xyz : r7.xyz;
  r9.xyz = r10.xyz + r9.zxy;
  r8.xyz = r0.www ? -r10.yzx : r8.xyz;
  r9.xyz = v0.xyz + r9.xyz;
  r9.xyz = r0.www ? r9.xyz : v0.xyz;
  r9.w = 1;
  r10.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r9.xyzw);
  r10.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r9.xyzw);
  r11.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r9.xyzw);
  r11.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r9.xyzw);
  r1.zw = r10.xy / r11.ww;
  r4.zw = r1.zw + -r1.xy;
  r5.zw = MotionBlurInfo.xy * TimeParams.yy;
  r4.zw = r5.ww * r4.zw;
  r0.xy = r5.zz * r0.xy + r4.zw;
  r0.z = dot(r0.xy, r0.xy);
  r0.z = sqrt(r0.z);
  r4.z = min(0.5, r0.z);
  r4.z = r4.z * r4.z;
  r5.zw = r0.xy / r0.zz;
  r0.z = 9.99999975e-005 < r0.z;
  r10.zw = r5.zw * r4.zz;
  r12.xy = r10.zw * float2(0.25,0.25) + r1.zw;
  r1.zw = r1.zw + -r4.xy;
  r4.xy = r12.xy * r11.ww;
  r11.xy = r0.zz ? r4.xy : r10.xy;
  r1.xy = -r10.zw * float2(0.75,0.75) + r1.xy;
  o7.xy = r0.zz ? r10.zw : r0.xy;
  r0.xy = r1.xy * r3.ww;
  r3.xy = r0.zz ? r0.xy : r5.xy;
  r10.xyzw = r11.xyzw + -r3.xyzw;
  r0.x = dot(v5.xy, v5.xy);
  r0.x = rsqrt(r0.x);
  r0.xy = v5.xy * r0.xx;
  r11.y = dot(r0.xy, r5.zw);
  r0.x = dot(v5.zw, v5.zw);
  r0.x = rsqrt(r0.x);
  r0.xy = v5.zw * r0.xx;
  r11.z = dot(r0.xy, r5.zw);
  r0.xy = r11.yz * r4.zz;
  r0.xy = MotionBlurInfo.zz * r0.xy;
  r11.yz = r11.yz * r0.xy;
  r0.x = dot(r1.zw, r1.zw);
  r0.y = sqrt(r0.x);
  r0.x = rsqrt(r0.x);
  r1.xy = r1.zw * r0.xx;
  r0.x = r0.y / r4.z;
  r0.x = min(1, r0.x);
  r0.y = Ambient.x + GlowParams.x;
  r0.y = saturate(0.100000001 * r0.y);
  r0.y = -r0.y * 0.349999994 + 0.400000006;
  r11.w = max(r0.x, r0.y);
  r0.x = dot(r1.xy, r5.zw);
  o7.zw = r1.xy;
  r11.x = r0.x * 0.5 + 0.5;
  r1.xyzw = r0.zzzz ? r11.xyzw : float4(1,0,0,1);
  r3.xyzw = r1.xxxx * r10.xyzw + r3.xyzw;
  o0.xyzw = r3.xyzw;
  
    float4 stereo = StereoParams.Load(0);
  r3.x += stereo.x * (r3.w - stereo.y);
  
  o1.zw = v4.wx;
  r0.x = TexTileSize.y * v4.y;
  r0.y = v4.z * TexTileSize.z + TexTileSize.w;
  r0.z = floor(r0.y);
  o2.z = frac(r0.y);
  r0.y = TexTileSize.x * r0.z;
  r0.z = r0.z * TexTileSize.x + TexTileSize.x;
  r1.x = floor(r0.y);
  r0.y = frac(r0.y);
  r4.y = r1.x * TexTileSize.y + r0.x;
  r4.x = v4.x * TexTileSize.x + r0.y;
  o1.xy = r4.xy;
  r0.x = r2.y * r2.z;
  r0.x = r2.x * r2.w + -r0.x;
  r0.x = sqrt(abs(r0.x));
  r0.x = 3 / r0.x;
  p2.x = __0SoftParticlesScale__1__2__3 * r0.x;
  r0.x = frac(r0.z);
  r0.z = floor(r0.z);
  r0.z = r0.z + -r1.x;
  o2.y = r0.z * TexTileSize.y + r4.y;
  r0.x = r0.x + -r0.y;
  o2.x = r4.x + r0.x;
  r0.xyz = -v0.xyz + r9.xyz;
  r2.xyz = vfViewPos.xyz + -r9.xyz;
  r1.x = dot(r2.xyz, r0.xyz);
  r2.w = dot(r2.xyz, r2.xyz);
  r1.x = r1.x / r2.w;
  r0.xyz = -r2.xyz * r1.xxx + r0.xyz;
  r0.xyz = r0.www ? r0.xyz : r2.xyz;
  r1.x = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r1.x);
  r0.xyz = r1.xxx * r0.xyz;
  r2.xyz = r6.zxy * r0.xyz;
  r2.xyz = r6.yzx * r0.yzx + -r2.xyz;
  o9.xyz = r0.xyz;
  r0.xyz = r0.www ? r2.xyz : r6.xyz;
  r0.w = dot(r8.xyz, r8.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r8.xyz * r0.www;
  r4.xyz = r2.xyz * r0.xyz;
  r4.xyz = r0.zxy * r2.yzx + -r4.xyz;
  r0.w = dot(r0.zxy, r2.xyz);
  r2.xyz = r0.yzx * r0.www + r4.xyz;
  o3.w = r2.z;
  o3.xyz = r9.xyz;
  r4.xyz = -g_VS_WorldViewPos.xyz + r9.xyz;
  r0.w = dot(r7.xyz, r7.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r7.xyz * r0.www;
  r6.xyz = r5.xyz * r0.xyz;
  r6.xyz = r0.zxy * r5.yzx + -r6.xyz;
  r0.w = dot(r0.zxy, r5.xyz);
  o4.xyz = r0.yzx * r0.www + r6.xyz;
  o4.w = r2.y;
  o9.w = r2.x;
  r0.xy = r3.xy * float2(1,-1) + r3.ww;
  o5.w = r3.w;
  o5.xy = float2(0.5,0.5) * r0.xy;
  o5.z = v4.y;
  r0.x = vfParams.x * r4.z;
  r0.y = -1.44269502 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = 1 + -r0.y;
  r0.x = r0.y / r0.x;
  r0.y = 0.00999999978 < abs(r4.z);
  r0.x = r0.y ? r0.x : 1;
  r0.y = dot(r4.xyz, r4.xyz);
  r0.z = sqrt(r0.y);
  r0.y = rsqrt(r0.y);
  r0.y = saturate(r4.z * r0.y);
  o6.xyz = r0.yyy * vfColGradDelta.xyz + vfColGradBase.xyz;
  r0.y = vfParams.y * r0.z;
  r0.z = saturate(r0.z * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.y + -vfParams.w;
  r0.x = exp2(-r0.x);
  r0.x = min(1, r0.x);
  r0.x = 1 + -r0.x;
  r0.y = 2 + -r0.z;
  r0.y = r0.z * r0.y;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  o6.w = -r0.x * r0.y + 1;
  r0.xy = float2(0.0399999991,0.0399999991) * TexTileSize.xy;
  o8.xy = min(abs(r1.yz), r0.xy);
  o8.z = r1.w;
  o10.xyz = MatDifColor.xyz * v2.zyx;
  o10.w = v2.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Wed Aug 12 21:20:15 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfFogColor;                 // Offset:    0 Size:    12 [unused]
//   float3 slHazeColPartialRayleighInScatter;// Offset:   16 Size:    12 [unused]
//   float3 vfColGradBase;              // Offset:   32 Size:    12
//   float3 slPhaseFunctionConstants;   // Offset:   48 Size:    12 [unused]
//   float3 slSunDirection;             // Offset:   64 Size:    12 [unused]
//   float4 PS_NearFarClipDist;         // Offset:   80 Size:    16 [unused]
//   float4 vfRampParams;               // Offset:   96 Size:    16
//   float3 vfColGradDelta;             // Offset:  112 Size:    12
//   float4 miscCamFront;               // Offset:  128 Size:    16 [unused]
//   row_major float4x4 ViewProjMatrPrev;// Offset:  144 Size:    64
//   float4 CameraUpVector;             // Offset:  208 Size:    16
//   float4 vfParams;                   // Offset:  224 Size:    16
//   float4 GlowParams;                 // Offset:  240 Size:    16
//   float3 slHazeColPartialMieInScatter;// Offset:  256 Size:    12 [unused]
//   float4 TimeParams;                 // Offset:  272 Size:    16
//   float4 vfViewPos;                  // Offset:  288 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 Ambient;                    // Offset:    0 Size:    16
//   float4 TexTileSize;                // Offset:   16 Size:    16
//   float4 MotionBlurInfo;             // Offset:   32 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float __0SoftParticlesScale__1__2__3;// Offset:   80 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz 
// COLOR                    1   xyzw        4     NONE   float   xyzw
// PSIZE                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 5      w        2     NONE   float      w
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// TEXCOORD                 8   xyz         8     NONE   float   xyz 
// TEXCOORD                 9   xyzw        9     NONE   float   xyzw
// COLOR                    0   xyzw       10     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[19], immediateIndexed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o2.w
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyz
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_temps 13
add r0.xyz, -v3.zxyz, cb0[18].zxyz
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, r0.zxyz, cb0[13].zxyz
mad r1.xyz, cb0[13].yzxy, r0.xyzx, -r1.xyzx
mul r2.xyz, r0.xyzx, r1.yzxy
mad r0.xyz, r0.zxyz, r1.zxyz, -r2.xyzx
mad r2.xyzw, v4.xxyy, l(2.000000, 2.000000, -2.000000, -2.000000), l(-1.000000, -1.000000, 1.000000, 1.000000)
mul r3.xyzw, r2.yyww, v1.xyzw
mul r2.xyzw, r2.xyzw, v5.xyzw
mul r4.xyz, r0.xyzx, r3.yyyy
mul r0.xyz, r0.xyzx, r3.wwww
mad r0.xyz, r1.xyzx, r3.zzzz, r0.xyzx
mad r1.xyz, r1.xyzx, r3.xxxx, r4.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
add r0.xyz, r0.xyzx, v3.xyzx
add r0.w, |v5.y|, |v5.x|
lt r0.w, l(0.000000), r0.w
itof r0.w, -r0.w
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
movc r1.xyz, r0.wwww, r0.xyzx, v3.xyzx
mov r1.w, l(1.000000)
dp4 r3.z, cb3[2].xyzw, r1.xyzw
dp4 r0.x, cb0[9].xyzw, v0.xyzw
dp4 r0.y, cb0[10].xyzw, v0.xyzw
dp4 r0.z, cb0[12].xyzw, v0.xyzw
div r0.xy, r0.xyxx, r0.zzzz
dp4 r4.z, cb3[0].xyzw, v0.xyzw
dp4 r4.w, cb3[1].xyzw, v0.xyzw
dp4 r0.z, cb3[3].xyzw, v0.xyzw
div r4.xy, r4.zwzz, r0.zzzz
add r0.xy, -r0.xyxx, r4.xyxx
dp4 r5.x, cb3[0].xyzw, r1.xyzw
dp4 r5.y, cb3[1].xyzw, r1.xyzw
dp4 r3.w, cb3[3].xyzw, r1.xyzw
div r1.xy, r5.xyxx, r3.wwww
add r6.xyz, -v0.zxyz, cb0[18].zxyz
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, r6.xyzx
mul r7.xyz, r6.xyzx, cb0[13].xyzx
mad r7.xyz, cb0[13].zxyz, r6.yzxy, -r7.xyzx
mul r8.xyz, r6.yzxy, r7.yzxy
mad r8.xyz, r6.xyzx, r7.zxyz, -r8.xyzx
mul r9.xyz, r2.yyyy, r8.xyzx
mad r9.xyz, r7.xyzx, r2.xxxx, r9.xyzx
mul r10.xyz, r2.wwww, r8.zxyz
mad r10.xyz, r7.zxyz, r2.zzzz, r10.xyzx
movc r7.xyz, r0.wwww, r9.xyzx, r7.xyzx
add r9.xyz, r9.zxyz, r10.xyzx
movc r8.xyz, r0.wwww, -r10.yzxy, r8.xyzx
add r9.xyz, r9.xyzx, v0.xyzx
movc r9.xyz, r0.wwww, r9.xyzx, v0.xyzx
mov r9.w, l(1.000000)
dp4 r10.x, cb3[0].xyzw, r9.xyzw
dp4 r10.y, cb3[1].xyzw, r9.xyzw
dp4 r11.w, cb3[3].xyzw, r9.xyzw
dp4 r11.z, cb3[2].xyzw, r9.xyzw
div r1.zw, r10.xxxy, r11.wwww
add r4.zw, -r1.xxxy, r1.zzzw
mul r5.zw, cb0[17].yyyy, cb1[2].xxxy
mul r4.zw, r4.zzzw, r5.wwww
mad r0.xy, r5.zzzz, r0.xyxx, r4.zwzz
dp2 r0.z, r0.xyxx, r0.xyxx
sqrt r0.z, r0.z
min r4.z, r0.z, l(0.500000)
mul r4.z, r4.z, r4.z
div r5.zw, r0.xxxy, r0.zzzz
lt r0.z, l(0.000100), r0.z
mul r10.zw, r4.zzzz, r5.zzzw
mad r12.xy, r10.zwzz, l(0.250000, 0.250000, 0.000000, 0.000000), r1.zwzz
add r1.zw, -r4.xxxy, r1.zzzw
mul r4.xy, r11.wwww, r12.xyxx
movc r11.xy, r0.zzzz, r4.xyxx, r10.xyxx
mad r1.xy, -r10.zwzz, l(0.750000, 0.750000, 0.000000, 0.000000), r1.xyxx
movc o7.xy, r0.zzzz, r10.zwzz, r0.xyxx
mul r0.xy, r3.wwww, r1.xyxx
movc r3.xy, r0.zzzz, r0.xyxx, r5.xyxx
add r10.xyzw, -r3.xyzw, r11.xyzw
dp2 r0.x, v5.xyxx, v5.xyxx
rsq r0.x, r0.x
mul r0.xy, r0.xxxx, v5.xyxx
dp2 r11.y, r0.xyxx, r5.zwzz
dp2 r0.x, v5.zwzz, v5.zwzz
rsq r0.x, r0.x
mul r0.xy, r0.xxxx, v5.zwzz
dp2 r11.z, r0.xyxx, r5.zwzz
mul r0.xy, r4.zzzz, r11.yzyy
mul r0.xy, r0.xyxx, cb1[2].zzzz
mul r11.yz, r0.xxyx, r11.yyzy
dp2 r0.x, r1.zwzz, r1.zwzz
sqrt r0.y, r0.x
rsq r0.x, r0.x
mul r1.xy, r0.xxxx, r1.zwzz
div r0.x, r0.y, r4.z
min r0.x, r0.x, l(1.000000)
add r0.y, cb0[15].x, cb1[0].x
mul_sat r0.y, r0.y, l(0.100000)
mad r0.y, -r0.y, l(0.350000), l(0.400000)
max r11.w, r0.y, r0.x
dp2 r0.x, r1.xyxx, r5.zwzz
mov o7.zw, r1.xxxy
mad r11.x, r0.x, l(0.500000), l(0.500000)
movc r1.xyzw, r0.zzzz, r11.xyzw, l(1.000000,0,0,1.000000)
mad r3.xyzw, r1.xxxx, r10.xyzw, r3.xyzw
mov o0.xyzw, r3.xyzw
mov o1.zw, v4.wwwx
mul r0.x, v4.y, cb1[1].y
mad r0.y, v4.z, cb1[1].z, cb1[1].w
round_ni r0.z, r0.y
frc o2.z, r0.y
mul r0.y, r0.z, cb1[1].x
mad r0.z, r0.z, cb1[1].x, cb1[1].x
round_ni r1.x, r0.y
frc r0.y, r0.y
mad r4.y, r1.x, cb1[1].y, r0.x
mad r4.x, v4.x, cb1[1].x, r0.y
mov o1.xy, r4.xyxx
mul r0.x, r2.z, r2.y
mad r0.x, r2.x, r2.w, -r0.x
sqrt r0.x, |r0.x|
div r0.x, l(3.000000), r0.x
mul o2.w, r0.x, cb4[5].x
frc r0.x, r0.z
round_ni r0.z, r0.z
add r0.z, -r1.x, r0.z
mad o2.y, r0.z, cb1[1].y, r4.y
add r0.x, -r0.y, r0.x
add o2.x, r0.x, r4.x
add r0.xyz, r9.xyzx, -v0.xyzx
add r2.xyz, -r9.xyzx, cb0[18].xyzx
dp3 r1.x, r2.xyzx, r0.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
div r1.x, r1.x, r2.w
mad r0.xyz, -r2.xyzx, r1.xxxx, r0.xyzx
movc r0.xyz, r0.wwww, r0.xyzx, r2.xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
rsq r1.x, r1.x
mul r0.xyz, r0.xyzx, r1.xxxx
mul r2.xyz, r0.xyzx, r6.zxyz
mad r2.xyz, r6.yzxy, r0.yzxy, -r2.xyzx
mov o9.xyz, r0.xyzx
movc r0.xyz, r0.wwww, r2.xyzx, r6.xyzx
dp3 r0.w, r8.xyzx, r8.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r8.xyzx
mul r4.xyz, r0.xyzx, r2.xyzx
mad r4.xyz, r0.zxyz, r2.yzxy, -r4.xyzx
dp3 r0.w, r0.zxyz, r2.xyzx
mad r2.xyz, r0.yzxy, r0.wwww, r4.xyzx
mov o3.w, r2.z
mov o3.xyz, r9.xyzx
add r4.xyz, r9.xyzx, -cb3[6].xyzx
dp3 r0.w, r7.xyzx, r7.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r7.xyzx
mul r6.xyz, r0.xyzx, r5.xyzx
mad r6.xyz, r0.zxyz, r5.yzxy, -r6.xyzx
dp3 r0.w, r0.zxyz, r5.xyzx
mad o4.xyz, r0.yzxy, r0.wwww, r6.xyzx
mov o4.w, r2.y
mov o9.w, r2.x
mad r0.xy, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r3.wwww
mov o5.w, r3.w
mul o5.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o5.z, v4.y
mul r0.x, r4.z, cb0[14].x
mul r0.y, r0.x, l(-1.442695)
exp r0.y, r0.y
add r0.y, -r0.y, l(1.000000)
div r0.x, r0.y, r0.x
lt r0.y, l(0.010000), |r4.z|
movc r0.x, r0.y, r0.x, l(1.000000)
dp3 r0.y, r4.xyzx, r4.xyzx
sqrt r0.z, r0.y
rsq r0.y, r0.y
mul_sat r0.y, r0.y, r4.z
mad o6.xyz, r0.yyyy, cb0[7].xyzx, cb0[2].xyzx
mul r0.y, r0.z, cb0[14].y
mad_sat r0.z, r0.z, cb0[6].x, cb0[6].y
mad r0.x, r0.x, r0.y, -cb0[14].w
exp r0.x, -r0.x
min r0.x, r0.x, l(1.000000)
add r0.x, -r0.x, l(1.000000)
add r0.y, -r0.z, l(2.000000)
mul r0.y, r0.y, r0.z
mad r0.y, r0.y, cb0[6].z, cb0[6].w
mad o6.w, -r0.x, r0.y, l(1.000000)
mul r0.xy, cb1[1].xyxx, l(0.040000, 0.040000, 0.000000, 0.000000)
min o8.xy, r0.xyxx, |r1.yzyy|
mov o8.z, r1.w
mul o10.xyz, v2.zyxz, cb4[0].xyzx
mov o10.w, v2.w
ret 
// Approximately 195 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
