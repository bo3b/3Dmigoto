
cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float4 DecalTangent : packoffset(c1);
  float4 vfParams : packoffset(c2);
  float4 DecalBinormal : packoffset(c3);
  float4 vfRampParams : packoffset(c4);
  float4 _InstancingParams : packoffset(c5);
  float4 DecalAtten : packoffset(c6);
  float4 DecalZFightingRemedy : packoffset(c7);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 Ambient : packoffset(c4);
  float4 AmbientOp : packoffset(c5);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v4.yzx * v3.zxy;
  r0.xyz = v3.yzx * v4.zxy + -r0.xyz;
  r0.xyz = v3.www * r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(DecalBinormal.xyz, r0.xyz);
  r1.xyz = -r0.www * r0.xyz + DecalBinormal.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.yz = r1.yz * r0.ww;
  r1.w = dot(DecalTangent.xyz, r0.xyz);
  r0.xyz = -r1.www * r0.xyz + DecalTangent.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r3.yz = r1.ww * r0.yz;
  r3.w = r0.x * r1.w + 9.99999997e-007;
  r0.xyz = r0.xyz * r1.www + float3(9.99999997e-007,0,0);
  r2.w = r1.x * r0.w + -9.99999997e-007;
  r1.xyz = r1.xyz * r0.www + float3(-9.99999997e-007,0,0);
  r4.xyz = r3.zwy * r2.yzw;
  r2.xyz = r3.yzw * r2.zwy + -r4.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r3.xyz = -r2.xyz * DecalZFightingRemedy.zzz + v0.xyz;
  r4.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r4.xyz = ObjWorldMatrix._m00_m01_m02;
  r3.w = 1;
  r4.x = dot(r4.xyzw, r3.xyzw);
  r5.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r5.xyz = ObjWorldMatrix._m10_m11_m12;
  r4.y = dot(r5.xyzw, r3.xyzw);
  r5.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r5.xyz = ObjWorldMatrix._m20_m21_m22;
  r4.z = dot(r5.xyzw, r3.xyzw);
  r4.w = 1;
  r5.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r4.xyzw);
  r5.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r4.xyzw);
  r5.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r4.xyzw);
  r5.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r4.xyzw);
  o2.xyzw = r4.xyzw;
  r4.xyzw = r5.xyzw * DecalZFightingRemedy.xxxx + DecalZFightingRemedy.wwyw;
  o0.xyzw = r4.xyzw;
  
    float4 stereo = StereoParams.Load(0);
  r4.x += stereo.x * (r4.w - stereo.y);
  
  r5.x = dot(DecalTangent.xyzw, r3.xyzw);
  r5.y = dot(DecalBinormal.xyzw, r3.xyzw);
  r3.xyz = -DecalAtten.xyz + r3.xyz;
  o1.xyzw = r5.xyxy;
  r4.xy = r4.xy * float2(1,-1) + r4.ww;
  o3.zw = r4.zw;
  o3.xy = float2(0.5,0.5) * r4.xy;
  r2.z = dot(-r2.xyz, r3.xyz);
  r2.x = dot(r0.xyz, r3.xyz);
  r2.y = dot(r1.xyz, r3.xyz);
  o4.xyz = r2.xyz / DecalAtten.www;
  o5.xyzw = AmbientOp.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 04 23:08:10 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float4 DecalTangent;               // Offset:   16 Size:    16
//   float4 vfParams;                   // Offset:   32 Size:    16 [unused]
//   float4 DecalBinormal;              // Offset:   48 Size:    16
//   float4 vfRampParams;               // Offset:   64 Size:    16 [unused]
//   float4 _InstancingParams;          // Offset:   80 Size:    16 [unused]
//   float4 DecalAtten;                 // Offset:   96 Size:    16
//   float4 DecalZFightingRemedy;       // Offset:  112 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 Ambient;                    // Offset:   64 Size:    16 [unused]
//   float4 AmbientOp;                  // Offset:   80 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[8], immediateIndexed
dcl_constantbuffer cb1[6], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyz
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 6
mul r0.xyz, v3.zxyz, v4.yzxy
mad r0.xyz, v3.yzxy, v4.zxyz, -r0.xyzx
mul r0.xyz, r0.xyzx, v3.wwww
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, cb0[3].xyzx, r0.xyzx
mad r1.xyz, -r0.wwww, r0.xyzx, cb0[3].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r2.yz, r0.wwww, r1.yyzy
dp3 r1.w, cb0[1].xyzx, r0.xyzx
mad r0.xyz, -r1.wwww, r0.xyzx, cb0[1].xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r3.yz, r0.yyzy, r1.wwww
mad r3.w, r0.x, r1.w, l(0.000001)
mad r0.xyz, r0.xyzx, r1.wwww, l(0.000001, 0.000000, 0.000000, 0.000000)
mad r2.w, r1.x, r0.w, l(-0.000001)
mad r1.xyz, r1.xyzx, r0.wwww, l(-0.000001, 0.000000, 0.000000, 0.000000)
mul r4.xyz, r2.yzwy, r3.zwyz
mad r2.xyz, r3.yzwy, r2.zwyz, -r4.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mad r3.xyz, -r2.xyzx, cb0[7].zzzz, v0.xyzx
add r4.w, cb1[0].w, -cb3[6].x
mov r4.xyz, cb1[0].xyzx
mov r3.w, l(1.000000)
dp4 r4.x, r4.xyzw, r3.xyzw
add r5.w, cb1[1].w, -cb3[6].y
mov r5.xyz, cb1[1].xyzx
dp4 r4.y, r5.xyzw, r3.xyzw
add r5.w, cb1[2].w, -cb3[6].z
mov r5.xyz, cb1[2].xyzx
dp4 r4.z, r5.xyzw, r3.xyzw
mov r4.w, l(1.000000)
dp4 r5.x, cb3[10].xyzw, r4.xyzw
dp4 r5.y, cb3[11].xyzw, r4.xyzw
dp4 r5.z, cb3[12].xyzw, r4.xyzw
dp4 r5.w, cb3[13].xyzw, r4.xyzw
mov o2.xyzw, r4.xyzw
mad r4.xyzw, r5.xyzw, cb0[7].xxxx, cb0[7].wwyw
mov o0.xyzw, r4.xyzw
dp4 r5.x, cb0[1].xyzw, r3.xyzw
dp4 r5.y, cb0[3].xyzw, r3.xyzw
add r3.xyz, r3.xyzx, -cb0[6].xyzx
mov o1.xyzw, r5.xyxy
mad r4.xy, r4.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r4.wwww
mov o3.zw, r4.zzzw
mul o3.xy, r4.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp3 r2.z, -r2.xyzx, r3.xyzx
dp3 r2.x, r0.xyzx, r3.xyzx
dp3 r2.y, r1.xyzx, r3.xyzx
div o4.xyz, r2.xyzx, cb0[6].wwww
mov o5.xyzw, cb1[5].xyzw
ret 
// Approximately 57 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
