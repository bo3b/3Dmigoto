//Halo correction, disable on effect
//PS 9c6bc154a73195cd
cbuffer PER_BATCH : register(b0)
{
  row_major float4x4 g_mCamera : packoffset(c0);
  float4 g_vFrustrumLB : packoffset(c4);
  float4 g_vFrustrumLT : packoffset(c5);
  float4 g_vFrustrumRB : packoffset(c6);
  float4 g_vFrustrumRT : packoffset(c7);
  row_major float4x4 g_invGridMatrix : packoffset(c8);
  row_major float4x4 g_gridMatrix : packoffset(c12);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float3 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float3 o3 : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = v0.xyz;
  r0.w = 1;
  r1.x = dot(g_invGridMatrix._m10_m11_m12_m13, r0.xyzw);
  r1.xyzw = g_mCamera._m10_m11_m12_m13 * r1.xxxx;
  r2.x = dot(g_invGridMatrix._m00_m01_m02_m03, r0.xyzw);
  r0.x = dot(g_invGridMatrix._m20_m21_m22_m23, r0.xyzw);

  r1.xyzw = r2.xxxx * g_mCamera._m00_m01_m02_m03 + r1.xyzw;
  r0.xyzw = r0.xxxx * g_mCamera._m20_m21_m22_m23 + r1.xyzw;
  r0.xyzw = g_mCamera._m30_m31_m32_m33 + r0.xyzw;
  o0.xyzw = r0.xyzw;

  float4 stereo = StereoParams.Load(0);
  r0.x += stereo.x * (r0.w - stereo.y);  

  
  r0.xy = r0.xy / r0.ww;
  r1.yz = r0.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r1.xw = float2(1,1) + -r1.zz;
  o1.xy = r1.yw * r0.ww;
  o1.z = r0.w;
  r0.xyz = g_vFrustrumRB.xyz + -g_vFrustrumLB.xyz;
  r0.xyz = r1.yyy * r0.xyz + g_vFrustrumLB.xyz;
  r2.xyz = g_vFrustrumRT.xyz + -g_vFrustrumLT.xyz;
  r1.yzw = r1.yyy * r2.xyz + g_vFrustrumLT.xyz;
  r0.xyz = -r1.yzw + r0.xyz;
  r0.xyz = r1.xxx * r0.xyz + r1.yzw;
  r1.x = dot(g_gridMatrix._m00_m01_m02, r0.xyz);
  r1.y = dot(g_gridMatrix._m10_m11_m12, r0.xyz);
  r1.z = dot(g_gridMatrix._m20_m21_m22, r0.xyz);
  o3.xyz = r0.xyz * r0.www;
  o2.xyz = r1.xyz * r0.www;
  
  
  o2 = 0;
  
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 04 22:24:02 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   row_major float4x4 g_mCamera;      // Offset:    0 Size:    64
//   float4 g_vFrustrumLB;              // Offset:   64 Size:    16
//   float4 g_vFrustrumLT;              // Offset:   80 Size:    16
//   float4 g_vFrustrumRB;              // Offset:   96 Size:    16
//   float4 g_vFrustrumRT;              // Offset:  112 Size:    16
//   row_major float4x4 g_invGridMatrix;// Offset:  128 Size:    64
//   row_major float4x4 g_gridMatrix;   // Offset:  192 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[15], immediateIndexed
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyz
dcl_temps 3
mov r0.xyz, v0.xyzx
mov r0.w, l(1.000000)
dp4 r1.x, cb0[9].xyzw, r0.xyzw
mul r1.xyzw, r1.xxxx, cb0[1].xyzw
dp4 r2.x, cb0[8].xyzw, r0.xyzw
dp4 r0.x, cb0[10].xyzw, r0.xyzw
mad r1.xyzw, r2.xxxx, cb0[0].xyzw, r1.xyzw
mad r0.xyzw, r0.xxxx, cb0[2].xyzw, r1.xyzw
add r0.xyzw, r0.xyzw, cb0[3].xyzw
mov o0.xyzw, r0.xyzw
div r0.xy, r0.xyxx, r0.wwww
mad r1.yz, r0.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
add r1.xw, -r1.zzzz, l(1.000000, 0.000000, 0.000000, 1.000000)
mul o1.xy, r0.wwww, r1.ywyy
mov o1.z, r0.w
add r0.xyz, -cb0[4].xyzx, cb0[6].xyzx
mad r0.xyz, r1.yyyy, r0.xyzx, cb0[4].xyzx
add r2.xyz, -cb0[5].xyzx, cb0[7].xyzx
mad r1.yzw, r1.yyyy, r2.xxyz, cb0[5].xxyz
add r0.xyz, r0.xyzx, -r1.yzwy
mad r0.xyz, r1.xxxx, r0.xyzx, r1.yzwy
dp3 r1.x, cb0[12].xyzx, r0.xyzx
dp3 r1.y, cb0[13].xyzx, r0.xyzx
dp3 r1.z, cb0[14].xyzx, r0.xyzx
mul o3.xyz, r0.wwww, r0.xyzx
mul o2.xyz, r0.wwww, r1.xyzx
ret 
// Approximately 27 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
