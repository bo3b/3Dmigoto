//Halo smoke
cbuffer PER_BATCH : register(b0)
{
  float3 vfFogColor : packoffset(c0);
  float3 slHazeColPartialRayleighInScatter : packoffset(c1);
  float3 vfColGradBase : packoffset(c2);
  float3 slPhaseFunctionConstants : packoffset(c3);
  float3 slSunDirection : packoffset(c4);
  float4 PS_NearFarClipDist : packoffset(c5);
  float4 vfRampParams : packoffset(c6);
  float3 vfColGradDelta : packoffset(c7);
  float4 miscCamFront : packoffset(c8);
  float4 CameraUpVector : packoffset(c9);
  float4 vfParams : packoffset(c10);
  float3 slHazeColPartialMieInScatter : packoffset(c11);
  float4 vfViewPos : packoffset(c12);
}

cbuffer PER_INSTANCE : register(b1)
{
  float4 TexTileSize : packoffset(c0);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatDifColor : packoffset(c0);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float __0SoftParticlesScale__1__2__3 : packoffset(c5);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float3 v3 : TEXCOORD1,
  float4 v4 : COLOR1,
  float4 v5 : PSIZE0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1,
  out float p2 : TEXCOORD5,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : TEXCOORD7,
  out float4 o8 : COLOR0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = vfViewPos.zxy + -v0.zxy;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.xyz = CameraUpVector.xyz * r0.xyz;
  r1.xyz = CameraUpVector.zxy * r0.yzx + -r1.xyz;
  r2.xyz = r1.yzx * r0.yzx;
  r2.xyz = r0.xyz * r1.zxy + -r2.xyz;
  r3.xyzw = v4.xxyy * float4(2,2,-2,-2) + float4(-1,-1,1,1);
  r3.xyzw = v5.xyzw * r3.xyzw;
  r4.xyz = r3.yyy * r2.xyz;
  r4.xyz = r1.xyz * r3.xxx + r4.xyz;
  r5.xyz = r3.www * r2.zxy;
  r5.xyz = r1.zxy * r3.zzz + r5.xyz;
  r6.xyz = r5.xyz + r4.zxy;
  r6.xyz = v0.xyz + r6.xyz;
  r0.w = abs(v5.x) + abs(v5.y);
  r0.w = 0 < r0.w;
  r0.w = (int)-r0.w;
  r0.w = 0 != r0.w;
  r6.xyz = r0.www ? r6.xyz : v0.xyz;
  r6.w = 1;
  r7.x = dot(g_VS_ViewProjMatr._m00_m01_m02_m03, r6.xyzw);
  r7.y = dot(g_VS_ViewProjMatr._m10_m11_m12_m13, r6.xyzw);
  r7.z = dot(g_VS_ViewProjMatr._m20_m21_m22_m23, r6.xyzw);
  r7.w = dot(g_VS_ViewProjMatr._m30_m31_m32_m33, r6.xyzw);
  o0.xyzw = r7.xyzw;
  
    float4 stereo = StereoParams.Load(0);
  r7.x += stereo.x * (r7.w - stereo.y);
  
  r7.xy = r7.xy * float2(1,-1) + r7.ww;
  o5.zw = r7.zw;
  o5.xy = float2(0.5,0.5) * r7.xy;
  o1.z = v4.w;
  o1.w = 0;
  r1.w = TexTileSize.y * v4.y;
  r2.w = v4.z * TexTileSize.z + TexTileSize.w;
  r4.w = floor(r2.w);
  o2.z = frac(r2.w);
  r2.w = TexTileSize.x * r4.w;
  r4.w = r4.w * TexTileSize.x + TexTileSize.x;
  r5.w = floor(r2.w);
  r2.w = frac(r2.w);
  r7.y = r5.w * TexTileSize.y + r1.w;
  r7.x = v4.x * TexTileSize.x + r2.w;
  o1.xy = r7.xy;
  r1.w = r3.y * r3.z;
  r1.w = r3.x * r3.w + -r1.w;
  r1.w = sqrt(abs(r1.w));
  r1.w = 3 / r1.w;
  p2.x = __0SoftParticlesScale__1__2__3 * r1.w;
  r1.w = frac(r4.w);
  r3.x = floor(r4.w);
  r3.x = r3.x + -r5.w;
  o2.y = r3.x * TexTileSize.y + r7.y;
  r1.w = r1.w + -r2.w;
  o2.x = r7.x + r1.w;
  r3.xyz = -v0.xyz + r6.xyz;
  r7.xyz = vfViewPos.xyz + -r6.xyz;
  r1.w = dot(r7.xyz, r3.xyz);
  r2.w = dot(r7.xyz, r7.xyz);
  r1.w = r1.w / r2.w;
  r3.xyz = -r7.xyz * r1.www + r3.xyz;
  r3.xyz = r0.www ? r3.xyz : r7.xyz;
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = r3.xyz * r1.www;
  r7.xyz = r3.xyz * r0.zxy;
  r7.xyz = r0.yzx * r3.yzx + -r7.xyz;
  o7.xyz = r3.xyz;
  r0.xyz = r0.www ? r7.xyz : r0.xyz;
  r2.xyz = r0.www ? -r5.yzx : r2.xyz;
  r1.xyz = r0.www ? r4.xyz : r1.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r3.xyz = r2.xyz * r0.xyz;
  r3.xyz = r0.zxy * r2.yzx + -r3.xyz;
  r0.w = dot(r0.zxy, r2.xyz);
  r2.xyz = r0.yzx * r0.www + r3.xyz;
  o3.w = r2.z;
  o3.xyz = r6.xyz;
  r3.xyz = -g_VS_WorldViewPos.xyz + r6.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r4.xyz = r1.xyz * r0.xyz;
  r4.xyz = r0.zxy * r1.yzx + -r4.xyz;
  r0.w = dot(r0.zxy, r1.xyz);
  o4.xyz = r0.yzx * r0.www + r4.xyz;
  o4.w = r2.y;
  o7.w = r2.x;
  r0.x = vfParams.x * r3.z;
  r0.y = -1.44269502 * r0.x;
  r0.y = exp2(r0.y);
  r0.y = 1 + -r0.y;
  r0.x = r0.y / r0.x;
  r0.y = 0.00999999978 < abs(r3.z);
  r0.x = r0.y ? r0.x : 1;
  r0.y = dot(r3.xyz, r3.xyz);
  r0.z = sqrt(r0.y);
  r0.y = rsqrt(r0.y);
  r0.y = saturate(r3.z * r0.y);
  o6.xyz = r0.yyy * vfColGradDelta.xyz + vfColGradBase.xyz;
  r0.y = vfParams.y * r0.z;
  r0.z = saturate(r0.z * vfRampParams.x + vfRampParams.y);
  r0.x = r0.x * r0.y + -vfParams.w;
  r0.x = saturate(exp2(-r0.x));
  r0.xy = float2(1,2) + -r0.xz;
  r0.y = r0.z * r0.y;
  r0.y = r0.y * vfRampParams.z + vfRampParams.w;
  o6.w = -r0.x * r0.y + 1;
  o8.xyz = MatDifColor.xyz * v2.zyx;
  o8.w = v2.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 04 15:33:10 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfFogColor;                 // Offset:    0 Size:    12 [unused]
//   float3 slHazeColPartialRayleighInScatter;// Offset:   16 Size:    12 [unused]
//   float3 vfColGradBase;              // Offset:   32 Size:    12
//   float3 slPhaseFunctionConstants;   // Offset:   48 Size:    12 [unused]
//   float3 slSunDirection;             // Offset:   64 Size:    12 [unused]
//   float4 PS_NearFarClipDist;         // Offset:   80 Size:    16 [unused]
//   float4 vfRampParams;               // Offset:   96 Size:    16
//   float3 vfColGradDelta;             // Offset:  112 Size:    12
//   float4 miscCamFront;               // Offset:  128 Size:    16 [unused]
//   float4 CameraUpVector;             // Offset:  144 Size:    16
//   float4 vfParams;                   // Offset:  160 Size:    16
//   float3 slHazeColPartialMieInScatter;// Offset:  176 Size:    12 [unused]
//   float4 vfViewPos;                  // Offset:  192 Size:    16
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   float4 TexTileSize;                // Offset:    0 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float __0SoftParticlesScale__1__2__3;// Offset:   80 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float       
// COLOR                    1   xyzw        4     NONE   float   xyzw
// PSIZE                    0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 5      w        2     NONE   float      w
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// COLOR                    0   xyzw        8     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[13], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyz
dcl_output o2.w
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_temps 8
add r0.xyz, -v0.zxyz, cb0[12].zxyz
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r1.xyz, r0.xyzx, cb0[9].xyzx
mad r1.xyz, cb0[9].zxyz, r0.yzxy, -r1.xyzx
mul r2.xyz, r0.yzxy, r1.yzxy
mad r2.xyz, r0.xyzx, r1.zxyz, -r2.xyzx
mad r3.xyzw, v4.xxyy, l(2.000000, 2.000000, -2.000000, -2.000000), l(-1.000000, -1.000000, 1.000000, 1.000000)
mul r3.xyzw, r3.xyzw, v5.xyzw
mul r4.xyz, r2.xyzx, r3.yyyy
mad r4.xyz, r1.xyzx, r3.xxxx, r4.xyzx
mul r5.xyz, r2.zxyz, r3.wwww
mad r5.xyz, r1.zxyz, r3.zzzz, r5.xyzx
add r6.xyz, r4.zxyz, r5.xyzx
add r6.xyz, r6.xyzx, v0.xyzx
add r0.w, |v5.y|, |v5.x|
lt r0.w, l(0.000000), r0.w
itof r0.w, -r0.w
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), r0.w
movc r6.xyz, r0.wwww, r6.xyzx, v0.xyzx
mov r6.w, l(1.000000)
dp4 r7.x, cb3[0].xyzw, r6.xyzw
dp4 r7.y, cb3[1].xyzw, r6.xyzw
dp4 r7.z, cb3[2].xyzw, r6.xyzw
dp4 r7.w, cb3[3].xyzw, r6.xyzw
mov o0.xyzw, r7.xyzw
mad r7.xy, r7.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r7.wwww
mov o5.zw, r7.zzzw
mul o5.xy, r7.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.z, v4.w
mov o1.w, l(0)
mul r1.w, v4.y, cb1[0].y
mad r2.w, v4.z, cb1[0].z, cb1[0].w
round_ni r4.w, r2.w
frc o2.z, r2.w
mul r2.w, r4.w, cb1[0].x
mad r4.w, r4.w, cb1[0].x, cb1[0].x
round_ni r5.w, r2.w
frc r2.w, r2.w
mad r7.y, r5.w, cb1[0].y, r1.w
mad r7.x, v4.x, cb1[0].x, r2.w
mov o1.xy, r7.xyxx
mul r1.w, r3.z, r3.y
mad r1.w, r3.x, r3.w, -r1.w
sqrt r1.w, |r1.w|
div r1.w, l(3.000000), r1.w
mul o2.w, r1.w, cb4[5].x
frc r1.w, r4.w
round_ni r3.x, r4.w
add r3.x, -r5.w, r3.x
mad o2.y, r3.x, cb1[0].y, r7.y
add r1.w, -r2.w, r1.w
add o2.x, r1.w, r7.x
add r3.xyz, r6.xyzx, -v0.xyzx
add r7.xyz, -r6.xyzx, cb0[12].xyzx
dp3 r1.w, r7.xyzx, r3.xyzx
dp3 r2.w, r7.xyzx, r7.xyzx
div r1.w, r1.w, r2.w
mad r3.xyz, -r7.xyzx, r1.wwww, r3.xyzx
movc r3.xyz, r0.wwww, r3.xyzx, r7.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, r3.xyzx
mul r7.xyz, r0.zxyz, r3.xyzx
mad r7.xyz, r0.yzxy, r3.yzxy, -r7.xyzx
mov o7.xyz, r3.xyzx
movc r0.xyz, r0.wwww, r7.xyzx, r0.xyzx
movc r2.xyz, r0.wwww, -r5.yzxy, r2.xyzx
movc r1.xyz, r0.wwww, r4.xyzx, r1.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r3.xyz, r0.xyzx, r2.xyzx
mad r3.xyz, r0.zxyz, r2.yzxy, -r3.xyzx
dp3 r0.w, r0.zxyz, r2.xyzx
mad r2.xyz, r0.yzxy, r0.wwww, r3.xyzx
mov o3.w, r2.z
mov o3.xyz, r6.xyzx
add r3.xyz, r6.xyzx, -cb3[6].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul r4.xyz, r0.xyzx, r1.xyzx
mad r4.xyz, r0.zxyz, r1.yzxy, -r4.xyzx
dp3 r0.w, r0.zxyz, r1.xyzx
mad o4.xyz, r0.yzxy, r0.wwww, r4.xyzx
mov o4.w, r2.y
mov o7.w, r2.x
mul r0.x, r3.z, cb0[10].x
mul r0.y, r0.x, l(-1.442695)
exp r0.y, r0.y
add r0.y, -r0.y, l(1.000000)
div r0.x, r0.y, r0.x
lt r0.y, l(0.010000), |r3.z|
movc r0.x, r0.y, r0.x, l(1.000000)
dp3 r0.y, r3.xyzx, r3.xyzx
sqrt r0.z, r0.y
rsq r0.y, r0.y
mul_sat r0.y, r0.y, r3.z
mad o6.xyz, r0.yyyy, cb0[7].xyzx, cb0[2].xyzx
mul r0.y, r0.z, cb0[10].y
mad_sat r0.z, r0.z, cb0[6].x, cb0[6].y
mad r0.x, r0.x, r0.y, -cb0[10].w
exp_sat r0.x, -r0.x
add r0.xy, -r0.xzxx, l(1.000000, 2.000000, 0.000000, 0.000000)
mul r0.y, r0.y, r0.z
mad r0.y, r0.y, cb0[6].z, cb0[6].w
mad o6.w, -r0.x, r0.y, l(1.000000)
mul o8.xyz, v2.zyxz, cb4[0].xyzx
mov o8.w, v2.w
ret 
// Approximately 112 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
