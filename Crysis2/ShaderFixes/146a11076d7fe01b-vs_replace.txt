//Halo
cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer SKIN_DATA : register(b7)
{
  row_major float2x4 _g_SkinQuat[150] : packoffset(c0);
}

cbuffer SHAPE_DATA : register(b8)
{
  float4 _g_ShapeDeformationData[8] : packoffset(c0);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BLENDWEIGHT0,
  float4 v5 : BLENDINDICES0,
  float4 v6 : COLOR1,
  float4 v7 : TEXCOORD4,
  float3 v8 : TEXCOORD5,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = float4(255.001953,255.001953,255.001953,255.001953) * v5.xyzw;
  r0.xyzw = (int4)r0.xyzw;
  r0.xyzw = (uint4)r0.xyzw << int4(1,1,1,1);
  r1.xyzw = _g_SkinQuat[r0.y/2]._m10_m11_m12_m13 * v4.yyyy;
  r1.xyzw = _g_SkinQuat[r0.x/2]._m10_m11_m12_m13 * v4.xxxx + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.z/2]._m10_m11_m12_m13 * v4.zzzz + r1.xyzw;
  r1.xyzw = _g_SkinQuat[r0.w/2]._m10_m11_m12_m13 * v4.wwww + r1.xyzw;
  r2.xyzw = _g_SkinQuat[r0.y/2]._m00_m01_m02_m03 * v4.yyyy;
  r2.xyzw = _g_SkinQuat[r0.x/2]._m00_m01_m02_m03 * v4.xxxx + r2.xyzw;
  r2.xyzw = _g_SkinQuat[r0.z/2]._m00_m01_m02_m03 * v4.zzzz + r2.xyzw;
  r0.xyzw = _g_SkinQuat[r0.w/2]._m00_m01_m02_m03 * v4.wwww + r2.xyzw;
  r2.x = dot(r0.xyzw, r0.xyzw);
  r2.x = rsqrt(r2.x);
  r1.xyzw = r2.xxxx * r1.xyzw;
  r0.xyzw = r2.xxxx * r0.xyzw;
  r2.xyz = r1.www * r0.xyz;
  r2.xyz = r0.www * r1.xyz + -r2.xyz;
  r3.xyz = r0.zxy * r1.yzx;
  r1.xyz = r0.yzx * r1.zxy + -r3.xyz;
  r1.xyz = r2.xyz + r1.xyz;
  r1.w = 255.001953 * v6.w;
  r1.w = (int)r1.w;
  r1.w = min(8, (int)r1.w);
  r2.xyz = _g_ShapeDeformationData[r1.w].yyy * v0.xyz;
  r2.xyz = v7.xyz * _g_ShapeDeformationData[r1.w].xxx + r2.xyz;
  r2.xyz = v8.xyz * _g_ShapeDeformationData[r1.w].zzz + r2.xyz;
  r3.xyz = r2.zxy * r0.xyz;
  r3.xyz = r0.zxy * r2.xyz + -r3.xyz;
  r3.xyz = r0.www * r2.yzx + r3.xyz;
  r4.xyz = r3.xyz * r0.zxy;
  r0.xyz = r0.yzx * r3.yzx + -r4.xyz;
  r0.xyz = r0.xyz * float3(2,2,2) + r2.xyz;
  r0.xyz = r1.xyz * float3(2,2,2) + r0.xyz;
  r1.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r1.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.w = 1;
  r1.x = dot(r1.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r1.y = dot(r2.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r1.z = dot(r2.xyzw, r0.xyzw);
  r1.w = 1;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r1.xyzw);
  o2.xyzw = r1.xyzw;
  o0.xyzw = r0.xyzw;
  
  float4 stereo = StereoParams.Load(0);
  r0.x += stereo.x * (r0.w - stereo.y);
  
  r0.xy = r0.xy * float2(1,-1) + r0.ww;
  o3.zw = r0.zw;
  o3.xy = float2(0.5,0.5) * r0.xy;
  o1.xyzw = v1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Sun Aug 02 19:52:02 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer SKIN_DATA
// {
//
//   row_major float2x4 _g_SkinQuat[150];// Offset:    0 Size:  4800
//
// }
//
// cbuffer SHAPE_DATA
// {
//
//   float4 _g_ShapeDeformationData[8]; // Offset:    0 Size:   128
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// SKIN_DATA                         cbuffer      NA          NA    7        1
// SHAPE_DATA                        cbuffer      NA          NA    8        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float       
// BLENDWEIGHT              0   xyzw        4     NONE   float   xyzw
// BLENDINDICES             0   xyzw        5     NONE   float   xyzw
// COLOR                    1   xyzw        6     NONE   float   xyzw
// TEXCOORD                 4   xyz         7     NONE   float   xyz 
// TEXCOORD                 5   xyz         8     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb7[300], dynamicIndexed
dcl_constantbuffer cb8[8], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_input v6.w
dcl_input v7.xyz
dcl_input v8.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 5
mul r0.xyzw, v5.xyzw, l(255.001953, 255.001953, 255.001953, 255.001953)
ftoi r0.xyzw, r0.xyzw
ishl r0.xyzw, r0.xyzw, l(1, 1, 1, 1)
mul r1.xyzw, v4.yyyy, cb7[r0.y + 1].xyzw
mad r1.xyzw, cb7[r0.x + 1].xyzw, v4.xxxx, r1.xyzw
mad r1.xyzw, cb7[r0.z + 1].xyzw, v4.zzzz, r1.xyzw
mad r1.xyzw, cb7[r0.w + 1].xyzw, v4.wwww, r1.xyzw
mul r2.xyzw, v4.yyyy, cb7[r0.y + 0].xyzw
mad r2.xyzw, cb7[r0.x + 0].xyzw, v4.xxxx, r2.xyzw
mad r2.xyzw, cb7[r0.z + 0].xyzw, v4.zzzz, r2.xyzw
mad r0.xyzw, cb7[r0.w + 0].xyzw, v4.wwww, r2.xyzw
dp4 r2.x, r0.xyzw, r0.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx
mul r0.xyzw, r0.xyzw, r2.xxxx
mul r2.xyz, r0.xyzx, r1.wwww
mad r2.xyz, r0.wwww, r1.xyzx, -r2.xyzx
mul r3.xyz, r1.yzxy, r0.zxyz
mad r1.xyz, r0.yzxy, r1.zxyz, -r3.xyzx
add r1.xyz, r1.xyzx, r2.xyzx
mul r1.w, v6.w, l(255.001953)
ftoi r1.w, r1.w
imin r1.w, r1.w, l(8)
mul r2.xyz, v0.xyzx, cb8[r1.w + 0].yyyy
mad r2.xyz, v7.xyzx, cb8[r1.w + 0].xxxx, r2.xyzx
mad r2.xyz, v8.xyzx, cb8[r1.w + 0].zzzz, r2.xyzx
mul r3.xyz, r0.xyzx, r2.zxyz
mad r3.xyz, r0.zxyz, r2.xyzx, -r3.xyzx
mad r3.xyz, r0.wwww, r2.yzxy, r3.xyzx
mul r4.xyz, r0.zxyz, r3.xyzx
mad r0.xyz, r0.yzxy, r3.yzxy, -r4.xyzx
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx
mad r0.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.xyzx
add r1.w, cb1[0].w, -cb3[6].x
mov r1.xyz, cb1[0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r1.xyzw, r0.xyzw
add r2.w, cb1[1].w, -cb3[6].y
mov r2.xyz, cb1[1].xyzx
dp4 r1.y, r2.xyzw, r0.xyzw
add r2.w, cb1[2].w, -cb3[6].z
mov r2.xyz, cb1[2].xyzx
dp4 r1.z, r2.xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r1.xyzw
dp4 r0.y, cb3[11].xyzw, r1.xyzw
dp4 r0.z, cb3[12].xyzw, r1.xyzw
dp4 r0.w, cb3[13].xyzw, r1.xyzw
mov o2.xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mov o3.zw, r0.zzzw
mul o3.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, v1.xyzw
ret 
// Approximately 55 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    