cbuffer cb3 : register(b3)
{
  float4 cb3[14];
}


cbuffer PER_BATCH : register(b0)
{
  float3 vfColGradBase : packoffset(c0);
  float3 slHazeColPartialRayleighInScatter : packoffset(c1);
  row_major float4x4 LayerTexGen : packoffset(c2);
  row_major float4x4 _ModelView : packoffset(c6);
  float3 slSunDirection : packoffset(c10);
  float4 PS_NearFarClipDist : packoffset(c11);
  float4 vfRampParams : packoffset(c12);
  float3 vfFogColor : packoffset(c13);
  float3 vfColGradDelta : packoffset(c14);
  float4 miscCamFront : packoffset(c15);
  float4 BaseTCMatrix : packoffset(c16);
  float3 slPhaseFunctionConstants : packoffset(c17);
  float4 vfParams : packoffset(c18);
  float4 _InstancingParams : packoffset(c19);
  float3 slHazeColPartialMieInScatter : packoffset(c20);
  row_major float4x4 _ModelView_IT : packoffset(c21);
  float4 vfViewPos : packoffset(c25);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  row_major float4x4 _TCGMatrixGloss : packoffset(c3);
  row_major float4x4 _TCGMatrixBump : packoffset(c7);
  row_major float4x4 _TCMMatrixEnv : packoffset(c11);
  row_major float4x4 _TCGMatrixEnv : packoffset(c15);
  row_major float4x4 _TCMMatrixBump : packoffset(c19);
  row_major float4x4 _TCGMatrixDif : packoffset(c23);
  row_major float4x4 _TCMMatrixGloss : packoffset(c27);
  row_major float4x4 _TCMMatrixDif : packoffset(c31);
}

cbuffer PER_FRAME : register(b3)
{
  float4 g_VS_WorldViewPos : packoffset(c6);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : NORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : COLOR0,
  out float4 o9 : COLOR1)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = -cb3[6].x + ObjWorldMatrix._m03;
  r0.xyz = ObjWorldMatrix._m00_m01_m02;
  r1.xyz = v0.xyz;
  r1.w = 1;
  r0.x = dot(r0.xyzw, r1.xyzw);
  r2.w = -cb3[6].y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r0.y = dot(r2.xyzw, r1.xyzw);
  r2.w = -cb3[6].z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r0.z = dot(r2.xyzw, r1.xyzw);
  r0.w = 1;
  r1.x = dot(cb3[12].xyzw, r0.xyzw);
  r1.z = 0.00100000005 + r1.x;
  r1.x = dot(cb3[10].xyzw, r0.xyzw);
  r1.y = dot(cb3[11].xyzw, r0.xyzw);
  r1.w = dot(cb3[13].xyzw, r0.xyzw);
  o0.xyzw = r1.xyzw;
  
        float4 stereo = StereoParams.Load(0);
  r1.x += stereo.x * (r1.w - stereo.y);
  
  o7.zw = r1.zw;
  r1.xy = r1.xy * float2(1,-1) + r1.ww;
  o7.xy = float2(0.5,0.5) * r1.xy;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = sqrt(r0.w);
  o1.w = r0.w;
  o1.z = BaseTCMatrix.x;
  r1.xyz = cb3[6].xyz + r0.xyz;
  o6.xyz = r0.xyz;
  r1.w = 1;
  o1.x = dot(BaseTCMatrix.xy, r1.yw);
  o1.y = dot(BaseTCMatrix.xz, r1.xw);
  r2.xyzw = -LayerTexGen._m32_m33_m30_m31 + r1.xyxy;
  r1.xy = r2.zw;
  r0.x = dot(LayerTexGen._m10_m11_m12, r1.xyz);
  r0.y = dot(LayerTexGen._m00_m01_m02, r1.xyz);
  r2.z = r1.z;
  r0.xz = _TCMMatrixDif._m10_m11 * r0.xx;
  r0.xy = r0.yy * _TCMMatrixDif._m00_m01 + r0.xz;
  o2.xy = _TCMMatrixDif._m30_m31 + r0.xy;
  r0.x = dot(LayerTexGen._m10_m11_m12, r2.xyz);
  r0.y = dot(LayerTexGen._m00_m01_m02, r2.xyz);
  r0.xz = _TCMMatrixBump._m10_m11 * r0.xx;
  r0.xy = r0.yy * _TCMMatrixBump._m00_m01 + r0.xz;
  o2.zw = _TCMMatrixBump._m30_m31 + r0.xy;
  r0.x = dot(LayerTexGen._m00_m01_m02, LayerTexGen._m00_m01_m02);
  r0.x = rsqrt(r0.x);
  r0.xyz = LayerTexGen._m00_m01_m02 * r0.xxx;
  r1.xyz = v3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r1.w = dot(r0.xyz, r1.xyz);
  r0.xyz = -r1.www * r1.xyz + r0.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  o3.xyz = r1.www * r0.xyz;
  r0.x = dot(LayerTexGen._m10_m11_m12, LayerTexGen._m10_m11_m12);
  r0.x = rsqrt(r0.x);
  r0.xyz = LayerTexGen._m10_m11_m12 * r0.xxx;
  r1.w = dot(r0.xyz, r1.xyz);
  r0.xyz = -r1.www * r1.xyz + r0.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  o4.xyz = r1.www * r0.xyz;
  o5.xyz = r1.xyz;
  r1.xyzw = abs(r1.xxyy) >= abs(r1.yzxz);
  r0.xy = r1.yw ? r1.xz : 0;
  o6.w = 0;
  r0.z = 0.498039216 < v2.y;
  r1.y = -0.501960814 + v2.y;
  r1.xz = float2(1,0);
  r1.w = v2.y;
  r1.xy = r0.zz ? r1.xy : r1.zw;
  r0.z = r1.y * 255 + -LayerTexGen._m23;
  o9.w = r1.x;
  r0.z = 1 + -abs(r0.z);
  r0.z = max(0, r0.z);
  r1.xyz = LayerTexGen._m20_m21_m22 * r0.zzz;
  r0.y = r0.y ? r1.y : r1.z;
  r0.x = r0.x ? r1.x : r0.y;
  r0.y = max(0.00100000005, LayerTexGen._m03);
  r0.y = r0.w / r0.y;
  r0.y = min(1, r0.y);
  r0.y = r0.y * r0.y;
  r0.y = -r0.y * r0.y + 1;
  o8.y = r0.x * r0.y;
  o8.xz = float2(0,0);
  o8.w = v2.w;
  o9.xy = v2.zx;
  o9.z = v3.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 04 22:54:20 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float3 vfColGradBase;              // Offset:    0 Size:    12 [unused]
//   float3 slHazeColPartialRayleighInScatter;// Offset:   16 Size:    12 [unused]
//   row_major float4x4 LayerTexGen;    // Offset:   32 Size:    64
//   row_major float4x4 _ModelView;     // Offset:   96 Size:    64 [unused]
//   float3 slSunDirection;             // Offset:  160 Size:    12 [unused]
//   float4 PS_NearFarClipDist;         // Offset:  176 Size:    16 [unused]
//   float4 vfRampParams;               // Offset:  192 Size:    16 [unused]
//   float3 vfFogColor;                 // Offset:  208 Size:    12 [unused]
//   float3 vfColGradDelta;             // Offset:  224 Size:    12 [unused]
//   float4 miscCamFront;               // Offset:  240 Size:    16 [unused]
//   float4 BaseTCMatrix;               // Offset:  256 Size:    16
//   float3 slPhaseFunctionConstants;   // Offset:  272 Size:    12 [unused]
//   float4 vfParams;                   // Offset:  288 Size:    16 [unused]
//   float4 _InstancingParams;          // Offset:  304 Size:    16 [unused]
//   float3 slHazeColPartialMieInScatter;// Offset:  320 Size:    12 [unused]
//   row_major float4x4 _ModelView_IT;  // Offset:  336 Size:    64 [unused]
//   float4 vfViewPos;                  // Offset:  400 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   row_major float4x4 _TCGMatrixGloss;// Offset:   48 Size:    64 [unused]
//   row_major float4x4 _TCGMatrixBump; // Offset:  112 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixEnv;  // Offset:  176 Size:    64 [unused]
//   row_major float4x4 _TCGMatrixEnv;  // Offset:  240 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixBump; // Offset:  304 Size:    64
//   row_major float4x4 _TCGMatrixDif;  // Offset:  368 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixGloss;// Offset:  432 Size:    64 [unused]
//   row_major float4x4 _TCMMatrixDif;  // Offset:  496 Size:    64
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float       
// COLOR                    0   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyzw        3     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// COLOR                    0   xyzw        8     NONE   float   xyzw
// COLOR                    1   xyzw        9     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_constantbuffer cb1[35], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyz
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_temps 3
add r0.w, cb1[0].w, -cb3[6].x
mov r0.xyz, cb1[0].xyzx
mov r1.xyz, v0.xyzx
mov r1.w, l(1.000000)
dp4 r0.x, r0.xyzw, r1.xyzw
add r2.w, cb1[1].w, -cb3[6].y
mov r2.xyz, cb1[1].xyzx
dp4 r0.y, r2.xyzw, r1.xyzw
add r2.w, cb1[2].w, -cb3[6].z
mov r2.xyz, cb1[2].xyzx
dp4 r0.z, r2.xyzw, r1.xyzw
mov r0.w, l(1.000000)
dp4 r1.x, cb3[12].xyzw, r0.xyzw
add r1.z, r1.x, l(0.001000)
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.w, cb3[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzw
mov o7.zw, r1.zzzw
mad r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r1.wwww
mul o7.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w
mov o1.w, r0.w
mov o1.z, cb0[16].x
add r1.xyz, r0.xyzx, cb3[6].xyzx
mov o6.xyz, r0.xyzx
mov r1.w, l(1.000000)
dp2 o1.x, cb0[16].xyxx, r1.ywyy
dp2 o1.y, cb0[16].xzxx, r1.xwxx
add r2.xyzw, r1.xyxy, -cb0[5].zwxy
mov r1.xy, r2.zwzz
dp3 r0.x, cb0[3].xyzx, r1.xyzx
dp3 r0.y, cb0[2].xyzx, r1.xyzx
mov r2.z, r1.z
mul r0.xz, r0.xxxx, cb1[32].xxyx
mad r0.xy, r0.yyyy, cb1[31].xyxx, r0.xzxx
add o2.xy, r0.xyxx, cb1[34].xyxx
dp3 r0.x, cb0[3].xyzx, r2.xyzx
dp3 r0.y, cb0[2].xyzx, r2.xyzx
mul r0.xz, r0.xxxx, cb1[20].xxyx
mad r0.xy, r0.yyyy, cb1[19].xyxx, r0.xzxx
add o2.zw, r0.xxxy, cb1[22].xxxy
dp3 r0.x, cb0[2].xyzx, cb0[2].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, cb0[2].xyzx
mad r1.xyz, v3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, r0.xyzx, r1.xyzx
mad r0.xyz, -r1.wwww, r1.xyzx, r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul o3.xyz, r0.xyzx, r1.wwww
dp3 r0.x, cb0[3].xyzx, cb0[3].xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, cb0[3].xyzx
dp3 r1.w, r0.xyzx, r1.xyzx
mad r0.xyz, -r1.wwww, r1.xyzx, r0.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul o4.xyz, r0.xyzx, r1.wwww
mov o5.xyz, r1.xyzx
ge r1.xyzw, |r1.xxyy|, |r1.yzxz|
and r0.xy, r1.ywyy, r1.xzxx
mov o6.w, l(0)
lt r0.z, l(0.498039), v2.y
add r1.y, v2.y, l(-0.501961)
mov r1.xz, l(1.000000,0,0,0)
mov r1.w, v2.y
movc r1.xy, r0.zzzz, r1.xyxx, r1.zwzz
mad r0.z, r1.y, l(255.000000), -cb0[4].w
mov o9.w, r1.x
add r0.z, -|r0.z|, l(1.000000)
max r0.z, r0.z, l(0.000000)
mul r1.xyz, r0.zzzz, cb0[4].xyzx
movc r0.y, r0.y, r1.y, r1.z
movc r0.x, r0.x, r1.x, r0.y
max r0.y, cb0[2].w, l(0.001000)
div r0.y, r0.w, r0.y
min r0.y, r0.y, l(1.000000)
mul r0.y, r0.y, r0.y
mad r0.y, -r0.y, r0.y, l(1.000000)
mul o8.y, r0.y, r0.x
mov o8.xz, l(0,0,0,0)
mov o8.w, v2.w
mov o9.xy, v2.zxzz
mov o9.z, v3.w
ret 
// Approximately 87 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
