//Sun 
cbuffer cb3 : register(b3)
{
  float4 cb3[14];
}


cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
}

cbuffer PER_FRAME : register(b3)
{
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_NearFarClipDist : packoffset(c9);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = -cb3[6].x + ObjWorldMatrix._m03;
  r0.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.x = dot(r0.xyzw, v0.xyzw);
  r1.w = -cb3[6].y + ObjWorldMatrix._m13;
  r1.xyz = ObjWorldMatrix._m10_m11_m12;
  r0.y = dot(r1.xyzw, v0.xyzw);
  r1.w = -cb3[6].z + ObjWorldMatrix._m23;
  r1.xyz = ObjWorldMatrix._m20_m21_m22;
  r0.z = dot(r1.xyzw, v0.xyzw);
  r0.w = v0.w;
  r1.x = dot(cb3[10].xyzw, r0.xyzw);
  r1.y = dot(cb3[11].xyzw, r0.xyzw);
  r1.z = dot(cb3[13].xyzw, r0.xyzw);
  o0.xyzw = r1.xyzz;
  
    float4 stereo = StereoParams.Load(0);
  o0.x += stereo.x * stereo.y;
  
  o1.xy = v1.xy;
  o2.xyz = v0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 11 20:57:16 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//
// }
//
// cbuffer PER_FRAME
// {
//
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_NearFarClipDist;       // Offset:  144 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[3], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_temps 2
add r0.w, cb1[0].w, -cb3[6].x
mov r0.xyz, cb1[0].xyzx
dp4 r0.x, r0.xyzw, v0.xyzw
add r1.w, cb1[1].w, -cb3[6].y
mov r1.xyz, cb1[1].xyzx
dp4 r0.y, r1.xyzw, v0.xyzw
add r1.w, cb1[2].w, -cb3[6].z
mov r1.xyz, cb1[2].xyzx
dp4 r0.z, r1.xyzw, v0.xyzw
mov r0.w, v0.w
dp4 r1.x, cb3[10].xyzw, r0.xyzw
dp4 r1.y, cb3[11].xyzw, r0.xyzw
dp4 r1.z, cb3[13].xyzw, r0.xyzw
mov o0.xyzw, r1.xyzz
mov o1.xy, v1.xyxx
mov o2.xyz, v0.xyzx
ret 
// Approximately 17 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
