cbuffer cb4 : register(b4)
{
  float4 cb4[6];
}


cbuffer PER_BATCH : register(b0)
{
  float4 vfViewPos : packoffset(c0);
  float4 _WaveFreq : packoffset(c1);
  float4 vfRampParams : packoffset(c2);
  float4 DiffusesVS[4] : packoffset(c3);
  float4 _WaveAmp : packoffset(c7);
  float4 _InstancingParams : packoffset(c8);
  float4 _WaveInfoX : packoffset(c9);
  float4 _WaveVtxPhases : packoffset(c10);
  float4 _WaveLevels : packoffset(c11);
  float4 vfParams : packoffset(c12);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 AmbientObjectCol : packoffset(c4);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SunLightDir : packoffset(c4);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer PER_MATERIAL : register(b4)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float3 __0__1BackViewDep__2BackDiffuseMultiplier__3 : packoffset(c4);
  float4 BackDiffuse : packoffset(c5);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : COLOR0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = BendInfo.z * v0.z;
  r0.x = r0.x * r0.x;
  r0.xy = BendInfo.xy * r0.xx + v0.xy;
  r0.z = v0.z;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(v0.xyz, v0.xyz);
  r0.w = sqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r1.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.w = 1;
  r1.x = dot(r1.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r1.y = dot(r2.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r1.z = dot(r2.xyzw, r0.xyzw);
  r1.w = 1;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r1.xyzw);
  o0.xyzw = r0.xyzw;
  
      float4 stereo = StereoParams.Load(0);
  r0.x += stereo.x * (r0.w - stereo.y);
  
  r0.xy = r0.xy * float2(1,-1) + r0.ww;
  o2.zw = r0.zw;
  o2.xy = float2(0.5,0.5) * r0.xy;
  o1.xy = v1.xy;
  o1.zw = float2(0,0);
  o3.xyz = r1.xyz;
  o3.w = 0;
  r0.x = dot(-r1.xyz, -r1.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = -r1.xyz * r0.xxx;
  r0.w = saturate(dot(r0.xyz, -g_VS_SunLightDir.xyz));
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r0.w;
  r1.xyz = float3(9.99999997e-007,1.40129846e-045,1.40129846e-045) + v3.xyz;
  r2.y = dot(ObjWorldMatrix._m00_m01_m02, r1.xyz);
  r2.z = dot(ObjWorldMatrix._m10_m11_m12, r1.xyz);
  r2.x = dot(ObjWorldMatrix._m20_m21_m22, r1.xyz);
  r1.x = dot(r2.xyz, r2.xyz);
  r1.x = rsqrt(r1.x);
  r1.xyz = r2.xyz * r1.xxx;
  r2.xyz = float3(-9.99999997e-007,1.40129846e-045,1.40129846e-045) + v4.xyz;
  r3.z = dot(ObjWorldMatrix._m00_m01_m02, r2.xyz);
  r3.x = dot(ObjWorldMatrix._m10_m11_m12, r2.xyz);
  r3.y = dot(ObjWorldMatrix._m20_m21_m22, r2.xyz);
  r1.w = dot(r3.xyz, r3.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r3.xyz * r1.www;
  r3.xyz = r2.xyz * r1.xyz;
  r1.xyz = r1.zxy * r2.yzx + -r3.xyz;
  r1.xyz = v3.www * r1.xyz;
  r0.x = dot(r0.xyz, r1.xyz);
  r0.x = 0.100000001 + r0.x;
  r0.x = min(1, r0.x);
  r0.xyz = r1.xyz * r0.xxx;
  r0.x = dot(-r0.xyz, g_VS_SunLightDir.xyz);
  o5.z = r0.z * 0.25 + 0.75;
  r0.x = saturate(r0.x * 0.600000024 + 0.400000006);
  r0.y = -cb4[4].y + 1;
  r0.x = r0.y * r0.x;
  r0.x = saturate(r0.w * cb4[4].y + r0.x);
  r0.xyz = DiffusesVS[0].xyz * r0.xxx;
  r1.xyz = cb4[5].xyz * cb4[4].zzz;
  o4.xyz = r1.xyz * r0.xyz;
  o4.w = 0;
  o5.w = AmbientObjectCol.x * v2.w;
  o5.x = 1;
  o5.y = AmbientObjectCol.y;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Wed Aug 05 11:25:40 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float4 vfViewPos;                  // Offset:    0 Size:    16 [unused]
//   float4 _WaveFreq;                  // Offset:   16 Size:    16 [unused]
//   float4 vfRampParams;               // Offset:   32 Size:    16 [unused]
//   float4 DiffusesVS[4];              // Offset:   48 Size:    64
//   float4 _WaveAmp;                   // Offset:  112 Size:    16 [unused]
//   float4 _InstancingParams;          // Offset:  128 Size:    16 [unused]
//   float4 _WaveInfoX;                 // Offset:  144 Size:    16 [unused]
//   float4 _WaveVtxPhases;             // Offset:  160 Size:    16 [unused]
//   float4 _WaveLevels;                // Offset:  176 Size:    16 [unused]
//   float4 vfParams;                   // Offset:  192 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16
//   float4 AmbientObjectCol;           // Offset:   64 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_SunLightDir;           // Offset:   64 Size:    16
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float3 __0__1BackViewDep__2BackDiffuseMultiplier__3;// Offset:   64 Size:    12
//   float4 BackDiffuse;                // Offset:   80 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// COLOR                    0   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[4], immediateIndexed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb4[6], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.w
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 4
mul r0.x, v0.z, cb1[3].z
mul r0.x, r0.x, r0.x
mad r0.xy, cb1[3].xyxx, r0.xxxx, v0.xyxx
mov r0.z, v0.z
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, v0.xyzx, v0.xyzx
sqrt r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
add r1.w, cb1[0].w, -cb3[6].x
mov r1.xyz, cb1[0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r1.xyzw, r0.xyzw
add r2.w, cb1[1].w, -cb3[6].y
mov r2.xyz, cb1[1].xyzx
dp4 r1.y, r2.xyzw, r0.xyzw
add r2.w, cb1[2].w, -cb3[6].z
mov r2.xyz, cb1[2].xyzx
dp4 r1.z, r2.xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r1.xyzw
dp4 r0.y, cb3[11].xyzw, r1.xyzw
dp4 r0.z, cb3[12].xyzw, r1.xyzw
dp4 r0.w, cb3[13].xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mov o2.zw, r0.zzzw
mul o2.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xy, v1.xyxx
mov o1.zw, l(0,0,0,0)
mov o3.xyz, r1.xyzx
mov o3.w, l(0)
dp3 r0.x, -r1.xyzx, -r1.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, -r1.xyzx
dp3_sat r0.w, r0.xyzx, -cb3[4].xyzx
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r0.w
add r1.xyz, v3.xyzx, l(0.000001, 0.000000, 0.000000, 0.000000)
dp3 r2.y, cb1[0].xyzx, r1.xyzx
dp3 r2.z, cb1[1].xyzx, r1.xyzx
dp3 r2.x, cb1[2].xyzx, r1.xyzx
dp3 r1.x, r2.xyzx, r2.xyzx
rsq r1.x, r1.x
mul r1.xyz, r1.xxxx, r2.xyzx
add r2.xyz, v4.xyzx, l(-0.000001, 0.000000, 0.000000, 0.000000)
dp3 r3.z, cb1[0].xyzx, r2.xyzx
dp3 r3.x, cb1[1].xyzx, r2.xyzx
dp3 r3.y, cb1[2].xyzx, r2.xyzx
dp3 r1.w, r3.xyzx, r3.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r3.xyzx
mul r3.xyz, r1.xyzx, r2.xyzx
mad r1.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
mul r1.xyz, r1.xyzx, v3.wwww
dp3 r0.x, r0.xyzx, r1.xyzx
add r0.x, r0.x, l(0.100000)
min r0.x, r0.x, l(1.000000)
mul r0.xyz, r0.xxxx, r1.xyzx
dp3 r0.x, -r0.xyzx, cb3[4].xyzx
mad o5.z, r0.z, l(0.250000), l(0.750000)
mad_sat r0.x, r0.x, l(0.600000), l(0.400000)
add r0.y, l(1.000000), -cb4[4].y
mul r0.x, r0.x, r0.y
mad_sat r0.x, r0.w, cb4[4].y, r0.x
mul r0.xyz, r0.xxxx, cb0[3].xyzx
mul r1.xyz, cb4[4].zzzz, cb4[5].xyzx
mul o4.xyz, r0.xyzx, r1.xyzx
mov o4.w, l(0)
mul o5.w, v2.w, cb1[4].x
mov o5.x, l(1.000000)
mov o5.y, cb1[4].y
ret 
// Approximately 74 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
