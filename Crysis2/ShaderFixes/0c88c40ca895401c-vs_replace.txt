//Halo
cbuffer PER_BATCH : register(b0)
{
  float Time : packoffset(c0);
  float4 _InstancingParams : packoffset(c1);
}

cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 ViewPos : packoffset(c4);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_SkyColor : packoffset(c5);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer PER_MATERIAL : register(b4)
{
  float4 MatDifColor : packoffset(c0);
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
  float4 __0__1BeamLength__2OrigLength__3OrigWidth : packoffset(c4);
  float4 __0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor : packoffset(c5);
  float4 StartColor : packoffset(c6);
  float4 EndColor : packoffset(c7);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r0.xyz = ObjWorldMatrix._m00_m01_m02;
  r1.w = 1;
  r2.x = __0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor.y + -__0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor.x;
  r2.yzw = float3(1,1,1) / __0__1BeamLength__2OrigLength__3OrigWidth.zww;
  r3.xyz = v0.xyz * r2.yzw;
  r2.y = saturate(-v0.x * r2.y + 1);
  r2.x = r3.x * r2.x + __0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor.x;
  r1.xz = r3.zy * r2.xx;
  r1.y = __0__1BeamLength__2OrigLength__3OrigWidth.y * r3.x;
  r0.x = dot(r0.zxyw, r1.xyzw);
  r4.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r4.xyz = ObjWorldMatrix._m10_m11_m12;
  r0.y = dot(r4.zxyw, r1.xyzw);
  r4.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r4.xyz = ObjWorldMatrix._m20_m21_m22;
  r0.z = dot(r4.zxyw, r1.xyzw);
  r0.w = 1;
  r4.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r0.xyzw);
  r4.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r0.xyzw);
  r4.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r0.xyzw);
  r4.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r0.xyzw);
  o0.xyzw = r4.xyzw;
  
  float4 stereo = StereoParams.Load(0);
  r4.x += stereo.x * (r4.w - stereo.y);
  
  r0.xy = r4.xy * float2(1,-1) + r4.ww;
  o2.zw = r4.zw;
  o2.xy = float2(0.5,0.5) * r0.xy;
  o1.xyzw = v1.xyzw;
  r0.xyz = StartColor.xyz + float3(-1,-1,-1);
  r0.xyz = g_VS_SkyColor.www * r0.xyz + float3(1,1,1);
  r0.xyz = StartColor.xyz * r0.xyz;
  r0.xyz = r0.xyz * r2.yyy;
  r0.w = StartColor.w * r2.y;
  r2.xyz = EndColor.xyz + float3(-1,-1,-1);
  r2.xyz = g_VS_SkyColor.www * r2.xyz + float3(1,1,1);
  r2.xyz = EndColor.xyz * r2.xyz;
  r2.xyz = r2.xyz * r3.xxx;
  r2.w = EndColor.w * r3.x;
  r0.xyzw = r2.xyzw + r0.xyzw;
  r2.xyz = MatDifColor.xyz + float3(-1,-1,-1);
  r2.xyz = g_VS_SkyColor.www * r2.xyz + float3(1,1,1);
  r2.xyz = MatDifColor.xyz * r2.xyz;
  r0.xyz = r2.xyz * r0.xyz;
  r0.xyzw = __0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor.zzzz * r0.xyzw;
  r2.xyz = float3(1.40129846e-045,9.99999997e-007,1.40129846e-045) + v3.zxy;
  r3.xyz = float3(1.40129846e-045,1.40129846e-045,-9.99999997e-007) + v4.yzx;
  r2.xyz = r3.xyz * r2.xyz;
  r3.xyz = float3(1.40129846e-045,1.40129846e-045,9.99999997e-007) + v3.yzx;
  r4.xyz = float3(1.40129846e-045,-9.99999997e-007,1.40129846e-045) + v4.zxy;
  r2.xyz = r3.xyz * r4.xyz + -r2.xyz;
  r1.w = dot(r2.xyz, r2.xyz);
  r1.w = rsqrt(r1.w);
  r2.xyz = r2.xyz * r1.www;
  r2.xyz = v3.www * r2.xyz;
  r3.xyz = ViewPos.xyz + -r1.yzx;
  r4.xz = r1.yz;
  r1.z = dot(r3.xyz, r3.xyz);
  r1.z = rsqrt(r1.z);
  r3.xyz = r3.xyz * r1.zzz;
  r1.z = dot(r3.xyz, r2.xyz);
  r1.z = r1.z * r1.z;
  r1.z = saturate(__0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor.w * r1.z);
  r1.w = -1 + r1.z;
  r1.w = g_VS_SkyColor.w * r1.w + 1;
  r1.z = r1.z * r1.w;
  o3.xyzw = r1.zzzz * r0.xyzw;
  r1.y = 0.0500000007 * Time;
  o4.z = dot(r1.xy, float2(0.100000001,1));
  r4.yw = float2(0.100000001,0.150000006) * Time;
  o4.x = dot(r4.yx, float2(1,0.0500000007));
  o4.y = dot(r4.wz, float2(1,0.0500000007));
  o4.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 04 21:21:48 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_BATCH
// {
//
//   float Time;                        // Offset:    0 Size:     4
//   float4 _InstancingParams;          // Offset:   16 Size:    16 [unused]
//
// }
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 ViewPos;                    // Offset:   64 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_SkyColor;              // Offset:   80 Size:    16
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16 [unused]
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float4 MatDifColor;                // Offset:    0 Size:    16
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16 [unused]
//   float4 __0__1BeamLength__2OrigLength__3OrigWidth;// Offset:   64 Size:    16
//   float4 __0StartRadius__1EndRadius__2FinalMultiplier__3viewDependencyFactor;// Offset:   80 Size:    16
//   float4 StartColor;                 // Offset:   96 Size:    16
//   float4 EndColor;                   // Offset:  112 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_BATCH                         cbuffer      NA          NA    0        1
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float       
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
add r0.w, cb1[0].w, -cb3[6].x
mov r0.xyz, cb1[0].xyzx
mov r1.w, l(1.000000)
add r2.x, -cb4[5].x, cb4[5].y
div r2.yzw, l(1.000000, 1.000000, 1.000000, 1.000000), cb4[4].zzww
mul r3.xyz, r2.yzwy, v0.xyzx
mad_sat r2.y, -v0.x, r2.y, l(1.000000)
mad r2.x, r3.x, r2.x, cb4[5].x
mul r1.xz, r2.xxxx, r3.zzyz
mul r1.y, r3.x, cb4[4].y
dp4 r0.x, r0.zxyw, r1.xyzw
add r4.w, cb1[1].w, -cb3[6].y
mov r4.xyz, cb1[1].xyzx
dp4 r0.y, r4.zxyw, r1.xyzw
add r4.w, cb1[2].w, -cb3[6].z
mov r4.xyz, cb1[2].xyzx
dp4 r0.z, r4.zxyw, r1.xyzw
mov r0.w, l(1.000000)
dp4 r4.x, cb3[10].xyzw, r0.xyzw
dp4 r4.y, cb3[11].xyzw, r0.xyzw
dp4 r4.z, cb3[12].xyzw, r0.xyzw
dp4 r4.w, cb3[13].xyzw, r0.xyzw
mov o0.xyzw, r4.xyzw
mad r0.xy, r4.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r4.wwww
mov o2.zw, r4.zzzw
mul o2.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, v1.xyzw
add r0.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), cb4[6].xyzx
mad r0.xyz, cb3[5].wwww, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.xyz, r0.xyzx, cb4[6].xyzx
mul r0.xyz, r2.yyyy, r0.xyzx
mul r0.w, r2.y, cb4[6].w
add r2.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), cb4[7].xyzx
mad r2.xyz, cb3[5].wwww, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, cb4[7].xyzx
mul r2.xyz, r3.xxxx, r2.xyzx
mul r2.w, r3.x, cb4[7].w
add r0.xyzw, r0.xyzw, r2.xyzw
add r2.xyz, l(-1.000000, -1.000000, -1.000000, 0.000000), cb4[0].xyzx
mad r2.xyz, cb3[5].wwww, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, cb4[0].xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
mul r0.xyzw, r0.xyzw, cb4[5].zzzz
add r2.xyz, v3.zxyz, l(0.000000, 0.000001, 0.000000, 0.000000)
add r3.xyz, v4.yzxy, l(0.000000, 0.000000, -0.000001, 0.000000)
mul r2.xyz, r2.xyzx, r3.xyzx
add r3.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r4.xyz, v4.zxyz, l(0.000000, -0.000001, 0.000000, 0.000000)
mad r2.xyz, r3.xyzx, r4.xyzx, -r2.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
mul r2.xyz, r2.xyzx, v3.wwww
add r3.xyz, -r1.yzxy, cb1[4].xyzx
mov r4.xz, r1.yyzy
dp3 r1.z, r3.xyzx, r3.xyzx
rsq r1.z, r1.z
mul r3.xyz, r1.zzzz, r3.xyzx
dp3 r1.z, r3.xyzx, r2.xyzx
mul r1.z, r1.z, r1.z
mul_sat r1.z, r1.z, cb4[5].w
add r1.w, r1.z, l(-1.000000)
mad r1.w, cb3[5].w, r1.w, l(1.000000)
mul r1.z, r1.w, r1.z
mul o3.xyzw, r0.xyzw, r1.zzzz
mul r1.y, cb0[0].x, l(0.050000)
dp2 o4.z, r1.xyxx, l(0.100000, 1.000000, 0.000000, 0.000000)
mul r4.yw, cb0[0].xxxx, l(0.000000, 0.100000, 0.000000, 0.150000)
dp2 o4.x, r4.yxyy, l(1.000000, 0.050000, 0.000000, 0.000000)
dp2 o4.y, r4.wzww, l(1.000000, 0.050000, 0.000000, 0.000000)
mov o4.w, l(0)
ret 
// Approximately 72 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
