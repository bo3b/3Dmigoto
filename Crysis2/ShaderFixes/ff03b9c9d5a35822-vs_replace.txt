cbuffer cb4 : register(b4)
{
  float4 cb4[4];
}


cbuffer PER_INSTANCE : register(b1)
{
  row_major float3x4 ObjWorldMatrix : packoffset(c0);
  float4 BendInfo : packoffset(c3);
  float4 WindParams : packoffset(c4);
}

cbuffer PER_FRAME : register(b3)
{
  row_major float4x4 g_VS_ViewProjMatr : packoffset(c0);
  float4 g_VS_WorldViewPos : packoffset(c6);
  float4 g_VS_AnimGenParams : packoffset(c8);
  row_major float4x4 g_VS_ViewProjZeroMatr : packoffset(c10);
}

cbuffer PER_MATERIAL : register(b4)
{
  float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3 : packoffset(c2);
  float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2 : packoffset(c3);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : COLOR0,
  float4 v3 : TANGENT0,
  float4 v4 : BINORMAL0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v0.xyz, cb4[3].zzz);
  r0.x = WindParams.z + r0.x;
  r0.x = g_VS_AnimGenParams.z + r0.x;
  r0.xyzw = float4(0.879899979,1.07500005,1.29499996,1.59899998) * r0.xxxx;
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = r0.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r1.x = cb4[3].x + WindParams.w;
  r0.xyzw = r0.xyzw * r1.xxxx + float4(0.5,0.5,0.5,0.5);
  r0.xyzw = frac(r0.xyzw);
  r0.xyzw = r0.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  r1.z = cb4[3].y + cb4[3].w;
  r1.xyw = cb4[3].yyw;
  r1.xyzw = float4(0.00572999986,0.00999999978,0.00499999989,0.00999999978) * r1.xyzw;
  r0.x = dot(r1.xyzw, abs(r0.xyzw));
  r0.x = v2.w * r0.x;
  r0.yzw = float3(0,9.99999997e-007,0) + v3.zxy;
  r1.xyz = float3(0,0,-9.99999997e-007) + v4.yzx;
  r0.yzw = r1.xyz * r0.yzw;
  r1.xyz = float3(0,0,9.99999997e-007) + v3.yzx;
  r2.xyz = float3(0,-9.99999997e-007,0) + v4.zxy;
  r0.yzw = r1.xyz * r2.xyz + -r0.yzw;
  r1.x = dot(r0.yzw, r0.yzw);
  r1.x = rsqrt(r1.x);
  r0.yzw = r1.xxx * r0.yzw;
  r0.yzw = v3.www * r0.yzw;
  r0.xyz = r0.xxx * r0.yzw + v0.xyz;
  r1.w = -g_VS_WorldViewPos.x + ObjWorldMatrix._m03;
  r1.xyz = ObjWorldMatrix._m00_m01_m02;
  r0.w = 1;
  r1.x = dot(r1.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.y + ObjWorldMatrix._m13;
  r2.xyz = ObjWorldMatrix._m10_m11_m12;
  r1.y = dot(r2.xyzw, r0.xyzw);
  r2.w = -g_VS_WorldViewPos.z + ObjWorldMatrix._m23;
  r2.xyz = ObjWorldMatrix._m20_m21_m22;
  r1.z = dot(r2.xyzw, r0.xyzw);
  r1.w = 1;
  r0.x = dot(g_VS_ViewProjZeroMatr._m00_m01_m02_m03, r1.xyzw);
  r0.y = dot(g_VS_ViewProjZeroMatr._m10_m11_m12_m13, r1.xyzw);
  r0.z = dot(g_VS_ViewProjZeroMatr._m20_m21_m22_m23, r1.xyzw);
  r0.w = dot(g_VS_ViewProjZeroMatr._m30_m31_m32_m33, r1.xyzw);
  o2.xyzw = r1.xyzw;
  o0.xyzw = r0.xyzw;
  
   
  float4 stereo = StereoParams.Load(0);
  r0.x += stereo.x * (r0.w - stereo.y); 
  
  r0.xy = r0.xy * float2(1,-1) + r0.ww;
  o3.zw = r0.zw;
  o3.xy = float2(0.5,0.5) * r0.xy;
  o1.xyzw = v1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Mon Aug 10 22:06:16 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float3x4 ObjWorldMatrix; // Offset:    0 Size:    48
//   float4 BendInfo;                   // Offset:   48 Size:    16 [unused]
//   float4 WindParams;                 // Offset:   64 Size:    16
//
// }
//
// cbuffer PER_FRAME
// {
//
//   row_major float4x4 g_VS_ViewProjMatr;// Offset:    0 Size:    64 [unused]
//   float4 g_VS_WorldViewPos;          // Offset:   96 Size:    16
//   float4 g_VS_AnimGenParams;         // Offset:  128 Size:    16
//   row_major float4x4 g_VS_ViewProjZeroMatr;// Offset:  160 Size:    64
//
// }
//
// cbuffer PER_MATERIAL
// {
//
//   float3 __0bendDetailFrequency__1bendDetailLeafAmplitude__2bendDetailBranchAmplitude__3;// Offset:   32 Size:    12 [unused]
//   float4 __0AnimFrequency__1AnimAmplitudeWav0__2AnimPhase__3AnimAmplitudeWav2;// Offset:   48 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
// PER_FRAME                         cbuffer      NA          NA    3        1
// PER_MATERIAL                      cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// COLOR                    0   xyzw        2     NONE   float   xyzw
// TANGENT                  0   xyzw        3     NONE   float   xyzw
// BINORMAL                 0   xyzw        4     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[5], immediateIndexed
dcl_constantbuffer cb3[14], immediateIndexed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.w
dcl_input v3.xyzw
dcl_input v4.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 3
dp3 r0.x, v0.xyzx, cb4[3].zzzz
add r0.x, r0.x, cb1[4].z
add r0.x, r0.x, cb3[8].z
mul r0.xyzw, r0.xxxx, l(0.879900, 1.075000, 1.295000, 1.599000)
frc r0.xyzw, r0.xyzw
mad r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
add r1.x, cb1[4].w, cb4[3].x
mad r0.xyzw, r0.xyzw, r1.xxxx, l(0.500000, 0.500000, 0.500000, 0.500000)
frc r0.xyzw, r0.xyzw
mad r0.xyzw, r0.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
add r1.z, cb4[3].w, cb4[3].y
mov r1.xyw, cb4[3].yyyw
mul r1.xyzw, r1.xyzw, l(0.005730, 0.010000, 0.005000, 0.010000)
dp4 r0.x, r1.xyzw, |r0.xyzw|
mul r0.x, r0.x, v2.w
add r0.yzw, v3.zzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r1.xyz, v4.yzxy, l(0.000000, 0.000000, -0.000001, 0.000000)
mul r0.yzw, r0.yyzw, r1.xxyz
add r1.xyz, v3.yzxy, l(0.000000, 0.000000, 0.000001, 0.000000)
add r2.xyz, v4.zxyz, l(0.000000, -0.000001, 0.000000, 0.000000)
mad r0.yzw, r1.xxyz, r2.xxyz, -r0.yyzw
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
mul r0.yzw, r0.yyzw, v3.wwww
mad r0.xyz, r0.xxxx, r0.yzwy, v0.xyzx
add r1.w, cb1[0].w, -cb3[6].x
mov r1.xyz, cb1[0].xyzx
mov r0.w, l(1.000000)
dp4 r1.x, r1.xyzw, r0.xyzw
add r2.w, cb1[1].w, -cb3[6].y
mov r2.xyz, cb1[1].xyzx
dp4 r1.y, r2.xyzw, r0.xyzw
add r2.w, cb1[2].w, -cb3[6].z
mov r2.xyz, cb1[2].xyzx
dp4 r1.z, r2.xyzw, r0.xyzw
mov r1.w, l(1.000000)
dp4 r0.x, cb3[10].xyzw, r1.xyzw
dp4 r0.y, cb3[11].xyzw, r1.xyzw
dp4 r0.z, cb3[12].xyzw, r1.xyzw
dp4 r0.w, cb3[13].xyzw, r1.xyzw
mov o2.xyzw, r1.xyzw
mov o0.xyzw, r0.xyzw
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), r0.wwww
mov o3.zw, r0.zzzw
mul o3.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.xyzw, v1.xyzw
ret 
// Approximately 48 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
