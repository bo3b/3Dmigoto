//HDR
cbuffer PER_INSTANCE : register(b1)
{
  row_major float4x4 vpMatrix : packoffset(c0);
  float4 PI_psOffsets[16] : packoffset(c4);
}

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  o0.x = dot(vpMatrix._m00_m01_m02_m03, v0.xyzw);
  o0.y = dot(vpMatrix._m10_m11_m12_m13, v0.xyzw);
  o0.z = dot(vpMatrix._m20_m21_m22_m23, v0.xyzw);
  o0.w = dot(vpMatrix._m30_m31_m32_m33, v0.xyzw);
  o1.xy = PI_psOffsets[0].xy + v1.xy;
  o1.zw = PI_psOffsets[1].xy + v1.xy;
  o2.xy = PI_psOffsets[2].xy + v1.xy;
  o2.zw = PI_psOffsets[3].xy + v1.xy;
  o3.xy = PI_psOffsets[4].xy + v1.xy;
  o3.zw = PI_psOffsets[5].xy + v1.xy;
  o4.xy = PI_psOffsets[6].xy + v1.xy;
  o4.zw = PI_psOffsets[7].xy + v1.xy;
  o5.xy = v1.xy;
  o5.zw = float2(0,0);
  
    float4 stereo = StereoParams.Load(0);
  o3.x += stereo.x * (o3.w - stereo.y);
  //o3.x += stereo.x * stereo.y;
  //o3 = 0;
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
//
//   using 3Dmigoto v1.1.34 on Tue Aug 04 16:00:24 2015
//
//
// Buffer Definitions: 
//
// cbuffer PER_INSTANCE
// {
//
//   row_major float4x4 vpMatrix;       // Offset:    0 Size:    64
//   float4 PI_psOffsets[16];           // Offset:   64 Size:   256
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// PER_INSTANCE                      cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[12], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dp4 o0.x, cb1[0].xyzw, v0.xyzw
dp4 o0.y, cb1[1].xyzw, v0.xyzw
dp4 o0.z, cb1[2].xyzw, v0.xyzw
dp4 o0.w, cb1[3].xyzw, v0.xyzw
add o1.xy, v1.xyxx, cb1[4].xyxx
add o1.zw, v1.xxxy, cb1[5].xxxy
add o2.xy, v1.xyxx, cb1[6].xyxx
add o2.zw, v1.xxxy, cb1[7].xxxy
add o3.xy, v1.xyxx, cb1[8].xyxx
add o3.zw, v1.xxxy, cb1[9].xxxy
add o4.xy, v1.xyxx, cb1[10].xyxx
add o4.zw, v1.xxxy, cb1[11].xxxy
mov o5.xy, v1.xyxx
mov o5.zw, l(0,0,0,0)
ret 
// Approximately 15 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
 