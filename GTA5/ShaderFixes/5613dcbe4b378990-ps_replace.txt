
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState GBufferTextureSampler0Global_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler2Global_s : register(s9);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> GBufferTextureSampler0Global : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler2Global : register(t9);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r1.xyz = v2.xyz / v2.www;
  r0.w = 0 != gStereoParams.z;
  r1.w = v2.w == 1.000000;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) {
    r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r0.w = -r2.y + r0.z;
    r0.w = r2.x * r0.w;
    r0.w = deferredProjectionParams.x * r0.w;
    r2.xyz = -gViewInverse._m00_m01_m02 * r0.www + gViewInverse._m30_m31_m32;
  } else {
    r3.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r2.xyz = gViewInverse._m30_m31_m32 + r3.xyz;
  }
  r2.xyz = r1.xyz * r0.zzz + r2.xyz;
  r3.xyz = deferredLightParams[9].xyz + -r2.xyz;
  r0.z = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.z);
  r4.xyz = r3.xyz * r0.www;
  r5.xyz = deferredLightParams[10].xyz + -r2.xyz;
  r1.w = dot(r5.xyz, r5.xyz);
  r3.w = rsqrt(r1.w);
  r6.xyz = r5.xyz * r3.www;
  r0.z = saturate(-r0.z * deferredLightParams[4].z + 1);
  r4.w = 1 + -deferredLightParams[7].x;
  r5.w = r4.w * r0.z + deferredLightParams[7].x;
  r0.z = r0.z / r5.w;
  r5.w = dot(r4.xyz, -deferredLightParams[12].xyz);
  r5.w = saturate(r5.w * deferredLightParams[5].w + deferredLightParams[5].z);
  r0.z = r5.w * r0.z;
  r2.w = 1;
  r2.x = dot(r2.xyzw, deferredLightParams[6].xyzw);
  r2.x = r2.x >= 0;
  r2.x = r2.x ? 1.000000 : 0;
  r0.z = r2.x * r0.z;
  r1.w = saturate(-r1.w * deferredLightParams[4].z + 1);
  r2.y = r4.w * r1.w + deferredLightParams[7].x;
  r1.w = r1.w / r2.y;
  r2.y = dot(r6.xyz, -deferredLightParams[13].xyz);
  r2.y = saturate(r2.y * deferredLightParams[5].w + deferredLightParams[5].z);
  r1.w = r2.y * r1.w;
  r1.w = r1.w * r2.x;
  r2.x = max(r1.w, r0.z);
  r2.x = r2.x < 9.99999997e-007;
  if (r2.x != 0) discard;
  r2.xyzw = GBufferTextureSampler0Global.Sample(GBufferTextureSampler0Global_s, r0.xy).xyzw;
  r2.xyz = r2.xyz * r2.xyz;
  r7.xyzw = GBufferTextureSampler2Global.Sample(GBufferTextureSampler2Global_s, r0.xy).xyzw;
  r7.xy = r7.xy * r7.xy;
  r8.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r9.xyz = float3(0.998046875,7.984375,63.875) * r8.www;
  r9.xyz = frac(r9.xyz);
  r9.xy = -r9.yz * float2(0.125,0.125) + r9.xy;
  r8.xyz = r8.xyz * float3(256,256,256) + r9.xyz;
  r8.xyz = float3(-128,-128,-128) + r8.xyz;
  r0.x = dot(r8.xyz, r8.xyz);
  r0.x = rsqrt(r0.x);
  r8.xyz = r8.xyz * r0.xxx;
  r0.x = min(1, r7.x);
  r0.y = r7.y * 512 + -500;
  r0.y = max(0, r0.y);
  r2.w = r7.y * 512 + -r0.y;
  r0.y = 558 * r0.y;
  r0.y = r2.w * 3 + r0.y;
  r2.w = dot(r1.xyz, r1.xyz);
  r2.w = rsqrt(r2.w);
  r1.xyz = r2.www * r1.xyz;
  r3.xyz = r3.xyz * r0.www + -r1.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r0.w = rsqrt(r0.w);
  r3.xyz = r3.xyz * r0.www;
  r5.xyz = r5.xyz * r3.www + -r1.xyz;
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = rsqrt(r0.w);
  r5.xyz = r5.xyz * r0.www;
  r7.xyw = deferredLightParams[3].xyz * deferredLightParams[3].www;
  r0.w = saturate(dot(r8.xyz, r4.xyz));
  r1.x = saturate(dot(-r1.xyz, r8.xyz));
  r1.y = saturate(dot(r3.xyz, r4.xyz));
  r4.xy = float2(1,1) + -r1.xy;
  r4.zw = r4.xy * r4.xy;
  r4.zw = r4.zw * r4.zw;
  r4.xy = r4.zw * r4.xy;
  r1.y = 1 + -r7.z;
  r4.xy = r7.zz * r4.xy + r1.yy;
  r4.zw = float2(2,9.99999994e-009) + r0.yy;
  r0.y = 0.125 * r4.z;
  r2.w = -r0.x * r4.x + 1;
  r3.x = dot(r8.xyz, r3.xyz);
  r3.x = saturate(9.99999994e-009 + r3.x);
  r3.x = log2(r3.x);
  r3.x = r4.w * r3.x;
  r3.x = exp2(r3.x);
  r3.x = r3.x * r4.y;
  r3.x = r3.x * r0.y;
  r3.x = r3.x * r0.x;
  r3.x = r3.x * r0.w;
  r0.w = r2.w * r0.w;
  r2.w = saturate(dot(r8.xyz, r6.xyz));
  r1.z = saturate(dot(r5.xyz, r6.xyz));
  r1.xz = float2(1,1) + -r1.xz;
  r3.yz = r1.xz * r1.xz;
  r3.yz = r3.yz * r3.yz;
  r1.xz = r3.yz * r1.xz;
  r1.xy = r7.zz * r1.xz + r1.yy;
  r1.x = -r0.x * r1.x + 1;
  r1.z = dot(r8.xyz, r5.xyz);
  r1.z = saturate(9.99999994e-009 + r1.z);
  r1.z = log2(r1.z);
  r1.z = r4.w * r1.z;
  r1.z = exp2(r1.z);
  r1.y = r1.z * r1.y;
  r0.y = r1.y * r0.y;
  r0.x = r0.y * r0.x;
  r0.x = r0.x * r2.w;
  r0.y = r2.w * r1.x;
  r1.x = deferredLightParams[8].z * r3.x;
  r0.x = deferredLightParams[8].z * r0.x;
  r1.xyz = r2.xyz * r0.www + r1.xxx;
  r1.xyz = r1.xyz * r7.xyw;
  r0.xyw = r2.xyz * r0.yyy + r0.xxx;
  r0.xyw = r0.xyw * r7.xyw;
  r0.xyw = r0.xyw * r1.www;
  r0.xyz = r1.xyz * r0.zzz + r0.xyw;
  o0.xyz = globalScalars3.zzz * r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GBufferTextureSampler0Global      sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler2Global      sampler      NA          NA    9        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 10
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.w, r0.z, -r2.y
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r2.xyz, r1.xyzx, r0.zzzz, r2.xyzx
add r3.xyz, -r2.xyzx, cb13[9].xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.w, r0.z
mul r4.xyz, r0.wwww, r3.xyzx
add r5.xyz, -r2.xyzx, cb13[10].xyzx
dp3 r1.w, r5.xyzx, r5.xyzx
rsq r3.w, r1.w
mul r6.xyz, r3.wwww, r5.xyzx
mad_sat r0.z, -r0.z, cb13[4].z, l(1.000000)
add r4.w, -cb13[7].x, l(1.000000)
mad r5.w, r4.w, r0.z, cb13[7].x
div r0.z, r0.z, r5.w
dp3 r5.w, r4.xyzx, -cb13[12].xyzx
mad_sat r5.w, r5.w, cb13[5].w, cb13[5].z
mul r0.z, r0.z, r5.w
mov r2.w, l(1.000000)
dp4 r2.x, r2.xyzw, cb13[6].xyzw
ge r2.x, r2.x, l(0.000000)
and r2.x, r2.x, l(0x3f800000)
mul r0.z, r0.z, r2.x
mad_sat r1.w, -r1.w, cb13[4].z, l(1.000000)
mad r2.y, r4.w, r1.w, cb13[7].x
div r1.w, r1.w, r2.y
dp3 r2.y, r6.xyzx, -cb13[13].xyzx
mad_sat r2.y, r2.y, cb13[5].w, cb13[5].z
mul r1.w, r1.w, r2.y
mul r1.w, r2.x, r1.w
max r2.x, r0.z, r1.w
lt r2.x, r2.x, l(0.000001)
discard_nz r2.x
sample r2.xyzw, r0.xyxx, t7.xyzw, s7
mul r2.xyz, r2.xyzx, r2.xyzx
sample r7.xyzw, r0.xyxx, t9.xyzw, s9
mul r7.xy, r7.xyxx, r7.xyxx
sample r8.xyzw, r0.xyxx, t8.xyzw, s8
mul r9.xyz, r8.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r9.xyz, r9.xyzx
mad r9.xy, -r9.yzyy, l(0.125000, 0.125000, 0.000000, 0.000000), r9.xyxx
mad r8.xyz, r8.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r9.xyzx
add r8.xyz, r8.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r0.x, r8.xyzx, r8.xyzx
rsq r0.x, r0.x
mul r8.xyz, r0.xxxx, r8.xyzx
min r0.x, r7.x, l(1.000000)
mad r0.y, r7.y, l(512.000000), l(-500.000000)
max r0.y, r0.y, l(0.000000)
mad r2.w, r7.y, l(512.000000), -r0.y
mul r0.y, r0.y, l(558.000000)
mad r0.y, r2.w, l(3.000000), r0.y
dp3 r2.w, r1.xyzx, r1.xyzx
rsq r2.w, r2.w
mul r1.xyz, r1.xyzx, r2.wwww
mad r3.xyz, r3.xyzx, r0.wwww, -r1.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mad r5.xyz, r5.xyzx, r3.wwww, -r1.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx
mul r7.xyw, cb13[3].wwww, cb13[3].xyxz
dp3_sat r0.w, r8.xyzx, r4.xyzx
dp3_sat r1.x, -r1.xyzx, r8.xyzx
dp3_sat r1.y, r3.xyzx, r4.xyzx
add r4.xy, -r1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r4.zw, r4.xxxy, r4.xxxy
mul r4.zw, r4.zzzw, r4.zzzw
mul r4.xy, r4.xyxx, r4.zwzz
add r1.y, -r7.z, l(1.000000)
mad r4.xy, r7.zzzz, r4.xyxx, r1.yyyy
add r4.zw, r0.yyyy, l(0.000000, 0.000000, 2.000000, 0.000000)
mul r0.y, r4.z, l(0.125000)
mad r2.w, -r0.x, r4.x, l(1.000000)
dp3 r3.x, r8.xyzx, r3.xyzx
add_sat r3.x, r3.x, l(0.000000)
log r3.x, r3.x
mul r3.x, r3.x, r4.w
exp r3.x, r3.x
mul r3.x, r4.y, r3.x
mul r3.x, r0.y, r3.x
mul r3.x, r0.x, r3.x
mul r3.x, r0.w, r3.x
mul r0.w, r0.w, r2.w
dp3_sat r2.w, r8.xyzx, r6.xyzx
dp3_sat r1.z, r5.xyzx, r6.xyzx
add r1.xz, -r1.xxzx, l(1.000000, 0.000000, 1.000000, 0.000000)
mul r3.yz, r1.xxzx, r1.xxzx
mul r3.yz, r3.yyzy, r3.yyzy
mul r1.xz, r1.xxzx, r3.yyzy
mad r1.xy, r7.zzzz, r1.xzxx, r1.yyyy
mad r1.x, -r0.x, r1.x, l(1.000000)
dp3 r1.z, r8.xyzx, r5.xyzx
add_sat r1.z, r1.z, l(0.000000)
log r1.z, r1.z
mul r1.z, r1.z, r4.w
exp r1.z, r1.z
mul r1.y, r1.y, r1.z
mul r0.y, r0.y, r1.y
mul r0.x, r0.x, r0.y
mul r0.x, r2.w, r0.x
mul r0.y, r1.x, r2.w
mul r1.x, r3.x, cb13[8].z
mul r0.x, r0.x, cb13[8].z
mad r1.xyz, r2.xyzx, r0.wwww, r1.xxxx
mul r1.xyz, r7.xywx, r1.xyzx
mad r0.xyw, r2.xyxz, r0.yyyy, r0.xxxx
mul r0.xyw, r7.xyxw, r0.xyxw
mul r0.xyw, r1.wwww, r0.xyxw
mad r0.xyz, r1.xyzx, r0.zzzz, r0.xywx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 132 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:34:58 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GBufferTextureSampler0Global_s    sampler      NA          NA    7        1
// GBufferTextureSampler1Global_s    sampler      NA          NA    8        1
// GBufferTextureSampler2Global_s    sampler      NA          NA    9        1
// GBufferTextureSamplerDepthGlobal_s    sampler      NA          NA   12        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 10
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.w, r0.z, -r2.y
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r2.xyz, r1.xyzx, r0.zzzz, r2.xyzx
add r3.xyz, -r2.xyzx, cb13[9].xyzx
dp3 r0.z, r3.xyzx, r3.xyzx
rsq r0.w, r0.z
mul r4.xyz, r0.wwww, r3.xyzx
add r5.xyz, -r2.xyzx, cb13[10].xyzx
dp3 r1.w, r5.xyzx, r5.xyzx
rsq r3.w, r1.w
mul r6.xyz, r3.wwww, r5.xyzx
mad_sat r0.z, -r0.z, cb13[4].z, l(1.000000)
add r4.w, l(1.000000), -cb13[7].x
mad r5.w, r4.w, r0.z, cb13[7].x
div r0.z, r0.z, r5.w
dp3 r5.w, r4.xyzx, -cb13[12].xyzx
mad_sat r5.w, r5.w, cb13[5].w, cb13[5].z
mul r0.z, r0.z, r5.w
mov r2.w, l(1.000000)
dp4 r2.x, r2.xyzw, cb13[6].xyzw
ge r2.x, r2.x, l(0.000000)
and r2.x, r2.x, l(0x3f800000)
mul r0.z, r0.z, r2.x
mad_sat r1.w, -r1.w, cb13[4].z, l(1.000000)
mad r2.y, r4.w, r1.w, cb13[7].x
div r1.w, r1.w, r2.y
dp3 r2.y, r6.xyzx, -cb13[13].xyzx
mad_sat r2.y, r2.y, cb13[5].w, cb13[5].z
mul r1.w, r1.w, r2.y
mul r1.w, r2.x, r1.w
max r2.x, r0.z, r1.w
lt r2.x, r2.x, l(0.000001)
discard_nz r2.x
sample r2.xyzw, r0.xyxx, t7.xyzw, s7
mul r2.xyz, r2.xyzx, r2.xyzx
sample r7.xyzw, r0.xyxx, t9.xyzw, s9
mul r7.xy, r7.xyxx, r7.xyxx
sample r8.xyzw, r0.xyxx, t8.xyzw, s8
mul r9.xyz, r8.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r9.xyz, r9.xyzx
mad r9.xy, r9.yzyy, l(-0.125000, -0.125000, 0.000000, 0.000000), r9.xyxx
mad r8.xyz, r8.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r9.xyzx
add r8.xyz, r8.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r0.x, r8.xyzx, r8.xyzx
rsq r0.x, r0.x
mul r8.xyz, r0.xxxx, r8.xyzx
min r0.x, r7.x, l(1.000000)
mad r0.y, r7.y, l(512.000000), l(-500.000000)
max r0.y, r0.y, l(0.000000)
mad r2.w, r7.y, l(512.000000), -r0.y
mul r0.y, r0.y, l(558.000000)
mad r0.y, r2.w, l(3.000000), r0.y
dp3 r2.w, r1.xyzx, r1.xyzx
rsq r2.w, r2.w
mul r1.xyz, r1.xyzx, r2.wwww
mad r3.xyz, r3.xyzx, r0.wwww, -r1.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mad r5.xyz, r5.xyzx, r3.wwww, -r1.xyzx
dp3 r0.w, r5.xyzx, r5.xyzx
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, r5.xyzx
mul r7.xyw, cb13[3].wwww, cb13[3].xyxz
dp3_sat r0.w, r8.xyzx, r4.xyzx
dp3_sat r1.x, -r1.xyzx, r8.xyzx
dp3_sat r1.y, r3.xyzx, r4.xyzx
add r4.xy, -r1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r4.zw, r4.xxxy, r4.xxxy
mul r4.zw, r4.zzzw, r4.zzzw
mul r4.xy, r4.xyxx, r4.zwzz
add r1.y, -r7.z, l(1.000000)
mad r4.xy, r7.zzzz, r4.xyxx, r1.yyyy
add r4.zw, r0.yyyy, l(0.000000, 0.000000, 2.000000, 0.000000)
mul r0.y, r4.z, l(0.125000)
mad r2.w, -r0.x, r4.x, l(1.000000)
dp3 r3.x, r8.xyzx, r3.xyzx
add_sat r3.x, r3.x, l(0.000000)
log r3.x, r3.x
mul r3.x, r3.x, r4.w
exp r3.x, r3.x
mul r3.x, r4.y, r3.x
mul r3.x, r0.y, r3.x
mul r3.x, r0.x, r3.x
mul r3.x, r0.w, r3.x
mul r0.w, r0.w, r2.w
dp3_sat r2.w, r8.xyzx, r6.xyzx
dp3_sat r1.z, r5.xyzx, r6.xyzx
add r1.xz, -r1.xxzx, l(1.000000, 0.000000, 1.000000, 0.000000)
mul r3.yz, r1.xxzx, r1.xxzx
mul r3.yz, r3.yyzy, r3.yyzy
mul r1.xz, r1.xxzx, r3.yyzy
mad r1.xy, r7.zzzz, r1.xzxx, r1.yyyy
mad r1.x, -r0.x, r1.x, l(1.000000)
dp3 r1.z, r8.xyzx, r5.xyzx
add_sat r1.z, r1.z, l(0.000000)
log r1.z, r1.z
mul r1.z, r1.z, r4.w
exp r1.z, r1.z
mul r1.y, r1.y, r1.z
mul r0.y, r0.y, r1.y
mul r0.x, r0.x, r0.y
mul r0.x, r2.w, r0.x
mul r0.y, r1.x, r2.w
mul r1.x, r3.x, cb13[8].z
mul r0.x, r0.x, cb13[8].z
mad r1.xyz, r2.xyzx, r0.wwww, r1.xxxx
mul r1.xyz, r7.xywx, r1.xyzx
mad r0.xyw, r2.xyxz, r0.yyyy, r0.xxxx
mul r0.xyw, r7.xyxw, r0.xyxw
mul r0.xyw, r1.wwww, r0.xyxw
mad r0.xyz, r1.xyzx, r0.zzzz, r0.xywx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 132 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
