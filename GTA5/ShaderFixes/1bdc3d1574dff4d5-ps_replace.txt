
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer lighting_globals : register(b3)
{
  float4 gDirectionalLight : packoffset(c0);
  float4 gDirectionalColour : packoffset(c1);
  int gNumForwardLights : packoffset(c2);
  float4 gLightPositionAndInvDistSqr[8] : packoffset(c3);
  float4 gLightDirectionAndFalloffExponent[8] : packoffset(c11);
  float4 gLightColourAndCapsuleExtent[8] : packoffset(c19);
  float gLightConeScale[8] : packoffset(c27);
  float gLightConeOffset[8] : packoffset(c35);
  float4 gLightNaturalAmbient0 : packoffset(c43);
  float4 gLightNaturalAmbient1 : packoffset(c44);
  float4 gLightArtificialIntAmbient0 : packoffset(c45);
  float4 gLightArtificialIntAmbient1 : packoffset(c46);
  float4 gLightArtificialExtAmbient0 : packoffset(c47);
  float4 gLightArtificialExtAmbient1 : packoffset(c48);
  float4 gDirectionalAmbientColour : packoffset(c49);
  float4 globalFogParams[5] : packoffset(c50);
  float4 globalFogColor : packoffset(c55);
  float4 globalFogColorE : packoffset(c56);
  float4 globalFogColorN : packoffset(c57);
  float4 globalFogColorMoon : packoffset(c58);
  float4 gReflectionTweaks : packoffset(c59);
}

cbuffer vfx_decaldyn_locals : register(b11)
{
  float polyRejectThreshold : packoffset(c0);
  float specularFalloffMult : packoffset(c0.y);
  float specularIntensityMult : packoffset(c0.z);
  float specularFresnel : packoffset(c0.w);
  float emissiveMultiplier : packoffset(c1);
  float parallaxScaleBias : packoffset(c1.y);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState gDecalSampler_s : register(s2);
SamplerState gDecalNormalSampler_s : register(s3);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> gDecalSampler : register(t2);
Texture2D<float4> gDecalNormalSampler : register(t3);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = deferredLightScreenSize.zw * v0.xy;
  r0.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r0.x = deferredProjectionParams.w + -r0.x;
  r0.x = 1 + r0.x;
  r0.x = deferredProjectionParams.z / r0.x;
  r0.yzw = v2.xyz / v2.www;
  r1.x = 0 != gStereoParams.z;
  r1.y = v2.w == 1.000000;
  r1.x = r1.y ? r1.x : 0;
  if (r1.x != 0) {
    r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r1.y = -r1.y + r0.x;
    r1.x = r1.x * r1.y;
    r1.x = deferredProjectionParams.x * r1.x;
    r1.xyz = -gViewInverse._m00_m01_m02 * r1.xxx + gViewInverse._m30_m31_m32;
  } else {
    r2.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r1.xyz = gViewInverse._m30_m31_m32 + r2.xyz;
  }
  r0.xyz = r0.yzw * r0.xxx + r1.xyz;
  r1.xyz = ddx(r0.zxy);
  r2.xyz = ddy(r0.yzx);
  r3.xyz = r2.xyz * r1.xyz;
  r1.xyz = r1.zxy * r2.yzx + -r3.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(v5.xyz, r1.xyz);
  r0.w = r0.w < polyRejectThreshold;
  if (r0.w != 0) {
    r1.xyzw = float4(0,0,0,0);
    r2.xyzw = float4(0,0,0,0);
    r5.xy = float2(0,0);
    r3.xyzw = float4(0,0,0,0);
    r4.xyzw = float4(0,0,0,0);
  }
  r6.xyz = -v1.xyz + r0.xyz;
  r5.z = dot(v4.xyz, r6.xyz);
  r5.w = dot(-v3.xyz, r6.xyz);
  r6.x = v4.w * r5.z;
  r6.y = v3.w * r5.w;
  r5.zw = r6.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r6.xy = r5.zw * float2(-2,-2) + float2(1,1);
  r6.xy = v9.xy * r6.xy + r5.zw;
  r5.z = 0 < v9.z;
  r6.w = v9.w / v9.z;
  r7.x = floor(r6.w);
  r6.w = -r7.x + r6.w;
  r6.w = 1 + -r6.w;
  r7.x = 1 / v3.w;
  r7.x = r7.x + r7.x;
  r7.x = r7.x / v9.z;
  r6.w = r6.y * r7.x + r6.w;
  r6.z = r5.z ? r6.w : r6.y;
  r6.zw = v7.xy + r6.xz;
  r6.zw = v7.zw * r6.zw;
  r7.xyz = v4.zxy * v3.yzx;
  r7.xyz = v4.yzx * v3.zxy + -r7.xyz;
  r5.z = dot(r7.xyz, r7.xyz);
  r5.z = rsqrt(r5.z);
  r7.xyz = r7.xyz * r5.zzz;
  r8.xy = v9.xy * float2(-2,-2) + float2(1,1);
  r8.xzw = v4.xyz * r8.xxx;
  r9.xyz = -v3.xyz * r8.yyy;
  r10.x = dot(r8.xzw, v8.xyz);
  r10.y = dot(r9.xyz, v8.xyz);
  r10.z = dot(r7.xyz, v8.xyz);
  r11.xyzw = gDecalNormalSampler.Sample(gDecalNormalSampler_s, r6.zw).xyzw;
  r5.z = dot(r10.xyz, r10.xyz);
  r5.z = rsqrt(r5.z);
  r10.xy = r10.xy * r5.zz;
  r10.xy = parallaxScaleBias * -r10.xy;
  r10.zw = r6.zw;
  r12.yz = r11.xy;
  r12.x = -1;
  r12.w = -r11.w;
  r5.z = 0;
  while (true) {
    r7.w = (int)r5.z >= 8;
    if (r7.w != 0) break;
    r13.xy = r10.xy * float2(0.125,0.125) + r10.zw;
    r14.xyzw = gDecalNormalSampler.Sample(gDecalNormalSampler_s, r13.xy).xyzw;
    r7.w = r12.x < r12.w;
    r15.x = 0.125 + r12.x;
    r10.zw = r7.ww ? r13.xy : r10.zw;
    r15.yzw = float3(1,1,-1) * r14.xyw;
    r12.xyzw = r7.wwww ? r15.xyzw : r12.xyzw;
    r5.z = (int)r5.z + 1;
  }
  r10.xyzw = gDecalSampler.Sample(gDecalSampler_s, r10.zw).xyzw;
  if (r0.w == 0) {
    r0.w = v6.z + -v6.y;
    r0.w = r5.w * r0.w + v6.y;
    r0.w = v6.x * r0.w;
    r5.zw = r6.xy < float2(0,0);
    r6.xy = float2(1,1) < r6.xy;
    r5.z = (int)r5.z | (int)r6.x;
    r5.z = (int)r5.w | (int)r5.z;
    r5.z = (int)r6.y | (int)r5.z;
    r0.w = r5.z ? 0 : r0.w;
    r5.zw = r12.yz * float2(2,2) + float2(-1,-1);
    r6.x = dot(r5.zw, r5.zw);
    r6.x = 1 + -r6.x;
    r6.x = sqrt(abs(r6.x));
    r6.yzw = r5.www * r9.xyz;
    r6.yzw = r5.zzz * r8.xzw + r6.yzw;
    r4.xyz = r6.xxx * r7.xyz + r6.yzw;
    r6.x = v8.w;
    r6.y = v1.w;
    r6.z = v5.w;
    r6.w = 1;
    r6.xyzw = r10.xyzw * r6.xyzw;
    r6.xyz = r6.xyz * r6.xyz;
    r5.z = dot(r12.yz, r12.yz);
    r5.z = r5.z >= 0.00200000009;
    r5.z = r5.z ? 1.000000 : 0;
    r1.xyz = r6.xyz * r5.zzz;
    r6.x = v6.w;
    r6.y = v10.w;
    r6.z = 1;
    r6.xyz = r6.xyz * r5.zzz;
    r3.w = specularIntensityMult * r5.z;
    r1.w = r6.w * r0.w;
    r2.xy = globalScalars.zy * r6.xy;
    r5.y = emissiveMultiplier * r6.z;
    r2.z = globalScalars2.z;
    r2.w = specularFalloffMult;
    r3.xyz = r0.xyz;
    r5.x = specularFresnel;
    r4.w = -1;
  }
  if (r4.w != 0) {
    r0.xyz = gViewInverse._m30_m31_m32 + -r3.xyz;
    r0.w = dot(r0.xyz, r0.xyz);
    r0.w = rsqrt(r0.w);
    r6.xyz = r0.xyz * r0.www;
    r7.xyz = r0.xyz * r0.www + -gDirectionalLight.xyz;
    r4.w = dot(r7.xyz, r7.xyz);
    r4.w = rsqrt(r4.w);
    r7.xyz = r7.xyz * r4.www;
    r3.w = saturate(r3.w);
    r2.xy = r2.xy * r2.xy;
    r4.w = -500 + r2.w;
    r4.w = max(0, r4.w);
    r2.w = -r4.w + r2.w;
    r4.w = 558 * r4.w;
    r2.w = r2.w * 3 + r4.w;
    r4.w = saturate(dot(r4.xyz, -gDirectionalLight.xyz));
    r8.x = saturate(dot(r6.xyz, r4.xyz));
    r8.y = saturate(dot(r7.xyz, -gDirectionalLight.xyz));
    r5.zw = float2(1,1) + -r8.xy;
    r8.yz = r5.zw * r5.zw;
    r8.yz = r8.yz * r8.yz;
    r5.zw = r8.yz * r5.zw;
    r6.w = 1 + -r5.x;
    r5.zw = r5.xx * r5.zw + r6.ww;
    r8.yz = float2(2,9.99999994e-009) + r2.ww;
    r2.w = 0.125 * r8.y;
    r5.z = -r3.w * r5.z + 1;
    r7.x = dot(r4.xyz, r7.xyz);
    r7.x = saturate(9.99999994e-009 + r7.x);
    r7.x = log2(r7.x);
    r7.x = r8.z * r7.x;
    r7.x = exp2(r7.x);
    r5.w = r7.x * r5.w;
    r5.w = r5.w * r2.w;
    r5.w = r5.w * r3.w;
    r5.w = r5.w * r4.w;
    r4.w = r5.z * r4.w;
    r7.xyz = r1.xyz * r4.www + r5.www;
    r4.w = 0 >= gNumForwardLights;
    if (r4.w == 0) {
      r5.w = gLightColourAndCapsuleExtent[0].w == 0.000000;
      r9.xyz = gLightPositionAndInvDistSqr[0].xyz + -r3.xyz;
      r10.xyz = -gLightPositionAndInvDistSqr[0].xyz + r3.xyz;
      r7.w = dot(r10.xyz, gLightDirectionAndFalloffExponent[0].xyz);
      r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[0].w;
      r7.w = saturate(r7.w / r8.y);
      r7.w = gLightColourAndCapsuleExtent[0].w * r7.w;
      r10.xyz = gLightDirectionAndFalloffExponent[0].xyz * r7.www + gLightPositionAndInvDistSqr[0].xyz;
      r10.xyz = r10.xyz + -r3.xyz;
      r9.xyz = r5.www ? r9.xyz : r10.xyz;
      r5.w = dot(r9.xyz, r9.xyz);
      r9.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r9.xyz;
      r7.w = dot(r9.xyz, r9.xyz);
      r7.w = rsqrt(r7.w);
      r9.xyz = r9.xyz * r7.www;
      r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[0].w + 1);
      r7.w = 1 + -gLightDirectionAndFalloffExponent[0].w;
      r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[0].w;
      r5.w = r5.w / r7.w;
      r7.w = dot(r9.xyz, -gLightDirectionAndFalloffExponent[0].xyz);
      r7.w = saturate(r7.w * gLightConeScale[0] + gLightConeOffset[0]);
      r8.y = saturate(dot(r9.xyz, r4.xyz));
      r7.w = r8.y * r7.w;
      r8.y = r7.w * r5.w;
      r10.xyz = gLightColourAndCapsuleExtent[0].xyz * r8.yyy;
      r10.xyz = r10.xyz * r1.xyz;
      r9.xyz = r0.xyz * r0.www + r9.xyz;
      r8.y = dot(r9.xyz, r9.xyz);
      r8.y = rsqrt(r8.y);
      r9.xyz = r9.xyz * r8.yyy;
      r8.y = saturate(dot(r9.xyz, r6.xyz));
      r8.y = 1 + -r8.y;
      r8.w = r8.y * r8.y;
      r8.w = r8.w * r8.w;
      r8.y = r8.y * r8.w;
      r8.y = r5.x * r8.y + r6.w;
      r8.w = saturate(dot(r9.xyz, r4.xyz));
      r8.w = log2(r8.w);
      r8.w = r8.z * r8.w;
      r8.w = exp2(r8.w);
      r8.y = r8.y * r8.w;
      r7.w = r8.y * r7.w;
      r5.w = r7.w * r5.w;
      r5.w = r5.w * r2.w;
      r9.xyz = gLightColourAndCapsuleExtent[0].xyz * r5.www;
    } else {
      r10.xyz = float3(0,0,0);
      r9.xyz = float3(0,0,0);
    }
    r5.w = 0 < gNumForwardLights;
    if (r5.w != 0) {
      r7.w = 1 >= gNumForwardLights;
      r5.w = (int)r4.w | (int)r5.w;
      r4.w = r7.w ? r5.w : r4.w;
      if (r4.w == 0) {
        r5.w = gLightColourAndCapsuleExtent[1].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[1].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[1].xyz + r3.xyz;
        r7.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[1].xyz);
        r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[1].w;
        r7.w = saturate(r7.w / r8.y);
        r7.w = gLightColourAndCapsuleExtent[1].w * r7.w;
        r12.xyz = gLightDirectionAndFalloffExponent[1].xyz * r7.www + gLightPositionAndInvDistSqr[1].xyz;
        r12.xyz = r12.xyz + -r3.xyz;
        r11.xyz = r5.www ? r11.xyz : r12.xyz;
        r5.w = dot(r11.xyz, r11.xyz);
        r11.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r11.xyz;
        r7.w = dot(r11.xyz, r11.xyz);
        r7.w = rsqrt(r7.w);
        r11.xyz = r11.xyz * r7.www;
        r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[1].w + 1);
        r7.w = 1 + -gLightDirectionAndFalloffExponent[1].w;
        r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[1].w;
        r5.w = r5.w / r7.w;
        r7.w = dot(r11.xyz, -gLightDirectionAndFalloffExponent[1].xyz);
        r7.w = saturate(r7.w * gLightConeScale[1] + gLightConeOffset[1]);
        r8.y = saturate(dot(r11.xyz, r4.xyz));
        r7.w = r8.y * r7.w;
        r8.y = r7.w * r5.w;
        r12.xyz = gLightColourAndCapsuleExtent[1].xyz * r8.yyy;
        r10.xyz = r12.xyz * r1.xyz + r10.xyz;
        r11.xyz = r0.xyz * r0.www + r11.xyz;
        r8.y = dot(r11.xyz, r11.xyz);
        r8.y = rsqrt(r8.y);
        r11.xyz = r11.xyz * r8.yyy;
        r8.y = saturate(dot(r11.xyz, r6.xyz));
        r8.y = 1 + -r8.y;
        r8.w = r8.y * r8.y;
        r8.w = r8.w * r8.w;
        r8.y = r8.y * r8.w;
        r8.y = r5.x * r8.y + r6.w;
        r8.w = saturate(dot(r11.xyz, r4.xyz));
        r8.w = log2(r8.w);
        r8.w = r8.z * r8.w;
        r8.w = exp2(r8.w);
        r8.y = r8.y * r8.w;
        r7.w = r8.y * r7.w;
        r5.w = r7.w * r5.w;
        r5.w = r5.w * r2.w;
        r9.xyz = r5.www * gLightColourAndCapsuleExtent[1].xyz + r9.xyz;
      }
    } else {
      r4.w = -1;
    }
    if (r4.w == 0) {
      r5.w = 2 >= gNumForwardLights;
      r4.w = (int)r4.w | (int)r5.w;
      if (r4.w == 0) {
        r5.w = gLightColourAndCapsuleExtent[2].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[2].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[2].xyz + r3.xyz;
        r7.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[2].xyz);
        r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[2].w;
        r7.w = saturate(r7.w / r8.y);
        r7.w = gLightColourAndCapsuleExtent[2].w * r7.w;
        r12.xyz = gLightDirectionAndFalloffExponent[2].xyz * r7.www + gLightPositionAndInvDistSqr[2].xyz;
        r12.xyz = r12.xyz + -r3.xyz;
        r11.xyz = r5.www ? r11.xyz : r12.xyz;
        r5.w = dot(r11.xyz, r11.xyz);
        r11.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r11.xyz;
        r7.w = dot(r11.xyz, r11.xyz);
        r7.w = rsqrt(r7.w);
        r11.xyz = r11.xyz * r7.www;
        r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[2].w + 1);
        r7.w = 1 + -gLightDirectionAndFalloffExponent[2].w;
        r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[2].w;
        r5.w = r5.w / r7.w;
        r7.w = dot(r11.xyz, -gLightDirectionAndFalloffExponent[2].xyz);
        r7.w = saturate(r7.w * gLightConeScale[2] + gLightConeOffset[2]);
        r8.y = saturate(dot(r11.xyz, r4.xyz));
        r7.w = r8.y * r7.w;
        r8.y = r7.w * r5.w;
        r12.xyz = gLightColourAndCapsuleExtent[2].xyz * r8.yyy;
        r10.xyz = r12.xyz * r1.xyz + r10.xyz;
        r11.xyz = r0.xyz * r0.www + r11.xyz;
        r8.y = dot(r11.xyz, r11.xyz);
        r8.y = rsqrt(r8.y);
        r11.xyz = r11.xyz * r8.yyy;
        r8.y = saturate(dot(r11.xyz, r6.xyz));
        r8.y = 1 + -r8.y;
        r8.w = r8.y * r8.y;
        r8.w = r8.w * r8.w;
        r8.y = r8.y * r8.w;
        r8.y = r5.x * r8.y + r6.w;
        r8.w = saturate(dot(r11.xyz, r4.xyz));
        r8.w = log2(r8.w);
        r8.w = r8.z * r8.w;
        r8.w = exp2(r8.w);
        r8.y = r8.y * r8.w;
        r7.w = r8.y * r7.w;
        r5.w = r7.w * r5.w;
        r5.w = r5.w * r2.w;
        r9.xyz = r5.www * gLightColourAndCapsuleExtent[2].xyz + r9.xyz;
      }
    } else {
      r4.w = -1;
    }
    if (r4.w == 0) {
      r5.w = 3 >= gNumForwardLights;
      r4.w = (int)r4.w | (int)r5.w;
      if (r4.w == 0) {
        r5.w = gLightColourAndCapsuleExtent[3].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[3].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[3].xyz + r3.xyz;
        r7.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[3].xyz);
        r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[3].w;
        r7.w = saturate(r7.w / r8.y);
        r7.w = gLightColourAndCapsuleExtent[3].w * r7.w;
        r12.xyz = gLightDirectionAndFalloffExponent[3].xyz * r7.www + gLightPositionAndInvDistSqr[3].xyz;
        r12.xyz = r12.xyz + -r3.xyz;
        r11.xyz = r5.www ? r11.xyz : r12.xyz;
        r5.w = dot(r11.xyz, r11.xyz);
        r11.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r11.xyz;
        r7.w = dot(r11.xyz, r11.xyz);
        r7.w = rsqrt(r7.w);
        r11.xyz = r11.xyz * r7.www;
        r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[3].w + 1);
        r7.w = 1 + -gLightDirectionAndFalloffExponent[3].w;
        r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[3].w;
        r5.w = r5.w / r7.w;
        r7.w = dot(r11.xyz, -gLightDirectionAndFalloffExponent[3].xyz);
        r7.w = saturate(r7.w * gLightConeScale[3] + gLightConeOffset[3]);
        r8.y = saturate(dot(r11.xyz, r4.xyz));
        r7.w = r8.y * r7.w;
        r8.y = r7.w * r5.w;
        r12.xyz = gLightColourAndCapsuleExtent[3].xyz * r8.yyy;
        r10.xyz = r12.xyz * r1.xyz + r10.xyz;
        r11.xyz = r0.xyz * r0.www + r11.xyz;
        r8.y = dot(r11.xyz, r11.xyz);
        r8.y = rsqrt(r8.y);
        r11.xyz = r11.xyz * r8.yyy;
        r8.y = saturate(dot(r11.xyz, r6.xyz));
        r8.y = 1 + -r8.y;
        r8.w = r8.y * r8.y;
        r8.w = r8.w * r8.w;
        r8.y = r8.y * r8.w;
        r8.y = r5.x * r8.y + r6.w;
        r8.w = saturate(dot(r11.xyz, r4.xyz));
        r8.w = log2(r8.w);
        r8.w = r8.z * r8.w;
        r8.w = exp2(r8.w);
        r8.y = r8.y * r8.w;
        r7.w = r8.y * r7.w;
        r5.w = r7.w * r5.w;
        r5.w = r5.w * r2.w;
        r9.xyz = r5.www * gLightColourAndCapsuleExtent[3].xyz + r9.xyz;
      }
    } else {
      r4.w = -1;
    }
    if (r4.w == 0) {
      r5.w = 4 >= gNumForwardLights;
      r4.w = (int)r4.w | (int)r5.w;
      if (r4.w == 0) {
        r5.w = gLightColourAndCapsuleExtent[4].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[4].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[4].xyz + r3.xyz;
        r7.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[4].xyz);
        r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[4].w;
        r7.w = saturate(r7.w / r8.y);
        r7.w = gLightColourAndCapsuleExtent[4].w * r7.w;
        r12.xyz = gLightDirectionAndFalloffExponent[4].xyz * r7.www + gLightPositionAndInvDistSqr[4].xyz;
        r12.xyz = r12.xyz + -r3.xyz;
        r11.xyz = r5.www ? r11.xyz : r12.xyz;
        r5.w = dot(r11.xyz, r11.xyz);
        r11.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r11.xyz;
        r7.w = dot(r11.xyz, r11.xyz);
        r7.w = rsqrt(r7.w);
        r11.xyz = r11.xyz * r7.www;
        r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[4].w + 1);
        r7.w = 1 + -gLightDirectionAndFalloffExponent[4].w;
        r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[4].w;
        r5.w = r5.w / r7.w;
        r7.w = dot(r11.xyz, -gLightDirectionAndFalloffExponent[4].xyz);
        r7.w = saturate(r7.w * gLightConeScale[4] + gLightConeOffset[4]);
        r8.y = saturate(dot(r11.xyz, r4.xyz));
        r7.w = r8.y * r7.w;
        r8.y = r7.w * r5.w;
        r12.xyz = gLightColourAndCapsuleExtent[4].xyz * r8.yyy;
        r10.xyz = r12.xyz * r1.xyz + r10.xyz;
        r11.xyz = r0.xyz * r0.www + r11.xyz;
        r8.y = dot(r11.xyz, r11.xyz);
        r8.y = rsqrt(r8.y);
        r11.xyz = r11.xyz * r8.yyy;
        r8.y = saturate(dot(r11.xyz, r6.xyz));
        r8.y = 1 + -r8.y;
        r8.w = r8.y * r8.y;
        r8.w = r8.w * r8.w;
        r8.y = r8.y * r8.w;
        r8.y = r5.x * r8.y + r6.w;
        r8.w = saturate(dot(r11.xyz, r4.xyz));
        r8.w = log2(r8.w);
        r8.w = r8.z * r8.w;
        r8.w = exp2(r8.w);
        r8.y = r8.y * r8.w;
        r7.w = r8.y * r7.w;
        r5.w = r7.w * r5.w;
        r5.w = r5.w * r2.w;
        r9.xyz = r5.www * gLightColourAndCapsuleExtent[4].xyz + r9.xyz;
      }
    } else {
      r4.w = -1;
    }
    if (r4.w == 0) {
      r5.w = 5 >= gNumForwardLights;
      r4.w = (int)r4.w | (int)r5.w;
      if (r4.w == 0) {
        r5.w = gLightColourAndCapsuleExtent[5].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[5].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[5].xyz + r3.xyz;
        r7.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[5].xyz);
        r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[5].w;
        r7.w = saturate(r7.w / r8.y);
        r7.w = gLightColourAndCapsuleExtent[5].w * r7.w;
        r12.xyz = gLightDirectionAndFalloffExponent[5].xyz * r7.www + gLightPositionAndInvDistSqr[5].xyz;
        r12.xyz = r12.xyz + -r3.xyz;
        r11.xyz = r5.www ? r11.xyz : r12.xyz;
        r5.w = dot(r11.xyz, r11.xyz);
        r11.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r11.xyz;
        r7.w = dot(r11.xyz, r11.xyz);
        r7.w = rsqrt(r7.w);
        r11.xyz = r11.xyz * r7.www;
        r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[5].w + 1);
        r7.w = 1 + -gLightDirectionAndFalloffExponent[5].w;
        r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[5].w;
        r5.w = r5.w / r7.w;
        r7.w = dot(r11.xyz, -gLightDirectionAndFalloffExponent[5].xyz);
        r7.w = saturate(r7.w * gLightConeScale[5] + gLightConeOffset[5]);
        r8.y = saturate(dot(r11.xyz, r4.xyz));
        r7.w = r8.y * r7.w;
        r8.y = r7.w * r5.w;
        r12.xyz = gLightColourAndCapsuleExtent[5].xyz * r8.yyy;
        r10.xyz = r12.xyz * r1.xyz + r10.xyz;
        r11.xyz = r0.xyz * r0.www + r11.xyz;
        r8.y = dot(r11.xyz, r11.xyz);
        r8.y = rsqrt(r8.y);
        r11.xyz = r11.xyz * r8.yyy;
        r8.y = saturate(dot(r11.xyz, r6.xyz));
        r8.y = 1 + -r8.y;
        r8.w = r8.y * r8.y;
        r8.w = r8.w * r8.w;
        r8.y = r8.y * r8.w;
        r8.y = r5.x * r8.y + r6.w;
        r8.w = saturate(dot(r11.xyz, r4.xyz));
        r8.w = log2(r8.w);
        r8.w = r8.z * r8.w;
        r8.w = exp2(r8.w);
        r8.y = r8.y * r8.w;
        r7.w = r8.y * r7.w;
        r5.w = r7.w * r5.w;
        r5.w = r5.w * r2.w;
        r9.xyz = r5.www * gLightColourAndCapsuleExtent[5].xyz + r9.xyz;
      }
    } else {
      r4.w = -1;
    }
    if (r4.w == 0) {
      r5.w = 6 >= gNumForwardLights;
      r4.w = (int)r4.w | (int)r5.w;
      if (r4.w == 0) {
        r5.w = gLightColourAndCapsuleExtent[6].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[6].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[6].xyz + r3.xyz;
        r7.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[6].xyz);
        r8.y = 9.99999975e-005 + gLightColourAndCapsuleExtent[6].w;
        r7.w = saturate(r7.w / r8.y);
        r7.w = gLightColourAndCapsuleExtent[6].w * r7.w;
        r12.xyz = gLightDirectionAndFalloffExponent[6].xyz * r7.www + gLightPositionAndInvDistSqr[6].xyz;
        r12.xyz = r12.xyz + -r3.xyz;
        r11.xyz = r5.www ? r11.xyz : r12.xyz;
        r5.w = dot(r11.xyz, r11.xyz);
        r11.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r11.xyz;
        r7.w = dot(r11.xyz, r11.xyz);
        r7.w = rsqrt(r7.w);
        r11.xyz = r11.xyz * r7.www;
        r5.w = saturate(-r5.w * gLightPositionAndInvDistSqr[6].w + 1);
        r7.w = 1 + -gLightDirectionAndFalloffExponent[6].w;
        r7.w = r7.w * r5.w + gLightDirectionAndFalloffExponent[6].w;
        r5.w = r5.w / r7.w;
        r7.w = dot(r11.xyz, -gLightDirectionAndFalloffExponent[6].xyz);
        r7.w = saturate(r7.w * gLightConeScale[6] + gLightConeOffset[6]);
        r8.y = saturate(dot(r11.xyz, r4.xyz));
        r7.w = r8.y * r7.w;
        r8.y = r7.w * r5.w;
        r12.xyz = gLightColourAndCapsuleExtent[6].xyz * r8.yyy;
        r10.xyz = r12.xyz * r1.xyz + r10.xyz;
        r11.xyz = r0.xyz * r0.www + r11.xyz;
        r8.y = dot(r11.xyz, r11.xyz);
        r8.y = rsqrt(r8.y);
        r11.xyz = r11.xyz * r8.yyy;
        r8.y = saturate(dot(r11.xyz, r6.xyz));
        r8.y = 1 + -r8.y;
        r8.w = r8.y * r8.y;
        r8.w = r8.w * r8.w;
        r8.y = r8.y * r8.w;
        r8.y = r5.x * r8.y + r6.w;
        r8.w = saturate(dot(r11.xyz, r4.xyz));
        r8.w = log2(r8.w);
        r8.w = r8.z * r8.w;
        r8.w = exp2(r8.w);
        r8.y = r8.y * r8.w;
        r7.w = r8.y * r7.w;
        r5.w = r7.w * r5.w;
        r5.w = r5.w * r2.w;
        r9.xyz = r5.www * gLightColourAndCapsuleExtent[6].xyz + r9.xyz;
      }
    } else {
      r4.w = -1;
    }
    if (r4.w == 0) {
      r5.w = 7 >= gNumForwardLights;
      r4.w = (int)r4.w | (int)r5.w;
      if (r4.w == 0) {
        r4.w = gLightColourAndCapsuleExtent[7].w == 0.000000;
        r11.xyz = gLightPositionAndInvDistSqr[7].xyz + -r3.xyz;
        r12.xyz = -gLightPositionAndInvDistSqr[7].xyz + r3.xyz;
        r5.w = dot(r12.xyz, gLightDirectionAndFalloffExponent[7].xyz);
        r7.w = 9.99999975e-005 + gLightColourAndCapsuleExtent[7].w;
        r5.w = saturate(r5.w / r7.w);
        r5.w = gLightColourAndCapsuleExtent[7].w * r5.w;
        r12.xyz = gLightDirectionAndFalloffExponent[7].xyz * r5.www + gLightPositionAndInvDistSqr[7].xyz;
        r3.xyz = r12.xyz + -r3.xyz;
        r3.xyz = r4.www ? r11.xyz : r3.xyz;
        r4.w = dot(r3.xyz, r3.xyz);
        r3.xyz = float3(9.99999997e-007,9.99999997e-007,9.99999997e-007) + r3.xyz;
        r5.w = dot(r3.xyz, r3.xyz);
        r5.w = rsqrt(r5.w);
        r3.xyz = r5.www * r3.xyz;
        r4.w = saturate(-r4.w * gLightPositionAndInvDistSqr[7].w + 1);
        r5.w = 1 + -gLightDirectionAndFalloffExponent[7].w;
        r5.w = r5.w * r4.w + gLightDirectionAndFalloffExponent[7].w;
        r4.w = r4.w / r5.w;
        r5.w = dot(r3.xyz, -gLightDirectionAndFalloffExponent[7].xyz);
        r5.w = saturate(r5.w * gLightConeScale[7] + gLightConeOffset[7]);
        r7.w = saturate(dot(r3.xyz, r4.xyz));
        r5.w = r7.w * r5.w;
        r7.w = r5.w * r4.w;
        r11.xyz = gLightColourAndCapsuleExtent[7].xyz * r7.www;
        r10.xyz = r11.xyz * r1.xyz + r10.xyz;
        r0.xyz = r0.xyz * r0.www + r3.xyz;
        r0.w = dot(r0.xyz, r0.xyz);
        r0.w = rsqrt(r0.w);
        r0.xyz = r0.xyz * r0.www;
        r0.w = saturate(dot(r0.xyz, r6.xyz));
        r0.w = 1 + -r0.w;
        r3.x = r0.w * r0.w;
        r3.x = r3.x * r3.x;
        r0.w = r3.x * r0.w;
        r0.w = r5.x * r0.w + r6.w;
        r0.x = saturate(dot(r0.xyz, r4.xyz));
        r0.x = log2(r0.x);
        r0.x = r8.z * r0.x;
        r0.x = exp2(r0.x);
        r0.x = r0.w * r0.x;
        r0.x = r0.x * r5.w;
        r0.x = r0.x * r4.w;
        r0.x = r0.x * r2.w;
        r9.xyz = r0.xxx * gLightColourAndCapsuleExtent[7].xyz + r9.xyz;
      }
    }
    r0.x = r5.z * r5.z;
    r0.y = r3.w * r3.w;
    r0.yzw = r0.yyy * r9.xyz;
    r0.xyz = r0.xxx * r10.xyz + r0.yzw;
    r0.xyz = r7.xyz * gDirectionalColour.xyz + r0.xyz;
    r0.w = gLightNaturalAmbient0.w + r4.z;
    r0.w = gLightNaturalAmbient1.w * r0.w;
    r0.w = max(0, r0.w);
    r3.xyz = gLightArtificialExtAmbient0.xyz * r0.www + gLightArtificialExtAmbient1.xyz;
    r2.w = 1 + -r2.z;
    r6.xyz = gLightArtificialIntAmbient0.xyz * r0.www + gLightArtificialIntAmbient1.xyz;
    r6.xyz = r6.xyz * r2.zzz;
    r3.xyz = r3.xyz * r2.www + r6.xyz;
    r2.yzw = r3.xyz * r2.yyy;
    r3.xyz = gLightNaturalAmbient0.xyz * r0.www + gLightNaturalAmbient1.xyz;
    r6.x = gLightArtificialIntAmbient1.w;
    r6.y = gLightArtificialExtAmbient0.w;
    r6.z = gLightArtificialExtAmbient1.w;
    r0.w = saturate(dot(r6.xyz, r4.xyz));
    r3.xyz = gDirectionalAmbientColour.xyz * r0.www + r3.xyz;
    r2.xyz = r3.xyz * r2.xxx + r2.yzw;
    r2.xyz = r2.xyz * r5.zzz;
    r0.xyz = r2.xyz * r1.xyz + r0.xyz;
    r0.w = r8.x * r5.y;
    r0.xyz = r1.xyz * r0.www + r0.xyz;
    r1.w = globalScalars.x * r1.w;
  } else {
    r0.xyz = float3(0,0,0);
    r1.w = 0;
  }
  r1.xyz = globalScalars3.zzz * r0.xyz;
  o0.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16
//   float4 globalScalars2;             // Offset:  208 Size:    16
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16
//   float4 gDirectionalColour;         // Offset:   16 Size:    16
//   int gNumForwardLights;             // Offset:   32 Size:     4
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128
//   float gLightConeScale[8];          // Offset:  432 Size:   116
//   float gLightConeOffset[8];         // Offset:  560 Size:   116
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16
//   float4 globalFogParams[5];         // Offset:  800 Size:    80 [unused]
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer vfx_decaldyn_locals
// {
//
//   float polyRejectThreshold;         // Offset:    0 Size:     4
//   float specularFalloffMult;         // Offset:    4 Size:     4
//   float specularIntensityMult;       // Offset:    8 Size:     4
//   float specularFresnel;             // Offset:   12 Size:     4
//   float emissiveMultiplier;          // Offset:   16 Size:     4
//   float parallaxScaleBias;           // Offset:   20 Size:     4
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDecalSampler                     sampler      NA          NA    2        1
// gDecalNormalSampler               sampler      NA          NA    3        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// gDecalSampler                     texture  float4          2d    2        1
// gDecalNormalSampler               texture  float4          2d    3        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_globals                  cbuffer      NA          NA    3        1
// vfx_decaldyn_locals               cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb3[50], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.w
dcl_output o0.xyzw
dcl_temps 16
mul r0.xy, v0.xyxx, cb13[16].zwzz
sample r0.xyzw, r0.xyxx, t12.xyzw, s12
add r0.x, -r0.x, cb13[17].w
add r0.x, r0.x, l(1.000000)
div r0.x, cb13[17].z, r0.x
div r0.yzw, v2.xxyz, v2.wwww
ne r1.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.y, v2.w, l(1.000000)
and r1.x, r1.y, r1.x
if_nz r1.x
  ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r1.y, r0.x, -r1.y
  mul r1.x, r1.y, r1.x
  mul r1.x, r1.x, cb13[17].x
  mad r1.xyz, -cb1[12].xyzx, r1.xxxx, cb1[15].xyzx
else 
  ld r2.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r1.xyz, r2.xyzx, cb1[15].xyzx
endif 
mad r0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
deriv_rtx r1.xyz, r0.zxyz
deriv_rty r2.xyz, r0.yzxy
mul r3.xyz, r1.xyzx, r2.xyzx
mad r1.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, v5.xyzx, r1.xyzx
lt r0.w, r0.w, cb11[0].x
if_nz r0.w
  mov r1.xyzw, l(0,0,0,0)
  mov r2.xyzw, l(0,0,0,0)
  mov r5.xy, l(0,0,0,0)
  mov r3.xyzw, l(0,0,0,0)
  mov r4.xyzw, l(0,0,0,0)
endif 
add r6.xyz, r0.xyzx, -v1.xyzx
dp3 r5.z, v4.xyzx, r6.xyzx
dp3 r5.w, -v3.xyzx, r6.xyzx
mul r6.x, r5.z, v4.w
mul r6.y, r5.w, v3.w
mad r5.zw, r6.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
mad r6.xy, r5.zwzz, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mad r6.xy, v9.xyxx, r6.xyxx, r5.zwzz
lt r5.z, l(0.000000), v9.z
div r6.w, v9.w, v9.z
round_ni r7.x, r6.w
add r6.w, r6.w, -r7.x
add r6.w, -r6.w, l(1.000000)
div r7.x, l(1.000000, 1.000000, 1.000000, 1.000000), v3.w
add r7.x, r7.x, r7.x
div r7.x, r7.x, v9.z
mad r6.w, r6.y, r7.x, r6.w
movc r6.z, r5.z, r6.w, r6.y
add r6.zw, r6.xxxz, v7.xxxy
mul r6.zw, r6.zzzw, v7.zzzw
mul r7.xyz, v3.yzxy, v4.zxyz
mad r7.xyz, v4.yzxy, v3.zxyz, -r7.xyzx
dp3 r5.z, r7.xyzx, r7.xyzx
rsq r5.z, r5.z
mul r7.xyz, r5.zzzz, r7.xyzx
mad r8.xy, v9.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mul r8.xzw, r8.xxxx, v4.xxyz
mul r9.xyz, r8.yyyy, -v3.xyzx
dp3 r10.x, r8.xzwx, v8.xyzx
dp3 r10.y, r9.xyzx, v8.xyzx
dp3 r10.z, r7.xyzx, v8.xyzx
sample r11.xyzw, r6.zwzz, t3.xyzw, s3
dp3 r5.z, r10.xyzx, r10.xyzx
rsq r5.z, r5.z
mul r10.xy, r5.zzzz, r10.xyxx
mul r10.xy, -r10.xyxx, cb11[1].yyyy
mov r10.zw, r6.zzzw
mov r12.yz, r11.xxyx
mov r12.x, l(-1.000000)
mov r12.w, -r11.w
mov r5.z, l(0)
loop 
  ige r7.w, r5.z, l(8)
  breakc_nz r7.w
  mad r13.xy, r10.xyxx, l(0.125000, 0.125000, 0.000000, 0.000000), r10.zwzz
  sample r14.xyzw, r13.xyxx, t3.xyzw, s3
  lt r7.w, r12.x, r12.w
  add r15.x, r12.x, l(0.125000)
  movc r10.zw, r7.wwww, r13.xxxy, r10.zzzw
  mul r15.yzw, r14.xxyw, l(0.000000, 1.000000, 1.000000, -1.000000)
  movc r12.xyzw, r7.wwww, r15.xyzw, r12.xyzw
  iadd r5.z, r5.z, l(1)
endloop 
sample r10.xyzw, r10.zwzz, t2.xyzw, s2
if_z r0.w
  add r0.w, -v6.y, v6.z
  mad r0.w, r5.w, r0.w, v6.y
  mul r0.w, r0.w, v6.x
  lt r5.zw, r6.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  lt r6.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r6.xyxx
  or r5.z, r5.z, r6.x
  or r5.z, r5.w, r5.z
  or r5.z, r6.y, r5.z
  movc r0.w, r5.z, l(0), r0.w
  mad r5.zw, r12.yyyz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  dp2 r6.x, r5.zwzz, r5.zwzz
  add r6.x, -r6.x, l(1.000000)
  sqrt r6.x, |r6.x|
  mul r6.yzw, r9.xxyz, r5.wwww
  mad r6.yzw, r5.zzzz, r8.xxzw, r6.yyzw
  mad r4.xyz, r6.xxxx, r7.xyzx, r6.yzwy
  mov r6.x, v8.w
  mov r6.y, v1.w
  mov r6.z, v5.w
  mov r6.w, l(1.000000)
  mul r6.xyzw, r6.xyzw, r10.xyzw
  mul r6.xyz, r6.xyzx, r6.xyzx
  dp2 r5.z, r12.yzyy, r12.yzyy
  ge r5.z, r5.z, l(0.002000)
  and r5.z, r5.z, l(0x3f800000)
  mul r1.xyz, r5.zzzz, r6.xyzx
  mov r6.x, v6.w
  mov r6.y, v10.w
  mov r6.z, l(1.000000)
  mul r6.xyz, r5.zzzz, r6.xyzx
  mul r3.w, r5.z, cb11[0].z
  mul r1.w, r0.w, r6.w
  mul r2.xy, r6.xyxx, cb2[12].zyzz
  mul r5.y, r6.z, cb11[1].x
  mov r2.z, cb2[13].z
  mov r2.w, cb11[0].y
  mov r3.xyz, r0.xyzx
  mov r5.x, cb11[0].w
  mov r4.w, l(-1)
endif 
if_nz r4.w
  add r0.xyz, -r3.xyzx, cb1[15].xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r0.xyzx
  mad r7.xyz, r0.xyzx, r0.wwww, -cb3[0].xyzx
  dp3 r4.w, r7.xyzx, r7.xyzx
  rsq r4.w, r4.w
  mul r7.xyz, r4.wwww, r7.xyzx
  mov_sat r3.w, r3.w
  mul r2.xy, r2.xyxx, r2.xyxx
  add r4.w, r2.w, l(-500.000000)
  max r4.w, r4.w, l(0.000000)
  add r2.w, r2.w, -r4.w
  mul r4.w, r4.w, l(558.000000)
  mad r2.w, r2.w, l(3.000000), r4.w
  dp3_sat r4.w, r4.xyzx, -cb3[0].xyzx
  dp3_sat r8.x, r6.xyzx, r4.xyzx
  dp3_sat r8.y, r7.xyzx, -cb3[0].xyzx
  add r5.zw, -r8.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r8.yz, r5.zzwz, r5.zzwz
  mul r8.yz, r8.yyzy, r8.yyzy
  mul r5.zw, r5.zzzw, r8.yyyz
  add r6.w, -r5.x, l(1.000000)
  mad r5.zw, r5.xxxx, r5.zzzw, r6.wwww
  add r8.yz, r2.wwww, l(0.000000, 2.000000, 0.000000, 0.000000)
  mul r2.w, r8.y, l(0.125000)
  mad r5.z, -r3.w, r5.z, l(1.000000)
  dp3 r7.x, r4.xyzx, r7.xyzx
  add_sat r7.x, r7.x, l(0.000000)
  log r7.x, r7.x
  mul r7.x, r7.x, r8.z
  exp r7.x, r7.x
  mul r5.w, r5.w, r7.x
  mul r5.w, r2.w, r5.w
  mul r5.w, r3.w, r5.w
  mul r5.w, r4.w, r5.w
  mul r4.w, r4.w, r5.z
  mad r7.xyz, r1.xyzx, r4.wwww, r5.wwww
  ige r4.w, l(0), cb3[2].x
  if_z r4.w
    eq r5.w, cb3[19].w, l(0.000000)
    add r9.xyz, -r3.xyzx, cb3[3].xyzx
    add r10.xyz, r3.xyzx, -cb3[3].xyzx
    dp3 r7.w, r10.xyzx, cb3[11].xyzx
    add r8.y, cb3[19].w, l(0.000100)
    div_sat r7.w, r7.w, r8.y
    mul r7.w, r7.w, cb3[19].w
    mad r10.xyz, cb3[11].xyzx, r7.wwww, cb3[3].xyzx
    add r10.xyz, -r3.xyzx, r10.xyzx
    movc r9.xyz, r5.wwww, r9.xyzx, r10.xyzx
    dp3 r5.w, r9.xyzx, r9.xyzx
    add r9.xyz, r9.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
    dp3 r7.w, r9.xyzx, r9.xyzx
    rsq r7.w, r7.w
    mul r9.xyz, r7.wwww, r9.xyzx
    mad_sat r5.w, -r5.w, cb3[3].w, l(1.000000)
    add r7.w, -cb3[11].w, l(1.000000)
    mad r7.w, r7.w, r5.w, cb3[11].w
    div r5.w, r5.w, r7.w
    dp3 r7.w, r9.xyzx, -cb3[11].xyzx
    mad_sat r7.w, r7.w, cb3[27].x, cb3[35].x
    dp3_sat r8.y, r9.xyzx, r4.xyzx
    mul r7.w, r7.w, r8.y
    mul r8.y, r5.w, r7.w
    mul r10.xyz, r8.yyyy, cb3[19].xyzx
    mul r10.xyz, r1.xyzx, r10.xyzx
    mad r9.xyz, r0.xyzx, r0.wwww, r9.xyzx
    dp3 r8.y, r9.xyzx, r9.xyzx
    rsq r8.y, r8.y
    mul r9.xyz, r8.yyyy, r9.xyzx
    dp3_sat r8.y, r9.xyzx, r6.xyzx
    add r8.y, -r8.y, l(1.000000)
    mul r8.w, r8.y, r8.y
    mul r8.w, r8.w, r8.w
    mul r8.y, r8.w, r8.y
    mad r8.y, r5.x, r8.y, r6.w
    dp3_sat r8.w, r9.xyzx, r4.xyzx
    log r8.w, r8.w
    mul r8.w, r8.w, r8.z
    exp r8.w, r8.w
    mul r8.y, r8.w, r8.y
    mul r7.w, r7.w, r8.y
    mul r5.w, r5.w, r7.w
    mul r5.w, r2.w, r5.w
    mul r9.xyz, r5.wwww, cb3[19].xyzx
  else 
    mov r10.xyz, l(0,0,0,0)
    mov r9.xyz, l(0,0,0,0)
  endif 
  ilt r5.w, l(0), cb3[2].x
  if_nz r5.w
    ige r7.w, l(1), cb3[2].x
    or r5.w, r4.w, r5.w
    movc r4.w, r7.w, r5.w, r4.w
    if_z r4.w
      eq r5.w, cb3[20].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[4].xyzx
      add r12.xyz, r3.xyzx, -cb3[4].xyzx
      dp3 r7.w, r12.xyzx, cb3[12].xyzx
      add r8.y, cb3[20].w, l(0.000100)
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[20].w
      mad r12.xyz, cb3[12].xyzx, r7.wwww, cb3[4].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r5.wwww, r11.xyzx, r12.xyzx
      dp3 r5.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r5.w, -r5.w, cb3[4].w, l(1.000000)
      add r7.w, -cb3[12].w, l(1.000000)
      mad r7.w, r7.w, r5.w, cb3[12].w
      div r5.w, r5.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[12].xyzx
      mad_sat r7.w, r7.w, cb3[28].x, cb3[36].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r5.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[20].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r5.w, r5.w, r7.w
      mul r5.w, r2.w, r5.w
      mad r9.xyz, r5.wwww, cb3[20].xyzx, r9.xyzx
    endif 
  else 
    mov r4.w, l(-1)
  endif 
  if_z r4.w
    ige r5.w, l(2), cb3[2].x
    or r4.w, r4.w, r5.w
    if_z r4.w
      eq r5.w, cb3[21].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[5].xyzx
      add r12.xyz, r3.xyzx, -cb3[5].xyzx
      dp3 r7.w, r12.xyzx, cb3[13].xyzx
      add r8.y, cb3[21].w, l(0.000100)
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[21].w
      mad r12.xyz, cb3[13].xyzx, r7.wwww, cb3[5].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r5.wwww, r11.xyzx, r12.xyzx
      dp3 r5.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r5.w, -r5.w, cb3[5].w, l(1.000000)
      add r7.w, -cb3[13].w, l(1.000000)
      mad r7.w, r7.w, r5.w, cb3[13].w
      div r5.w, r5.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[13].xyzx
      mad_sat r7.w, r7.w, cb3[29].x, cb3[37].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r5.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[21].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r5.w, r5.w, r7.w
      mul r5.w, r2.w, r5.w
      mad r9.xyz, r5.wwww, cb3[21].xyzx, r9.xyzx
    endif 
  else 
    mov r4.w, l(-1)
  endif 
  if_z r4.w
    ige r5.w, l(3), cb3[2].x
    or r4.w, r4.w, r5.w
    if_z r4.w
      eq r5.w, cb3[22].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[6].xyzx
      add r12.xyz, r3.xyzx, -cb3[6].xyzx
      dp3 r7.w, r12.xyzx, cb3[14].xyzx
      add r8.y, cb3[22].w, l(0.000100)
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[22].w
      mad r12.xyz, cb3[14].xyzx, r7.wwww, cb3[6].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r5.wwww, r11.xyzx, r12.xyzx
      dp3 r5.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r5.w, -r5.w, cb3[6].w, l(1.000000)
      add r7.w, -cb3[14].w, l(1.000000)
      mad r7.w, r7.w, r5.w, cb3[14].w
      div r5.w, r5.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[14].xyzx
      mad_sat r7.w, r7.w, cb3[30].x, cb3[38].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r5.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[22].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r5.w, r5.w, r7.w
      mul r5.w, r2.w, r5.w
      mad r9.xyz, r5.wwww, cb3[22].xyzx, r9.xyzx
    endif 
  else 
    mov r4.w, l(-1)
  endif 
  if_z r4.w
    ige r5.w, l(4), cb3[2].x
    or r4.w, r4.w, r5.w
    if_z r4.w
      eq r5.w, cb3[23].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[7].xyzx
      add r12.xyz, r3.xyzx, -cb3[7].xyzx
      dp3 r7.w, r12.xyzx, cb3[15].xyzx
      add r8.y, cb3[23].w, l(0.000100)
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[23].w
      mad r12.xyz, cb3[15].xyzx, r7.wwww, cb3[7].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r5.wwww, r11.xyzx, r12.xyzx
      dp3 r5.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r5.w, -r5.w, cb3[7].w, l(1.000000)
      add r7.w, -cb3[15].w, l(1.000000)
      mad r7.w, r7.w, r5.w, cb3[15].w
      div r5.w, r5.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[15].xyzx
      mad_sat r7.w, r7.w, cb3[31].x, cb3[39].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r5.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[23].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r5.w, r5.w, r7.w
      mul r5.w, r2.w, r5.w
      mad r9.xyz, r5.wwww, cb3[23].xyzx, r9.xyzx
    endif 
  else 
    mov r4.w, l(-1)
  endif 
  if_z r4.w
    ige r5.w, l(5), cb3[2].x
    or r4.w, r4.w, r5.w
    if_z r4.w
      eq r5.w, cb3[24].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[8].xyzx
      add r12.xyz, r3.xyzx, -cb3[8].xyzx
      dp3 r7.w, r12.xyzx, cb3[16].xyzx
      add r8.y, cb3[24].w, l(0.000100)
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[24].w
      mad r12.xyz, cb3[16].xyzx, r7.wwww, cb3[8].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r5.wwww, r11.xyzx, r12.xyzx
      dp3 r5.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r5.w, -r5.w, cb3[8].w, l(1.000000)
      add r7.w, -cb3[16].w, l(1.000000)
      mad r7.w, r7.w, r5.w, cb3[16].w
      div r5.w, r5.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[16].xyzx
      mad_sat r7.w, r7.w, cb3[32].x, cb3[40].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r5.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[24].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r5.w, r5.w, r7.w
      mul r5.w, r2.w, r5.w
      mad r9.xyz, r5.wwww, cb3[24].xyzx, r9.xyzx
    endif 
  else 
    mov r4.w, l(-1)
  endif 
  if_z r4.w
    ige r5.w, l(6), cb3[2].x
    or r4.w, r4.w, r5.w
    if_z r4.w
      eq r5.w, cb3[25].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[9].xyzx
      add r12.xyz, r3.xyzx, -cb3[9].xyzx
      dp3 r7.w, r12.xyzx, cb3[17].xyzx
      add r8.y, cb3[25].w, l(0.000100)
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[25].w
      mad r12.xyz, cb3[17].xyzx, r7.wwww, cb3[9].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r5.wwww, r11.xyzx, r12.xyzx
      dp3 r5.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r5.w, -r5.w, cb3[9].w, l(1.000000)
      add r7.w, -cb3[17].w, l(1.000000)
      mad r7.w, r7.w, r5.w, cb3[17].w
      div r5.w, r5.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[17].xyzx
      mad_sat r7.w, r7.w, cb3[33].x, cb3[41].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r5.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[25].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r5.w, r5.w, r7.w
      mul r5.w, r2.w, r5.w
      mad r9.xyz, r5.wwww, cb3[25].xyzx, r9.xyzx
    endif 
  else 
    mov r4.w, l(-1)
  endif 
  if_z r4.w
    ige r5.w, l(7), cb3[2].x
    or r4.w, r4.w, r5.w
    if_z r4.w
      eq r4.w, cb3[26].w, l(0.000000)
      add r11.xyz, -r3.xyzx, cb3[10].xyzx
      add r12.xyz, r3.xyzx, -cb3[10].xyzx
      dp3 r5.w, r12.xyzx, cb3[18].xyzx
      add r7.w, cb3[26].w, l(0.000100)
      div_sat r5.w, r5.w, r7.w
      mul r5.w, r5.w, cb3[26].w
      mad r12.xyz, cb3[18].xyzx, r5.wwww, cb3[10].xyzx
      add r3.xyz, -r3.xyzx, r12.xyzx
      movc r3.xyz, r4.wwww, r11.xyzx, r3.xyzx
      dp3 r4.w, r3.xyzx, r3.xyzx
      add r3.xyz, r3.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r5.w, r3.xyzx, r3.xyzx
      rsq r5.w, r5.w
      mul r3.xyz, r3.xyzx, r5.wwww
      mad_sat r4.w, -r4.w, cb3[10].w, l(1.000000)
      add r5.w, -cb3[18].w, l(1.000000)
      mad r5.w, r5.w, r4.w, cb3[18].w
      div r4.w, r4.w, r5.w
      dp3 r5.w, r3.xyzx, -cb3[18].xyzx
      mad_sat r5.w, r5.w, cb3[34].x, cb3[42].x
      dp3_sat r7.w, r3.xyzx, r4.xyzx
      mul r5.w, r5.w, r7.w
      mul r7.w, r4.w, r5.w
      mul r11.xyz, r7.wwww, cb3[26].xyzx
      mad r10.xyz, r11.xyzx, r1.xyzx, r10.xyzx
      mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
      dp3 r0.w, r0.xyzx, r0.xyzx
      rsq r0.w, r0.w
      mul r0.xyz, r0.wwww, r0.xyzx
      dp3_sat r0.w, r0.xyzx, r6.xyzx
      add r0.w, -r0.w, l(1.000000)
      mul r3.x, r0.w, r0.w
      mul r3.x, r3.x, r3.x
      mul r0.w, r0.w, r3.x
      mad r0.w, r5.x, r0.w, r6.w
      dp3_sat r0.x, r0.xyzx, r4.xyzx
      log r0.x, r0.x
      mul r0.x, r0.x, r8.z
      exp r0.x, r0.x
      mul r0.x, r0.x, r0.w
      mul r0.x, r5.w, r0.x
      mul r0.x, r4.w, r0.x
      mul r0.x, r2.w, r0.x
      mad r9.xyz, r0.xxxx, cb3[26].xyzx, r9.xyzx
    endif 
  endif 
  mul r0.x, r5.z, r5.z
  mul r0.y, r3.w, r3.w
  mul r0.yzw, r9.xxyz, r0.yyyy
  mad r0.xyz, r0.xxxx, r10.xyzx, r0.yzwy
  mad r0.xyz, r7.xyzx, cb3[1].xyzx, r0.xyzx
  add r0.w, r4.z, cb3[43].w
  mul r0.w, r0.w, cb3[44].w
  max r0.w, r0.w, l(0.000000)
  mad r3.xyz, cb3[47].xyzx, r0.wwww, cb3[48].xyzx
  add r2.w, -r2.z, l(1.000000)
  mad r6.xyz, cb3[45].xyzx, r0.wwww, cb3[46].xyzx
  mul r6.xyz, r2.zzzz, r6.xyzx
  mad r3.xyz, r3.xyzx, r2.wwww, r6.xyzx
  mul r2.yzw, r2.yyyy, r3.xxyz
  mad r3.xyz, cb3[43].xyzx, r0.wwww, cb3[44].xyzx
  mov r6.x, cb3[46].w
  mov r6.y, cb3[47].w
  mov r6.z, cb3[48].w
  dp3_sat r0.w, r6.xyzx, r4.xyzx
  mad r3.xyz, cb3[49].xyzx, r0.wwww, r3.xyzx
  mad r2.xyz, r3.xyzx, r2.xxxx, r2.yzwy
  mul r2.xyz, r5.zzzz, r2.xyzx
  mad r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
  mul r0.w, r5.y, r8.x
  mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
  mul r1.w, r1.w, cb2[12].x
else 
  mov r0.xyz, l(0,0,0,0)
  mov r1.w, l(0)
endif 
mul r1.xyz, r0.xyzx, cb2[14].zzzz
mov o0.xyzw, r1.xyzw
ret 
// Approximately 625 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:27:59 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16
//   float4 globalScalars2;             // Offset:  208 Size:    16
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16
//   float4 gDirectionalColour;         // Offset:   16 Size:    16
//   int gNumForwardLights;             // Offset:   32 Size:     4
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128
//   float gLightConeScale[8];          // Offset:  432 Size:   116
//   float gLightConeOffset[8];         // Offset:  560 Size:   116
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16
//   float4 globalFogParams[5];         // Offset:  800 Size:    80 [unused]
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer vfx_decaldyn_locals
// {
//
//   float polyRejectThreshold;         // Offset:    0 Size:     4
//   float specularFalloffMult;         // Offset:    4 Size:     4
//   float specularIntensityMult;       // Offset:    8 Size:     4
//   float specularFresnel;             // Offset:   12 Size:     4
//   float emissiveMultiplier;          // Offset:   16 Size:     4
//   float parallaxScaleBias;           // Offset:   20 Size:     4
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDecalSampler_s                   sampler      NA          NA    2        1
// gDecalNormalSampler_s             sampler      NA          NA    3        1
// GBufferTextureSamplerDepthGlobal_s    sampler      NA          NA   12        1
// gDecalSampler                     texture  float4          2d    2        1
// gDecalNormalSampler               texture  float4          2d    3        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_globals                  cbuffer      NA          NA    3        1
// vfx_decaldyn_locals               cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float      w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb3[50], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_input_ps linear v10.w
dcl_output o0.xyzw
dcl_temps 16
mul r0.xy, v0.xyxx, cb13[16].zwzz
sample r0.xyzw, r0.xyxx, t12.xyzw, s12
add r0.x, -r0.x, cb13[17].w
add r0.x, r0.x, l(1.000000)
div r0.x, cb13[17].z, r0.x
div r0.yzw, v2.xxyz, v2.wwww
ne r1.x, l(0.000000), cb2[22].z
and r1.x, r1.x, l(0x3f800000)
eq r1.y, v2.w, l(1.000000)
and r1.x, r1.x, r1.y
ne r1.x, r1.x, l(0.000000)
if_nz r1.x
  ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r1.y, r0.x, -r1.y
  mul r1.x, r1.y, r1.x
  mul r1.x, r1.x, cb13[17].x
  mad r1.xyz, -cb1[12].xyzx, r1.xxxx, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r1.xyz, r3.xyzx, cb1[15].xyzx
  mov r2.x, r3.w
endif 
mad r0.xyz, r0.yzwy, r0.xxxx, r1.xyzx
deriv_rtx r1.xyz, r0.yzxy
deriv_rty r2.yzw, r0.yyzx
mul r3.xyz, r1.yzxy, r2.yzwy
mad r1.xyz, r1.xyzx, r2.zwyz, -r3.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, v5.xyzx, r1.xyzx
lt r0.w, r0.w, cb11[0].x
if_nz r0.w
  mov r1.xyzw, l(0,0,0,0)
  mov r2.xyzw, l(0,0,0,0)
  mov r3.xyzw, l(0,0,0,0)
  mov r4.xyzw, l(0,0,0,0)
  mov r5.xy, l(0,0,0,0)
endif 
add r6.xyz, r0.xyzx, -v1.xyzx
dp3 r5.z, v4.xyzx, r6.xyzx
dp3 r5.w, -v3.xyzx, r6.xyzx
mul r6.x, r5.z, v4.w
mul r6.y, r5.w, v3.w
mad r5.zw, r6.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
mad r6.xy, r5.zwzz, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mad r6.xy, v9.xyxx, r6.xyxx, r5.zwzz
lt r5.z, l(0.000000), v9.z
div r6.w, v9.w, v9.z
round_ni r7.x, r6.w
add r6.w, r6.w, -r7.x
add r6.w, -r6.w, l(1.000000)
div r7.x, l(1.000000, 1.000000, 1.000000, 1.000000), v3.w
add r7.x, r7.x, r7.x
div r7.x, r7.x, v9.z
mad r6.w, r6.y, r7.x, r6.w
movc r6.z, r5.z, r6.w, r6.y
add r6.zw, r6.xxxz, v7.xxxy
mul r6.zw, r6.zzzw, v7.zzzw
mul r7.xyz, v3.yzxy, v4.zxyz
mad r7.xyz, v4.yzxy, v3.zxyz, -r7.xyzx
dp3 r5.z, r7.xyzx, r7.xyzx
rsq r5.z, r5.z
mul r7.xyz, r5.zzzz, r7.xyzx
mad r8.xy, v9.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mul r8.xzw, r8.xxxx, v4.xxyz
mul r9.xyz, r8.yyyy, -v3.xyzx
dp3 r10.x, r8.xzwx, v8.xyzx
dp3 r10.y, r9.xyzx, v8.xyzx
dp3 r10.z, r7.xyzx, v8.xyzx
sample r11.xyzw, r6.zwzz, t3.xyzw, s3
dp3 r5.z, r10.xyzx, r10.xyzx
rsq r5.z, r5.z
mul r10.xy, r5.zzzz, r10.xyxx
mul r10.xy, -r10.xyxx, cb11[1].yyyy
mov r10.zw, r6.zzzw
mov r12.yz, r11.xxyx
mov r5.z, l(0)
mov r12.x, l(-1.000000)
mov r12.w, -r11.w
loop 
  ftoi r7.w, r5.z
  ige r8.y, r7.w, l(8)
  if_nz r8.y
    break 
  endif 
  mad r13.xy, r10.xyxx, l(0.125000, 0.125000, 0.000000, 0.000000), r10.zwzz
  sample r14.xyzw, r13.xyxx, t3.xyzw, s3
  lt r8.y, r12.x, r12.w
  add r15.x, r12.x, l(0.125000)
  movc r10.zw, r8.yyyy, r13.xxxy, r10.zzzw
  mul r15.yzw, r14.xxyw, l(0.000000, 1.000000, 1.000000, -1.000000)
  movc r12.xyzw, r8.yyyy, r15.xyzw, r12.xyzw
  iadd r7.w, r7.w, l(1)
  itof r5.z, r7.w
endloop 
sample r10.xyzw, r10.zwzz, t2.xyzw, s2
if_z r0.w
  add r0.w, -v6.y, v6.z
  mad r0.w, r5.w, r0.w, v6.y
  mul r0.w, r0.w, v6.x
  lt r5.zw, r6.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  lt r6.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r6.xyxx
  or r5.z, r5.z, r6.x
  or r5.z, r5.z, r5.w
  or r5.z, r5.z, r6.y
  movc r0.w, r5.z, l(0), r0.w
  mad r5.zw, r12.yyyz, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  dp2 r6.x, r5.zwzz, r5.zwzz
  add r6.x, -r6.x, l(1.000000)
  sqrt r6.x, |r6.x|
  mul r6.yzw, r9.xxyz, r5.wwww
  mad r6.yzw, r5.zzzz, r8.xxzw, r6.yyzw
  mad r4.xyz, r6.xxxx, r7.xyzx, r6.yzwy
  mov r6.x, v8.w
  mov r6.y, v1.w
  mov r6.z, v5.w
  mov r6.w, l(1.000000)
  mul r6.xyzw, r6.xyzw, r10.xyzw
  mul r6.xyz, r6.xyzx, r6.xyzx
  dp2 r5.z, r12.yzyy, r12.yzyy
  ge r5.z, r5.z, l(0.002000)
  and r5.z, r5.z, l(0x3f800000)
  mul r1.xyz, r5.zzzz, r6.xyzx
  mov r6.x, v6.w
  mov r6.y, v10.w
  mov r6.z, l(1.000000)
  mul r6.xyz, r5.zzzz, r6.xyzx
  mul r3.w, r5.z, cb11[0].z
  mul r1.w, r0.w, r6.w
  mul r2.yz, r6.xxyx, cb2[12].zzyz
  mul r5.y, r6.z, cb11[1].x
  mov r3.xyz, r0.xyzx
  mov r2.w, cb2[13].z
  mov r2.x, cb11[0].y
  mov r4.w, l(-1.000000)
  mov r5.x, cb11[0].w
endif 
ne r0.x, r4.w, l(0.000000)
if_nz r0.x
  add r0.xyz, -r3.xyzx, cb1[15].xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r6.xyz, r0.wwww, r0.xyzx
  mad r7.xyz, r0.xyzx, r0.wwww, -cb3[0].xyzx
  dp3 r4.w, r7.xyzx, r7.xyzx
  rsq r4.w, r4.w
  mul r7.xyz, r4.wwww, r7.xyzx
  mov_sat r3.w, r3.w
  mul r2.yz, r2.yyzy, r2.yyzy
  add r4.w, r2.x, l(-500.000000)
  max r4.w, r4.w, l(0.000000)
  add r2.x, r2.x, -r4.w
  mul r4.w, r4.w, l(558.000000)
  mad r2.x, r2.x, l(3.000000), r4.w
  dp3_sat r4.w, r4.xyzx, -cb3[0].xyzx
  dp3_sat r8.x, r6.xyzx, r4.xyzx
  dp3_sat r8.y, r7.xyzx, -cb3[0].xyzx
  add r5.zw, -r8.xxxy, l(0.000000, 0.000000, 1.000000, 1.000000)
  mul r8.yz, r5.zzwz, r5.zzwz
  mul r8.yz, r8.yyzy, r8.yyzy
  mul r5.zw, r5.zzzw, r8.yyyz
  add r6.w, -r5.x, l(1.000000)
  mad r5.zw, r5.xxxx, r5.zzzw, r6.wwww
  add r8.yz, r2.xxxx, l(0.000000, 2.000000, 0.000000, 0.000000)
  mul r2.x, r8.y, l(0.125000)
  mad r5.z, -r3.w, r5.z, l(1.000000)
  dp3 r7.x, r4.xyzx, r7.xyzx
  add_sat r7.x, r7.x, l(0.000000)
  log r7.x, r7.x
  mul r7.x, r7.x, r8.z
  exp r7.x, r7.x
  mul r5.w, r5.w, r7.x
  mul r5.w, r2.x, r5.w
  mul r5.w, r3.w, r5.w
  mul r5.w, r4.w, r5.w
  mul r4.w, r4.w, r5.z
  mad r7.xyz, r1.xyzx, r4.wwww, r5.wwww
  ige r4.w, l(0), cb3[2].x
  if_z r4.w
    eq r4.w, l(0.000000), cb3[19].w
    add r9.xyz, -r3.xyzx, cb3[3].xyzx
    add r10.xyz, r3.xyzx, -cb3[3].xyzx
    dp3 r5.w, r10.xyzx, cb3[11].xyzx
    add r7.w, l(0.000100), cb3[19].w
    div_sat r5.w, r5.w, r7.w
    mul r5.w, r5.w, cb3[19].w
    mad r10.xyz, cb3[11].xyzx, r5.wwww, cb3[3].xyzx
    add r10.xyz, -r3.xyzx, r10.xyzx
    movc r9.xyz, r4.wwww, r9.xyzx, r10.xyzx
    dp3 r4.w, r9.xyzx, r9.xyzx
    add r9.xyz, r9.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
    dp3 r5.w, r9.xyzx, r9.xyzx
    rsq r5.w, r5.w
    mul r9.xyz, r5.wwww, r9.xyzx
    mad_sat r4.w, -r4.w, cb3[3].w, l(1.000000)
    add r5.w, l(1.000000), -cb3[11].w
    mad r5.w, r5.w, r4.w, cb3[11].w
    div r4.w, r4.w, r5.w
    dp3 r5.w, r9.xyzx, -cb3[11].xyzx
    mad_sat r5.w, r5.w, cb3[27].x, cb3[35].x
    dp3_sat r7.w, r9.xyzx, r4.xyzx
    mul r5.w, r5.w, r7.w
    mul r7.w, r4.w, r5.w
    mul r10.xyz, r7.wwww, cb3[19].xyzx
    mul r10.xyz, r1.xyzx, r10.xyzx
    mad r9.xyz, r0.xyzx, r0.wwww, r9.xyzx
    dp3 r7.w, r9.xyzx, r9.xyzx
    rsq r7.w, r7.w
    mul r9.xyz, r7.wwww, r9.xyzx
    dp3_sat r7.w, r9.xyzx, r6.xyzx
    add r7.w, -r7.w, l(1.000000)
    mul r8.y, r7.w, r7.w
    mul r8.y, r8.y, r8.y
    mul r7.w, r7.w, r8.y
    mad r7.w, r5.x, r7.w, r6.w
    dp3_sat r8.y, r9.xyzx, r4.xyzx
    log r8.y, r8.y
    mul r8.y, r8.y, r8.z
    exp r8.y, r8.y
    mul r7.w, r7.w, r8.y
    mul r5.w, r5.w, r7.w
    mul r4.w, r4.w, r5.w
    mul r4.w, r2.x, r4.w
    mul r9.xyz, r4.wwww, cb3[19].xyzx
  else 
    mov r9.xyz, l(0,0,0,0)
    mov r10.xyz, l(0,0,0,0)
  endif 
  ilt r4.w, l(0), cb3[2].x
  if_nz r4.w
    ige r4.w, l(1), cb3[2].x
    and r5.w, r4.w, l(0x3f800000)
    if_z r4.w
      eq r4.w, l(0.000000), cb3[20].w
      add r11.xyz, -r3.xyzx, cb3[4].xyzx
      add r12.xyz, r3.xyzx, -cb3[4].xyzx
      dp3 r7.w, r12.xyzx, cb3[12].xyzx
      add r8.y, l(0.000100), cb3[20].w
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[20].w
      mad r12.xyz, cb3[12].xyzx, r7.wwww, cb3[4].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r4.wwww, r11.xyzx, r12.xyzx
      dp3 r4.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r4.w, -r4.w, cb3[4].w, l(1.000000)
      add r7.w, l(1.000000), -cb3[12].w
      mad r7.w, r7.w, r4.w, cb3[12].w
      div r4.w, r4.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[12].xyzx
      mad_sat r7.w, r7.w, cb3[28].x, cb3[36].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r4.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[20].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r4.w, r4.w, r7.w
      mul r4.w, r2.x, r4.w
      mad r9.xyz, r4.wwww, cb3[20].xyzx, r9.xyzx
    endif 
  else 
    mov r5.w, l(-1.000000)
  endif 
  eq r4.w, r5.w, l(0.000000)
  if_nz r4.w
    ige r4.w, l(2), cb3[2].x
    and r5.w, r4.w, l(0x3f800000)
    if_z r4.w
      eq r4.w, l(0.000000), cb3[21].w
      add r11.xyz, -r3.xyzx, cb3[5].xyzx
      add r12.xyz, r3.xyzx, -cb3[5].xyzx
      dp3 r7.w, r12.xyzx, cb3[13].xyzx
      add r8.y, l(0.000100), cb3[21].w
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[21].w
      mad r12.xyz, cb3[13].xyzx, r7.wwww, cb3[5].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r4.wwww, r11.xyzx, r12.xyzx
      dp3 r4.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r4.w, -r4.w, cb3[5].w, l(1.000000)
      add r7.w, l(1.000000), -cb3[13].w
      mad r7.w, r7.w, r4.w, cb3[13].w
      div r4.w, r4.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[13].xyzx
      mad_sat r7.w, r7.w, cb3[29].x, cb3[37].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r4.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[21].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r4.w, r4.w, r7.w
      mul r4.w, r2.x, r4.w
      mad r9.xyz, r4.wwww, cb3[21].xyzx, r9.xyzx
    endif 
  else 
    mov r5.w, l(-1.000000)
  endif 
  eq r4.w, r5.w, l(0.000000)
  if_nz r4.w
    ige r4.w, l(3), cb3[2].x
    and r5.w, r4.w, l(0x3f800000)
    if_z r4.w
      eq r4.w, l(0.000000), cb3[22].w
      add r11.xyz, -r3.xyzx, cb3[6].xyzx
      add r12.xyz, r3.xyzx, -cb3[6].xyzx
      dp3 r7.w, r12.xyzx, cb3[14].xyzx
      add r8.y, l(0.000100), cb3[22].w
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[22].w
      mad r12.xyz, cb3[14].xyzx, r7.wwww, cb3[6].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r4.wwww, r11.xyzx, r12.xyzx
      dp3 r4.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r4.w, -r4.w, cb3[6].w, l(1.000000)
      add r7.w, l(1.000000), -cb3[14].w
      mad r7.w, r7.w, r4.w, cb3[14].w
      div r4.w, r4.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[14].xyzx
      mad_sat r7.w, r7.w, cb3[30].x, cb3[38].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r4.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[22].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r4.w, r4.w, r7.w
      mul r4.w, r2.x, r4.w
      mad r9.xyz, r4.wwww, cb3[22].xyzx, r9.xyzx
    endif 
  else 
    mov r5.w, l(-1.000000)
  endif 
  eq r4.w, r5.w, l(0.000000)
  if_nz r4.w
    ige r4.w, l(4), cb3[2].x
    and r5.w, r4.w, l(0x3f800000)
    if_z r4.w
      eq r4.w, l(0.000000), cb3[23].w
      add r11.xyz, -r3.xyzx, cb3[7].xyzx
      add r12.xyz, r3.xyzx, -cb3[7].xyzx
      dp3 r7.w, r12.xyzx, cb3[15].xyzx
      add r8.y, l(0.000100), cb3[23].w
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[23].w
      mad r12.xyz, cb3[15].xyzx, r7.wwww, cb3[7].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r4.wwww, r11.xyzx, r12.xyzx
      dp3 r4.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r4.w, -r4.w, cb3[7].w, l(1.000000)
      add r7.w, l(1.000000), -cb3[15].w
      mad r7.w, r7.w, r4.w, cb3[15].w
      div r4.w, r4.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[15].xyzx
      mad_sat r7.w, r7.w, cb3[31].x, cb3[39].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r4.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[23].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r4.w, r4.w, r7.w
      mul r4.w, r2.x, r4.w
      mad r9.xyz, r4.wwww, cb3[23].xyzx, r9.xyzx
    endif 
  else 
    mov r5.w, l(-1.000000)
  endif 
  eq r4.w, r5.w, l(0.000000)
  if_nz r4.w
    ige r4.w, l(5), cb3[2].x
    and r5.w, r4.w, l(0x3f800000)
    if_z r4.w
      eq r4.w, l(0.000000), cb3[24].w
      add r11.xyz, -r3.xyzx, cb3[8].xyzx
      add r12.xyz, r3.xyzx, -cb3[8].xyzx
      dp3 r7.w, r12.xyzx, cb3[16].xyzx
      add r8.y, l(0.000100), cb3[24].w
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[24].w
      mad r12.xyz, cb3[16].xyzx, r7.wwww, cb3[8].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r4.wwww, r11.xyzx, r12.xyzx
      dp3 r4.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r4.w, -r4.w, cb3[8].w, l(1.000000)
      add r7.w, l(1.000000), -cb3[16].w
      mad r7.w, r7.w, r4.w, cb3[16].w
      div r4.w, r4.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[16].xyzx
      mad_sat r7.w, r7.w, cb3[32].x, cb3[40].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r4.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[24].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r4.w, r4.w, r7.w
      mul r4.w, r2.x, r4.w
      mad r9.xyz, r4.wwww, cb3[24].xyzx, r9.xyzx
    endif 
  else 
    mov r5.w, l(-1.000000)
  endif 
  eq r4.w, r5.w, l(0.000000)
  if_nz r4.w
    ige r4.w, l(6), cb3[2].x
    and r5.w, r4.w, l(0x3f800000)
    if_z r4.w
      eq r4.w, l(0.000000), cb3[25].w
      add r11.xyz, -r3.xyzx, cb3[9].xyzx
      add r12.xyz, r3.xyzx, -cb3[9].xyzx
      dp3 r7.w, r12.xyzx, cb3[17].xyzx
      add r8.y, l(0.000100), cb3[25].w
      div_sat r7.w, r7.w, r8.y
      mul r7.w, r7.w, cb3[25].w
      mad r12.xyz, cb3[17].xyzx, r7.wwww, cb3[9].xyzx
      add r12.xyz, -r3.xyzx, r12.xyzx
      movc r11.xyz, r4.wwww, r11.xyzx, r12.xyzx
      dp3 r4.w, r11.xyzx, r11.xyzx
      add r11.xyz, r11.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r7.w, r11.xyzx, r11.xyzx
      rsq r7.w, r7.w
      mul r11.xyz, r7.wwww, r11.xyzx
      mad_sat r4.w, -r4.w, cb3[9].w, l(1.000000)
      add r7.w, l(1.000000), -cb3[17].w
      mad r7.w, r7.w, r4.w, cb3[17].w
      div r4.w, r4.w, r7.w
      dp3 r7.w, r11.xyzx, -cb3[17].xyzx
      mad_sat r7.w, r7.w, cb3[33].x, cb3[41].x
      dp3_sat r8.y, r11.xyzx, r4.xyzx
      mul r7.w, r7.w, r8.y
      mul r8.y, r4.w, r7.w
      mul r12.xyz, r8.yyyy, cb3[25].xyzx
      mad r10.xyz, r12.xyzx, r1.xyzx, r10.xyzx
      mad r11.xyz, r0.xyzx, r0.wwww, r11.xyzx
      dp3 r8.y, r11.xyzx, r11.xyzx
      rsq r8.y, r8.y
      mul r11.xyz, r8.yyyy, r11.xyzx
      dp3_sat r8.y, r11.xyzx, r6.xyzx
      add r8.y, -r8.y, l(1.000000)
      mul r8.w, r8.y, r8.y
      mul r8.w, r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mad r8.y, r5.x, r8.y, r6.w
      dp3_sat r8.w, r11.xyzx, r4.xyzx
      log r8.w, r8.w
      mul r8.w, r8.w, r8.z
      exp r8.w, r8.w
      mul r8.y, r8.w, r8.y
      mul r7.w, r7.w, r8.y
      mul r4.w, r4.w, r7.w
      mul r4.w, r2.x, r4.w
      mad r9.xyz, r4.wwww, cb3[25].xyzx, r9.xyzx
    endif 
  else 
    mov r5.w, l(-1.000000)
  endif 
  eq r4.w, r5.w, l(0.000000)
  if_nz r4.w
    ige r4.w, l(7), cb3[2].x
    if_z r4.w
      eq r4.w, l(0.000000), cb3[26].w
      add r11.xyz, -r3.xyzx, cb3[10].xyzx
      add r12.xyz, r3.xyzx, -cb3[10].xyzx
      dp3 r5.w, r12.xyzx, cb3[18].xyzx
      add r7.w, l(0.000100), cb3[26].w
      div_sat r5.w, r5.w, r7.w
      mul r5.w, r5.w, cb3[26].w
      mad r12.xyz, cb3[18].xyzx, r5.wwww, cb3[10].xyzx
      add r3.xyz, -r3.xyzx, r12.xyzx
      movc r3.xyz, r4.wwww, r11.xyzx, r3.xyzx
      dp3 r4.w, r3.xyzx, r3.xyzx
      add r3.xyz, r3.xyzx, l(0.000001, 0.000001, 0.000001, 0.000000)
      dp3 r5.w, r3.xyzx, r3.xyzx
      rsq r5.w, r5.w
      mul r3.xyz, r3.xyzx, r5.wwww
      mad_sat r4.w, -r4.w, cb3[10].w, l(1.000000)
      add r5.w, l(1.000000), -cb3[18].w
      mad r5.w, r5.w, r4.w, cb3[18].w
      div r4.w, r4.w, r5.w
      dp3 r5.w, r3.xyzx, -cb3[18].xyzx
      mad_sat r5.w, r5.w, cb3[34].x, cb3[42].x
      dp3_sat r7.w, r3.xyzx, r4.xyzx
      mul r5.w, r5.w, r7.w
      mul r7.w, r4.w, r5.w
      mul r11.xyz, r7.wwww, cb3[26].xyzx
      mad r10.xyz, r11.xyzx, r1.xyzx, r10.xyzx
      mad r0.xyz, r0.xyzx, r0.wwww, r3.xyzx
      dp3 r0.w, r0.xyzx, r0.xyzx
      rsq r0.w, r0.w
      mul r0.xyz, r0.wwww, r0.xyzx
      dp3_sat r0.w, r0.xyzx, r6.xyzx
      add r0.w, -r0.w, l(1.000000)
      mul r3.x, r0.w, r0.w
      mul r3.x, r3.x, r3.x
      mul r0.w, r0.w, r3.x
      mad r0.w, r5.x, r0.w, r6.w
      dp3_sat r0.x, r0.xyzx, r4.xyzx
      log r0.x, r0.x
      mul r0.x, r0.x, r8.z
      exp r0.x, r0.x
      mul r0.x, r0.x, r0.w
      mul r0.x, r5.w, r0.x
      mul r0.x, r4.w, r0.x
      mul r0.x, r2.x, r0.x
      mad r9.xyz, r0.xxxx, cb3[26].xyzx, r9.xyzx
    endif 
  endif 
  mul r0.x, r5.z, r5.z
  mul r0.y, r3.w, r3.w
  mul r0.yzw, r9.xxyz, r0.yyyy
  mad r0.xyz, r0.xxxx, r10.xyzx, r0.yzwy
  mad r0.xyz, r7.xyzx, cb3[1].xyzx, r0.xyzx
  add r0.w, r4.z, cb3[43].w
  mul r0.w, r0.w, cb3[44].w
  max r0.w, r0.w, l(0.000000)
  mad r3.xyz, cb3[47].xyzx, r0.wwww, cb3[48].xyzx
  add r2.x, -r2.w, l(1.000000)
  mad r6.xyz, cb3[45].xyzx, r0.wwww, cb3[46].xyzx
  mul r6.xyz, r2.wwww, r6.xyzx
  mad r3.xyz, r3.xyzx, r2.xxxx, r6.xyzx
  mul r2.xzw, r2.zzzz, r3.xxyz
  mad r3.xyz, cb3[43].xyzx, r0.wwww, cb3[44].xyzx
  mov r6.x, cb3[46].w
  mov r6.y, cb3[47].w
  mov r6.z, cb3[48].w
  dp3_sat r0.w, r6.xyzx, r4.xyzx
  mad r3.xyz, cb3[49].xyzx, r0.wwww, r3.xyzx
  mad r2.xyz, r3.xyzx, r2.yyyy, r2.xzwx
  mul r2.xyz, r5.zzzz, r2.xyzx
  mad r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
  mul r0.w, r5.y, r8.x
  mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
  mul o0.w, r1.w, cb2[12].x
else 
  mov r0.xyz, l(0,0,0,0)
  mov o0.w, l(0)
endif 
mul o0.xyz, r0.xyzx, cb2[14].zzzz
ret 
// Approximately 636 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
