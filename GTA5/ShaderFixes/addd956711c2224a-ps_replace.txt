
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState gLocalDitherTextureSamp_s : register(s1);
SamplerState gDeferredLightSampler_s : register(s2);
SamplerState gDeferredLightSampler1_s : register(s3);
SamplerState GBufferTextureSampler0Global_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler2Global_s : register(s9);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
SamplerComparisonState gShadowZSamplerCache_s : register(s14);
Texture2D<float4> gLocalDitherTextureSamp : register(t1);
Texture2D<float4> gDeferredLightSampler : register(t2);
Texture2D<float4> gDeferredLightSampler1 : register(t3);
Texture2D<float4> GBufferTextureSampler0Global : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler2Global : register(t9);
Texture2D<uint2> gbufferStencilTextureGlobal : register(t11);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
TextureCube<float4> gLocalLightShadowCM0 : register(t14);
Texture2D<float4> StereoParmsTexture : register(t20);
Texture2D<float> gLocalLightShadowSpot0 : register(t24);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r1.xyz = v2.xyz / v2.www;
  r0.w = 0 != gStereoParams.z;
  r1.w = v2.w == 1.000000;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) {
    r0.w = r0.z + -r2.y;
    r0.w = r2.x * r0.w;
    r0.w = deferredProjectionParams.x * r0.w;
    r3.xyz = -gViewInverse._m00_m01_m02 * r0.www + gViewInverse._m30_m31_m32;
  } else {
    r4.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r3.xyz = gViewInverse._m30_m31_m32 + r4.xyz;
  }
  r3.xyz = r1.xyz * r0.zzz + r3.xyz;
  r4.xyz = deferredLightParams[0].xyz + -r3.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r0.w);
  r5.xyz = r4.xyz * r1.www;
  r0.w = saturate(-r0.w * deferredLightParams[4].z + 1);
  r2.z = 1 + -deferredLightParams[7].x;
  r2.z = r2.z * r0.w + deferredLightParams[7].x;
  r0.w = r0.w / r2.z;
  r2.z = dot(r5.xyz, -deferredLightParams[1].xyz);
  r2.z = saturate(r2.z * deferredLightParams[5].w + deferredLightParams[5].z);
  r0.w = r2.z * r0.w;
  r3.w = 1;
  r2.z = dot(r3.xyzw, deferredLightParams[6].xyzw);
  r2.z = r2.z >= 0;
  r2.z = r2.z ? 1.000000 : 0;
  r0.w = r2.z * r0.w;
  r2.z = r0.w < 9.99999997e-007;
  if (r2.z != 0) discard;
  r6.xy = r0.xy * float2(2,-2) + float2(-1,1);
  r2.y = r0.z + -r2.y;
  r2.x = r2.x * r2.y;
  r2.x = deferredProjectionParams.x * r2.x;
  r2.xyz = gViewInverse._m00_m01_m02 * r2.xxx;
  r6.z = 1;
  r7.x = dot(r6.xyz, deferredPerspectiveShearParams0.xyz);
  r7.y = dot(r6.xyz, deferredPerspectiveShearParams1.xyz);
  r7.z = dot(r6.xyz, deferredPerspectiveShearParams2.xyz);
  r2.xyz = r7.xyz * r0.zzz + -r2.xyz;
  r6.xy = globalScreenSize.xy * r0.xy;
  r7.xy = (int2)r6.xy;
  r7.zw = float2(0,0);
  r7.xyzw = gbufferStencilTextureGlobal.Load(r7.xyz).xyzw;
  r0.z = (int)r7.y & 8;
  r0.z = (uint)r0.z;
  r0.z = r0.z >= 7.9000001;
  r0.z = r0.z ? 1.000000 : 0;
  r7.xyzw = GBufferTextureSampler0Global.Sample(GBufferTextureSampler0Global_s, r0.xy).xyzw;
  r7.xyz = r7.xyz * r7.xyz;
  r8.xyzw = GBufferTextureSampler2Global.Sample(GBufferTextureSampler2Global_s, r0.xy).xyzw;
  r6.zw = r8.xy * r8.xy;
  r9.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r8.xyw = float3(0.998046875,7.984375,63.875) * r9.www;
  r8.xyw = frac(r8.xyw);
  r8.xy = -r8.yw * float2(0.125,0.125) + r8.xy;
  r8.xyw = r9.xyz * float3(256,256,256) + r8.xyw;
  r8.xyw = float3(-128,-128,-128) + r8.xyw;
  r0.x = dot(r8.xyw, r8.xyw);
  r0.x = rsqrt(r0.x);
  r8.xyw = r8.xyw * r0.xxx;
  r0.x = min(1, r6.z);
  r0.y = r6.w * 512 + -500;
  r0.y = max(0, r0.y);
  r2.w = r6.w * 512 + -r0.y;
  r0.y = 558 * r0.y;
  r0.y = r2.w * 3 + r0.y;
  r2.w = dot(r1.xyz, r1.xyz);
  r2.w = rsqrt(r2.w);
  r1.xyz = r2.www * r1.xyz;
  r4.xyz = r4.xyz * r1.www + -r1.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r1.w = gLocalLightShadowData[0]._m03 == 2.000000;
  if (r1.w != 0) {
    r9.xyz = gLocalLightShadowData[0]._m30_m31_m32 + r2.xyz;
    r10.x = dot(r9.xyz, gLocalLightShadowData[0]._m00_m01_m02);
    r10.y = dot(r9.xyz, gLocalLightShadowData[0]._m10_m11_m12);
    r10.z = dot(r9.xyz, gLocalLightShadowData[0]._m20_m21_m22);
    r1.w = dot(-r10.xyz, -r10.xyz);
    r1.w = sqrt(r1.w);
    r9.xyz = -r10.xyz / r1.www;
    r2.w = gLocalLightShadowData[0]._m23 * r1.w;
    r10.xyz = float3(0,0,0) < r9.xyz;
    r11.xyz = r9.xyz < float3(0,0,0);
    r10.xyz = ((int3)r11.xyz ? -1 : 0) + ((int3)r10.xyz ? 1 : 0);
    r10.xyz = (int3)r10.xyz;
    r11.xyzw = abs(r9.zzyy) < abs(r9.xyxz);
    r6.zw = (int2)r11.yw | (int2)r11.xz;
    r10.xyz = -r10.xyz;
    r10.w = 0;
    r11.xyz = r6.www ? r10.wxw : r10.wwy;
    r10.xyz = r6.zzz ? r11.xyz : r10.wwz;
    r11.xyz = r10.xyz * r9.zxy;
    r10.xyz = r9.yzx * r10.yzx + -r11.xyz;
    r3.w = dot(r10.xyz, r10.xyz);
    r3.w = rsqrt(r3.w);
    r10.xyz = r10.xyz * r3.www;
    r11.xyz = r10.zxy * r9.yzx;
    r11.xyz = r10.yzx * r9.zxy + -r11.xyz;
    r12.xyzw = ddx(r9.xyzx);
    r3.w = ddx(r2.w);
    r13.xyzw = ddy(r9.xyzx);
    r2.w = ddy(r2.w);
    r14.z = dot(r12.yzw, r12.yzw);
    r4.w = dot(r12.yzw, r13.yzw);
    r14.x = dot(r13.yzw, r13.yzw);
    r5.w = r4.w * r4.w;
    r5.w = r14.z * r14.x + -r5.w;
    r5.w = 1 / r5.w;
    r14.y = -r4.w;
    r15.xyzw = r14.xxxy * r5.wwww;
    r14.xyzw = r5.wwww * r14.yyyz;
    r16.xyzw = r14.xyzw * r13.xyzw;
    r16.xyzw = r12.xyzw * r15.xyzw + r16.xyzw;
    r6.zw = r14.ww * r13.yz;
    r6.zw = r12.yz * r15.ww + r6.zw;
    r12.xyz = r16.xyz * r3.www;
    r13.x = r2.w * r16.w + r12.x;
    r13.yz = r2.ww * r6.zw + r12.yz;
    r12.xyz = max(float3(-1,-1,-1), r13.xyz);
    r12.xyz = min(float3(1,1,1), r12.xyz);
    r6.zw = float2(0.015625,0.015625) * r6.xy;
    r13.xyzw = gLocalDitherTextureSamp.Sample(gLocalDitherTextureSamp_s, r6.zw).xyzw;
    r6.zw = r13.yx * float2(2,2) + float2(-1,-1);
    r2.w = 4 * gLocalLightShadowData[0]._m33;
    r11.xyz = r11.xyz * r2.www;
    r10.xyz = r10.xyz * r2.www;
    r13.xyz = r11.xyz * r6.www;
    r14.xyz = r10.xyz * r6.zzz;
    r15.xyz = r6.www * r11.xyz + r14.xyz;
    r16.xyz = r15.xyz + r9.xyz;
    r2.w = dot(r12.xyz, r15.xyz);
    r2.w = r1.w * gLocalLightShadowData[0]._m23 + r2.w;
    r2.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r16.xyz, r2.w).x;
    r14.xyz = r6.www * r11.xyz + -r14.xyz;
    r15.xyz = float3(0.5,0.5,0.5) * r14.xyz;
    r14.xyz = r14.xyz * float3(0.5,0.5,0.5) + r9.xyz;
    r3.w = dot(r12.xyz, r15.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r14.xyz, r3.w).x;
    r2.w = r3.w + r2.w;
    r13.xyz = r6.zzz * r10.xyz + -r13.xyz;
    r14.xyz = float3(0.25,0.25,0.25) * r13.xyz;
    r13.xyz = r13.xyz * float3(0.25,0.25,0.25) + r9.xyz;
    r3.w = dot(r12.xyz, r14.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r13.xyz, r3.w).x;
    r2.w = r3.w + r2.w;
    r13.x = -r6.w + -r6.z;
    r13.y = r6.w + -r6.z;
    r13.xy = float2(0.544472218,0.544472218) * r13.xy;
    r14.xyz = r13.xxx * r11.xyz;
    r15.xyz = r13.yyy * r10.xyz;
    r16.xyz = r13.xxx * r11.xyz + r15.xyz;
    r17.xyz = r16.xyz + r9.xyz;
    r3.w = dot(r12.xyz, r16.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r17.xyz, r3.w).x;
    r2.w = r3.w + r2.w;
    r13.xzw = r13.xxx * r11.xyz + -r15.xyz;
    r15.xyz = float3(0.5,0.5,0.5) * r13.xzw;
    r13.xzw = r13.xzw * float3(0.5,0.5,0.5) + r9.xyz;
    r3.w = dot(r12.xyz, r15.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r13.xzw, r3.w).x;
    r2.w = r3.w + r2.w;
    r13.xyz = r13.yyy * r10.xyz + -r14.xyz;
    r14.xyz = float3(0.25,0.25,0.25) * r13.xyz;
    r13.xyz = r13.xyz * float3(0.25,0.25,0.25) + r9.xyz;
    r3.w = dot(r12.xyz, r14.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r13.xyz, r3.w).x;
    r2.w = r3.w + r2.w;
    r6.zw = float2(0.439999998,-0.439999998) * r6.zw;
    r13.xyz = r6.zzz * r11.xyz;
    r14.xyz = r6.www * r10.xyz;
    r15.xyz = r6.zzz * r11.xyz + r14.xyz;
    r16.xyz = r15.xyz + r9.xyz;
    r3.w = dot(r12.xyz, r15.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r16.xyz, r3.w).x;
    r2.w = r3.w + r2.w;
    r11.xyz = r6.zzz * r11.xyz + -r14.xyz;
    r14.xyz = float3(0.5,0.5,0.5) * r11.xyz;
    r11.xyz = r11.xyz * float3(0.5,0.5,0.5) + r9.xyz;
    r3.w = dot(r12.xyz, r14.xyz);
    r3.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.xyz, r3.w).x;
    r2.w = r3.w + r2.w;
    r10.xyz = r6.www * r10.xyz + -r13.xyz;
    r11.xyz = float3(0.25,0.25,0.25) * r10.xyz;
    r9.xyz = r10.xyz * float3(0.25,0.25,0.25) + r9.xyz;
    r3.w = dot(r12.xyz, r11.xyz);
    r1.w = r1.w * gLocalLightShadowData[0]._m23 + r3.w;
    r1.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r9.xyz, r1.w).x;
    r1.w = r2.w + r1.w;
    r1.w = 0.111111112 * r1.w;
  } else {
    r2.xyz = gLocalLightShadowData[0]._m30_m31_m32 + r2.xyz;
    r9.x = dot(r2.xyz, gLocalLightShadowData[0]._m00_m01_m02);
    r9.y = dot(r2.xyz, gLocalLightShadowData[0]._m10_m11_m12);
    r2.w = dot(r2.xyz, gLocalLightShadowData[0]._m20_m21_m22);
    r9.xyz = r9.yxy / -r2.www;
    r2.x = dot(r2.xyz, r2.xyz);
    r2.x = sqrt(r2.x);
    r9.w = gLocalLightShadowData[0]._m23 * r2.x;
    r2.xyzw = r9.xyzw * float4(-0.5,0.5,-0.5,1) + float4(0.5,0.5,0.5,0);
    r6.xy = float2(0.015625,0.015625) * r6.xy;
    r6.xyzw = gLocalDitherTextureSamp.Sample(gLocalDitherTextureSamp_s, r6.xy).xyzw;
    r6.xy = r6.xy * float2(2,2) + float2(-1,-1);
    r6.zw = gLocalLightShadowData[0]._m33_m33 * r6.xy;
    r9.xyzw = ddx(r2.yzwz);
    r10.xyzw = ddy(r2.xyzw);
    r9.yw = r10.yw * r9.yw;
    r11.xy = r9.xz * r10.xz + -r9.yw;
    r2.x = 1 / r11.x;
    r3.w = r10.y * r9.z;
    r11.z = r9.x * r10.w + -r3.w;
    r9.xy = r11.yz * r2.xx;
    r9.xy = max(float2(-1,-1), r9.xy);
    r9.xy = min(float2(1,1), r9.xy);
    r9.zw = r6.xy * gLocalLightShadowData[0]._m33_m33 + r2.yz;
    r2.x = dot(r9.xy, r6.zw);
    r2.x = r2.w + r2.x;
    r2.x = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r9.zw, r2.x).x;
    r10.xyzw = float4(-0.5,0.5,0.25,-0.25) * r6.wzwz;
    r11.xyzw = r6.wzwz * float4(-0.5,0.5,0.25,-0.25) + r2.yzyz;
    r3.w = dot(r9.xy, r10.xy);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.xy, r3.w).x;
    r2.x = r3.w + r2.x;
    r3.w = dot(r9.xy, r10.zw);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.zw, r3.w).x;
    r2.x = r3.w + r2.x;
    r10.y = -r6.x * gLocalLightShadowData[0]._m33 + -r6.w;
    r10.x = r6.x * gLocalLightShadowData[0]._m33 + -r6.w;
    r11.xyzw = float4(0.544472218,0.544472218,-0.272236109,0.272236109) * r10.yxxy;
    r12.xyzw = r10.yxxy * float4(0.544472218,0.544472218,-0.272236109,0.272236109) + r2.yzyz;
    r3.w = dot(r9.xy, r11.xy);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r12.xy, r3.w).x;
    r2.x = r3.w + r2.x;
    r3.w = dot(r9.xy, r11.zw);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r12.zw, r3.w).x;
    r2.x = r3.w + r2.x;
    r6.xy = float2(0.136118054,-0.136118054) * r10.xy;
    r9.zw = r10.xy * float2(0.136118054,-0.136118054) + r2.yz;
    r3.w = dot(r9.xy, r6.xy);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r9.zw, r3.w).x;
    r2.x = r3.w + r2.x;
    r10.xyzw = float4(0.439999998,-0.439999998,0.219999999,0.219999999) * r6.wzzw;
    r11.xyzw = r6.wzzw * float4(0.439999998,-0.439999998,0.219999999,0.219999999) + r2.yzyz;
    r3.w = dot(r9.xy, r10.xy);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.xy, r3.w).x;
    r2.x = r3.w + r2.x;
    r3.w = dot(r9.xy, r10.zw);
    r3.w = r3.w + r2.w;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.zw, r3.w).x;
    r2.x = r3.w + r2.x;
    r6.xy = float2(-0.109999999,-0.109999999) * r6.zw;
    r2.yz = r6.zw * float2(-0.109999999,-0.109999999) + r2.yz;
    r3.w = dot(r9.xy, r6.xy);
    r2.w = r3.w + r2.w;
    r2.y = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r2.yz, r2.w).x;
    r2.x = r2.x + r2.y;
    r1.w = 0.111111112 * r2.x;
  }
  r0.z = r0.w * r0.z;
  r2.xyz = deferredLightParams[2].yzx * -deferredLightParams[1].zxy;
  r2.xyz = -deferredLightParams[1].yzx * deferredLightParams[2].zxy + -r2.xyz;
  r2.x = dot(r2.xyz, -r5.xyz);
  r2.y = dot(deferredLightParams[2].xyz, -r5.xyz);
  r0.w = dot(-deferredLightParams[1].xyz, -r5.xyz);
  r2.z = -deferredLightParams[5].x * deferredLightParams[5].x + 1;
  r2.z = sqrt(r2.z);
  r2.z = deferredLightParams[5].x / r2.z;
  r2.z = 0.5 * r2.z;
  r0.w = r2.z / r0.w;
  r2.xy = saturate(r2.xy * r0.ww + float2(0.5,0.5));
  r0.w = deferredLightParams[11].x == 1.000000;
  r2.w = 1 + -r2.y;
  r2.z = r0.w ? r2.w : r2.y;
  r2.xyzw = gDeferredLightSampler.SampleLevel(gDeferredLightSampler_s, r2.xz, 0).xyzw;
  r2.xyz = r2.xyz * r2.xyz + float3(-1,-1,-1);
  r2.xyz = deferredLightParams[11].yyy * r2.xyz + float3(1,1,1);
  r2.xyz = deferredLightParams[3].xyz * r2.xyz;
  r2.xyz = deferredLightParams[3].www * r2.xyz;
  r0.w = saturate(dot(r8.xyw, r5.xyz));
  r1.x = saturate(dot(-r1.xyz, r8.xyw));
  r1.y = saturate(dot(r4.xyz, r5.xyz));
  r1.xy = float2(1,1) + -r1.xy;
  r6.xy = r1.xy * r1.xy;
  r6.xy = r6.xy * r6.xy;
  r1.xy = r6.xy * r1.xy;
  r1.z = 1 + -r8.z;
  r1.xy = r8.zz * r1.xy + r1.zz;
  r6.xy = float2(2,9.99999994e-009) + r0.yy;
  r0.y = 0.125 * r6.x;
  r1.x = -r0.x * r1.x + 1;
  r1.z = dot(r8.xyw, r4.xyz);
  r1.z = saturate(9.99999994e-009 + r1.z);
  r1.z = log2(r1.z);
  r1.z = r6.y * r1.z;
  r1.z = exp2(r1.z);
  r1.y = r1.z * r1.y;
  r0.y = r1.y * r0.y;
  r0.x = r0.y * r0.x;
  r0.x = r0.x * r0.w;
  r0.y = r1.x * r0.w;
  r0.w = deferredLightParams[7].z + r3.z;
  r0.w = -r0.w / r5.z;
  r4.xyzw = r5.xyyx * r0.wwww + r3.xyyx;
  r5.xyzw = float4(15,15,-15,-15) * deferredLightParams[7].wwww;
  r4.xyzw = r4.xyzw * float4(1,1,0.745459974,0.745459974) + r5.xyzw;
  r5.xyzw = gDeferredLightSampler1.Sample(gDeferredLightSampler1_s, r4.xy).xyzw;
  r4.xyzw = gDeferredLightSampler1.Sample(gDeferredLightSampler1_s, r4.zw).xyzw;
  r1.xyz = r5.xyz * r4.xyz;
  r1.xyz = float3(10,10,10) * r1.xyz;
  r2.w = deferredLightParams[7].z + -r3.z;
  r2.w = saturate(r2.w + r2.w);
  r0.w = 25 + -r0.w;
  r0.w = saturate(0.0399999991 * r0.w);
  r1.xyz = r1.xyz * r0.www;
  r3.xyz = r0.xxx * r1.xyz + -r0.xxx;
  r3.xyz = r2.www * r3.xyz + r0.xxx;
  r1.xyz = r0.yyy * r1.xyz + -r0.yyy;
  r0.xyw = r2.www * r1.xyz + r0.yyy;
  r1.xyz = deferredLightParams[8].zzz * r3.xyz;
  r1.w = -1 + r1.w;
  r1.w = deferredLightParams[8].y * r1.w + 1;
  r0.xyw = r7.xyz * r0.xyw + r1.xyz;
  r0.xyw = r0.xyw * r2.xyz;
  r0.xyz = r0.xyw * r0.zzz;
  r0.xyz = r0.xyz * r1.www;
  o0.xyz = globalScalars3.zzz * r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192 [unused]
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16 [unused]
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16 [unused]
//   float4 gCSMResolution;             // Offset:  224 Size:    16 [unused]
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gLocalDitherTextureSamp           sampler      NA          NA    1        1
// gDeferredLightSampler             sampler      NA          NA    2        1
// gDeferredLightSampler1            sampler      NA          NA    3        1
// GBufferTextureSampler0Global      sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler2Global      sampler      NA          NA    9        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// gShadowZSamplerCache            sampler_c      NA          NA   14        1
// gLocalDitherTextureSamp           texture  float4          2d    1        1
// gDeferredLightSampler             texture  float4          2d    2        1
// gDeferredLightSampler1            texture  float4          2d    3        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// gbufferStencilTextureGlobal       texture   uint2          2d   11        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// gLocalLightShadowCM0              texture  float4        cube   14        1
// StereoParmsTexture                texture  float4          2d   20        1
// gLocalLightShadowSpot0            texture   float          2d   24        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// csmshader                         cbuffer      NA          NA    6        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb6[20], immediateIndexed
dcl_constantbuffer cb13[21], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s12, mode_default
dcl_sampler s14, mode_comparison
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texturecube (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 18
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  add r0.w, -r2.y, r0.z
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r3.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r4.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r3.xyz, r4.xyzx, cb1[15].xyzx
endif 
mad r3.xyz, r1.xyzx, r0.zzzz, r3.xyzx
add r4.xyz, -r3.xyzx, cb13[0].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r1.w, r0.w
mul r5.xyz, r1.wwww, r4.xyzx
mad_sat r0.w, -r0.w, cb13[4].z, l(1.000000)
add r2.z, -cb13[7].x, l(1.000000)
mad r2.z, r2.z, r0.w, cb13[7].x
div r0.w, r0.w, r2.z
dp3 r2.z, r5.xyzx, -cb13[1].xyzx
mad_sat r2.z, r2.z, cb13[5].w, cb13[5].z
mul r0.w, r0.w, r2.z
mov r3.w, l(1.000000)
dp4 r2.z, r3.xyzw, cb13[6].xyzw
ge r2.z, r2.z, l(0.000000)
and r2.z, r2.z, l(0x3f800000)
mul r0.w, r0.w, r2.z
lt r2.z, r0.w, l(0.000001)
discard_nz r2.z
mad r6.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
add r2.y, -r2.y, r0.z
mul r2.x, r2.y, r2.x
mul r2.x, r2.x, cb13[17].x
mul r2.xyz, r2.xxxx, cb1[12].xyzx
mov r6.z, l(1.000000)
dp3 r7.x, r6.xyzx, cb13[18].xyzx
dp3 r7.y, r6.xyzx, cb13[19].xyzx
dp3 r7.z, r6.xyzx, cb13[20].xyzx
mad r2.xyz, r7.xyzx, r0.zzzz, -r2.xyzx
mul r6.xy, r0.xyxx, cb2[15].xyxx
ftoi r7.xy, r6.xyxx
mov r7.zw, l(0,0,0,0)
ld r7.xyzw, r7.xyzw, t11.xyzw
and r0.z, r7.y, l(8)
utof r0.z, r0.z
ge r0.z, r0.z, l(7.900000)
and r0.z, r0.z, l(0x3f800000)
sample r7.xyzw, r0.xyxx, t7.xyzw, s7
mul r7.xyz, r7.xyzx, r7.xyzx
sample r8.xyzw, r0.xyxx, t9.xyzw, s9
mul r6.zw, r8.xxxy, r8.xxxy
sample r9.xyzw, r0.xyxx, t8.xyzw, s8
mul r8.xyw, r9.wwww, l(0.998047, 7.984375, 0.000000, 63.875000)
frc r8.xyw, r8.xyxw
mad r8.xy, -r8.ywyy, l(0.125000, 0.125000, 0.000000, 0.000000), r8.xyxx
mad r8.xyw, r9.xyxz, l(256.000000, 256.000000, 0.000000, 256.000000), r8.xyxw
add r8.xyw, r8.xyxw, l(-128.000000, -128.000000, 0.000000, -128.000000)
dp3 r0.x, r8.xywx, r8.xywx
rsq r0.x, r0.x
mul r8.xyw, r0.xxxx, r8.xyxw
min r0.x, r6.z, l(1.000000)
mad r0.y, r6.w, l(512.000000), l(-500.000000)
max r0.y, r0.y, l(0.000000)
mad r2.w, r6.w, l(512.000000), -r0.y
mul r0.y, r0.y, l(558.000000)
mad r0.y, r2.w, l(3.000000), r0.y
dp3 r2.w, r1.xyzx, r1.xyzx
rsq r2.w, r2.w
mul r1.xyz, r1.xyzx, r2.wwww
mad r4.xyz, r4.xyzx, r1.wwww, -r1.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
eq r1.w, cb6[16].w, l(2.000000)
if_nz r1.w
  add r9.xyz, r2.xyzx, cb6[19].xyzx
  dp3 r10.x, r9.xyzx, cb6[16].xyzx
  dp3 r10.y, r9.xyzx, cb6[17].xyzx
  dp3 r10.z, r9.xyzx, cb6[18].xyzx
  dp3 r1.w, -r10.xyzx, -r10.xyzx
  sqrt r1.w, r1.w
  div r9.xyz, -r10.xyzx, r1.wwww
  mul r2.w, r1.w, cb6[18].w
  lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r9.xyzx
  lt r11.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r10.xyz, r11.xyzx, -r10.xyzx
  itof r10.xyz, r10.xyzx
  lt r11.xyzw, |r9.zzyy|, |r9.xyxz|
  or r6.zw, r11.yyyw, r11.xxxz
  mov r10.xyz, -r10.xyzx
  mov r10.w, l(0)
  movc r11.xyz, r6.wwww, r10.wxww, r10.wwyw
  movc r10.xyz, r6.zzzz, r11.xyzx, r10.wwzw
  mul r11.xyz, r9.zxyz, r10.xyzx
  mad r10.xyz, r9.yzxy, r10.yzxy, -r11.xyzx
  dp3 r3.w, r10.xyzx, r10.xyzx
  rsq r3.w, r3.w
  mul r10.xyz, r3.wwww, r10.xyzx
  mul r11.xyz, r9.yzxy, r10.zxyz
  mad r11.xyz, r10.yzxy, r9.zxyz, -r11.xyzx
  deriv_rtx r12.xyzw, r9.xyzx
  deriv_rtx r3.w, r2.w
  deriv_rty r13.xyzw, r9.xyzx
  deriv_rty r2.w, r2.w
  dp3 r14.z, r12.yzwy, r12.yzwy
  dp3 r4.w, r12.yzwy, r13.yzwy
  dp3 r14.x, r13.yzwy, r13.yzwy
  mul r5.w, r4.w, r4.w
  mad r5.w, r14.z, r14.x, -r5.w
  div r5.w, l(1.000000, 1.000000, 1.000000, 1.000000), r5.w
  mov r14.y, -r4.w
  mul r15.xyzw, r5.wwww, r14.xxxy
  mul r14.xyzw, r14.yyyz, r5.wwww
  mul r16.xyzw, r13.xyzw, r14.xyzw
  mad r16.xyzw, r12.xyzw, r15.xyzw, r16.xyzw
  mul r6.zw, r13.yyyz, r14.wwww
  mad r6.zw, r12.yyyz, r15.wwww, r6.zzzw
  mul r12.xyz, r3.wwww, r16.xyzx
  mad r13.x, r2.w, r16.w, r12.x
  mad r13.yz, r2.wwww, r6.zzwz, r12.yyzy
  max r12.xyz, r13.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  min r12.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r6.zw, r6.xxxy, l(0.000000, 0.000000, 0.015625, 0.015625)
  sample r13.xyzw, r6.zwzz, t1.xyzw, s1
  mad r6.zw, r13.yyyx, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  mul r2.w, cb6[19].w, l(4.000000)
  mul r11.xyz, r2.wwww, r11.xyzx
  mul r10.xyz, r2.wwww, r10.xyzx
  mul r13.xyz, r6.wwww, r11.xyzx
  mul r14.xyz, r6.zzzz, r10.xyzx
  mad r15.xyz, r6.wwww, r11.xyzx, r14.xyzx
  add r16.xyz, r9.xyzx, r15.xyzx
  dp3 r2.w, r12.xyzx, r15.xyzx
  mad r2.w, r1.w, cb6[18].w, r2.w
  sample_c_lz r2.w, r16.xyzx, t14.xxxx, s14, r2.w
  mad r14.xyz, r6.wwww, r11.xyzx, -r14.xyzx
  mul r15.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r14.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r9.xyzx
  dp3 r3.w, r12.xyzx, r15.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r14.xyzx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  mad r13.xyz, r6.zzzz, r10.xyzx, -r13.xyzx
  mul r14.xyz, r13.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
  mad r13.xyz, r13.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r9.xyzx
  dp3 r3.w, r12.xyzx, r14.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r13.xyzx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  add r13.x, -r6.z, -r6.w
  add r13.y, -r6.z, r6.w
  mul r13.xy, r13.xyxx, l(0.544472, 0.544472, 0.000000, 0.000000)
  mul r14.xyz, r11.xyzx, r13.xxxx
  mul r15.xyz, r10.xyzx, r13.yyyy
  mad r16.xyz, r13.xxxx, r11.xyzx, r15.xyzx
  add r17.xyz, r9.xyzx, r16.xyzx
  dp3 r3.w, r12.xyzx, r16.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r17.xyzx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  mad r13.xzw, r13.xxxx, r11.xxyz, -r15.xxyz
  mul r15.xyz, r13.xzwx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r13.xzw, r13.xxzw, l(0.500000, 0.000000, 0.500000, 0.500000), r9.xxyz
  dp3 r3.w, r12.xyzx, r15.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r13.xzwx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  mad r13.xyz, r13.yyyy, r10.xyzx, -r14.xyzx
  mul r14.xyz, r13.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
  mad r13.xyz, r13.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r9.xyzx
  dp3 r3.w, r12.xyzx, r14.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r13.xyzx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  mul r6.zw, r6.zzzw, l(0.000000, 0.000000, 0.440000, -0.440000)
  mul r13.xyz, r11.xyzx, r6.zzzz
  mul r14.xyz, r10.xyzx, r6.wwww
  mad r15.xyz, r6.zzzz, r11.xyzx, r14.xyzx
  add r16.xyz, r9.xyzx, r15.xyzx
  dp3 r3.w, r12.xyzx, r15.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r16.xyzx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  mad r11.xyz, r6.zzzz, r11.xyzx, -r14.xyzx
  mul r14.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r11.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r9.xyzx
  dp3 r3.w, r12.xyzx, r14.xyzx
  mad r3.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r3.w, r11.xyzx, t14.xxxx, s14, r3.w
  add r2.w, r2.w, r3.w
  mad r10.xyz, r6.wwww, r10.xyzx, -r13.xyzx
  mul r11.xyz, r10.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)
  mad r9.xyz, r10.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000), r9.xyzx
  dp3 r3.w, r12.xyzx, r11.xyzx
  mad r1.w, r1.w, cb6[18].w, r3.w
  sample_c_lz r1.w, r9.xyzx, t14.xxxx, s14, r1.w
  add r1.w, r1.w, r2.w
  mul r1.w, r1.w, l(0.111111)
else 
  add r2.xyz, r2.xyzx, cb6[19].xyzx
  dp3 r9.x, r2.xyzx, cb6[16].xyzx
  dp3 r9.y, r2.xyzx, cb6[17].xyzx
  dp3 r2.w, r2.xyzx, cb6[18].xyzx
  div r9.xyz, r9.yxyy, -r2.wwww
  dp3 r2.x, r2.xyzx, r2.xyzx
  sqrt r2.x, r2.x
  mul r9.w, r2.x, cb6[18].w
  mad r2.xyzw, r9.xyzw, l(-0.500000, 0.500000, -0.500000, 1.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r6.xy, r6.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000)
  sample r6.xyzw, r6.xyxx, t1.xyzw, s1
  mad r6.xy, r6.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r6.zw, r6.xxxy, cb6[19].wwww
  deriv_rtx r9.xyzw, r2.yzwz
  deriv_rty r10.xyzw, r2.xyzw
  mul r9.yw, r9.yyyw, r10.yyyw
  mad r11.xy, r9.xzxx, r10.xzxx, -r9.ywyy
  div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r11.x
  mul r3.w, r9.z, r10.y
  mad r11.z, r9.x, r10.w, -r3.w
  mul r9.xy, r2.xxxx, r11.yzyy
  max r9.xy, r9.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
  min r9.xy, r9.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  mad r9.zw, r6.xxxy, cb6[19].wwww, r2.yyyz
  dp2 r2.x, r9.xyxx, r6.zwzz
  add r2.x, r2.x, r2.w
  sample_c_lz r2.x, r9.zwzz, t24.xxxx, s14, r2.x
  mul r10.xyzw, r6.wzwz, l(-0.500000, 0.500000, 0.250000, -0.250000)
  mad r11.xyzw, r6.wzwz, l(-0.500000, 0.500000, 0.250000, -0.250000), r2.yzyz
  dp2 r3.w, r9.xyxx, r10.xyxx
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r11.xyxx, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  dp2 r3.w, r9.xyxx, r10.zwzz
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r11.zwzz, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  mad r10.y, -r6.x, cb6[19].w, -r6.w
  mad r10.x, r6.x, cb6[19].w, -r6.w
  mul r11.xyzw, r10.yxxy, l(0.544472, 0.544472, -0.272236, 0.272236)
  mad r12.xyzw, r10.yxxy, l(0.544472, 0.544472, -0.272236, 0.272236), r2.yzyz
  dp2 r3.w, r9.xyxx, r11.xyxx
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r12.xyxx, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  dp2 r3.w, r9.xyxx, r11.zwzz
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r12.zwzz, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  mul r6.xy, r10.xyxx, l(0.136118, -0.136118, 0.000000, 0.000000)
  mad r9.zw, r10.xxxy, l(0.000000, 0.000000, 0.136118, -0.136118), r2.yyyz
  dp2 r3.w, r9.xyxx, r6.xyxx
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r9.zwzz, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  mul r10.xyzw, r6.wzzw, l(0.440000, -0.440000, 0.220000, 0.220000)
  mad r11.xyzw, r6.wzzw, l(0.440000, -0.440000, 0.220000, 0.220000), r2.yzyz
  dp2 r3.w, r9.xyxx, r10.xyxx
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r11.xyxx, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  dp2 r3.w, r9.xyxx, r10.zwzz
  add r3.w, r2.w, r3.w
  sample_c_lz r3.w, r11.zwzz, t24.xxxx, s14, r3.w
  add r2.x, r2.x, r3.w
  mul r6.xy, r6.zwzz, l(-0.110000, -0.110000, 0.000000, 0.000000)
  mad r2.yz, r6.zzwz, l(0.000000, -0.110000, -0.110000, 0.000000), r2.yyzy
  dp2 r3.w, r9.xyxx, r6.xyxx
  add r2.w, r2.w, r3.w
  sample_c_lz r2.y, r2.yzyy, t24.xxxx, s14, r2.w
  add r2.x, r2.y, r2.x
  mul r1.w, r2.x, l(0.111111)
endif 
mul r0.z, r0.z, r0.w
mul r2.xyz, -cb13[1].zxyz, cb13[2].yzxy
mad r2.xyz, -cb13[1].yzxy, cb13[2].zxyz, -r2.xyzx
dp3 r2.x, r2.xyzx, -r5.xyzx
dp3 r2.y, cb13[2].xyzx, -r5.xyzx
dp3 r0.w, -cb13[1].xyzx, -r5.xyzx
mad r2.z, -cb13[5].x, cb13[5].x, l(1.000000)
sqrt r2.z, r2.z
div r2.z, cb13[5].x, r2.z
mul r2.z, r2.z, l(0.500000)
div r0.w, r2.z, r0.w
mad_sat r2.xy, r2.xyxx, r0.wwww, l(0.500000, 0.500000, 0.000000, 0.000000)
eq r0.w, cb13[11].x, l(1.000000)
add r2.w, -r2.y, l(1.000000)
movc r2.z, r0.w, r2.w, r2.y
sample_l r2.xyzw, r2.xzxx, t2.xyzw, s2, l(0.000000)
mad r2.xyz, r2.xyzx, r2.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
mad r2.xyz, cb13[11].yyyy, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r2.xyz, r2.xyzx, cb13[3].xyzx
mul r2.xyz, r2.xyzx, cb13[3].wwww
dp3_sat r0.w, r8.xywx, r5.xyzx
dp3_sat r1.x, -r1.xyzx, r8.xywx
dp3_sat r1.y, r4.xyzx, r5.xyzx
add r1.xy, -r1.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r6.xy, r1.xyxx, r1.xyxx
mul r6.xy, r6.xyxx, r6.xyxx
mul r1.xy, r1.xyxx, r6.xyxx
add r1.z, -r8.z, l(1.000000)
mad r1.xy, r8.zzzz, r1.xyxx, r1.zzzz
add r6.xy, r0.yyyy, l(2.000000, 0.000000, 0.000000, 0.000000)
mul r0.y, r6.x, l(0.125000)
mad r1.x, -r0.x, r1.x, l(1.000000)
dp3 r1.z, r8.xywx, r4.xyzx
add_sat r1.z, r1.z, l(0.000000)
log r1.z, r1.z
mul r1.z, r1.z, r6.y
exp r1.z, r1.z
mul r1.y, r1.y, r1.z
mul r0.y, r0.y, r1.y
mul r0.x, r0.x, r0.y
mul r0.x, r0.w, r0.x
mul r0.y, r0.w, r1.x
add r0.w, r3.z, cb13[7].z
div r0.w, -r0.w, r5.z
mad r4.xyzw, r5.xyyx, r0.wwww, r3.xyyx
mul r5.xyzw, cb13[7].wwww, l(15.000000, 15.000000, -15.000000, -15.000000)
mad r4.xyzw, r4.xyzw, l(1.000000, 1.000000, 0.745460, 0.745460), r5.xyzw
sample r5.xyzw, r4.xyxx, t3.xyzw, s3
sample r4.xyzw, r4.zwzz, t3.xyzw, s3
mul r1.xyz, r4.xyzx, r5.xyzx
mul r1.xyz, r1.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000)
add r2.w, -r3.z, cb13[7].z
add_sat r2.w, r2.w, r2.w
add r0.w, -r0.w, l(25.000000)
mul_sat r0.w, r0.w, l(0.040000)
mul r1.xyz, r0.wwww, r1.xyzx
mad r3.xyz, r0.xxxx, r1.xyzx, -r0.xxxx
mad r3.xyz, r2.wwww, r3.xyzx, r0.xxxx
mad r1.xyz, r0.yyyy, r1.xyzx, -r0.yyyy
mad r0.xyw, r2.wwww, r1.xyxz, r0.yyyy
mul r1.xyz, r3.xyzx, cb13[8].zzzz
add r1.w, r1.w, l(-1.000000)
mad r1.w, cb13[8].y, r1.w, l(1.000000)
mad r0.xyw, r7.xyxz, r0.xyxw, r1.xyxz
mul r0.xyw, r2.xyxz, r0.xyxw
mul r0.xyz, r0.zzzz, r0.xywx
mul r0.xyz, r1.wwww, r0.xyzx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 351 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
