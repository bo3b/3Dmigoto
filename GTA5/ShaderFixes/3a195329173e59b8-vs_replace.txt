
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer rage_clipplanes : register(b0)
{
  float4 ClipPlanes : packoffset(c0);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer megashader_locals : register(b8)
{
  float zShiftScale : packoffset(c0);
  float parallaxScaleBias : packoffset(c0.y);
  float specularFresnel : packoffset(c0.z);
  float specularFalloffMult : packoffset(c0.w);
  float specularIntensityMult : packoffset(c1);
  float bumpiness : packoffset(c1.y);
  float useTessellation : packoffset(c1.z);
  float HardAlphaBlend : packoffset(c1.w);
}

cbuffer vehicle_globals : register(b7)
{
  bool switchOn : packoffset(c0);
  bool tyreDeformSwitchOn : packoffset(c0.y);
}

cbuffer vehicle_damage_locals : register(b9)
{
  float BoundRadius : packoffset(c0);
  float DamageMultiplier : packoffset(c0.y);
  float3 DamageTextureOffset : packoffset(c1);
  float4 DamagedWheelOffsets[2] : packoffset(c2);
  bool bDebugDisplayDamageMap : packoffset(c4);
  bool bDebugDisplayDamageScale : packoffset(c4.y);
}

cbuffer decal_per_bucket : register(b10)
{
  float3 gPositionScale : packoffset(c0);
}

cbuffer decal_per_instance : register(b6)
{

  struct
  {
    float4 constSet0;
    float4 vertexColor;
    float4 texcoordConst;
  } gPerInstCBuf[256] : packoffset(c0);

}
SamplerState DamageSampler_s : register(s2);
Texture2D<float4> DamageSampler : register(t2);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float3 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float2 v2 : TEXCOORD1,
  float3 v3 : NORMAL0,
  float4 v4 : TANGENT0,
  uint v5 : TEXCOORD2,
  uint v6 : SV_InstanceID0,
  out float4 o0 : COLOR0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD4,
  out float4 o4 : TEXCOORD5,
  out float4 o5 : TEXCOORD6,
  out float4 o6 : TEXCOORD7,
  out float4 o7 : SV_Position0,
  out float4 o8 : SV_ClipDistance0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = gPositionScale.xyz * v0.xyz;
  r1.x = (int)v5.x * 3;
  o0.w = gPerInstCBuf[r1.x].constSet0.x * v1.z + gPerInstCBuf[r1.x].constSet0.y;
  r1.yzw = v3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.xyzw = v4.xyzw * float4(2,2,2,2) + float4(-1,-1,-1,-1);
  o1.xy = gPerInstCBuf[r1.x].texcoordConst.xy * v2.xy + gPerInstCBuf[r1.x].texcoordConst.zw;
  if (switchOn != 0) {
    r3.xyz = v0.xyz * gPositionScale.xyz + DamageTextureOffset.xyz;
    r3.w = dot(r3.xyz, r3.xyz);
    r3.w = sqrt(r3.w);
    r3.xyz = r3.xyz / r3.www;
    r3.z = 1 + -r3.z;
    r3.z = 0.5 * r3.z;
    r4.x = dot(r3.xy, r3.xy);
    r4.x = max(9.99999994e-009, r4.x);
    r4.x = sqrt(r4.x);
    r4.xyzw = r3.xyxy / r4.xxxx;
    r4.xyzw = r4.xyzw * r3.zzzz;
    r4.xyzw = r4.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
    r3.xy = float2(126.732674,126.732674) * r4.zw;
    r5.xy = r3.xy >= -r3.xy;
    r3.xy = frac(abs(r3.xy));
    r3.xy = r5.xy ? r3.xy : -r3.xy;
    r5.xyzw = DamageSampler.SampleLevel(DamageSampler_s, r4.zw, 0).xyzw;
    r4.xyzw = -r3.xyxy * float4(0.00789062493,0.00789062493,0.00789062493,0.00789062493) + r4.xyzw;
    r6.xyzw = float4(0.00789062493,0,0,0.00789062493) + r4.zwzw;
    r7.xyzw = DamageSampler.SampleLevel(DamageSampler_s, r6.xy, 0).xyzw;
    r6.xyzw = DamageSampler.SampleLevel(DamageSampler_s, r6.zw, 0).xyzw;
    r8.xyzw = float4(0.00789062493,0.00789062493,-0.5,-0.5) + r4.zwzw;
    r9.xyzw = DamageSampler.SampleLevel(DamageSampler_s, r8.xy, 0).xyzw;
    r8.xy = float2(1,1) + -r3.xy;
    r10.xyz = r8.xxx * r5.xyz;
    r11.xyz = r7.xyz * r3.xxx;
    r11.xyz = r11.xyz * r8.yyy;
    r10.xyz = r10.xyz * r8.yyy + r11.xyz;
    r11.xyz = r8.xxx * r6.xyz;
    r10.xyz = r11.xyz * r3.yyy + r10.xyz;
    r9.xyz = r9.xyz * r3.xxx;
    r3.xyz = r9.xyz * r3.yyy + r10.xyz;
    r3.w = r3.w / BoundRadius;
    r3.w = min(1, r3.w);
    r3.xyz = r3.xyz * r3.www;
    r3.xyz = DamageMultiplier * r3.xyz;
    r0.xyz = r3.xyz * v1.www + r0.xyz;
    r3.x = 0 < DamagedWheelOffsets[0].w;
    r9.xyz = DamagedWheelOffsets[0].xyz + -DamageTextureOffset.xyz;
    r9.xzw = -r9.xyz + r0.xyz;
    r3.y = dot(r9.xzw, r9.xzw);
    r3.y = sqrt(r3.y);
    r3.z = 1.10000002 * DamagedWheelOffsets[0].w;
    r5.w = saturate(r3.y / r3.z);
    r6.w = r5.w < 1;
    r3.y = r9.z / r3.y;
    r5.w = r5.w * 0.100000001 + 0.899999976;
    r3.y = r5.w * r3.y;
    r3.y = r3.y * r3.z + r9.y;
    r3.y = r6.w ? r3.y : r0.y;
    r0.w = r3.x ? r3.y : r0.y;
    r3.x = 0 < DamagedWheelOffsets[1].w;
    r9.xyz = DamagedWheelOffsets[1].xyz + -DamageTextureOffset.xyz;
    r9.xzw = -r9.xyz + r0.xwz;
    r3.y = dot(r9.xzw, r9.xzw);
    r3.y = sqrt(r3.y);
    r3.z = 1.10000002 * DamagedWheelOffsets[1].w;
    r5.w = saturate(r3.y / r3.z);
    r6.w = r5.w < 1;
    r3.y = r9.z / r3.y;
    r5.w = r5.w * 0.100000001 + 0.899999976;
    r3.y = r5.w * r3.y;
    r3.y = r3.y * r3.z + r9.y;
    r3.y = r6.w ? r3.y : r0.w;
    r0.y = r3.x ? r3.y : r0.w;
    r3.xy = r8.zw + r8.zw;
    r0.w = dot(r3.xy, r3.xy);
    r3.z = 0 < r0.w;
    r0.w = sqrt(r0.w);
    r0.w = r3.z ? r0.w : 0;
    r3.z = -r0.w * 2 + 1;
    r8.z = max(-1, r3.z);
    r3.z = r8.z < 1;
    r5.w = -1 < r8.z;
    r3.z = r3.z ? r5.w : 0;
    r5.w = 0 < r0.w;
    r3.z = r3.z ? r5.w : 0;
    r5.w = -r8.z * r8.z + 1;
    r5.w = sqrt(r5.w);
    r0.w = r5.w / r0.w;
    r0.w = r3.z ? r0.w : 0;
    r8.xy = r3.xy * r0.ww;
    r3.xyz = r5.xyz * r3.www;
    r3.xyz = DamageMultiplier * r3.xyz;
    r4.xyzw = float4(-0.492109388,-0.5,-0.5,-0.492109388) + r4.xyzw;
    r4.xyzw = r4.xyzw + r4.xyzw;
    r0.w = dot(r4.xy, r4.xy);
    r5.x = 0 < r0.w;
    r0.w = sqrt(r0.w);
    r0.w = r5.x ? r0.w : 0;
    r5.x = -r0.w * 2 + 1;
    r5.z = max(-1, r5.x);
    r5.w = r5.z < 1;
    r6.w = -1 < r5.z;
    r5.w = r5.w ? r6.w : 0;
    r6.w = 0 < r0.w;
    r5.w = r5.w ? r6.w : 0;
    r6.w = -r5.z * r5.z + 1;
    r6.w = sqrt(r6.w);
    r0.w = r6.w / r0.w;
    r0.w = r5.w ? r0.w : 0;
    r5.xy = r4.xy * r0.ww;
    r7.xyz = r7.xyz * r3.www;
    r5.xyz = r5.xyz + -r8.xyz;
    r7.xyz = r7.xyz * DamageMultiplier + -r3.xyz;
    r0.w = dot(r7.xyz, r1.yzw);
    r4.x = dot(r5.xyz, r5.xyz);
    r4.y = 0 < r4.x;
    r7.x = r0.w / r4.x;
    r7.y = 1;
    r5.xyz = r7.xyx * r5.xyz;
    r7.yz = v1.ww;
    r5.xyz = r7.zxz * r5.xyz;
    r7.xz = float2(0.100000001,0.333299994);
    r5.xyz = r5.xyz * r7.xyz + r1.yzw;
    r5.xyz = r4.yyy ? r5.xyz : r1.yzw;
    r0.w = dot(r4.zw, r4.zw);
    r4.x = 0 < r0.w;
    r0.w = sqrt(r0.w);
    r0.w = r4.x ? r0.w : 0;
    r4.x = -r0.w * 2 + 1;
    r9.z = max(-1, r4.x);
    r4.x = r9.z < 1;
    r4.y = -1 < r9.z;
    r4.x = r4.y ? r4.x : 0;
    r4.y = 0 < r0.w;
    r4.x = r4.y ? r4.x : 0;
    r4.y = -r9.z * r9.z + 1;
    r4.y = sqrt(r4.y);
    r0.w = r4.y / r0.w;
    r0.w = r4.x ? r0.w : 0;
    r9.xy = r4.zw * r0.ww;
    r4.xyz = r6.xyz * r3.www;
    r6.xyz = r9.xyz + -r8.xyz;
    r3.xyz = r4.xyz * DamageMultiplier + -r3.xyz;
    r0.w = dot(r3.xyz, r1.yzw);
    r3.x = dot(r6.xyz, r6.xyz);
    r3.y = 0 < r3.x;
    r4.x = r0.w / r3.x;
    r4.y = 1;
    r3.xzw = r4.xyx * r6.xyz;
    r4.z = v1.w;
    r3.xzw = r4.zxz * r3.xzw;
    r3.xzw = r3.xzw * r7.xyz + r5.xyz;
    r3.xyz = r3.yyy ? r3.xzw : r5.xyz;
    r3.xyz = float3(9.99999975e-005,9.99999975e-005,9.99999975e-005) + r3.xyz;
    r0.w = dot(r3.xyz, r3.xyz);
    r0.w = rsqrt(r0.w);
    r1.yzw = r3.xyz * r0.www;
  }
  r3.xyz = gWorld._m10_m11_m12 * r0.yyy;
  r3.xyz = r0.xxx * gWorld._m00_m01_m02 + r3.xyz;
  r3.xyz = r0.zzz * gWorld._m20_m21_m22 + r3.xyz;
  r3.xyz = gWorld._m30_m31_m32 + r3.xyz;
  r4.xyz = gViewInverse._m30_m31_m32 + -r3.xyz;
  r0.w = dot(r1.yzw, r1.yzw);
  r0.w = r0.w < 0.100000001;
  r1.yzw = r0.www ? float3(0,0,1) : r1.yzw;
  r5.xyz = gWorld._m10_m11_m12 * r1.zzz;
  r5.xyz = r1.yyy * gWorld._m00_m01_m02 + r5.xyz;
  r1.yzw = r1.www * gWorld._m20_m21_m22 + r5.xyz;
  r0.w = dot(r1.yzw, r1.yzw);
  r0.w = rsqrt(r0.w);
  r1.yzw = r1.yzw * r0.www;
  r5.xyz = gWorld._m10_m11_m12 * r2.yyy;
  r5.xyz = r2.xxx * gWorld._m00_m01_m02 + r5.xyz;
  r2.xyz = r2.zzz * gWorld._m20_m21_m22 + r5.xyz;
  r5.xyz = r2.zxy * r1.zwy;
  r5.xyz = r2.yzx * r1.wyz + -r5.xyz;
  r5.xyz = r5.xyz * r2.www;
  o6.x = dot(r2.xyz, r4.xyz);
  o6.y = dot(r5.xyz, r4.xyz);
  o6.z = dot(r1.yzw, r4.xyz);
  r4.xyz = gViewInverse._m30_m31_m32 + -gWorld._m30_m31_m32;
  r6.x = dot(gWorld._m00_m01_m02, r4.xyz);
  r6.y = dot(gWorld._m10_m11_m12, r4.xyz);
  r6.z = dot(gWorld._m20_m21_m22, r4.xyz);
  r4.xyz = r6.xyz + -r0.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r0.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r0.www;
  r0.xyz = r4.xyz * zShiftScale + r0.xyz;
  r4.xyzw = gWorldViewProj._m10_m11_m12_m13 * r0.yyyy;
  r4.xyzw = r0.xxxx * gWorldViewProj._m00_m01_m02_m03 + r4.xyzw;
  r0.xyzw = r0.zzzz * gWorldViewProj._m20_m21_m22_m23 + r4.xyzw;
  r0.xyzw = gWorldViewProj._m30_m31_m32_m33 + r0.xyzw;
  r2.w = 0 != gStereoParams.z;
  if (r2.w != 0) {
    r4.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r2.w = -r4.y + r0.w;
    r0.x = -r4.x * r2.w + r0.x;
  }
  o0.xy = saturate(gPerInstCBuf[r1.x].vertexColor.xy);
  o8.x = dot(r0.xyzw, ClipPlanes.xyzw);
  o0.z = gPerInstCBuf[r1.x].vertexColor.z;
  o5.xyz = r3.xyz;
  o5.w = 1;
  o6.w = 1;
  o7.xyzw = r0.xyzw;
  o8.yzw = float3(0,0,0);
  o2.xyz = r1.yzw;
  o3.xyz = r2.xyz;
  o4.xyz = r5.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer rage_clipplanes
// {
//
//   float4 ClipPlanes;                 // Offset:    0 Size:    16
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer megashader_locals
// {
//
//   float zShiftScale;                 // Offset:    0 Size:     4
//   float parallaxScaleBias;           // Offset:    4 Size:     4 [unused]
//   float specularFresnel;             // Offset:    8 Size:     4 [unused]
//   float specularFalloffMult;         // Offset:   12 Size:     4 [unused]
//   float specularIntensityMult;       // Offset:   16 Size:     4 [unused]
//   float bumpiness;                   // Offset:   20 Size:     4 [unused]
//   float useTessellation;             // Offset:   24 Size:     4 [unused]
//   float HardAlphaBlend;              // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer vehicle_globals
// {
//
//   bool switchOn;                     // Offset:    0 Size:     4
//   bool tyreDeformSwitchOn;           // Offset:    4 Size:     4 [unused]
//
// }
//
// cbuffer vehicle_damage_locals
// {
//
//   float BoundRadius;                 // Offset:    0 Size:     4
//   float DamageMultiplier;            // Offset:    4 Size:     4
//   float3 DamageTextureOffset;        // Offset:   16 Size:    12
//   float4 DamagedWheelOffsets[2];     // Offset:   32 Size:    32
//   bool bDebugDisplayDamageMap;       // Offset:   64 Size:     4 [unused]
//   bool bDebugDisplayDamageScale;     // Offset:   68 Size:     4 [unused]
//
// }
//
// cbuffer decal_per_bucket
// {
//
//   float3 gPositionScale;             // Offset:    0 Size:    12
//
// }
//
// cbuffer decal_per_instance
// {
//
//   struct
//   {
//       
//       float4 constSet0;              // Offset:    0
//       float4 vertexColor;            // Offset:   16
//       float4 texcoordConst;          // Offset:   32
//
//   } gPerInstCBuf[256];               // Offset:    0 Size: 12288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DamageSampler                     sampler      NA          NA    2        1
// DamageSampler                     texture  float4          2d    2        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_clipplanes                   cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// decal_per_instance                cbuffer      NA          NA    6        1
// vehicle_globals                   cbuffer      NA          NA    7        1
// megashader_locals                 cbuffer      NA          NA    8        1
// vehicle_damage_locals             cbuffer      NA          NA    9        1
// decal_per_bucket                  cbuffer      NA          NA   10        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float     zw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   x           5     NONE    uint   x   
// SV_InstanceID            0   x           6   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 4   xyz         3     NONE   float   xyz 
// TEXCOORD                 5   xyz         4     NONE   float   xyz 
// TEXCOORD                 6   xyzw        5     NONE   float   xyzw
// TEXCOORD                 7   xyzw        6     NONE   float   xyzw
// SV_Position              0   xyzw        7      POS   float   xyzw
// SV_ClipDistance          0   xyzw        8  CLIPDST   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb8[1], immediateIndexed
dcl_constantbuffer cb7[1], immediateIndexed
dcl_constantbuffer cb9[4], immediateIndexed
dcl_constantbuffer cb10[1], immediateIndexed
dcl_constantbuffer cb6[768], dynamicIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.zw
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.x
dcl_output o0.xyzw
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output_siv o7.xyzw, position
dcl_output_siv o8.xyzw, clip_distance
dcl_temps 12
mul r0.xyz, v0.xyzx, cb10[0].xyzx
imul null, r1.x, v5.x, l(3)
mad o0.w, cb6[r1.x + 0].x, v1.z, cb6[r1.x + 0].y
mad r1.yzw, v3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mad r2.xyzw, v4.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mad o1.xy, cb6[r1.x + 2].xyxx, v2.xyxx, cb6[r1.x + 2].zwzz
if_nz cb7[0].x
  mad r3.xyz, v0.xyzx, cb10[0].xyzx, cb9[1].xyzx
  dp3 r3.w, r3.xyzx, r3.xyzx
  sqrt r3.w, r3.w
  div r3.xyz, r3.xyzx, r3.wwww
  add r3.z, -r3.z, l(1.000000)
  mul r3.z, r3.z, l(0.500000)
  dp2 r4.x, r3.xyxx, r3.xyxx
  max r4.x, r4.x, l(0.000000)
  sqrt r4.x, r4.x
  div r4.xyzw, r3.xyxy, r4.xxxx
  mul r4.xyzw, r3.zzzz, r4.xyzw
  mad r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
  mul r3.xy, r4.zwzz, l(126.732674, 126.732674, 0.000000, 0.000000)
  ge r5.xy, r3.xyxx, -r3.xyxx
  frc r3.xy, |r3.xyxx|
  movc r3.xy, r5.xyxx, r3.xyxx, -r3.xyxx
  sample_l r5.xyzw, r4.zwzz, t2.xyzw, s2, l(0.000000)
  mad r4.xyzw, -r3.xyxy, l(0.007891, 0.007891, 0.007891, 0.007891), r4.xyzw
  add r6.xyzw, r4.zwzw, l(0.007891, 0.000000, 0.000000, 0.007891)
  sample_l r7.xyzw, r6.xyxx, t2.xyzw, s2, l(0.000000)
  sample_l r6.xyzw, r6.zwzz, t2.xyzw, s2, l(0.000000)
  add r8.xyzw, r4.zwzw, l(0.007891, 0.007891, -0.500000, -0.500000)
  sample_l r9.xyzw, r8.xyxx, t2.xyzw, s2, l(0.000000)
  add r8.xy, -r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
  mul r10.xyz, r5.xyzx, r8.xxxx
  mul r11.xyz, r3.xxxx, r7.xyzx
  mul r11.xyz, r8.yyyy, r11.xyzx
  mad r10.xyz, r10.xyzx, r8.yyyy, r11.xyzx
  mul r11.xyz, r6.xyzx, r8.xxxx
  mad r10.xyz, r11.xyzx, r3.yyyy, r10.xyzx
  mul r9.xyz, r3.xxxx, r9.xyzx
  mad r3.xyz, r9.xyzx, r3.yyyy, r10.xyzx
  div r3.w, r3.w, cb9[0].x
  min r3.w, r3.w, l(1.000000)
  mul r3.xyz, r3.wwww, r3.xyzx
  mul r3.xyz, r3.xyzx, cb9[0].yyyy
  mad r0.xyz, r3.xyzx, v1.wwww, r0.xyzx
  lt r3.x, l(0.000000), cb9[2].w
  add r9.xyz, -cb9[1].xyzx, cb9[2].xyzx
  add r9.xzw, r0.xxyz, -r9.xxyz
  dp3 r3.y, r9.xzwx, r9.xzwx
  sqrt r3.y, r3.y
  mul r3.z, cb9[2].w, l(1.100000)
  div_sat r5.w, r3.y, r3.z
  lt r6.w, r5.w, l(1.000000)
  div r3.y, r9.z, r3.y
  mad r5.w, r5.w, l(0.100000), l(0.900000)
  mul r3.y, r3.y, r5.w
  mad r3.y, r3.y, r3.z, r9.y
  movc r3.y, r6.w, r3.y, r0.y
  movc r0.w, r3.x, r3.y, r0.y
  lt r3.x, l(0.000000), cb9[3].w
  add r9.xyz, -cb9[1].xyzx, cb9[3].xyzx
  add r9.xzw, r0.xxwz, -r9.xxyz
  dp3 r3.y, r9.xzwx, r9.xzwx
  sqrt r3.y, r3.y
  mul r3.z, cb9[3].w, l(1.100000)
  div_sat r5.w, r3.y, r3.z
  lt r6.w, r5.w, l(1.000000)
  div r3.y, r9.z, r3.y
  mad r5.w, r5.w, l(0.100000), l(0.900000)
  mul r3.y, r3.y, r5.w
  mad r3.y, r3.y, r3.z, r9.y
  movc r3.y, r6.w, r3.y, r0.w
  movc r0.y, r3.x, r3.y, r0.w
  add r3.xy, r8.zwzz, r8.zwzz
  dp2 r0.w, r3.xyxx, r3.xyxx
  lt r3.z, l(0.000000), r0.w
  sqrt r0.w, r0.w
  and r0.w, r0.w, r3.z
  mad r3.z, -r0.w, l(2.000000), l(1.000000)
  max r8.z, r3.z, l(-1.000000)
  lt r3.z, r8.z, l(1.000000)
  lt r5.w, l(-1.000000), r8.z
  and r3.z, r3.z, r5.w
  lt r5.w, l(0.000000), r0.w
  and r3.z, r3.z, r5.w
  mad r5.w, -r8.z, r8.z, l(1.000000)
  sqrt r5.w, r5.w
  div r0.w, r5.w, r0.w
  and r0.w, r0.w, r3.z
  mul r8.xy, r0.wwww, r3.xyxx
  mul r3.xyz, r3.wwww, r5.xyzx
  mul r3.xyz, r3.xyzx, cb9[0].yyyy
  add r4.xyzw, r4.xyzw, l(-0.492109, -0.500000, -0.500000, -0.492109)
  add r4.xyzw, r4.xyzw, r4.xyzw
  dp2 r0.w, r4.xyxx, r4.xyxx
  lt r5.x, l(0.000000), r0.w
  sqrt r0.w, r0.w
  and r0.w, r0.w, r5.x
  mad r5.x, -r0.w, l(2.000000), l(1.000000)
  max r5.z, r5.x, l(-1.000000)
  lt r5.w, r5.z, l(1.000000)
  lt r6.w, l(-1.000000), r5.z
  and r5.w, r5.w, r6.w
  lt r6.w, l(0.000000), r0.w
  and r5.w, r5.w, r6.w
  mad r6.w, -r5.z, r5.z, l(1.000000)
  sqrt r6.w, r6.w
  div r0.w, r6.w, r0.w
  and r0.w, r0.w, r5.w
  mul r5.xy, r0.wwww, r4.xyxx
  mul r7.xyz, r3.wwww, r7.xyzx
  add r5.xyz, -r8.xyzx, r5.xyzx
  mad r7.xyz, r7.xyzx, cb9[0].yyyy, -r3.xyzx
  dp3 r0.w, r7.xyzx, r1.yzwy
  dp3 r4.x, r5.xyzx, r5.xyzx
  lt r4.y, l(0.000000), r4.x
  div r7.x, r0.w, r4.x
  mov r7.y, l(1.000000)
  mul r5.xyz, r5.xyzx, r7.xyxx
  mov r7.yz, v1.wwww
  mul r5.xyz, r5.xyzx, r7.zxzz
  mov r7.xz, l(0.100000,0,0.333300,0)
  mad r5.xyz, r5.xyzx, r7.xyzx, r1.yzwy
  movc r5.xyz, r4.yyyy, r5.xyzx, r1.yzwy
  dp2 r0.w, r4.zwzz, r4.zwzz
  lt r4.x, l(0.000000), r0.w
  sqrt r0.w, r0.w
  and r0.w, r0.w, r4.x
  mad r4.x, -r0.w, l(2.000000), l(1.000000)
  max r9.z, r4.x, l(-1.000000)
  lt r4.x, r9.z, l(1.000000)
  lt r4.y, l(-1.000000), r9.z
  and r4.x, r4.y, r4.x
  lt r4.y, l(0.000000), r0.w
  and r4.x, r4.y, r4.x
  mad r4.y, -r9.z, r9.z, l(1.000000)
  sqrt r4.y, r4.y
  div r0.w, r4.y, r0.w
  and r0.w, r0.w, r4.x
  mul r9.xy, r0.wwww, r4.zwzz
  mul r4.xyz, r3.wwww, r6.xyzx
  add r6.xyz, -r8.xyzx, r9.xyzx
  mad r3.xyz, r4.xyzx, cb9[0].yyyy, -r3.xyzx
  dp3 r0.w, r3.xyzx, r1.yzwy
  dp3 r3.x, r6.xyzx, r6.xyzx
  lt r3.y, l(0.000000), r3.x
  div r4.x, r0.w, r3.x
  mov r4.y, l(1.000000)
  mul r3.xzw, r6.xxyz, r4.xxyx
  mov r4.z, v1.w
  mul r3.xzw, r3.xxzw, r4.zzxz
  mad r3.xzw, r3.xxzw, r7.xxyz, r5.xxyz
  movc r3.xyz, r3.yyyy, r3.xzwx, r5.xyzx
  add r3.xyz, r3.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r1.yzw, r0.wwww, r3.xxyz
endif 
mul r3.xyz, r0.yyyy, cb1[1].xyzx
mad r3.xyz, r0.xxxx, cb1[0].xyzx, r3.xyzx
mad r3.xyz, r0.zzzz, cb1[2].xyzx, r3.xyzx
add r3.xyz, r3.xyzx, cb1[3].xyzx
add r4.xyz, -r3.xyzx, cb1[15].xyzx
dp3 r0.w, r1.yzwy, r1.yzwy
lt r0.w, r0.w, l(0.100000)
movc r1.yzw, r0.wwww, l(0,0,0,1.000000), r1.yyzw
mul r5.xyz, r1.zzzz, cb1[1].xyzx
mad r5.xyz, r1.yyyy, cb1[0].xyzx, r5.xyzx
mad r1.yzw, r1.wwww, cb1[2].xxyz, r5.xxyz
dp3 r0.w, r1.yzwy, r1.yzwy
rsq r0.w, r0.w
mul r1.yzw, r0.wwww, r1.yyzw
mul r5.xyz, r2.yyyy, cb1[1].xyzx
mad r5.xyz, r2.xxxx, cb1[0].xyzx, r5.xyzx
mad r2.xyz, r2.zzzz, cb1[2].xyzx, r5.xyzx
mul r5.xyz, r1.zwyz, r2.zxyz
mad r5.xyz, r2.yzxy, r1.wyzw, -r5.xyzx
mul r5.xyz, r2.wwww, r5.xyzx
dp3 o6.x, r2.xyzx, r4.xyzx
dp3 o6.y, r5.xyzx, r4.xyzx
dp3 o6.z, r1.yzwy, r4.xyzx
add r4.xyz, -cb1[3].xyzx, cb1[15].xyzx
dp3 r6.x, cb1[0].xyzx, r4.xyzx
dp3 r6.y, cb1[1].xyzx, r4.xyzx
dp3 r6.z, cb1[2].xyzx, r4.xyzx
add r4.xyz, -r0.xyzx, r6.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mad r0.xyz, r4.xyzx, cb8[0].xxxx, r0.xyzx
mul r4.xyzw, r0.yyyy, cb1[9].xyzw
mad r4.xyzw, r0.xxxx, cb1[8].xyzw, r4.xyzw
mad r0.xyzw, r0.zzzz, cb1[10].xyzw, r4.xyzw
add r0.xyzw, r0.xyzw, cb1[11].xyzw
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
if_nz r2.w
  ld r4.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r2.w, r0.w, -r4.y
  mad r0.x, -r4.x, r2.w, r0.x
endif 
mov_sat o0.xy, cb6[r1.x + 1].xyxx
dp4 o8.x, r0.xyzw, cb0[0].xyzw
mov o0.z, cb6[r1.x + 1].z
mov o5.xyz, r3.xyzx
mov o5.w, l(1.000000)
mov o6.w, l(1.000000)
mov o7.xyzw, r0.xyzw
mov o8.yzw, l(0,0,0,0)
mov o2.xyz, r1.yzwy
mov o3.xyz, r2.xyzx
mov o4.xyz, r5.xyzx
ret 
// Approximately 211 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:28:00 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer rage_clipplanes
// {
//
//   float4 ClipPlanes;                 // Offset:    0 Size:    16
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer megashader_locals
// {
//
//   float zShiftScale;                 // Offset:    0 Size:     4
//   float parallaxScaleBias;           // Offset:    4 Size:     4 [unused]
//   float specularFresnel;             // Offset:    8 Size:     4 [unused]
//   float specularFalloffMult;         // Offset:   12 Size:     4 [unused]
//   float specularIntensityMult;       // Offset:   16 Size:     4 [unused]
//   float bumpiness;                   // Offset:   20 Size:     4 [unused]
//   float useTessellation;             // Offset:   24 Size:     4 [unused]
//   float HardAlphaBlend;              // Offset:   28 Size:     4 [unused]
//
// }
//
// cbuffer vehicle_globals
// {
//
//   bool switchOn;                     // Offset:    0 Size:     4
//   bool tyreDeformSwitchOn;           // Offset:    4 Size:     4 [unused]
//
// }
//
// cbuffer vehicle_damage_locals
// {
//
//   float BoundRadius;                 // Offset:    0 Size:     4
//   float DamageMultiplier;            // Offset:    4 Size:     4
//   float3 DamageTextureOffset;        // Offset:   16 Size:    12
//   float4 DamagedWheelOffsets[2];     // Offset:   32 Size:    32
//   bool bDebugDisplayDamageMap;       // Offset:   64 Size:     4 [unused]
//   bool bDebugDisplayDamageScale;     // Offset:   68 Size:     4 [unused]
//
// }
//
// cbuffer decal_per_bucket
// {
//
//   float3 gPositionScale;             // Offset:    0 Size:    12
//
// }
//
// cbuffer decal_per_instance
// {
//
//   struct
//   {
//       
//       float4 constSet0;              // Offset:    0
//       float4 vertexColor;            // Offset:   16
//       float4 texcoordConst;          // Offset:   32
//
//   } gPerInstCBuf[256];               // Offset:    0 Size: 12288
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// DamageSampler_s                   sampler      NA          NA    2        1
// DamageSampler                     texture  float4          2d    2        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_clipplanes                   cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// decal_per_instance                cbuffer      NA          NA    6        1
// vehicle_globals                   cbuffer      NA          NA    7        1
// megashader_locals                 cbuffer      NA          NA    8        1
// vehicle_damage_locals             cbuffer      NA          NA    9        1
// decal_per_bucket                  cbuffer      NA          NA   10        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float     zw
// TEXCOORD                 1   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float   xyz 
// TANGENT                  0   xyzw        4     NONE   float   xyzw
// TEXCOORD                 2   x           5     NONE    uint   x   
// SV_InstanceID            0   x           6   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// TEXCOORD                 4   xyzw        3     NONE   float   xyz 
// TEXCOORD                 5   xyzw        4     NONE   float   xyz 
// TEXCOORD                 6   xyzw        5     NONE   float   xyzw
// TEXCOORD                 7   xyzw        6     NONE   float   xyzw
// SV_Position              0   xyzw        7      POS   float   xyzw
// SV_ClipDistance          0   xyzw        8  CLIPDST   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb8[1], immediateIndexed
dcl_constantbuffer cb7[1], immediateIndexed
dcl_constantbuffer cb9[4], immediateIndexed
dcl_constantbuffer cb10[1], immediateIndexed
dcl_constantbuffer cb6[768], dynamicIndexed
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.zw
dcl_input v2.xy
dcl_input v3.xyz
dcl_input v4.xyzw
dcl_input v5.x
dcl_output o0.xyzw
dcl_output o1.xy
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output_siv o7.xyzw, position
dcl_output_siv o8.xyzw, clip_distance
dcl_temps 13
mul r0.xyz, v0.xyzx, cb10[0].xyzx
imul null, r1.x, v5.x, l(3)
itof r1.x, r1.x
ftou r1.x, r1.x
imul null, r1.x, r1.x, l(3)
mad o0.w, cb6[r1.x + 0].x, v1.z, cb6[r1.x + 0].y
mad r1.yzw, v3.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mad r2.xyzw, v4.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(-1.000000, -1.000000, -1.000000, -1.000000)
mad o1.xy, cb6[r1.x + 2].xyxx, v2.xyxx, cb6[r1.x + 2].zwzz
movc r3.x, cb7[0].x, l(1), l(0)
if_nz r3.x
  mad r3.xyz, cb10[0].xyzx, v0.xyzx, cb9[1].xyzx
  dp3 r3.w, r3.xyzx, r3.xyzx
  sqrt r3.w, r3.w
  div r3.xyz, r3.xyzx, r3.wwww
  add r3.z, -r3.z, l(1.000000)
  mul r3.z, r3.z, l(0.500000)
  dp2 r4.x, r3.xyxx, r3.xyxx
  max r4.x, r4.x, l(0.000000)
  sqrt r4.x, r4.x
  div r4.xyzw, r3.xyxy, r4.xxxx
  mul r4.xyzw, r3.zzzz, r4.xyzw
  mad r4.xyzw, r4.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
  mul r5.xyzw, r4.zwzw, l(126.732674, 126.732674, 126.732674, 126.732674)
  ge r6.xyzw, r5.zwzw, -r5.zwzw
  frc r5.xyzw, |r5.xyzw|
  movc r5.xyzw, r6.xyzw, r5.xyzw, -r5.zwzw
  sample_l r6.xyzw, r4.zwzz, t2.xyzw, s2, l(0.000000)
  mad r4.xyzw, r5.xyzw, l(-0.007891, -0.007891, -0.007891, -0.007891), r4.xyzw
  add r7.xyzw, r4.zwzw, l(0.007891, 0.000000, 0.000000, 0.007891)
  sample_l r8.xyzw, r7.xyxx, t2.xyzw, s2, l(0.000000)
  sample_l r7.xyzw, r7.zwzz, t2.xyzw, s2, l(0.000000)
  add r9.xyzw, r4.zwzw, l(0.007891, 0.007891, -0.500000, -0.500000)
  sample_l r10.xyzw, r9.xyxx, t2.xyzw, s2, l(0.000000)
  add r3.xy, -r5.zwzz, l(1.000000, 1.000000, 0.000000, 0.000000)
  mul r11.xyz, r6.xyzx, r3.xxxx
  mul r12.xyz, r5.zzzz, r8.xyzx
  mul r12.xyz, r3.yyyy, r12.xyzx
  mad r11.xyz, r11.xyzx, r3.yyyy, r12.xyzx
  mul r3.xyz, r7.xyzx, r3.xxxx
  mad r3.xyz, r3.xyzx, r5.wwww, r11.xyzx
  mul r5.xyz, r5.zzzz, r10.xyzx
  mad r3.xyz, r5.xyzx, r5.wwww, r3.xyzx
  div r3.w, r3.w, cb9[0].x
  min r3.w, r3.w, l(1.000000)
  mul r3.xyz, r3.wwww, r3.xyzx
  mul r3.xyz, r3.xyzx, cb9[0].yyyy
  mad r0.xyz, r3.xyzx, v1.wwww, r0.xyzx
  lt r3.x, l(0.000000), cb9[2].w
  add r5.xyz, -cb9[1].xyzx, cb9[2].xyzx
  add r5.xzw, r0.xxyz, -r5.xxyz
  dp3 r3.y, r5.xzwx, r5.xzwx
  sqrt r3.y, r3.y
  mul r3.z, l(1.100000), cb9[2].w
  div_sat r5.x, r3.y, r3.z
  lt r5.w, r5.x, l(1.000000)
  div r3.y, r5.z, r3.y
  mad r5.x, r5.x, l(0.100000), l(0.900000)
  mul r3.y, r3.y, r5.x
  mad r3.y, r3.y, r3.z, r5.y
  movc r3.y, r5.w, r3.y, r0.y
  movc r0.w, r3.x, r3.y, r0.y
  lt r3.x, l(0.000000), cb9[3].w
  add r5.xyz, -cb9[1].xyzx, cb9[3].xyzx
  add r5.xzw, r0.xxwz, -r5.xxyz
  dp3 r3.y, r5.xzwx, r5.xzwx
  sqrt r3.y, r3.y
  mul r3.z, l(1.100000), cb9[3].w
  div_sat r5.x, r3.y, r3.z
  lt r5.w, r5.x, l(1.000000)
  div r3.y, r5.z, r3.y
  mad r5.x, r5.x, l(0.100000), l(0.900000)
  mul r3.y, r3.y, r5.x
  mad r3.y, r3.y, r3.z, r5.y
  movc r3.y, r5.w, r3.y, r0.w
  movc r0.y, r3.x, r3.y, r0.w
  add r3.xy, r9.zwzz, r9.zwzz
  dp2 r0.w, r3.xyxx, r3.xyxx
  lt r3.z, l(0.000000), r0.w
  sqrt r0.w, r0.w
  and r0.w, r0.w, r3.z
  mad r3.z, r0.w, l(-2.000000), l(1.000000)
  max r5.z, r3.z, l(-1.000000)
  lt r3.z, r5.z, l(1.000000)
  lt r5.w, l(-1.000000), r5.z
  and r3.z, r3.z, r5.w
  lt r5.w, l(0.000000), r0.w
  and r3.z, r3.z, r5.w
  mad r5.w, -r5.z, r5.z, l(1.000000)
  sqrt r5.w, r5.w
  div r0.w, r5.w, r0.w
  and r0.w, r0.w, r3.z
  mul r5.xy, r0.wwww, r3.xyxx
  mul r3.xyz, r3.wwww, r6.xyzx
  mul r3.xyz, r3.xyzx, cb9[0].yyyy
  add r4.xyzw, r4.xyzw, l(-0.492109, -0.500000, -0.500000, -0.492109)
  add r4.xyzw, r4.xyzw, r4.xyzw
  dp2 r0.w, r4.xyxx, r4.xyxx
  lt r5.w, l(0.000000), r0.w
  sqrt r0.w, r0.w
  and r0.w, r0.w, r5.w
  mad r5.w, r0.w, l(-2.000000), l(1.000000)
  max r6.z, r5.w, l(-1.000000)
  lt r5.w, r6.z, l(1.000000)
  lt r6.w, l(-1.000000), r6.z
  and r5.w, r5.w, r6.w
  lt r6.w, l(0.000000), r0.w
  and r5.w, r5.w, r6.w
  mad r6.w, -r6.z, r6.z, l(1.000000)
  sqrt r6.w, r6.w
  div r0.w, r6.w, r0.w
  and r0.w, r0.w, r5.w
  mul r6.xy, r0.wwww, r4.xyxx
  mul r8.xyz, r3.wwww, r8.xyzx
  add r6.xyz, -r5.xyzx, r6.xyzx
  mad r8.xyz, r8.xyzx, cb9[0].yyyy, -r3.xyzx
  dp3 r0.w, r8.xyzx, r1.yzwy
  dp3 r4.x, r6.xyzx, r6.xyzx
  lt r4.y, l(0.000000), r4.x
  div r8.x, r0.w, r4.x
  mov r8.y, l(1.000000)
  mul r6.xyz, r6.xyzx, r8.xyxx
  mov r8.yz, v1.wwww
  mul r6.xyz, r6.xyzx, r8.zxzz
  mov r8.xz, l(0.100000,0,0.333300,0)
  mad r6.xyz, r6.xyzx, r8.xyzx, r1.yzwy
  movc r6.xyz, r4.yyyy, r6.xyzx, r1.yzwy
  dp2 r0.w, r4.zwzz, r4.zwzz
  lt r4.x, l(0.000000), r0.w
  sqrt r0.w, r0.w
  and r0.w, r0.w, r4.x
  mad r4.x, r0.w, l(-2.000000), l(1.000000)
  max r9.z, r4.x, l(-1.000000)
  lt r4.x, r9.z, l(1.000000)
  and r4.x, r4.x, l(0x3f800000)
  lt r4.y, l(-1.000000), r9.z
  and r4.x, r4.x, r4.y
  lt r4.y, l(0.000000), r0.w
  and r4.x, r4.x, r4.y
  mad r4.y, -r9.z, r9.z, l(1.000000)
  sqrt r4.y, r4.y
  div r0.w, r4.y, r0.w
  ne r4.x, l(0.000000, 0.000000, 0.000000, 0.000000), r4.x
  and r0.w, r0.w, r4.x
  mul r9.xy, r0.wwww, r4.zwzz
  mul r4.xyz, r3.wwww, r7.xyzx
  add r5.xyz, -r5.xyzx, r9.xyzx
  mad r3.xyz, r4.xyzx, cb9[0].yyyy, -r3.xyzx
  dp3 r0.w, r3.xyzx, r1.yzwy
  dp3 r3.x, r5.xyzx, r5.xyzx
  lt r3.y, l(0.000000), r3.x
  div r4.x, r0.w, r3.x
  mov r4.y, l(1.000000)
  mul r3.xzw, r5.xxyz, r4.xxyx
  mov r4.z, v1.w
  mul r3.xzw, r3.xxzw, r4.zzxz
  mad r3.xzw, r3.xxzw, r8.xxyz, r6.xxyz
  movc r3.xyz, r3.yyyy, r3.xzwx, r6.xyzx
  add r3.xyz, r3.xyzx, l(0.000100, 0.000100, 0.000100, 0.000000)
  dp3 r0.w, r3.xyzx, r3.xyzx
  rsq r0.w, r0.w
  mul r1.yzw, r0.wwww, r3.xxyz
endif 
mul r3.xyz, r0.yyyy, cb1[1].xyzx
mad r3.xyz, r0.xxxx, cb1[0].xyzx, r3.xyzx
mad r3.xyz, r0.zzzz, cb1[2].xyzx, r3.xyzx
add r3.xyz, r3.xyzx, cb1[3].xyzx
add r4.xyz, -r3.xyzx, cb1[15].xyzx
dp3 r0.w, r1.yzwy, r1.yzwy
lt r0.w, r0.w, l(0.100000)
movc r1.yzw, r0.wwww, l(0,0,0,1.000000), r1.yyzw
mul r5.xyz, r1.zzzz, cb1[1].xyzx
mad r5.xyz, r1.yyyy, cb1[0].xyzx, r5.xyzx
mad r1.yzw, r1.wwww, cb1[2].xxyz, r5.xxyz
dp3 r0.w, r1.yzwy, r1.yzwy
rsq r0.w, r0.w
mul r1.yzw, r0.wwww, r1.yyzw
mul r5.xyz, r2.yyyy, cb1[1].xyzx
mad r5.xyz, r2.xxxx, cb1[0].xyzx, r5.xyzx
mad r2.xyz, r2.zzzz, cb1[2].xyzx, r5.xyzx
mul r5.xyz, r1.zwyz, r2.zxyz
mad r5.xyz, r2.yzxy, r1.wyzw, -r5.xyzx
mul r5.xyz, r2.wwww, r5.xyzx
dp3 o6.x, r2.xyzx, r4.xyzx
dp3 o6.y, r5.xyzx, r4.xyzx
dp3 o6.z, r1.yzwy, r4.xyzx
add r4.xyz, -cb1[3].xyzx, cb1[15].xyzx
dp3 r6.x, cb1[0].xyzx, r4.xyzx
dp3 r6.y, cb1[1].xyzx, r4.xyzx
dp3 r6.z, cb1[2].xyzx, r4.xyzx
add r4.xyz, -r0.xyzx, r6.xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r0.w, r0.w
mul r4.xyz, r0.wwww, r4.xyzx
mad r0.xyz, r4.xyzx, cb8[0].xxxx, r0.xyzx
mul r4.xyzw, r0.yyyy, cb1[9].xyzw
mad r4.xyzw, r0.xxxx, cb1[8].xyzw, r4.xyzw
mad r0.xyzw, r0.zzzz, cb1[10].xyzw, r4.xyzw
add r0.xyzw, r0.xyzw, cb1[11].xyzw
ne r2.w, l(0.000000), cb2[22].z
if_nz r2.w
  ld r4.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r2.w, r0.w, -r4.y
  mad r0.x, -r4.x, r2.w, r0.x
endif 
mov_sat o0.xy, cb6[r1.x + 1].xyxx
dp4 o8.x, r0.xyzw, cb0[0].xyzw
mov o0.z, cb6[r1.x + 1].z
mov o5.xyz, r3.xyzx
mov o5.w, l(1.000000)
mov o6.w, l(1.000000)
mov o7.xyzw, r0.xyzw
mov o8.yzw, l(0,0,0,0)
mov o2.xyz, r1.yzwy
mov o3.xyz, r2.xyzx
mov o4.xyz, r5.xyzx
ret 
// Approximately 217 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
