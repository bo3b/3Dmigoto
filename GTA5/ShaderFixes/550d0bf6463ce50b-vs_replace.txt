
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer lighting_globals : register(b3)
{
  float4 gDirectionalLight : packoffset(c0);
  float4 gDirectionalColour : packoffset(c1);
  int gNumForwardLights : packoffset(c2);
  float4 gLightPositionAndInvDistSqr[8] : packoffset(c3);
  float4 gLightDirectionAndFalloffExponent[8] : packoffset(c11);
  float4 gLightColourAndCapsuleExtent[8] : packoffset(c19);
  float gLightConeScale[8] : packoffset(c27);
  float gLightConeOffset[8] : packoffset(c35);
  float4 gLightNaturalAmbient0 : packoffset(c43);
  float4 gLightNaturalAmbient1 : packoffset(c44);
  float4 gLightArtificialIntAmbient0 : packoffset(c45);
  float4 gLightArtificialIntAmbient1 : packoffset(c46);
  float4 gLightArtificialExtAmbient0 : packoffset(c47);
  float4 gLightArtificialExtAmbient1 : packoffset(c48);
  float4 gDirectionalAmbientColour : packoffset(c49);
  float4 globalFogParams[5] : packoffset(c50);
  float4 globalFogColor : packoffset(c55);
  float4 globalFogColorE : packoffset(c56);
  float4 globalFogColorN : packoffset(c57);
  float4 globalFogColorMoon : packoffset(c58);
  float4 gReflectionTweaks : packoffset(c59);
}

cbuffer im_cbuffer : register(b5)
{
  float4 TexelSize : packoffset(c0);
  float4 refMipBlurParams : packoffset(c1);
  float4 GeneralParams0 : packoffset(c2);
  float4 GeneralParams1 : packoffset(c3);
  float g_fBilateralCoefficient : packoffset(c4);
  float g_fBilateralEdgeThreshold : packoffset(c4.y);
  float DistantCarAlpha : packoffset(c4.z);
  float4 tonemapColorFilterParams0 : packoffset(c5);
  float4 tonemapColorFilterParams1 : packoffset(c6);
  float4 RenderTexMSAAParam : packoffset(c7);
  float4 RenderPointMapINTParam : packoffset(c8);
}
SamplerState CoronasDepthMapSampler_s : register(s0);
Texture2D<float4> CoronasDepthMapSampler : register(t0);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float2 v2 : TEXCOORD0,
  float3 v3 : NORMAL0,
  uint v4 : SV_InstanceID0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float3 o2 : TEXCOORD1)
{
  const float4 icb[] = { { 0.772968, -0.222156, 0.528241, -0.802848},
                              { 0.262963, -0.075235, 0.823705, -0.556188},
                              { 0.569683, 0.121086, 0.398884, -0.411417},
                              { 0.440016, 0.487990, -0.034640, 0.176342},
                              { -0.120323, -0.586049, 0.200466, -0.687419},
                              { -0.258614, -0.163080, -0.688321, -0.635556},
                              { -0.345086, -0.848096, -0.362813, 0.614420},
                              { 0.061750, 0.506920, 0.977316, 0.208662},
                              { 0.789433, 0.490265, -0.702313, -0.071461},
                              { -0.495341, 0.233821, 0.179311, 0.962585},
                              { -0.930975, -0.327397, -0.912985, 0.241697},
                              { -0.217266, 0.972708, -0.697119, 0.529669} };
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = gWorldViewProj._m10_m11_m13 * v3.yyy;
  r0.xyz = v3.xxx * gWorldViewProj._m00_m01_m03 + r0.xyz;
  r0.xyz = v3.zzz * gWorldViewProj._m20_m21_m23 + r0.xyz;
  r0.yzw = gWorldViewProj._m30_m31_m33 + r0.xyz;
  r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r1.z = -r1.y + r0.w;
  r0.x = r1.x * r1.z + r0.y;
  r0.y = 1 / r0.w;
  r0.xz = r0.xz * r0.yy;
  r1.zw = r0.xz * float2(0.5,-0.5) + float2(0.5,0.5);
  r2.xyzw = CoronasDepthMapSampler.SampleLevel(CoronasDepthMapSampler_s, r1.zw, 0).xyzw;
  r1.z = r2.x >= r0.w;
  if (r1.z != 0) {
    r2.xyz = gWorldViewProj._m10_m11_m13 * v0.yyy;
    r2.xyz = v0.xxx * gWorldViewProj._m00_m01_m03 + r2.xyz;
    r2.xyz = v0.zzz * gWorldViewProj._m20_m21_m23 + r2.xyz;
    r2.yzw = gWorldViewProj._m30_m31_m33 + r2.xyz;
    r1.z = r2.w + -r1.y;
    r2.x = r1.x * r1.z + r2.y;
    r1.zw = r2.xz * r0.yy + -r0.xz;
    r0.y = dot(r1.zw, r1.zw);
    r0.y = sqrt(r0.y);
    r0.y = GeneralParams0.x * r0.y;
    r1.z = dot(GeneralParams0.yy, globalScreenSize.zz);
    r0.y = min(r1.z, r0.y);
    r1.zw = float2(0,0);
    while (true) {
      r2.x = (int)r1.w >= 12;
      if (r2.x != 0) break;
      r2.xyzw = icb[r1.w+0].xyzw * r0.yyyy + r0.xzxz;
      r2.xyzw = r2.xyzw * float4(0.5,-0.5,0.5,-0.5) + float4(0.5,0.5,0.5,0.5);
      r3.xyzw = CoronasDepthMapSampler.SampleLevel(CoronasDepthMapSampler_s, r2.xy, 0).xyzw;
      r2.x = r3.x >= r0.w;
      r2.x = r2.x ? 1.000000 : 0;
      r2.x = r2.x + r1.z;
      r3.xyzw = CoronasDepthMapSampler.SampleLevel(CoronasDepthMapSampler_s, r2.zw, 0).xyzw;
      r2.y = r3.x >= r0.w;
      r2.y = r2.y ? 1.000000 : 0;
      r1.z = r2.x + r2.y;
      r1.w = (int)r1.w + 1;
    }
  } else {
    r1.z = 0;
  }
  r0.y = 0.0416666679 * r1.z;
  r0.w = 1.00010002 + -refMipBlurParams.x;
  r0.w = 1 / r0.w;
  r0.xz = saturate(-refMipBlurParams.xx + abs(r0.xz));
  r0.x = max(r0.x, r0.z);
  r0.x = saturate(r0.x * r0.w);
  r0.x = 1 + -r0.x;
  r0.xy = r0.xy * r0.xy;
  r0.x = r0.y * r0.x;
  r0.y = 0 < r0.x;
  r0.yzw = r0.yyy ? v0.xyz : v3.xyz;
  r2.xyzw = gWorldViewProj._m10_m11_m12_m13 * r0.zzzz;
  r2.xyzw = r0.yyyy * gWorldViewProj._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = r0.wwww * gWorldViewProj._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = gWorldViewProj._m30_m31_m32_m33 + r2.xyzw;
  r0.y = r2.w + -r1.y;
  o0.x = r1.x * r0.y + r2.x;
  r0.xyz = v1.xyz * r0.xxx;
  r0.xyz = v2.yyy * r0.xyz;
  r1.xyz = -gViewInverse._m30_m31_m32 + v0.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r1.x = -globalFogParams[0].x + r0.w;
  r1.x = max(0, r1.x);
  r0.w = r1.x / r0.w;
  r0.w = r1.z * r0.w;
  r1.y = globalFogParams[2].z * r0.w;
  r0.w = 0.00999999978 < abs(r0.w);
  r1.z = -1.44269502 * r1.y;
  r1.z = exp2(r1.z);
  r1.z = 1 + -r1.z;
  r1.y = r1.z / r1.y;
  r0.w = r0.w ? r1.y : 1;
  r1.y = globalFogParams[1].w * r1.x;
  r0.w = r1.y * r0.w;
  r0.w = min(1, r0.w);
  r0.w = 1.44269502 * r0.w;
  r0.w = exp2(r0.w);
  r0.w = min(1, r0.w);
  r0.w = 1 + -r0.w;
  r1.y = globalFogParams[2].y * r0.w;
  r0.w = -r0.w * globalFogParams[2].y + 1;
  r0.w = globalFogParams[1].y * r0.w;
  r1.x = -globalFogParams[2].x + r1.x;
  r1.x = max(0, r1.x);
  r1.x = globalFogParams[1].x * r1.x;
  r1.x = 1.44269502 * r1.x;
  r1.x = exp2(r1.x);
  r1.x = 1 + -r1.x;
  r0.w = saturate(r0.w * r1.x + r1.y);
  r0.w = 1 + -r0.w;
  o2.xyz = r0.xyz * r0.www;
  o0.yzw = r2.yzw;
  o1.x = v2.x;
  o1.y = v1.w;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16 [unused]
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16 [unused]
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16 [unused]
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16 [unused]
//   float4 globalFogParams[5];         // Offset:  800 Size:    80
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer im_cbuffer
// {
//
//   float4 TexelSize;                  // Offset:    0 Size:    16 [unused]
//   float4 refMipBlurParams;           // Offset:   16 Size:    16
//   float4 GeneralParams0;             // Offset:   32 Size:    16
//   float4 GeneralParams1;             // Offset:   48 Size:    16 [unused]
//   float g_fBilateralCoefficient;     // Offset:   64 Size:     4 [unused]
//   float g_fBilateralEdgeThreshold;   // Offset:   68 Size:     4 [unused]
//   float DistantCarAlpha;             // Offset:   72 Size:     4 [unused]
//   float4 tonemapColorFilterParams0;  // Offset:   80 Size:    16 [unused]
//   float4 tonemapColorFilterParams1;  // Offset:   96 Size:    16 [unused]
//   float4 RenderTexMSAAParam;         // Offset:  112 Size:    16 [unused]
//   float4 RenderPointMapINTParam;     // Offset:  128 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CoronasDepthMapSampler            sampler      NA          NA    0        1
// CoronasDepthMapSampler            texture  float4          2d    0        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_globals                  cbuffer      NA          NA    3        1
// im_cbuffer                        cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float   xyz 
// SV_InstanceID            0   x           4   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
vs_4_0
dcl_immediateConstantBuffer { { 0.772968, -0.222156, 0.528241, -0.802848},
                              { 0.262963, -0.075235, 0.823705, -0.556188},
                              { 0.569683, 0.121086, 0.398884, -0.411417},
                              { 0.440016, 0.487990, -0.034640, 0.176342},
                              { -0.120323, -0.586049, 0.200466, -0.687419},
                              { -0.258614, -0.163080, -0.688321, -0.635556},
                              { -0.345086, -0.848096, -0.362813, 0.614420},
                              { 0.061750, 0.506920, 0.977316, 0.208662},
                              { 0.789433, 0.490265, -0.702313, -0.071461},
                              { -0.495341, 0.233821, 0.179311, 0.962585},
                              { -0.930975, -0.327397, -0.912985, 0.241697},
                              { -0.217266, 0.972708, -0.697119, 0.529669} }
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[16], immediateIndexed
dcl_constantbuffer cb3[53], immediateIndexed
dcl_constantbuffer cb5[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_temps 4
mul r0.xyz, v3.yyyy, cb1[9].xywx
mad r0.xyz, v3.xxxx, cb1[8].xywx, r0.xyzx
mad r0.xyz, v3.zzzz, cb1[10].xywx, r0.xyzx
add r0.yzw, r0.xxyz, cb1[11].xxyw
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.z, r0.w, -r1.y
mad r0.x, r1.x, r1.z, r0.y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.xz, r0.yyyy, r0.xxzx
mad r1.zw, r0.xxxz, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
ge r1.z, r2.x, r0.w
if_nz r1.z
  mul r2.xyz, v0.yyyy, cb1[9].xywx
  mad r2.xyz, v0.xxxx, cb1[8].xywx, r2.xyzx
  mad r2.xyz, v0.zzzz, cb1[10].xywx, r2.xyzx
  add r2.yzw, r2.xxyz, cb1[11].xxyw
  add r1.z, -r1.y, r2.w
  mad r2.x, r1.x, r1.z, r2.y
  mad r1.zw, r2.xxxz, r0.yyyy, -r0.xxxz
  dp2 r0.y, r1.zwzz, r1.zwzz
  sqrt r0.y, r0.y
  mul r0.y, r0.y, cb5[2].x
  dp2 r1.z, cb5[2].yyyy, cb2[15].zzzz
  min r0.y, r0.y, r1.z
  mov r1.zw, l(0,0,0,0)
  loop 
    ige r2.x, r1.w, l(12)
    breakc_nz r2.x
    mad r2.xyzw, icb[r1.w + 0].xyzw, r0.yyyy, r0.xzxz
    mad r2.xyzw, r2.xyzw, l(0.500000, -0.500000, 0.500000, -0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
    sample_l r3.xyzw, r2.xyxx, t0.xyzw, s0, l(0.000000)
    ge r2.x, r3.x, r0.w
    and r2.x, r2.x, l(0x3f800000)
    add r2.x, r1.z, r2.x
    sample_l r3.xyzw, r2.zwzz, t0.xyzw, s0, l(0.000000)
    ge r2.y, r3.x, r0.w
    and r2.y, r2.y, l(0x3f800000)
    add r1.z, r2.y, r2.x
    iadd r1.w, r1.w, l(1)
  endloop 
else 
  mov r1.z, l(0)
endif 
mul r0.y, r1.z, l(0.041667)
add r0.w, -cb5[1].x, l(1.000100)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add_sat r0.xz, |r0.xxzx|, -cb5[1].xxxx
max r0.x, r0.z, r0.x
mul_sat r0.x, r0.w, r0.x
add r0.x, -r0.x, l(1.000000)
mul r0.xy, r0.xyxx, r0.xyxx
mul r0.x, r0.x, r0.y
lt r0.y, l(0.000000), r0.x
movc r0.yzw, r0.yyyy, v0.xxyz, v3.xxyz
mul r2.xyzw, r0.zzzz, cb1[9].xyzw
mad r2.xyzw, r0.yyyy, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, r0.wwww, cb1[10].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[11].xyzw
add r0.y, -r1.y, r2.w
mad o0.x, r1.x, r0.y, r2.x
mul r0.xyz, r0.xxxx, v1.xyzx
mul r0.xyz, r0.xyzx, v2.yyyy
add r1.xyz, v0.xyzx, -cb1[15].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
add r1.x, r0.w, -cb3[50].x
max r1.x, r1.x, l(0.000000)
div r0.w, r1.x, r0.w
mul r0.w, r0.w, r1.z
mul r1.y, r0.w, cb3[52].z
lt r0.w, l(0.010000), |r0.w|
mul r1.z, r1.y, l(-1.442695)
exp r1.z, r1.z
add r1.z, -r1.z, l(1.000000)
div r1.y, r1.z, r1.y
movc r0.w, r0.w, r1.y, l(1.000000)
mul r1.y, r1.x, cb3[51].w
mul r0.w, r0.w, r1.y
min r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(1.442695)
exp r0.w, r0.w
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
mul r1.y, r0.w, cb3[52].y
mad r0.w, -r0.w, cb3[52].y, l(1.000000)
mul r0.w, r0.w, cb3[51].y
add r1.x, r1.x, -cb3[52].x
max r1.x, r1.x, l(0.000000)
mul r1.x, r1.x, cb3[51].x
mul r1.x, r1.x, l(1.442695)
exp r1.x, r1.x
add r1.x, -r1.x, l(1.000000)
mad_sat r0.w, r0.w, r1.x, r1.y
add r0.w, -r0.w, l(1.000000)
mul o2.xyz, r0.wwww, r0.xyzx
mov o0.yzw, r2.yyzw
mov o1.x, v2.x
mov o1.y, v1.w
ret 
// Approximately 100 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ HLSL errors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Program Files\Rockstar Games\Grand Theft Auto V\wrapper1349(115,13-52): warning X3206: 'Load': implicit truncation of vector type
C:\Program Files\Rockstar Games\Grand Theft Auto V\wrapper1349(92,14-15): warning X3578: Output value 'o1' is not completely initialized
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:08:34 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16 [unused]
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16 [unused]
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16 [unused]
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16 [unused]
//   float4 globalFogParams[5];         // Offset:  800 Size:    80
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer im_cbuffer
// {
//
//   float4 TexelSize;                  // Offset:    0 Size:    16 [unused]
//   float4 refMipBlurParams;           // Offset:   16 Size:    16
//   float4 GeneralParams0;             // Offset:   32 Size:    16
//   float4 GeneralParams1;             // Offset:   48 Size:    16 [unused]
//   float g_fBilateralCoefficient;     // Offset:   64 Size:     4 [unused]
//   float g_fBilateralEdgeThreshold;   // Offset:   68 Size:     4 [unused]
//   float DistantCarAlpha;             // Offset:   72 Size:     4 [unused]
//   float4 tonemapColorFilterParams0;  // Offset:   80 Size:    16 [unused]
//   float4 tonemapColorFilterParams1;  // Offset:   96 Size:    16 [unused]
//   float4 RenderTexMSAAParam;         // Offset:  112 Size:    16 [unused]
//   float4 RenderPointMapINTParam;     // Offset:  128 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// CoronasDepthMapSampler_s          sampler      NA          NA    0        1
// CoronasDepthMapSampler            texture  float4          2d    0        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_globals                  cbuffer      NA          NA    3        1
// im_cbuffer                        cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// NORMAL                   0   xyz         3     NONE   float   xyz 
// SV_InstanceID            0   x           4   INSTID    uint       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
//
vs_4_0
dcl_immediateConstantBuffer { { 0.772968, -0.222156, 0.528241, -0.802848},
                              { 0.262963, -0.075235, 0.823705, -0.556188},
                              { 0.569683, 0.121086, 0.398884, -0.411417},
                              { 0.440016, 0.487990, -0.034640, 0.176342},
                              { -0.120323, -0.586049, 0.200466, -0.687419},
                              { -0.258614, -0.163080, -0.688321, -0.635556},
                              { -0.345086, -0.848096, -0.362813, 0.614420},
                              { 0.061750, 0.506920, 0.977316, 0.208662},
                              { 0.789433, 0.490265, -0.702313, -0.071461},
                              { -0.495341, 0.233821, 0.179311, 0.962585},
                              { -0.930975, -0.327397, -0.912985, 0.241697},
                              { -0.217266, 0.972708, -0.697119, 0.529669} }
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[16], immediateIndexed
dcl_constantbuffer cb3[53], immediateIndexed
dcl_constantbuffer cb5[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o2.xyz
dcl_temps 5
mul r0.xyz, v3.yyyy, cb1[9].xywx
mad r0.xyz, v3.xxxx, cb1[8].xywx, r0.xyzx
mad r0.xyz, v3.zzzz, cb1[10].xywx, r0.xyzx
add r0.yzw, r0.xxyz, cb1[11].xxyw
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.z, r0.w, -r1.y
mad r0.x, r1.x, r1.z, r0.y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r0.xz, r0.yyyy, r0.xxzx
mad r1.zw, r0.xxxz, l(0.000000, 0.000000, 0.500000, -0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
sample_l r2.xyzw, r1.zwzz, t0.xyzw, s0, l(0.000000)
ge r1.z, r2.x, r0.w
if_nz r1.z
  mul r2.xyz, v0.yyyy, cb1[9].xywx
  mad r2.xyz, v0.xxxx, cb1[8].xywx, r2.xyzx
  mad r2.xyz, v0.zzzz, cb1[10].xywx, r2.xyzx
  add r2.yzw, r2.xxyz, cb1[11].xxyw
  add r1.z, -r1.y, r2.w
  mad r2.x, r1.x, r1.z, r2.y
  mad r1.zw, r2.xxxz, r0.yyyy, -r0.xxxz
  dp2 r0.y, r1.zwzz, r1.zwzz
  sqrt r0.y, r0.y
  mul r0.y, r0.y, cb5[2].x
  dp2 r1.z, cb5[2].yyyy, cb2[15].zzzz
  min r0.y, r0.y, r1.z
  mov r1.zw, l(0,0,0,0)
  loop 
    ftoi r2.x, r1.w
    ige r2.y, r2.x, l(12)
    if_nz r2.y
      break 
    endif 
    ftou r2.y, r1.w
    mad r3.xyzw, icb[r2.y + 0].xyzw, r0.yyyy, r0.xzxz
    mad r3.xyzw, r3.xyzw, l(0.500000, -0.500000, 0.500000, -0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
    sample_l r4.xyzw, r3.xyxx, t0.xyzw, s0, l(0.000000)
    ge r2.y, r4.x, r0.w
    and r2.y, r2.y, l(0x3f800000)
    add r2.y, r1.z, r2.y
    sample_l r3.xyzw, r3.zwzz, t0.xyzw, s0, l(0.000000)
    ge r2.z, r3.x, r0.w
    and r2.z, r2.z, l(0x3f800000)
    add r1.z, r2.z, r2.y
    iadd r2.x, r2.x, l(1)
    itof r1.w, r2.x
  endloop 
else 
  mov r1.z, l(0)
endif 
mul r2.y, r1.z, l(0.041667)
add r0.y, l(1.000100), -cb5[1].x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
add_sat r0.xz, |r0.xxzx|, -cb5[1].xxxx
max r0.x, r0.z, r0.x
mul_sat r0.x, r0.y, r0.x
add r2.x, -r0.x, l(1.000000)
mul r0.xy, r2.xyxx, r2.xyxx
mul r0.x, r0.x, r0.y
lt r0.y, l(0.000000), r0.x
movc r0.yzw, r0.yyyy, v0.xxyz, v3.xxyz
mul r2.xyzw, r0.zzzz, cb1[9].xyzw
mad r2.xyzw, r0.yyyy, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, r0.wwww, cb1[10].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[11].xyzw
add r0.y, -r1.y, r2.w
mad o0.x, r1.x, r0.y, r2.x
mul r0.xyz, r0.xxxx, v1.xyzx
mul r0.xyz, r0.xyzx, v2.yyyy
add r1.xyz, v0.xyzx, -cb1[15].xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
add r1.x, r0.w, -cb3[50].x
max r1.x, r1.x, l(0.000000)
div r0.w, r1.x, r0.w
mul r0.w, r0.w, r1.z
mul r1.y, r0.w, cb3[52].z
lt r0.w, l(0.010000), |r0.w|
mul r1.z, r1.y, l(-1.442695)
exp r1.z, r1.z
add r1.z, -r1.z, l(1.000000)
div r1.y, r1.z, r1.y
movc r0.w, r0.w, r1.y, l(1.000000)
mul r1.y, r1.x, cb3[51].w
mul r0.w, r0.w, r1.y
min r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, l(1.442695)
exp r0.w, r0.w
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
mul r1.y, r0.w, cb3[52].y
mad r0.w, -r0.w, cb3[52].y, l(1.000000)
mul r0.w, r0.w, cb3[51].y
add r1.x, r1.x, -cb3[52].x
max r1.x, r1.x, l(0.000000)
mul r1.x, r1.x, cb3[51].x
mul r1.x, r1.x, l(1.442695)
exp r1.x, r1.x
add r1.x, -r1.x, l(1.000000)
mad_sat r0.w, r0.w, r1.x, r1.y
add r0.w, -r0.w, l(1.000000)
mul o2.xyz, r0.wwww, r0.xyzx
mov o0.yzw, r2.yyzw
mov o1.x, v2.x
mov o1.y, v1.w
ret 
// Approximately 105 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
