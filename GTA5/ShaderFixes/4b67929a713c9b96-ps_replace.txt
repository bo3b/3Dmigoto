
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer more_stuff : register(b5)
{
  float4 gEntitySelectColor[2] : packoffset(c0);
  float4 gAmbientOcclusionEffect : packoffset(c2);
  float4 gDynamicBakesAndWetness : packoffset(c3);
  float4 gAlphaRefVec0 : packoffset(c4);
  float4 gAlphaRefVec1 : packoffset(c5);
  float gAlphaTestRef : packoffset(c6);
  bool gTreesUseDiscard : packoffset(c6.y);
  float gReflectionMipCount : packoffset(c6.z);
  float gTransparencyAASamples : packoffset(c6.w);
  bool gUseFogRay : packoffset(c7);
}

cbuffer vfx_decaldyn_locals : register(b11)
{
  float polyRejectThreshold : packoffset(c0);
  float specularFalloffMult : packoffset(c0.y);
  float specularIntensityMult : packoffset(c0.z);
  float specularFresnel : packoffset(c0.w);
  float emissiveMultiplier : packoffset(c1);
  float parallaxScaleBias : packoffset(c1.y);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState gDecalSampler_s : register(s2);
SamplerState gDecalNormalSampler_s : register(s3);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> gDecalSampler : register(t2);
Texture2D<float4> gDecalNormalSampler : register(t3);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  float4 v7 : TEXCOORD6,
  float4 v8 : TEXCOORD7,
  float4 v9 : TEXCOORD8,
  float4 v10 : TEXCOORD9,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = deferredLightScreenSize.zw * v0.xy;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r1.xyz = v2.xyz / v2.www;
  r0.w = 0 != gStereoParams.z;
  r1.w = v2.w == 1.000000;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) {
    r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r0.w = -r2.y + r0.z;
    r0.w = r2.x * r0.w;
    r0.w = deferredProjectionParams.x * r0.w;
    r2.xyz = -gViewInverse._m00_m01_m02 * r0.www + gViewInverse._m30_m31_m32;
  } else {
    r3.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r2.xyz = gViewInverse._m30_m31_m32 + r3.xyz;
  }
  r1.xyz = r1.xyz * r0.zzz + r2.xyz;
  r0.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.x = dot(v5.xyz, -r0.xyz);
  r0.x = r0.x < polyRejectThreshold;
  if (r0.x != 0) {
    r0.yzw = float3(0,0,0);
    r1.w = 0;
    r3.z = 0;
    r4.xyz = float3(0,0,0);
    r5.xyz = float3(0,0,0);
    r2.xyzw = float4(0,0,0,0);
  }
  r1.xyz = -v1.xyz + r1.xyz;
  r4.w = dot(v4.xyz, r1.xyz);
  r1.x = dot(-v3.xyz, r1.xyz);
  r6.x = v4.w * r4.w;
  r6.y = v3.w * r1.x;
  r1.xy = r6.xy * float2(0.5,0.5) + float2(0.5,0.5);
  r6.xy = r1.xy * float2(-2,-2) + float2(1,1);
  r6.xy = v9.xy * r6.xy + r1.xy;
  r1.x = 0 < v9.z;
  r1.z = v9.w / v9.z;
  r4.w = floor(r1.z);
  r1.z = -r4.w + r1.z;
  r1.z = 1 + -r1.z;
  r4.w = 1 / v3.w;
  r4.w = r4.w + r4.w;
  r4.w = r4.w / v9.z;
  r1.z = r6.y * r4.w + r1.z;
  r6.z = r1.x ? r1.z : r6.y;
  r1.xz = v7.xy + r6.xz;
  r1.xz = v7.zw * r1.xz;
  r7.xyz = v4.zxy * v3.yzx;
  r7.xyz = v4.yzx * v3.zxy + -r7.xyz;
  r4.w = dot(r7.xyz, r7.xyz);
  r4.w = rsqrt(r4.w);
  r7.xyz = r7.xyz * r4.www;
  r6.zw = v9.xy * float2(-2,-2) + float2(1,1);
  r8.xyz = v4.xyz * r6.zzz;
  r9.xyz = -v3.xyz * r6.www;
  r10.x = dot(r8.xyz, v8.xyz);
  r10.y = dot(r9.xyz, v8.xyz);
  r10.z = dot(r7.xyz, v8.xyz);
  r11.xyzw = gDecalNormalSampler.Sample(gDecalNormalSampler_s, r1.xz).xyzw;
  r4.w = dot(r10.xyz, r10.xyz);
  r4.w = rsqrt(r4.w);
  r6.zw = r10.xy * r4.ww;
  r6.zw = parallaxScaleBias * -r6.zw;
  r10.xy = r1.xz;
  r12.yz = r11.xy;
  r12.x = -1;
  r12.w = -r11.w;
  r4.w = 0;
  while (true) {
    r5.w = (int)r4.w >= 8;
    if (r5.w != 0) break;
    r10.zw = r6.zw * float2(0.125,0.125) + r10.xy;
    r13.xyzw = gDecalNormalSampler.Sample(gDecalNormalSampler_s, r10.zw).xyzw;
    r5.w = r12.x < r12.w;
    r14.x = 0.125 + r12.x;
    r10.xy = r5.ww ? r10.zw : r10.xy;
    r14.yzw = float3(1,1,-1) * r13.xyw;
    r12.xyzw = r5.wwww ? r14.xyzw : r12.xyzw;
    r4.w = (int)r4.w + 1;
  }
  r10.xyzw = gDecalSampler.Sample(gDecalSampler_s, r10.xy).xyzw;
  if (r0.x == 0) {
    r0.x = v6.z + -v6.y;
    r0.x = r1.y * r0.x + v6.y;
    r0.x = v6.x * r0.x;
    r1.xy = r6.xy < float2(0,0);
    r6.xy = float2(1,1) < r6.xy;
    r1.x = (int)r1.x | (int)r6.x;
    r1.x = (int)r1.y | (int)r1.x;
    r1.x = (int)r6.y | (int)r1.x;
    r0.x = r1.x ? 0 : r0.x;
    r1.xy = r12.yz * float2(2,2) + float2(-1,-1);
    r1.z = dot(r1.xy, r1.xy);
    r1.z = 1 + -r1.z;
    r1.z = sqrt(abs(r1.z));
    r6.xyz = r1.yyy * r9.xyz;
    r6.xyz = r1.xxx * r8.xyz + r6.xyz;
    r0.yzw = r1.zzz * r7.xyz + r6.xyz;
    r6.x = v8.w;
    r6.y = v1.w;
    r6.z = v5.w;
    r6.w = 1;
    r6.xyzw = r10.xyzw * r6.xyzw;
    r1.x = dot(r12.yz, r12.yz);
    r1.x = r1.x >= 0.00200000009;
    r1.x = r1.x ? 1.000000 : 0;
    r4.xyz = r6.xyz * r1.xxx;
    r6.x = v6.w;
    r6.y = 1;
    r1.yz = r6.xy * r1.xx;
    r5.z = specularIntensityMult * r1.x;
    r5.x = r6.w * r0.x;
    r5.y = globalScalars.z * r1.y;
    r2.y = emissiveMultiplier * r1.z;
    r1.w = 1;
    r2.x = specularFalloffMult;
    r2.z = globalScalars2.z;
    r3.z = specularFresnel;
    r2.w = -1;
  }
  if (r2.w != 0) {
    r0.x = globalScalars.x * r5.x;
    r1.x = r5.x * r1.w;
    o1.w = globalScalars.x * r1.x;
    o1.xyz = r0.yzw * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
    r3.xy = float2(0.001953125,0.0625) * r2.xy;
    o3.z = saturate(r3.y);
    r0.y = -0.349999994 + r0.w;
    r0.y = saturate(1.53846157 * r0.y);
    r0.y = gDynamicBakesAndWetness.z * r0.y;
    r0.z = 1 + -r2.z;
    r0.y = r0.y * r0.z;
    r0.y = r0.y * r5.y;
    r0.z = -r5.z * 0.5 + 1;
    r0.z = r0.y * r0.z;
    r0.z = r0.z * -0.5 + 1;
    o0.xyz = r4.xyz * r0.zzz;
    r0.z = saturate(0.699999988 + r5.z);
    r1.xy = float2(0.5,0.48828125) * r0.zz;
    r3.w = r5.z;
    r1.z = 0.970000029;
    r1.xyz = r1.xyz + -r3.wxz;
    r1.xyz = max(float3(0,0,0), r1.xyz);
    r0.yzw = r1.xyz * r0.yyy + r3.wxz;
    o2.xy = sqrt(r0.yz);
    o0.w = r0.x;
    o2.zw = r0.wx;
    o3.xy = float2(0,0);
    o3.w = r0.x;
    return;
  } else {
    o0.xyzw = float4(0,0,0,0);
    o1.xyzw = float4(0,0,0,0);
    o2.xyzw = float4(0,0,0,0);
    o3.xyzw = float4(0,0,0,0);
    return;
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16
//   float4 globalScalars2;             // Offset:  208 Size:    16
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer more_stuff
// {
//
//   float4 gEntitySelectColor[2];      // Offset:    0 Size:    32 [unused]
//   float4 gAmbientOcclusionEffect;    // Offset:   32 Size:    16 [unused]
//   float4 gDynamicBakesAndWetness;    // Offset:   48 Size:    16
//   float4 gAlphaRefVec0;              // Offset:   64 Size:    16 [unused]
//   float4 gAlphaRefVec1;              // Offset:   80 Size:    16 [unused]
//   float gAlphaTestRef;               // Offset:   96 Size:     4 [unused]
//   bool gTreesUseDiscard;             // Offset:  100 Size:     4 [unused]
//   float gReflectionMipCount;         // Offset:  104 Size:     4 [unused]
//   float gTransparencyAASamples;      // Offset:  108 Size:     4 [unused]
//   bool gUseFogRay;                   // Offset:  112 Size:     4 [unused]
//
// }
//
// cbuffer vfx_decaldyn_locals
// {
//
//   float polyRejectThreshold;         // Offset:    0 Size:     4
//   float specularFalloffMult;         // Offset:    4 Size:     4
//   float specularIntensityMult;       // Offset:    8 Size:     4
//   float specularFresnel;             // Offset:   12 Size:     4
//   float emissiveMultiplier;          // Offset:   16 Size:     4
//   float parallaxScaleBias;           // Offset:   20 Size:     4
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDecalSampler                     sampler      NA          NA    2        1
// gDecalNormalSampler               sampler      NA          NA    3        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// gDecalSampler                     texture  float4          2d    2        1
// gDecalNormalSampler               texture  float4          2d    3        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// more_stuff                        cbuffer      NA          NA    5        1
// vfx_decaldyn_locals               cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb5[4], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s8, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 15
mul r0.xy, v0.xyxx, cb13[16].zwzz
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.w, r0.z, -r2.y
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r1.xyz, r1.xyzx, r0.zzzz, r2.xyzx
sample r0.xyzw, r0.xyxx, t8.xyzw, s8
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.x, v5.xyzx, -r0.xyzx
lt r0.x, r0.x, cb11[0].x
if_nz r0.x
  mov r0.yzw, l(0,0,0,0)
  mov r1.w, l(0)
  mov r3.z, l(0)
  mov r4.xyz, l(0,0,0,0)
  mov r5.xyz, l(0,0,0,0)
  mov r2.xyzw, l(0,0,0,0)
endif 
add r1.xyz, r1.xyzx, -v1.xyzx
dp3 r4.w, v4.xyzx, r1.xyzx
dp3 r1.x, -v3.xyzx, r1.xyzx
mul r6.x, r4.w, v4.w
mul r6.y, r1.x, v3.w
mad r1.xy, r6.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mad r6.xy, r1.xyxx, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mad r6.xy, v9.xyxx, r6.xyxx, r1.xyxx
lt r1.x, l(0.000000), v9.z
div r1.z, v9.w, v9.z
round_ni r4.w, r1.z
add r1.z, r1.z, -r4.w
add r1.z, -r1.z, l(1.000000)
div r4.w, l(1.000000, 1.000000, 1.000000, 1.000000), v3.w
add r4.w, r4.w, r4.w
div r4.w, r4.w, v9.z
mad r1.z, r6.y, r4.w, r1.z
movc r6.z, r1.x, r1.z, r6.y
add r1.xz, r6.xxzx, v7.xxyx
mul r1.xz, r1.xxzx, v7.zzwz
mul r7.xyz, v3.yzxy, v4.zxyz
mad r7.xyz, v4.yzxy, v3.zxyz, -r7.xyzx
dp3 r4.w, r7.xyzx, r7.xyzx
rsq r4.w, r4.w
mul r7.xyz, r4.wwww, r7.xyzx
mad r6.zw, v9.xxxy, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
mul r8.xyz, r6.zzzz, v4.xyzx
mul r9.xyz, r6.wwww, -v3.xyzx
dp3 r10.x, r8.xyzx, v8.xyzx
dp3 r10.y, r9.xyzx, v8.xyzx
dp3 r10.z, r7.xyzx, v8.xyzx
sample r11.xyzw, r1.xzxx, t3.xyzw, s3
dp3 r4.w, r10.xyzx, r10.xyzx
rsq r4.w, r4.w
mul r6.zw, r4.wwww, r10.xxxy
mul r6.zw, -r6.zzzw, cb11[1].yyyy
mov r10.xy, r1.xzxx
mov r12.yz, r11.xxyx
mov r12.x, l(-1.000000)
mov r12.w, -r11.w
mov r4.w, l(0)
loop 
  ige r5.w, r4.w, l(8)
  breakc_nz r5.w
  mad r10.zw, r6.zzzw, l(0.000000, 0.000000, 0.125000, 0.125000), r10.xxxy
  sample r13.xyzw, r10.zwzz, t3.xyzw, s3
  lt r5.w, r12.x, r12.w
  add r14.x, r12.x, l(0.125000)
  movc r10.xy, r5.wwww, r10.zwzz, r10.xyxx
  mul r14.yzw, r13.xxyw, l(0.000000, 1.000000, 1.000000, -1.000000)
  movc r12.xyzw, r5.wwww, r14.xyzw, r12.xyzw
  iadd r4.w, r4.w, l(1)
endloop 
sample r10.xyzw, r10.xyxx, t2.xyzw, s2
if_z r0.x
  add r0.x, -v6.y, v6.z
  mad r0.x, r1.y, r0.x, v6.y
  mul r0.x, r0.x, v6.x
  lt r1.xy, r6.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
  lt r6.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r6.xyxx
  or r1.x, r1.x, r6.x
  or r1.x, r1.y, r1.x
  or r1.x, r6.y, r1.x
  movc r0.x, r1.x, l(0), r0.x
  mad r1.xy, r12.yzyy, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  dp2 r1.z, r1.xyxx, r1.xyxx
  add r1.z, -r1.z, l(1.000000)
  sqrt r1.z, |r1.z|
  mul r6.xyz, r9.xyzx, r1.yyyy
  mad r6.xyz, r1.xxxx, r8.xyzx, r6.xyzx
  mad r0.yzw, r1.zzzz, r7.xxyz, r6.xxyz
  mov r6.x, v8.w
  mov r6.y, v1.w
  mov r6.z, v5.w
  mov r6.w, l(1.000000)
  mul r6.xyzw, r6.xyzw, r10.xyzw
  dp2 r1.x, r12.yzyy, r12.yzyy
  ge r1.x, r1.x, l(0.002000)
  and r1.x, r1.x, l(0x3f800000)
  mul r4.xyz, r1.xxxx, r6.xyzx
  mov r6.x, v6.w
  mov r6.y, l(1.000000)
  mul r1.yz, r1.xxxx, r6.xxyx
  mul r5.z, r1.x, cb11[0].z
  mul r5.x, r0.x, r6.w
  mul r5.y, r1.y, cb2[12].z
  mul r2.y, r1.z, cb11[1].x
  mov r1.w, l(1.000000)
  mov r2.x, cb11[0].y
  mov r2.z, cb2[13].z
  mov r3.z, cb11[0].w
  mov r2.w, l(-1)
endif 
if_nz r2.w
  mul r0.x, r5.x, cb2[12].x
  mul r1.x, r1.w, r5.x
  mul o1.w, r1.x, cb2[12].x
  mad o1.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r3.xy, r2.xyxx, l(0.001953, 0.062500, 0.000000, 0.000000)
  mov_sat o3.z, r3.y
  add r0.y, r0.w, l(-0.350000)
  mul_sat r0.y, r0.y, l(1.538462)
  mul r0.y, r0.y, cb5[3].z
  add r0.z, -r2.z, l(1.000000)
  mul r0.y, r0.z, r0.y
  mul r0.y, r5.y, r0.y
  mad r0.z, -r5.z, l(0.500000), l(1.000000)
  mul r0.z, r0.z, r0.y
  mad r0.z, r0.z, l(-0.500000), l(1.000000)
  mul o0.xyz, r0.zzzz, r4.xyzx
  add_sat r0.z, r5.z, l(0.700000)
  mul r1.xy, r0.zzzz, l(0.500000, 0.488281, 0.000000, 0.000000)
  mov r3.w, r5.z
  mov r1.z, l(0.970000)
  add r1.xyz, -r3.wxzw, r1.xyzx
  max r1.xyz, r1.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r0.yzw, r1.xxyz, r0.yyyy, r3.wwxz
  sqrt o2.xy, r0.yzyy
  mov o0.w, r0.x
  mov o2.zw, r0.wwwx
  mov o3.xy, l(0,0,0,0)
  mov o3.w, r0.x
  ret 
else 
  mov o0.xyzw, l(0,0,0,0)
  mov o1.xyzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o3.xyzw, l(0,0,0,0)
  ret 
endif 
ret 
// Approximately 166 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:27:59 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16
//   float4 globalScalars2;             // Offset:  208 Size:    16
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer more_stuff
// {
//
//   float4 gEntitySelectColor[2];      // Offset:    0 Size:    32 [unused]
//   float4 gAmbientOcclusionEffect;    // Offset:   32 Size:    16 [unused]
//   float4 gDynamicBakesAndWetness;    // Offset:   48 Size:    16
//   float4 gAlphaRefVec0;              // Offset:   64 Size:    16 [unused]
//   float4 gAlphaRefVec1;              // Offset:   80 Size:    16 [unused]
//   float gAlphaTestRef;               // Offset:   96 Size:     4 [unused]
//   bool gTreesUseDiscard;             // Offset:  100 Size:     4 [unused]
//   float gReflectionMipCount;         // Offset:  104 Size:     4 [unused]
//   float gTransparencyAASamples;      // Offset:  108 Size:     4 [unused]
//   bool gUseFogRay;                   // Offset:  112 Size:     4 [unused]
//
// }
//
// cbuffer vfx_decaldyn_locals
// {
//
//   float polyRejectThreshold;         // Offset:    0 Size:     4
//   float specularFalloffMult;         // Offset:    4 Size:     4
//   float specularIntensityMult;       // Offset:    8 Size:     4
//   float specularFresnel;             // Offset:   12 Size:     4
//   float emissiveMultiplier;          // Offset:   16 Size:     4
//   float parallaxScaleBias;           // Offset:   20 Size:     4
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDecalSampler_s                   sampler      NA          NA    2        1
// gDecalNormalSampler_s             sampler      NA          NA    3        1
// GBufferTextureSampler1Global_s    sampler      NA          NA    8        1
// GBufferTextureSamplerDepthGlobal_s    sampler      NA          NA   12        1
// gDecalSampler                     texture  float4          2d    2        1
// gDecalNormalSampler               texture  float4          2d    3        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// more_stuff                        cbuffer      NA          NA    5        1
// vfx_decaldyn_locals               cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb5[4], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s8, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_temps 10
mul r0.xy, v0.xyxx, cb13[16].zwzz
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.w, r0.z, -r2.y
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r1.xyz, r1.xyzx, r0.zzzz, r2.xyzx
sample r0.xyzw, r0.xyxx, t8.xyzw, s8
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.x, v5.xyzx, -r0.xyzx
lt r0.x, r0.x, cb11[0].x
add r0.yzw, r1.xxyz, -v1.xxyz
dp3 r1.x, v4.xyzx, r0.yzwy
dp3 r0.y, -v3.xyzx, r0.yzwy
mul r1.x, r1.x, v4.w
mul r1.y, r0.y, v3.w
mad r0.yz, r1.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000), l(0.000000, 0.500000, 0.500000, 0.000000)
mad r1.xy, r0.yzyy, l(-2.000000, -2.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mad r1.xy, v9.xyxx, r1.xyxx, r0.yzyy
lt r0.y, l(0.000000), v9.z
div r0.w, v9.w, v9.z
round_ni r1.w, r0.w
add r0.w, r0.w, -r1.w
add r0.w, -r0.w, l(1.000000)
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), v3.w
add r1.w, r1.w, r1.w
div r1.w, r1.w, v9.z
mad r0.w, r1.y, r1.w, r0.w
movc r1.z, r0.y, r0.w, r1.y
add r0.yw, r1.xxxz, v7.xxxy
mul r0.yw, r0.yyyw, v7.zzzw
mul r2.xyz, v3.yzxy, v4.zxyz
mad r2.xyz, v4.yzxy, v3.zxyz, -r2.xyzx
dp3 r1.z, r2.xyzx, r2.xyzx
rsq r1.z, r1.z
mul r2.xyz, r1.zzzz, r2.xyzx
mad r1.zw, v9.xxxy, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 1.000000, 1.000000)
mul r3.xyz, r1.zzzz, v4.xyzx
mul r4.xyz, r1.wwww, -v3.xyzx
dp3 r5.x, r3.xyzx, v8.xyzx
dp3 r5.y, r4.xyzx, v8.xyzx
dp3 r5.z, r2.xyzx, v8.xyzx
sample r6.xyzw, r0.ywyy, t3.xyzw, s3
dp3 r1.z, r5.xyzx, r5.xyzx
rsq r1.z, r1.z
mul r1.zw, r1.zzzz, r5.xxxy
mul r1.zw, -r1.zzzw, cb11[1].yyyy
mov r5.xy, r0.ywyy
mov r7.yz, r6.xxyx
mov r2.w, l(0)
mov r7.x, l(-1.000000)
mov r7.w, -r6.w
loop 
  ftoi r3.w, r2.w
  ige r4.w, r3.w, l(8)
  if_nz r4.w
    break 
  endif 
  mad r5.zw, r1.zzzw, l(0.000000, 0.000000, 0.125000, 0.125000), r5.xxxy
  sample r8.xyzw, r5.zwzz, t3.xyzw, s3
  lt r4.w, r7.x, r7.w
  add r9.x, r7.x, l(0.125000)
  movc r5.xy, r4.wwww, r5.zwzz, r5.xyxx
  mul r9.yzw, r8.xxyw, l(0.000000, 1.000000, 1.000000, -1.000000)
  movc r7.xyzw, r4.wwww, r9.xyzw, r7.xyzw
  iadd r3.w, r3.w, l(1)
  itof r2.w, r3.w
endloop 
sample r5.xyzw, r5.xyxx, t2.xyzw, s2
if_z r0.x
  add r0.x, -v6.y, v6.z
  mad r0.x, r0.z, r0.x, v6.y
  mul r0.x, r0.x, v6.x
  lt r0.yz, r1.xxyx, l(0.000000, 0.000000, 0.000000, 0.000000)
  lt r1.xy, l(1.000000, 1.000000, 0.000000, 0.000000), r1.xyxx
  or r0.y, r0.y, r1.x
  or r0.y, r0.y, r0.z
  or r0.y, r0.y, r1.y
  movc r0.x, r0.y, l(0), r0.x
  mad r0.yz, r7.yyzy, l(0.000000, 2.000000, 2.000000, 0.000000), l(0.000000, -1.000000, -1.000000, 0.000000)
  dp2 r0.w, r0.yzyy, r0.yzyy
  add r0.w, -r0.w, l(1.000000)
  sqrt r0.w, |r0.w|
  mul r1.xyz, r4.xyzx, r0.zzzz
  mad r1.xyz, r0.yyyy, r3.xyzx, r1.xyzx
  mad r0.yzw, r0.wwww, r2.xxyz, r1.xxyz
  mov r1.x, v8.w
  mov r1.y, v1.w
  mov r1.z, v5.w
  mov r1.w, l(1.000000)
  mul r1.xyzw, r1.xyzw, r5.xyzw
  dp2 r2.x, r7.yzyy, r7.yzyy
  ge r2.x, r2.x, l(0.002000)
  and r2.x, r2.x, l(0x3f800000)
  mul r1.xyz, r1.xyzx, r2.xxxx
  mov r3.z, v6.w
  mov r3.xw, l(1.000000,0,0,1.000000)
  mul r2.yz, r2.xxxx, r3.zzwz
  mul r4.x, r2.x, cb11[0].z
  mul r3.y, r0.x, r1.w
  mul r0.x, r2.y, cb2[12].z
  mul r2.y, r2.z, cb11[1].x
  mov r2.x, cb11[0].y
  mov r1.w, cb2[13].z
  mov r2.z, l(-1.000000)
  mov r4.w, cb11[0].w
else 
  mov r3.xy, l(0,0,0,0)
  mov r1.xyzw, l(0,0,0,0)
  mov r2.xyz, l(0,0,0,0)
  mov r0.xyzw, l(0,0,0,0)
  mov r4.xw, l(0,0,0,0)
endif 
ne r2.z, r2.z, l(0.000000)
if_nz r2.z
  mul r2.z, r3.y, cb2[12].x
  mul r2.w, r3.x, r3.y
  mul o1.w, r2.w, cb2[12].x
  mad o1.xyz, r0.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mul r4.yz, r2.xxyx, l(0.000000, 0.001953, 0.062500, 0.000000)
  mov_sat o3.z, r4.z
  add r0.y, r0.w, l(-0.350000)
  mul_sat r0.y, r0.y, l(1.538462)
  mul r0.y, r0.y, cb5[3].z
  add r0.z, -r1.w, l(1.000000)
  mul r0.y, r0.z, r0.y
  mul r0.x, r0.x, r0.y
  mad r0.y, r4.x, l(-0.500000), l(1.000000)
  mul r0.y, r0.y, r0.x
  mad r0.y, r0.y, l(-0.500000), l(1.000000)
  mul o0.xyz, r0.yyyy, r1.xyzx
  add_sat r0.y, r4.x, l(0.700000)
  mul r1.xy, r0.yyyy, l(0.500000, 0.488281, 0.000000, 0.000000)
  mov r1.z, l(0.970000)
  add r0.yzw, -r4.xxyw, r1.xxyz
  max r0.yzw, r0.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  mad r0.xyz, r0.yzwy, r0.xxxx, r4.xywx
  sqrt o2.xy, r0.xyxx
  mov o0.w, r2.z
  mov o2.z, r0.z
  mov o2.w, r2.z
  mov o3.xy, l(0,0,0,0)
  mov o3.w, r2.z
  ret 
else 
  mov o0.xyzw, l(0,0,0,0)
  mov o1.xyzw, l(0,0,0,0)
  mov o2.xyzw, l(0,0,0,0)
  mov o3.xyzw, l(0,0,0,0)
  ret 
endif 
ret 
// Approximately 168 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
