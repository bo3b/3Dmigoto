
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}

cbuffer deferred_lighting_locals : register(b11)
{
  float4 skinColourTweak : packoffset(c0);
  float4 skinParams : packoffset(c1);
  float4 rimLightingParams : packoffset(c2);
  float4 rimLightingMainColourAndIntensity : packoffset(c3);
  float4 rimLightingOffAngleColourAndIntensity : packoffset(c4);
  float3 rimLightingLightDirection : packoffset(c5);
}
SamplerState gDeferredLightSampler_s : register(s2);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> gDeferredLightSampler : register(t2);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = deferredLightScreenSize.zw * v0.xy;
  r0.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r0.xy).xyzw;
  r0.w = r0.w >= 0.949999988;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, v1.xy).xyzw;
  r1.x = deferredProjectionParams.w + -r1.x;
  r1.x = 1 + r1.x;
  r1.x = deferredProjectionParams.z / r1.x;
  r1.yzw = v2.xyz / v2.www;
  r2.x = 0 != gStereoParams.z;
  r2.y = v2.w == 1.000000;
  r2.x = r2.y ? r2.x : 0;
  if (r2.x != 0) {
    r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r2.y = -r2.y + r1.x;
    r2.x = r2.x * r2.y;
    r2.x = deferredProjectionParams.x * r2.x;
    r2.xyz = -gViewInverse._m00_m01_m02 * r2.xxx + gViewInverse._m30_m31_m32;
  } else {
    r3.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r2.xyz = gViewInverse._m30_m31_m32 + r3.xyz;
  }
  r1.yzw = r1.yzw * r1.xxx + r2.xyz;
  r2.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, v1.xy).xyzw;
  r3.xyz = float3(0.998046875,7.984375,63.875) * r2.www;
  r3.xyz = frac(r3.xyz);
  r3.xy = -r3.yz * float2(0.125,0.125) + r3.xy;
  r2.xyz = r2.xyz * float3(256,256,256) + r3.xyz;
  r2.xyz = float3(-128,-128,-128) + r2.xyz;
  r2.w = dot(r2.xyz, r2.xyz);
  r2.w = rsqrt(r2.w);
  r2.xyz = r2.xyz * r2.www;
  r1.yzw = gViewInverse._m30_m31_m32 + -r1.yzw;
  r2.w = dot(r1.yzw, r1.yzw);
  r2.w = rsqrt(r2.w);
  r1.yzw = r2.www * r1.yzw;
  r1.y = saturate(dot(r2.xyz, r1.yzw));
  r1.x = skinParams.w / -r1.x;
  r1.y = sqrt(r1.y);
  r1.zw = float2(3,4.27199984) * deferredLightScreenSize.xy;
  r1.z = dot(v1.xy, r1.zw);
  sincos(r1.z, r2.x, r3.x);
  r1.x = r1.x * r1.y;
  r4.y = -r2.x;
  r4.z = r3.x;
  r4.w = r2.x;
  r1.yz = r4.wz * r1.xx;
  r4.x = -r3.x;
  r2.xy = r4.xw * r1.xx;
  r3.xyzw = r4.yxyx * r1.xxxx;
  r1.xw = r4.zy * r1.xx + v0.xy;
  r1.xw = deferredLightScreenSize.zw * r1.xw;
  r4.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r1.xw).xyzw;
  r1.xy = r1.yz * float2(0.75,0.75) + v0.xy;
  r1.xy = deferredLightScreenSize.zw * r1.xy;
  r1.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r1.xy).xyzw;
  r2.xy = r2.xy * float2(0.5,0.5) + v0.xy;
  r2.xy = deferredLightScreenSize.zw * r2.xy;
  r2.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r2.xy).xyzw;
  r3.xyzw = r3.xyzw * float4(0.25,0.25,1.25,1.25) + v0.xyxy;
  r3.xyzw = deferredLightScreenSize.zwzw * r3.xyzw;
  r5.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r3.xy).xyzw;
  r3.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r3.zw).xyzw;
  if (r0.w != 0) {
    r0.w = 1 + -r4.w;
    r1.w = 1 + -r1.w;
    r2.w = 1 + -r2.w;
    r4.w = 1 + -r5.w;
    r3.w = 1 + -r3.w;
    r6.xyz = -r5.xyz + r0.xyz;
    r5.xyz = r4.www * r6.xyz + r5.xyz;
    r6.xyz = -r2.xyz + r0.xyz;
    r2.xyz = r2.www * r6.xyz + r2.xyz;
    r2.xyz = float3(0.118000001,0.197999999,0) * r2.xyz;
    r2.xyz = r5.xyz * float3(0.100000001,0.335999995,0.344000012) + r2.xyz;
    r5.xyz = -r1.xyz + r0.xyz;
    r1.xyz = r1.www * r5.xyz + r1.xyz;
    r1.xyz = r1.xyz * float3(0.112999998,0.00700000022,0.00700000022) + r2.xyz;
    r2.xyz = -r4.xyz + r0.xyz;
    r2.xyz = r0.www * r2.xyz + r4.xyz;
    r1.xyz = r2.xyz * float3(0.257999986,0.00400000019,0) + r1.xyz;
    r2.xyz = -r3.xyz + r0.xyz;
    r2.xyz = r3.www * r2.xyz + r3.xyz;
    r1.xyz = r2.xyz * float3(0.178000003,0,0) + r1.xyz;
    r2.xyz = float3(0.2333,0.455000013,0.648999989) * r0.xyz;
    r1.xyz = r1.xyz * skinColourTweak.xyz + r2.xyz;
    r1.xyz = r1.xyz + -r0.xyz;
    o0.xyz = skinParams.xxx * r1.xyz + r0.xyz;
    o0.w = 1;
  } else {
    o0.xyz = r0.xyz;
    o0.w = 1;
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
// cbuffer deferred_lighting_locals
// {
//
//   float4 skinColourTweak;            // Offset:    0 Size:    16
//   float4 skinParams;                 // Offset:   16 Size:    16
//   float4 rimLightingParams;          // Offset:   32 Size:    16 [unused]
//   float4 rimLightingMainColourAndIntensity;// Offset:   48 Size:    16 [unused]
//   float4 rimLightingOffAngleColourAndIntensity;// Offset:   64 Size:    16 [unused]
//   float3 rimLightingLightDirection;  // Offset:   80 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDeferredLightSampler             sampler      NA          NA    2        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// gDeferredLightSampler             texture  float4          2d    2        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// deferred_lighting_locals          cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s8, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 7
mul r0.xy, v0.xyxx, cb13[16].zwzz
sample r0.xyzw, r0.xyxx, t2.xyzw, s2
ge r0.w, r0.w, l(0.950000)
sample r1.xyzw, v1.xyxx, t12.xyzw, s12
add r1.x, -r1.x, cb13[17].w
add r1.x, r1.x, l(1.000000)
div r1.x, cb13[17].z, r1.x
div r1.yzw, v2.xxyz, v2.wwww
ne r2.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r2.y, v2.w, l(1.000000)
and r2.x, r2.y, r2.x
if_nz r2.x
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r2.y, r1.x, -r2.y
  mul r2.x, r2.y, r2.x
  mul r2.x, r2.x, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r2.xxxx, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r1.yzw, r1.yyzw, r1.xxxx, r2.xxyz
sample r2.xyzw, v1.xyxx, t8.xyzw, s8
mul r3.xyz, r2.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r3.xyz, r3.xyzx
mad r3.xy, -r3.yzyy, l(0.125000, 0.125000, 0.000000, 0.000000), r3.xyxx
mad r2.xyz, r2.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r3.xyzx
add r2.xyz, r2.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
add r1.yzw, -r1.yyzw, cb1[15].xxyz
dp3 r2.w, r1.yzwy, r1.yzwy
rsq r2.w, r2.w
mul r1.yzw, r1.yyzw, r2.wwww
dp3_sat r1.y, r2.xyzx, r1.yzwy
div r1.x, cb11[1].w, -r1.x
sqrt r1.y, r1.y
mul r1.zw, cb13[16].xxxy, l(0.000000, 0.000000, 3.000000, 4.272000)
dp2 r1.z, v1.xyxx, r1.zwzz
sincos r2.x, r3.x, r1.z
mul r1.x, r1.y, r1.x
mov r4.y, -r2.x
mov r4.z, r3.x
mov r4.w, r2.x
mul r1.yz, r1.xxxx, r4.wwzw
mov r4.x, -r3.x
mul r2.xy, r1.xxxx, r4.xwxx
mul r3.xyzw, r1.xxxx, r4.yxyx
mad r1.xw, r4.zzzy, r1.xxxx, v0.xxxy
mul r1.xw, r1.xxxw, cb13[16].zzzw
sample r4.xyzw, r1.xwxx, t2.xyzw, s2
mad r1.xy, r1.yzyy, l(0.750000, 0.750000, 0.000000, 0.000000), v0.xyxx
mul r1.xy, r1.xyxx, cb13[16].zwzz
sample r1.xyzw, r1.xyxx, t2.xyzw, s2
mad r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), v0.xyxx
mul r2.xy, r2.xyxx, cb13[16].zwzz
sample r2.xyzw, r2.xyxx, t2.xyzw, s2
mad r3.xyzw, r3.xyzw, l(0.250000, 0.250000, 1.250000, 1.250000), v0.xyxy
mul r3.xyzw, r3.xyzw, cb13[16].zwzw
sample r5.xyzw, r3.xyxx, t2.xyzw, s2
sample r3.xyzw, r3.zwzz, t2.xyzw, s2
if_nz r0.w
  add r0.w, -r4.w, l(1.000000)
  add r1.w, -r1.w, l(1.000000)
  add r2.w, -r2.w, l(1.000000)
  add r4.w, -r5.w, l(1.000000)
  add r3.w, -r3.w, l(1.000000)
  add r6.xyz, r0.xyzx, -r5.xyzx
  mad r5.xyz, r4.wwww, r6.xyzx, r5.xyzx
  add r6.xyz, r0.xyzx, -r2.xyzx
  mad r2.xyz, r2.wwww, r6.xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, l(0.118000, 0.198000, 0.000000, 0.000000)
  mad r2.xyz, r5.xyzx, l(0.100000, 0.336000, 0.344000, 0.000000), r2.xyzx
  add r5.xyz, r0.xyzx, -r1.xyzx
  mad r1.xyz, r1.wwww, r5.xyzx, r1.xyzx
  mad r1.xyz, r1.xyzx, l(0.113000, 0.007000, 0.007000, 0.000000), r2.xyzx
  add r2.xyz, r0.xyzx, -r4.xyzx
  mad r2.xyz, r0.wwww, r2.xyzx, r4.xyzx
  mad r1.xyz, r2.xyzx, l(0.258000, 0.004000, 0.000000, 0.000000), r1.xyzx
  add r2.xyz, r0.xyzx, -r3.xyzx
  mad r2.xyz, r3.wwww, r2.xyzx, r3.xyzx
  mad r1.xyz, r2.xyzx, l(0.178000, 0.000000, 0.000000, 0.000000), r1.xyzx
  mul r2.xyz, r0.xyzx, l(0.233300, 0.455000, 0.649000, 0.000000)
  mad r1.xyz, r1.xyzx, cb11[0].xyzx, r2.xyzx
  add r1.xyz, -r0.xyzx, r1.xyzx
  mad o0.xyz, cb11[1].xxxx, r1.xyzx, r0.xyzx
  mov o0.w, l(1.000000)
else 
  mov o0.xyz, r0.xyzx
  mov o0.w, l(1.000000)
endif 
ret 
// Approximately 93 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:34:56 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
// cbuffer deferred_lighting_locals
// {
//
//   float4 skinColourTweak;            // Offset:    0 Size:    16
//   float4 skinParams;                 // Offset:   16 Size:    16
//   float4 rimLightingParams;          // Offset:   32 Size:    16 [unused]
//   float4 rimLightingMainColourAndIntensity;// Offset:   48 Size:    16 [unused]
//   float4 rimLightingOffAngleColourAndIntensity;// Offset:   64 Size:    16 [unused]
//   float3 rimLightingLightDirection;  // Offset:   80 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gDeferredLightSampler_s           sampler      NA          NA    2        1
// GBufferTextureSampler1Global_s    sampler      NA          NA    8        1
// GBufferTextureSamplerDepthGlobal_s    sampler      NA          NA   12        1
// gDeferredLightSampler             texture  float4          2d    2        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// deferred_lighting_locals          cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy  
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s8, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 7
mul r0.xy, v0.xyxx, cb13[16].zwzz
sample r0.xyzw, r0.xyxx, t2.xyzw, s2
ge r0.w, r0.w, l(0.950000)
sample r1.xyzw, v1.xyxx, t12.xyzw, s12
add r1.x, -r1.x, cb13[17].w
add r1.x, r1.x, l(1.000000)
div r1.x, cb13[17].z, r1.x
div r1.yzw, v2.xxyz, v2.wwww
ne r2.x, l(0.000000), cb2[22].z
and r2.x, r2.x, l(0x3f800000)
eq r2.y, v2.w, l(1.000000)
and r2.x, r2.x, r2.y
ne r2.x, r2.x, l(0.000000)
if_nz r2.x
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r2.y, r1.x, -r2.y
  mul r2.x, r2.y, r2.x
  mul r2.x, r2.x, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r2.xxxx, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r1.yzw, r1.yyzw, r1.xxxx, r2.xxyz
sample r2.xyzw, v1.xyxx, t8.xyzw, s8
mul r3.xyz, r2.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r3.xyz, r3.xyzx
mad r3.xy, r3.yzyy, l(-0.125000, -0.125000, 0.000000, 0.000000), r3.xyxx
mad r2.xyz, r2.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r3.xyzx
add r2.xyz, r2.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r2.w, r2.xyzx, r2.xyzx
rsq r2.w, r2.w
mul r2.xyz, r2.wwww, r2.xyzx
add r1.yzw, -r1.yyzw, cb1[15].xxyz
dp3 r2.w, r1.yzwy, r1.yzwy
rsq r2.w, r2.w
mul r1.yzw, r1.yyzw, r2.wwww
dp3_sat r1.y, r2.xyzx, r1.yzwy
div r1.x, cb11[1].w, -r1.x
sqrt r1.y, r1.y
mul r1.zw, l(0.000000, 0.000000, 3.000000, 4.272000), cb13[16].xxxy
dp2 r1.z, v1.xyxx, r1.zwzz
sincos r2.x, r3.x, r1.z
mul r1.x, r1.y, r1.x
mov r4.x, -r2.x
mov r4.z, r2.x
mov r4.w, r3.x
mov r4.y, -r3.x
mul r2.xyzw, r1.xxxx, r4.zwyz
mul r3.xyzw, r1.xxxx, r4.xyxy
mad r1.xy, r4.wxww, r1.xxxx, v0.xyxx
mul r1.xy, r1.xyxx, cb13[16].zwzz
sample r1.xyzw, r1.xyxx, t2.xyzw, s2
mad r2.xyzw, r2.xyzw, l(0.750000, 0.750000, 0.500000, 0.500000), v0.xyxy
mul r2.xyzw, r2.xyzw, cb13[16].zwzw
sample r4.xyzw, r2.xyxx, t2.xyzw, s2
sample r2.xyzw, r2.zwzz, t2.xyzw, s2
mad r3.xyzw, r3.xyzw, l(0.250000, 0.250000, 1.250000, 1.250000), v0.xyxy
mul r3.xyzw, r3.xyzw, cb13[16].zwzw
sample r5.xyzw, r3.xyxx, t2.xyzw, s2
sample r3.xyzw, r3.zwzz, t2.xyzw, s2
if_nz r0.w
  add r0.w, -r1.w, l(1.000000)
  add r1.w, -r4.w, l(1.000000)
  add r2.w, -r2.w, l(1.000000)
  add r4.w, -r5.w, l(1.000000)
  add r3.w, -r3.w, l(1.000000)
  add r6.xyz, r0.xyzx, -r5.xyzx
  mad r5.xyz, r4.wwww, r6.xyzx, r5.xyzx
  add r6.xyz, r0.xyzx, -r2.xyzx
  mad r2.xyz, r2.wwww, r6.xyzx, r2.xyzx
  mul r2.xyz, r2.xyzx, l(0.118000, 0.198000, 0.000000, 0.000000)
  mad r2.xyz, r5.xyzx, l(0.100000, 0.336000, 0.344000, 0.000000), r2.xyzx
  add r5.xyz, r0.xyzx, -r4.xyzx
  mad r4.xyz, r1.wwww, r5.xyzx, r4.xyzx
  mad r2.xyz, r4.xyzx, l(0.113000, 0.007000, 0.007000, 0.000000), r2.xyzx
  add r4.xyz, r0.xyzx, -r1.xyzx
  mad r1.xyz, r0.wwww, r4.xyzx, r1.xyzx
  mad r1.xyz, r1.xyzx, l(0.258000, 0.004000, 0.000000, 0.000000), r2.xyzx
  add r2.xyz, r0.xyzx, -r3.xyzx
  mad r2.xyz, r3.wwww, r2.xyzx, r3.xyzx
  mad r1.xyz, r2.xyzx, l(0.178000, 0.000000, 0.000000, 0.000000), r1.xyzx
  mul r2.xyz, r0.xyzx, l(0.233300, 0.455000, 0.649000, 0.000000)
  mad r1.xyz, r1.xyzx, cb11[0].xyzx, r2.xyzx
  add r1.xyz, -r0.xyzx, r1.xyzx
  mad r0.xyz, cb11[1].xxxx, r1.xyzx, r0.xyzx
endif 
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 90 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
