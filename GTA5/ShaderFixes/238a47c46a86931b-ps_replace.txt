
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer lighting_globals : register(b3)
{
  float4 gDirectionalLight : packoffset(c0);
  float4 gDirectionalColour : packoffset(c1);
  int gNumForwardLights : packoffset(c2);
  float4 gLightPositionAndInvDistSqr[8] : packoffset(c3);
  float4 gLightDirectionAndFalloffExponent[8] : packoffset(c11);
  float4 gLightColourAndCapsuleExtent[8] : packoffset(c19);
  float gLightConeScale[8] : packoffset(c27);
  float gLightConeOffset[8] : packoffset(c35);
  float4 gLightNaturalAmbient0 : packoffset(c43);
  float4 gLightNaturalAmbient1 : packoffset(c44);
  float4 gLightArtificialIntAmbient0 : packoffset(c45);
  float4 gLightArtificialIntAmbient1 : packoffset(c46);
  float4 gLightArtificialExtAmbient0 : packoffset(c47);
  float4 gLightArtificialExtAmbient1 : packoffset(c48);
  float4 gDirectionalAmbientColour : packoffset(c49);
  float4 globalFogParams[5] : packoffset(c50);
  float4 globalFogColor : packoffset(c55);
  float4 globalFogColorE : packoffset(c56);
  float4 globalFogColorN : packoffset(c57);
  float4 globalFogColorMoon : packoffset(c58);
  float4 gReflectionTweaks : packoffset(c59);
}

cbuffer more_stuff : register(b5)
{
  float4 gEntitySelectColor[2] : packoffset(c0);
  float4 gAmbientOcclusionEffect : packoffset(c2);
  float4 gDynamicBakesAndWetness : packoffset(c3);
  float4 gAlphaRefVec0 : packoffset(c4);
  float4 gAlphaRefVec1 : packoffset(c5);
  float gAlphaTestRef : packoffset(c6);
  bool gTreesUseDiscard : packoffset(c6.y);
  float gReflectionMipCount : packoffset(c6.z);
  float gTransparencyAASamples : packoffset(c6.w);
  bool gUseFogRay : packoffset(c7);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState ReflectionSampler_s : register(s1);
SamplerState gDeferredLightSampler_s : register(s2);
SamplerState gDeferredLightSampler1_s : register(s3);
SamplerState gDeferredLightSampler2_s : register(s4);
SamplerState GBufferTextureSampler0Global_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler2Global_s : register(s9);
SamplerState GBufferTextureSampler3Global_s : register(s10);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> ReflectionSampler : register(t1);
Texture2D<float4> gDeferredLightSampler : register(t2);
Texture2D<float4> gDeferredLightSampler1 : register(t3);
Texture2D<float4> gDeferredLightSampler2 : register(t4);
Texture2D<float4> GBufferTextureSampler0Global : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler2Global : register(t9);
Texture2D<float4> GBufferTextureSampler3Global : register(t10);
Texture2D<uint2> gbufferStencilTextureGlobal : register(t11);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r1.xy = globalScreenSize.xy * r0.xy;
  r1.xy = (int2)r1.xy;
  r1.zw = float2(0,0);
  r1.xyzw = gbufferStencilTextureGlobal.Load(r1.xyz).xyzw;
  r0.w = (int)r1.y & 8;
  r0.w = (uint)r0.w;
  r0.w = r0.w >= 7.9000001;
  r1.x = r0.w ? 1.000000 : 0;
  r2.xyzw = GBufferTextureSampler0Global.Sample(GBufferTextureSampler0Global_s, r0.xy).xyzw;
  r1.yzw = r2.xyz * r2.xyz;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r2.xyz = v2.xyz / v2.www;
  r2.w = 0 != gStereoParams.z;
  r3.x = v2.w == 1.000000;
  r2.w = r2.w ? r3.x : 0;
  if (r2.w != 0) {
    r3.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r2.w = -r3.y + r0.z;
    r2.w = r3.x * r2.w;
    r2.w = deferredProjectionParams.x * r2.w;
    r3.xyz = -gViewInverse._m00_m01_m02 * r2.www + gViewInverse._m30_m31_m32;
  } else {
    r4.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r3.xyz = gViewInverse._m30_m31_m32 + r4.xyz;
  }
  r3.xyz = r2.xyz * r0.zzz + r3.xyz;
  r4.xyzw = GBufferTextureSampler2Global.Sample(GBufferTextureSampler2Global_s, r0.xy).xyzw;
  r4.xy = r4.xy * r4.xy;
  r5.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r6.xyz = float3(0.998046875,7.984375,63.875) * r5.www;
  r6.xyz = frac(r6.xyz);
  r6.xy = -r6.yz * float2(0.125,0.125) + r6.xy;
  r5.xyz = r5.xyz * float3(256,256,256) + r6.xyz;
  r5.xyz = float3(-128,-128,-128) + r5.xyz;
  r0.z = dot(r5.xyz, r5.xyz);
  r0.z = rsqrt(r0.z);
  r5.xyw = r5.xyz * r0.zzz;
  r6.xyzw = GBufferTextureSampler3Global.Sample(GBufferTextureSampler3Global_s, r0.xy).xyzw;
  r7.xyzw = gDeferredLightSampler2.Sample(gDeferredLightSampler2_s, r0.xy).xyzw;
  r0.xy = r7.xx * r6.xy;
  r0.xy = r0.xy * r0.xy;
  r0.xy = r0.xy + r0.xy;
  r2.w = 16 * r6.z;
  r3.w = 0.5 < r6.w;
  r6.x = -0.5 + r6.w;
  r6.x = r3.w ? r6.x : r6.w;
  r6.x = saturate(r6.x + r6.x);
  o0.w = r3.w ? 0 : 1;
  r3.w = min(1, r4.x);
  r0.xy = r0.xy * r0.xy;
  r4.x = r4.y * 512 + -500;
  r4.x = max(0, r4.x);
  r4.y = r4.y * 512 + -r4.x;
  r4.x = 558 * r4.x;
  r4.x = r4.y * 3 + r4.x;
  r4.y = dot(r2.xyz, r2.xyz);
  r4.y = rsqrt(r4.y);
  r6.yzw = r4.yyy * r2.xyz;
  r2.xyz = -r2.xyz * r4.yyy + -deferredLightParams[1].xyz;
  r4.y = dot(r2.xyz, r2.xyz);
  r4.y = rsqrt(r4.y);
  r2.xyz = r4.yyy * r2.xyz;
  r7.xyzw = r3.xyyx * float4(0.0199999996,0.0199999996,0.0149092004,0.0149092004) + deferredLightParams[7].wwww;
  r7.xyzw = frac(r7.xyzw);
  r8.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r7.xy).xyzw;
  r7.xyzw = gDeferredLightSampler.Sample(gDeferredLightSampler_s, r7.zw).xzyw;
  r4.y = v1.z + -r3.z;
  r4.y = saturate(r4.y + r4.y);
  r3.z = gViewInverse._m32 + -r3.z;
  r3.z = 40 + -r3.z;
  r3.z = saturate(0.125 * r3.z);
  r3.z = r4.y * r3.z;
  r7.xy = r8.wy;
  r7.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r7.xyzw;
  r7.xyzw = float4(0.300000012,0.300000012,0.300000012,0.300000012) * r7.xyzw;
  r7.xyzw = r3.xyyx * float4(1,1,0.745459974,0.745459974) + r7.xyzw;
  r7.xyzw = deferredLightParams[7].wwww * float4(15,15,-15,-15) + r7.xyzw;
  r8.xyzw = gDeferredLightSampler1.Sample(gDeferredLightSampler1_s, r7.xy).xyzw;
  r7.xyzw = gDeferredLightSampler1.Sample(gDeferredLightSampler1_s, r7.zw).xyzw;
  r7.xyz = r8.xyz * r7.xyz;
  r3.xyz = r7.xyz * r3.zzz;
  r3.xyz = r3.xyz * float3(10,10,10) + float3(1,1,1);
  r3.xyz = deferredLightParams[3].xyz * r3.xyz;
  r4.y = saturate(dot(r5.xyw, -deferredLightParams[1].xyz));
  r7.x = saturate(dot(-r6.yzw, r5.xyw));
  r7.y = saturate(dot(r2.xyz, -deferredLightParams[1].xyz));
  r7.yz = float2(1,1) + -r7.xy;
  r8.xy = r7.yz * r7.yz;
  r8.xy = r8.xy * r8.xy;
  r7.yz = r8.xy * r7.yz;
  r7.w = 1 + -r4.z;
  r7.yz = r4.zz * r7.yz + r7.ww;
  r8.xy = float2(2,9.99999994e-009) + r4.xx;
  r4.z = 0.125 * r8.x;
  r7.y = -r3.w * r7.y + 1;
  r2.x = dot(r5.xyw, r2.xyz);
  r2.x = saturate(9.99999994e-009 + r2.x);
  r2.x = log2(r2.x);
  r2.x = r8.y * r2.x;
  r2.x = exp2(r2.x);
  r2.x = r2.x * r7.z;
  r2.x = r2.x * r4.z;
  r2.x = r2.x * r3.w;
  r2.x = r2.x * r4.y;
  r2.y = r7.y * r4.y;
  r2.xyz = r1.yzw * r2.yyy + r2.xxx;
  r2.xyz = r2.xyz * r3.xyz;
  r0.z = r5.z * r0.z + gLightNaturalAmbient0.w;
  r0.z = gLightNaturalAmbient1.w * r0.z;
  r0.z = max(0, r0.z);
  r3.xyz = gLightArtificialExtAmbient0.xyz * r0.zzz + gLightArtificialExtAmbient1.xyz;
  r0.w = r0.w ? 0 : 1;
  r8.xyz = gLightArtificialIntAmbient0.xyz * r0.zzz + gLightArtificialIntAmbient1.xyz;
  r8.xyz = r8.xyz * r1.xxx;
  r3.xyz = r3.xyz * r0.www + r8.xyz;
  r3.xyz = r3.xyz * r0.yyy;
  r8.xyz = gLightNaturalAmbient0.xyz * r0.zzz + gLightNaturalAmbient1.xyz;
  r9.x = gLightArtificialIntAmbient1.w;
  r9.y = gLightArtificialExtAmbient0.w;
  r9.z = gLightArtificialExtAmbient1.w;
  r0.z = saturate(dot(r9.xyz, r5.xyw));
  r8.xyz = gDirectionalAmbientColour.xyz * r0.zzz + r8.xyz;
  r3.xyz = r8.xyz * r0.xxx + r3.xyz;
  r3.xyz = r3.xyz * r7.yyy;
  r3.xyz = r3.xyz * r1.yzw;
  r2.xyz = r2.xyz * r4.www + r3.xyz;
  r0.z = 1 + -r7.y;
  r0.w = dot(r6.yzw, r5.xyw);
  r0.w = r0.w + r0.w;
  r3.xyz = r5.xyw * -r0.www + r6.yzw;
  r4.xy = saturate(float2(0.00066666666,0.00177619897) * r4.xx);
  r0.w = 1 + -r4.x;
  r1.x = -5 + gReflectionMipCount;
  r3.w = gReflectionMipCount * r0.w;
  r3.w = r3.w < r1.x;
  r4.x = r0.w * gReflectionMipCount + -5;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * 5 + r1.x;
  r0.w = r3.w ? r4.x : r0.w;
  r3.xyw = float3(-0.25,0.5,0.25) * r3.xyx;
  r1.x = 1 + abs(r3.z);
  r3.xyw = r3.xyw / r1.xxx;
  r3.xyw = float3(0.75,0.5,0.25) + -r3.xyw;
  r1.x = 0 < r3.z;
  r3.xy = r1.xx ? r3.xy : r3.wy;
  r3.xyzw = ReflectionSampler.SampleLevel(ReflectionSampler_s, r3.xy, r0.w).xyzw;
  r0.w = r6.x * r6.x;
  r3.xyz = r3.xyz * r0.www;
  r0.x = max(r0.x, r0.y);
  r0.xyw = r3.xyz * r0.xxx;
  r3.xyz = r0.xyw * r4.yyy;
  r3.xyz = float3(0.681690097,0.681690097,0.681690097) * r3.xyz;
  r0.xyw = r0.xyw * float3(0.318309903,0.318309903,0.318309903) + r3.xyz;
  r0.xyz = r0.xyw * r0.zzz + r2.xyz;
  r0.w = r7.x * r2.w;
  r0.xyz = r1.yzw * r0.www + r0.xyz;
  o0.xyz = globalScalars3.zzz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16
//   float4 globalFogParams[5];         // Offset:  800 Size:    80 [unused]
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer more_stuff
// {
//
//   float4 gEntitySelectColor[2];      // Offset:    0 Size:    32 [unused]
//   float4 gAmbientOcclusionEffect;    // Offset:   32 Size:    16 [unused]
//   float4 gDynamicBakesAndWetness;    // Offset:   48 Size:    16 [unused]
//   float4 gAlphaRefVec0;              // Offset:   64 Size:    16 [unused]
//   float4 gAlphaRefVec1;              // Offset:   80 Size:    16 [unused]
//   float gAlphaTestRef;               // Offset:   96 Size:     4 [unused]
//   bool gTreesUseDiscard;             // Offset:  100 Size:     4 [unused]
//   float gReflectionMipCount;         // Offset:  104 Size:     4
//   float gTransparencyAASamples;      // Offset:  108 Size:     4 [unused]
//   bool gUseFogRay;                   // Offset:  112 Size:     4 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ReflectionSampler                 sampler      NA          NA    1        1
// gDeferredLightSampler             sampler      NA          NA    2        1
// gDeferredLightSampler1            sampler      NA          NA    3        1
// gDeferredLightSampler2            sampler      NA          NA    4        1
// GBufferTextureSampler0Global      sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler2Global      sampler      NA          NA    9        1
// GBufferTextureSampler3Global      sampler      NA          NA   10        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// ReflectionSampler                 texture  float4          2d    1        1
// gDeferredLightSampler             texture  float4          2d    2        1
// gDeferredLightSampler1            texture  float4          2d    3        1
// gDeferredLightSampler2            texture  float4          2d    4        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// GBufferTextureSampler3Global      texture  float4          2d   10        1
// gbufferStencilTextureGlobal       texture   uint2          2d   11        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_globals                  cbuffer      NA          NA    3        1
// more_stuff                        cbuffer      NA          NA    5        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb3[50], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 10
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
add r0.z, -r1.x, cb13[17].w
mul r1.xy, r0.xyxx, cb2[15].xyxx
ftoi r1.xy, r1.xyxx
mov r1.zw, l(0,0,0,0)
ld r1.xyzw, r1.xyzw, t11.xyzw
and r0.w, r1.y, l(8)
utof r0.w, r0.w
ge r0.w, r0.w, l(7.900000)
and r1.x, r0.w, l(0x3f800000)
sample r2.xyzw, r0.xyxx, t7.xyzw, s7
mul r1.yzw, r2.xxyz, r2.xxyz
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r2.xyz, v2.xyzx, v2.wwww
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r3.x, v2.w, l(1.000000)
and r2.w, r2.w, r3.x
if_nz r2.w
  ld r3.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r2.w, r0.z, -r3.y
  mul r2.w, r2.w, r3.x
  mul r2.w, r2.w, cb13[17].x
  mad r3.xyz, -cb1[12].xyzx, r2.wwww, cb1[15].xyzx
else 
  ld r4.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r3.xyz, r4.xyzx, cb1[15].xyzx
endif 
mad r3.xyz, r2.xyzx, r0.zzzz, r3.xyzx
sample r4.xyzw, r0.xyxx, t9.xyzw, s9
mul r4.xy, r4.xyxx, r4.xyxx
sample r5.xyzw, r0.xyxx, t8.xyzw, s8
mul r6.xyz, r5.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r6.xyz, r6.xyzx
mad r6.xy, -r6.yzyy, l(0.125000, 0.125000, 0.000000, 0.000000), r6.xyxx
mad r5.xyz, r5.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r6.xyzx
add r5.xyz, r5.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r0.z, r5.xyzx, r5.xyzx
rsq r0.z, r0.z
mul r5.xyw, r0.zzzz, r5.xyxz
sample r6.xyzw, r0.xyxx, t10.xyzw, s10
sample r7.xyzw, r0.xyxx, t4.xyzw, s4
mul r0.xy, r6.xyxx, r7.xxxx
mul r0.xy, r0.xyxx, r0.xyxx
add r0.xy, r0.xyxx, r0.xyxx
mul r2.w, r6.z, l(16.000000)
lt r3.w, l(0.500000), r6.w
add r6.x, r6.w, l(-0.500000)
movc r6.x, r3.w, r6.x, r6.w
add_sat r6.x, r6.x, r6.x
movc o0.w, r3.w, l(0), l(1.000000)
min r3.w, r4.x, l(1.000000)
mul r0.xy, r0.xyxx, r0.xyxx
mad r4.x, r4.y, l(512.000000), l(-500.000000)
max r4.x, r4.x, l(0.000000)
mad r4.y, r4.y, l(512.000000), -r4.x
mul r4.x, r4.x, l(558.000000)
mad r4.x, r4.y, l(3.000000), r4.x
dp3 r4.y, r2.xyzx, r2.xyzx
rsq r4.y, r4.y
mul r6.yzw, r2.xxyz, r4.yyyy
mad r2.xyz, -r2.xyzx, r4.yyyy, -cb13[1].xyzx
dp3 r4.y, r2.xyzx, r2.xyzx
rsq r4.y, r4.y
mul r2.xyz, r2.xyzx, r4.yyyy
mad r7.xyzw, r3.xyyx, l(0.020000, 0.020000, 0.014909, 0.014909), cb13[7].wwww
frc r7.xyzw, r7.xyzw
sample r8.xyzw, r7.xyxx, t2.xyzw, s2
sample r7.xyzw, r7.zwzz, t2.xzyw, s2
add r4.y, -r3.z, v1.z
add_sat r4.y, r4.y, r4.y
add r3.z, -r3.z, cb1[15].z
add r3.z, -r3.z, l(40.000000)
mul_sat r3.z, r3.z, l(0.125000)
mul r3.z, r3.z, r4.y
mov r7.xy, r8.wyww
add r7.xyzw, r7.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
mul r7.xyzw, r7.xyzw, l(0.300000, 0.300000, 0.300000, 0.300000)
mad r7.xyzw, r3.xyyx, l(1.000000, 1.000000, 0.745460, 0.745460), r7.xyzw
mad r7.xyzw, cb13[7].wwww, l(15.000000, 15.000000, -15.000000, -15.000000), r7.xyzw
sample r8.xyzw, r7.xyxx, t3.xyzw, s3
sample r7.xyzw, r7.zwzz, t3.xyzw, s3
mul r7.xyz, r7.xyzx, r8.xyzx
mul r3.xyz, r3.zzzz, r7.xyzx
mad r3.xyz, r3.xyzx, l(10.000000, 10.000000, 10.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
mul r3.xyz, r3.xyzx, cb13[3].xyzx
dp3_sat r4.y, r5.xywx, -cb13[1].xyzx
dp3_sat r7.x, -r6.yzwy, r5.xywx
dp3_sat r7.y, r2.xyzx, -cb13[1].xyzx
add r7.yz, -r7.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r8.xy, r7.yzyy, r7.yzyy
mul r8.xy, r8.xyxx, r8.xyxx
mul r7.yz, r7.yyzy, r8.xxyx
add r7.w, -r4.z, l(1.000000)
mad r7.yz, r4.zzzz, r7.yyzy, r7.wwww
add r8.xy, r4.xxxx, l(2.000000, 0.000000, 0.000000, 0.000000)
mul r4.z, r8.x, l(0.125000)
mad r7.y, -r3.w, r7.y, l(1.000000)
dp3 r2.x, r5.xywx, r2.xyzx
add_sat r2.x, r2.x, l(0.000000)
log r2.x, r2.x
mul r2.x, r2.x, r8.y
exp r2.x, r2.x
mul r2.x, r7.z, r2.x
mul r2.x, r4.z, r2.x
mul r2.x, r3.w, r2.x
mul r2.x, r4.y, r2.x
mul r2.y, r4.y, r7.y
mad r2.xyz, r1.yzwy, r2.yyyy, r2.xxxx
mul r2.xyz, r3.xyzx, r2.xyzx
mad r0.z, r5.z, r0.z, cb3[43].w
mul r0.z, r0.z, cb3[44].w
max r0.z, r0.z, l(0.000000)
mad r3.xyz, cb3[47].xyzx, r0.zzzz, cb3[48].xyzx
movc r0.w, r0.w, l(0), l(1.000000)
mad r8.xyz, cb3[45].xyzx, r0.zzzz, cb3[46].xyzx
mul r8.xyz, r1.xxxx, r8.xyzx
mad r3.xyz, r3.xyzx, r0.wwww, r8.xyzx
mul r3.xyz, r0.yyyy, r3.xyzx
mad r8.xyz, cb3[43].xyzx, r0.zzzz, cb3[44].xyzx
mov r9.x, cb3[46].w
mov r9.y, cb3[47].w
mov r9.z, cb3[48].w
dp3_sat r0.z, r9.xyzx, r5.xywx
mad r8.xyz, cb3[49].xyzx, r0.zzzz, r8.xyzx
mad r3.xyz, r8.xyzx, r0.xxxx, r3.xyzx
mul r3.xyz, r7.yyyy, r3.xyzx
mul r3.xyz, r1.yzwy, r3.xyzx
mad r2.xyz, r2.xyzx, r4.wwww, r3.xyzx
add r0.z, -r7.y, l(1.000000)
dp3 r0.w, r6.yzwy, r5.xywx
add r0.w, r0.w, r0.w
mad r3.xyz, r5.xywx, -r0.wwww, r6.yzwy
mul_sat r4.xy, r4.xxxx, l(0.000667, 0.001776, 0.000000, 0.000000)
add r0.w, -r4.x, l(1.000000)
add r1.x, cb5[6].z, l(-5.000000)
mul r3.w, r0.w, cb5[6].z
lt r3.w, r3.w, r1.x
mad r4.x, r0.w, cb5[6].z, l(-5.000000)
mul r0.w, r0.w, r0.w
mad r0.w, r0.w, l(5.000000), r1.x
movc r0.w, r3.w, r4.x, r0.w
mul r3.xyw, r3.xyxx, l(-0.250000, 0.500000, 0.000000, 0.250000)
add r1.x, |r3.z|, l(1.000000)
div r3.xyw, r3.xyxw, r1.xxxx
add r3.xyw, -r3.xyxw, l(0.750000, 0.500000, 0.000000, 0.250000)
lt r1.x, l(0.000000), r3.z
movc r3.xy, r1.xxxx, r3.xyxx, r3.wyww
sample_l r3.xyzw, r3.xyxx, t1.xyzw, s1, r0.w
mul r0.w, r6.x, r6.x
mul r3.xyz, r0.wwww, r3.xyzx
max r0.x, r0.y, r0.x
mul r0.xyw, r0.xxxx, r3.xyxz
mul r3.xyz, r4.yyyy, r0.xywx
mul r3.xyz, r3.xyzx, l(0.681690, 0.681690, 0.681690, 0.000000)
mad r0.xyw, r0.xyxw, l(0.318310, 0.318310, 0.000000, 0.318310), r3.xyxz
mad r0.xyz, r0.xywx, r0.zzzz, r2.xyzx
mul r0.w, r2.w, r7.x
mad r0.xyz, r1.yzwy, r0.wwww, r0.xyzx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
ret 
// Approximately 162 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
