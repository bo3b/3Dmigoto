
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer cascadeshadows_recieving_locals : register(b11)
{
  float4 gCSMShaderVars_deferred : packoffset(c0);
  float4 particleShadowsParams : packoffset(c1);
}

cbuffer cascadeshadows_rendering_locals : register(b10)
{
  row_major float4x4 viewToWorldProjectionParam : packoffset(c0);
  float4 perspectiveShearParam : packoffset(c4);
  float4 shadowParams2 : packoffset(c5);
}
SamplerState gCSMParticleShadowSamp_s : register(s2);
SamplerState depthBufferSamp_s : register(s3);
SamplerState gCSMCloudSampler_s : register(s12);
SamplerState gCSMDitherTextureSamp_s : register(s14);
SamplerComparisonState gCSMShadowTextureSamp_s : register(s15);
Texture2D<float4> gCSMParticleShadowTexture : register(t2);
Texture2D<float4> depthBufferSamp : register(t3);
Texture2D<float4> gCSMCloudSampler : register(t12);
Texture2D<float4> gCSMDitherTextureSamp : register(t14);
Texture2D<float4> gCSMShadowTexture : register(t15);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[4];
  r0.xy = v1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = r0.xy * float2(1,-1) + perspectiveShearParam.xy;
  r0.x = viewToWorldProjectionParam._m03 * r0.x;
  r0.y = viewToWorldProjectionParam._m13 * r0.y;
  r0.yzw = viewToWorldProjectionParam._m10_m11_m12 * r0.yyy;
  r0.xyz = r0.xxx * viewToWorldProjectionParam._m00_m01_m02 + r0.yzw;
  r0.xyz = -viewToWorldProjectionParam._m20_m21_m22 + r0.xyz;
  r1.xyzw = depthBufferSamp.Sample(depthBufferSamp_s, v1.xy).xyzw;
  r0.w = 1 + viewToWorldProjectionParam._m33;
  r0.w = r0.w + -r1.x;
  r0.w = viewToWorldProjectionParam._m23 / r0.w;
  r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r1.z = -r1.y + r0.w;
  r1.z = r1.x * r1.z;
  r1.z = viewToWorldProjectionParam._m03 * r1.z;
  r2.xyz = -viewToWorldProjectionParam._m00_m01_m02 * r1.zzz + viewToWorldProjectionParam._m30_m31_m32;
  r0.xyz = r0.xyz * r0.www + r2.xyz;
  r1.x = dot(r1.xy, r1.xy);
  r1.x = r1.x == 0.000000;
  r1.yzw = v3.xyz * r0.www;
  r2.xy = globalScreenSize.xy * v1.xy;
  r2.xy = float2(0.015625,0.015625) * r2.xy;
  r2.xyzw = gCSMDitherTextureSamp.Sample(gCSMDitherTextureSamp_s, r2.xy).xyzw;
  r2.x = gCSMShaderVars_deferred.w * r2.z;
  r2.yzw = -gViewInverse._m30_m31_m32 + r0.xyz;
  r3.xyz = gCSMShaderVars_shared[1].xyz * r2.zzz;
  r3.xyz = r2.yyy * gCSMShaderVars_shared[0].xyz + r3.xyz;
  r2.yzw = r2.www * gCSMShaderVars_shared[2].xyz + r3.xyz;
  r1.xyz = r1.xxx ? r1.yzw : r2.yzw;
  r2.yzw = r1.xyz * gCSMShaderVars_shared[4].xyz + gCSMShaderVars_shared[8].xyz;
  x0[0].xyz = r2.yzw;
  r3.xyz = r1.xyz * gCSMShaderVars_shared[5].xyz + gCSMShaderVars_shared[9].xyz;
  x0[1].xyz = r3.xyz;
  r4.xyz = r1.xyz * gCSMShaderVars_shared[6].xyz + gCSMShaderVars_shared[10].xyz;
  x0[2].xyz = r4.xyz;
  r1.xyz = r1.xyz * gCSMShaderVars_shared[7].xyz + gCSMShaderVars_shared[11].xyz;
  x0[3].xyz = r1.xyz;
  r1.zw = float2(0.375,0.09375) * gCSMResolution.zw;
  r5.yz = -r1.zw;
  r5.w = -0;
  r1.z = -gCSMResolution.z * 1.5 + 1;
  r1.z = r1.z * 0.5 + -r2.x;
  r1.w = max(abs(r4.x), abs(r4.y));
  r1.w = r1.w < r1.z;
  r1.w = r1.w ? 2 : 3;
  r2.x = max(abs(r3.x), abs(r3.y));
  r2.x = r2.x < r1.z;
  r1.w = r2.x ? 1 : r1.w;
  r2.x = max(abs(r2.y), abs(r2.z));
  r1.z = r2.x < r1.z;
  r1.z = r1.z ? 0 : r1.w;
  r2.xyz = x0[r1.z+0].xyz;
  r1.z = (int)r1.z;
  r1.w = 0.5 + r1.z;
  r1.w = 0.25 * r1.w;
  r3.xyzw = float4(0,1,2,3) == r1.zzzz;
  r3.xyzw = r3.xyzw ? 1.000000 : 0;
  r1.z = dot(r3.xyzw, gCSMDepthBias.xyzw);
  r2.w = dot(r3.xyzw, gCSMDepthSlopeBias.xyzw);
  r3.y = 0.5 + r2.x;
  r3.z = r2.y * 0.25 + r1.w;
  r1.w = r1.z != 0.000000;
  r1.z = r2.z + -r1.z;
  r4.xyw = ddx(r3.yzz);
  r4.z = ddx(r1.z);
  r6.xyz = ddy(r3.zyz);
  r6.w = ddy(r1.z);
  r2.xy = r6.yw * r4.yw;
  r7.xy = r4.xz * r6.xz + -r2.xy;
  r2.x = 1 / r7.x;
  r2.y = r6.y * r4.z;
  r7.z = r4.x * r6.w + -r2.y;
  r2.xy = r7.yz * r2.xx;
  r2.xy = max(float2(0,0), r2.xy);
  r2.xy = min(float2(0.5,0.5), r2.xy);
  r1.z = -r2.w * r2.x + r1.z;
  r1.z = -r2.w * r2.y + r1.z;
  r3.x = r1.w ? r1.z : r2.z;
  r2.xyz = r3.yzx + r5.yzw;
  r1.z = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r2.xy, r2.z).x;
  r2.xy = gCSMResolution.zw * float2(0.375,0.09375) + r3.yz;
  r1.w = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r2.xy, r3.x).x;
  r1.z = r1.z + r1.w;
  r2.x = 0.5 * r1.z;
  r1.z = particleShadowsParams.x != 0.000000;
  if (r1.z != 0) {
    r3.xyzw = gCSMParticleShadowTexture.Sample(gCSMParticleShadowSamp_s, r3.yz).xyzw;
    r2.y = 1 + -r3.w;
  } else {
    r2.y = 1;
  }
  r0.w = saturate(r0.w * gCSMShaderVars_shared[0].w + gCSMShaderVars_shared[1].w);
  r1.x = max(abs(r1.x), abs(r1.y));
  r1.x = saturate(r1.x * 15 + -6.30000019);
  r0.w = 1 + -r0.w;
  r1.xy = r0.ww * r1.xx + r2.xy;
  r1.xy = r1.xy * r1.xy;
  r1.yz = min(float2(1,1), r1.xy);
  r0.w = 0 != particleShadowsParams.y;
  r1.w = r1.y * r1.z;
  r1.x = r0.w ? r1.w : r1.y;
  r2.x = -gCSMShadowParams.w;
  r2.y = -0;
  r0.xy = r0.xy * float2(0.000285714283,0.000285714283) + r2.xy;
  r2.xyzw = gCSMCloudSampler.Sample(gCSMCloudSampler_s, r0.xy).xyzw;
  r0.x = saturate(r0.z * gCSMShaderVars_shared[3].x + gCSMShaderVars_shared[3].y);
  r0.x = sqrt(r0.x);
  r0.x = -r0.x * gCSMShaderVars_shared[3].z + 1;
  r0.x = r2.y * r0.x;
  o0.xyzw = r1.xzzz * r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16 [unused]
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer cascadeshadows_recieving_locals
// {
//
//   float4 gCSMShaderVars_deferred;    // Offset:    0 Size:    16
//   float4 particleShadowsParams;      // Offset:   16 Size:    16
//
// }
//
// cbuffer cascadeshadows_rendering_locals
// {
//
//   row_major float4x4 viewToWorldProjectionParam;// Offset:    0 Size:    64
//   float4 perspectiveShearParam;      // Offset:   64 Size:    16
//   float4 shadowParams2;              // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gCSMParticleShadowSamp            sampler      NA          NA    2        1
// depthBufferSamp                   sampler      NA          NA    3        1
// gCSMCloudSampler                  sampler      NA          NA   12        1
// gCSMDitherTextureSamp             sampler      NA          NA   14        1
// gCSMShadowTextureSamp           sampler_c      NA          NA   15        1
// gCSMParticleShadowTexture         texture  float4          2d    2        1
// depthBufferSamp                   texture  float4          2d    3        1
// gCSMCloudSampler                  texture  float4          2d   12        1
// gCSMDitherTextureSamp             texture  float4          2d   14        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// csmshader                         cbuffer      NA          NA    6        1
// cascadeshadows_rendering_locals    cbuffer      NA          NA   10        1
// cascadeshadows_recieving_locals    cbuffer      NA          NA   11        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[16], immediateIndexed
dcl_constantbuffer cb6[16], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb10[5], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s12, mode_default
dcl_sampler s14, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 8
dcl_indexableTemp x0[4], 4
mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), cb10[4].xyxx
mul r0.x, r0.x, cb10[0].w
mul r0.y, r0.y, cb10[1].w
mul r0.yzw, r0.yyyy, cb10[1].xxyz
mad r0.xyz, r0.xxxx, cb10[0].xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb10[2].xyzx
sample r1.xyzw, v1.xyxx, t3.xyzw, s3
add r0.w, cb10[3].w, l(1.000000)
add r0.w, -r1.x, r0.w
div r0.w, cb10[2].w, r0.w
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.z, r0.w, -r1.y
mul r1.z, r1.z, r1.x
mul r1.z, r1.z, cb10[0].w
mad r2.xyz, -cb10[0].xyzx, r1.zzzz, cb10[3].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
dp2 r1.x, r1.xyxx, r1.xyxx
eq r1.x, r1.x, l(0.000000)
mul r1.yzw, r0.wwww, v3.xxyz
mul r2.xy, v1.xyxx, cb2[15].xyxx
mul r2.xy, r2.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000)
sample r2.xyzw, r2.xyxx, t14.xyzw, s14
mul r2.x, r2.z, cb11[0].w
add r2.yzw, r0.xxyz, -cb1[15].xxyz
mul r3.xyz, r2.zzzz, cb6[1].xyzx
mad r3.xyz, r2.yyyy, cb6[0].xyzx, r3.xyzx
mad r2.yzw, r2.wwww, cb6[2].xxyz, r3.xxyz
movc r1.xyz, r1.xxxx, r1.yzwy, r2.yzwy
mad r2.yzw, r1.xxyz, cb6[4].xxyz, cb6[8].xxyz
mov x0[0].xyz, r2.yzwy
mad r3.xyz, r1.xyzx, cb6[5].xyzx, cb6[9].xyzx
mov x0[1].xyz, r3.xyzx
mad r4.xyz, r1.xyzx, cb6[6].xyzx, cb6[10].xyzx
mov x0[2].xyz, r4.xyzx
mad r1.xyz, r1.xyzx, cb6[7].xyzx, cb6[11].xyzx
mov x0[3].xyz, r1.xyzx
mul r1.zw, cb6[14].zzzw, l(0.000000, 0.000000, 0.375000, 0.093750)
mov r5.yz, -r1.zzwz
mov r5.w, l(-0.000000)
mad r1.z, -cb6[14].z, l(1.500000), l(1.000000)
mad r1.z, r1.z, l(0.500000), -r2.x
max r1.w, |r4.y|, |r4.x|
lt r1.w, r1.w, r1.z
movc r1.w, r1.w, l(2), l(3)
max r2.x, |r3.y|, |r3.x|
lt r2.x, r2.x, r1.z
movc r1.w, r2.x, l(1), r1.w
max r2.x, |r2.z|, |r2.y|
lt r1.z, r2.x, r1.z
movc r1.z, r1.z, l(0), r1.w
mov r2.xyz, x0[r1.z + 0].xyzx
itof r1.z, r1.z
add r1.w, r1.z, l(0.500000)
mul r1.w, r1.w, l(0.250000)
eq r3.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), r1.zzzz
and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
dp4 r1.z, r3.xyzw, cb6[12].xyzw
dp4 r2.w, r3.xyzw, cb6[13].xyzw
add r3.y, r2.x, l(0.500000)
mad r3.z, r2.y, l(0.250000), r1.w
ne r1.w, r1.z, l(0.000000)
add r1.z, -r1.z, r2.z
deriv_rtx r4.xyw, r3.yzyz
deriv_rtx r4.z, r1.z
deriv_rty r6.xyz, r3.zyzz
deriv_rty r6.w, r1.z
mul r2.xy, r4.ywyy, r6.ywyy
mad r7.xy, r4.xzxx, r6.xzxx, -r2.xyxx
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r7.x
mul r2.y, r4.z, r6.y
mad r7.z, r4.x, r6.w, -r2.y
mul r2.xy, r2.xxxx, r7.yzyy
max r2.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.z, -r2.w, r2.x, r1.z
mad r1.z, -r2.w, r2.y, r1.z
movc r3.x, r1.w, r1.z, r2.z
add r2.xyz, r5.yzwy, r3.yzxy
sample_c_lz r1.z, r2.xyxx, t15.xxxx, s15, r2.z
mad r2.xy, cb6[14].zwzz, l(0.375000, 0.093750, 0.000000, 0.000000), r3.yzyy
sample_c_lz r1.w, r2.xyxx, t15.xxxx, s15, r3.x
add r1.z, r1.w, r1.z
mul r2.x, r1.z, l(0.500000)
ne r1.z, cb11[1].x, l(0.000000)
if_nz r1.z
  sample r3.xyzw, r3.yzyy, t2.xyzw, s2
  add r2.y, -r3.w, l(1.000000)
else 
  mov r2.y, l(1.000000)
endif 
mad_sat r0.w, r0.w, cb6[0].w, cb6[1].w
max r1.x, |r1.y|, |r1.x|
mad_sat r1.x, r1.x, l(15.000000), l(-6.300000)
add r0.w, -r0.w, l(1.000000)
mad r1.xy, r0.wwww, r1.xxxx, r2.xyxx
mul r1.xy, r1.xyxx, r1.xyxx
min r1.yz, r1.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb11[1].y
mul r1.w, r1.z, r1.y
movc r1.x, r0.w, r1.w, r1.y
mov r2.x, -cb6[15].w
mov r2.y, l(-0.000000)
mad r0.xy, r0.xyxx, l(0.000286, 0.000286, 0.000000, 0.000000), r2.xyxx
sample r2.xyzw, r0.xyxx, t12.xyzw, s12
mad_sat r0.x, r0.z, cb6[3].x, cb6[3].y
sqrt r0.x, r0.x
mad r0.x, -r0.x, cb6[3].z, l(1.000000)
mul r0.x, r0.x, r2.y
mul o0.xyzw, r0.xxxx, r1.xzzz
ret 
// Approximately 111 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:35:08 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16 [unused]
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer cascadeshadows_recieving_locals
// {
//
//   float4 gCSMShaderVars_deferred;    // Offset:    0 Size:    16
//   float4 particleShadowsParams;      // Offset:   16 Size:    16
//
// }
//
// cbuffer cascadeshadows_rendering_locals
// {
//
//   row_major float4x4 viewToWorldProjectionParam;// Offset:    0 Size:    64
//   float4 perspectiveShearParam;      // Offset:   64 Size:    16
//   float4 shadowParams2;              // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gCSMParticleShadowSamp_s          sampler      NA          NA    2        1
// depthBufferSamp_s                 sampler      NA          NA    3        1
// gCSMCloudSampler_s                sampler      NA          NA   12        1
// gCSMDitherTextureSamp_s           sampler      NA          NA   14        1
// gCSMShadowTextureSamp_s         sampler_c      NA          NA   15        1
// gCSMParticleShadowTexture         texture  float4          2d    2        1
// depthBufferSamp                   texture  float4          2d    3        1
// gCSMCloudSampler                  texture  float4          2d   12        1
// gCSMDitherTextureSamp             texture  float4          2d   14        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// csmshader                         cbuffer      NA          NA    6        1
// cascadeshadows_rendering_locals    cbuffer      NA          NA   10        1
// cascadeshadows_recieving_locals    cbuffer      NA          NA   11        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[16], immediateIndexed
dcl_constantbuffer cb6[16], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb10[5], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s12, mode_default
dcl_sampler s14, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 7
dcl_indexableTemp x0[4], 4
mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), cb10[4].xyxx
mul r0.x, r0.x, cb10[0].w
mul r0.y, r0.y, cb10[1].w
mul r0.yzw, r0.yyyy, cb10[1].xxyz
mad r0.xyz, r0.xxxx, cb10[0].xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb10[2].xyzx
sample r1.xyzw, v1.xyxx, t3.xyzw, s3
add r0.w, l(1.000000), cb10[3].w
add r0.w, -r1.x, r0.w
div r0.w, cb10[2].w, r0.w
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.z, r0.w, -r1.y
mul r1.z, r1.z, r1.x
mul r1.z, r1.z, cb10[0].w
mad r2.xyz, -cb10[0].xyzx, r1.zzzz, cb10[3].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
dp2 r1.x, r1.xyxx, r1.xyxx
eq r1.x, r1.x, l(0.000000)
mul r1.yzw, r0.wwww, v3.xxyz
mul r2.xy, v1.xyxx, cb2[15].xyxx
mul r2.xy, r2.xyxx, l(0.015625, 0.015625, 0.000000, 0.000000)
sample r2.xyzw, r2.xyxx, t14.xyzw, s14
mul r2.x, r2.z, cb11[0].w
add r2.yzw, r0.xxyz, -cb1[15].xxyz
mul r3.xyz, r2.zzzz, cb6[1].xyzx
mad r3.xyz, r2.yyyy, cb6[0].xyzx, r3.xyzx
mad r2.yzw, r2.wwww, cb6[2].xxyz, r3.xxyz
movc r1.xyz, r1.xxxx, r1.yzwy, r2.yzwy
mad r2.yzw, r1.xxyz, cb6[4].xxyz, cb6[8].xxyz
mov x0[0].xyz, r2.yzwy
mad r3.xyz, r1.xyzx, cb6[5].xyzx, cb6[9].xyzx
mov x0[1].xyz, r3.xyzx
mad r4.xyz, r1.xyzx, cb6[6].xyzx, cb6[10].xyzx
mov x0[2].xyz, r4.xyzx
mad r1.xyz, r1.xyzx, cb6[7].xyzx, cb6[11].xyzx
mov x0[3].xyz, r1.xyzx
mad r1.z, cb6[14].z, l(-1.500000), l(1.000000)
mad r1.z, r1.z, l(0.500000), -r2.x
max r1.w, |r4.y|, |r4.x|
lt r1.w, r1.w, r1.z
movc r1.w, r1.w, l(2.000000), l(3.000000)
max r2.x, |r3.y|, |r3.x|
lt r2.x, r2.x, r1.z
movc r1.w, r2.x, l(1.000000), r1.w
max r2.x, |r2.z|, |r2.y|
lt r1.z, r2.x, r1.z
movc r1.z, r1.z, l(0), r1.w
ftou r1.w, r1.z
mov r2.xyz, x0[r1.w + 0].xyzx
add r1.w, r1.z, l(0.500000)
mul r1.w, r1.w, l(0.250000)
eq r3.xyzw, r1.zzzz, l(0.000000, 1.000000, 2.000000, 3.000000)
and r3.xyzw, r3.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
dp4 r1.z, r3.xyzw, cb6[12].xyzw
dp4 r2.w, r3.xyzw, cb6[13].xyzw
add r3.x, r2.x, l(0.500000)
mad r3.y, r2.y, l(0.250000), r1.w
ne r1.w, r1.z, l(0.000000)
add r1.z, -r1.z, r2.z
deriv_rtx r4.xw, r3.xxxy
deriv_rtx r4.z, r1.z
deriv_rty r5.xz, r3.yyxy
deriv_rty r5.w, r1.z
mul r2.xy, r4.wwww, r5.zwzz
mad r6.xy, r5.xxxx, r4.xzxx, -r2.xyxx
div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r6.x
mul r2.y, r4.z, r5.z
mad r6.z, r5.w, r4.x, -r2.y
mul r2.xy, r2.xxxx, r6.yzyy
max r2.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r1.z, -r2.w, r2.x, r1.z
mad r1.z, -r2.w, r2.y, r1.z
movc r1.z, r1.w, r1.z, r2.z
mad r2.xy, -cb6[14].zwzz, l(0.375000, 0.093750, 0.000000, 0.000000), r3.xyxx
sample_c_lz r1.w, r2.xyxx, t15.xxxx, s15, r1.z
mad r2.xy, cb6[14].zwzz, l(0.375000, 0.093750, 0.000000, 0.000000), r3.xyxx
sample_c_lz r1.z, r2.xyxx, t15.xxxx, s15, r1.z
add r1.z, r1.z, r1.w
mul r2.x, r1.z, l(0.500000)
ne r1.zw, l(0.000000, 0.000000, 0.000000, 0.000000), cb11[1].xxxy
if_nz r1.z
  sample r3.xyzw, r3.xyxx, t2.xyzw, s2
  add r2.y, -r3.w, l(1.000000)
else 
  mov r2.y, l(1.000000)
endif 
mad_sat r0.w, r0.w, cb6[0].w, cb6[1].w
max r1.x, |r1.y|, |r1.x|
mad_sat r1.x, r1.x, l(15.000000), l(-6.300000)
add r0.w, -r0.w, l(1.000000)
mad r1.xy, r0.wwww, r1.xxxx, r2.xyxx
mul r1.xy, r1.xyxx, r1.xyxx
min r1.yz, r1.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r0.w, r1.z, r1.y
movc r1.x, r1.w, r0.w, r1.y
mul r2.y, r0.y, l(0.000286)
mad r2.x, r0.x, l(0.000286), -cb6[15].w
sample r2.xyzw, r2.xyxx, t12.xyzw, s12
mad_sat r0.x, r0.z, cb6[3].x, cb6[3].y
sqrt r0.x, r0.x
mad r0.x, -r0.x, cb6[3].z, l(1.000000)
mul r0.x, r0.x, r2.y
mul o0.xyzw, r0.xxxx, r1.xzzz
ret 
// Approximately 106 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
