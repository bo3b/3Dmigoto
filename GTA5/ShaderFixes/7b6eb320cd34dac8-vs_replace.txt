
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer water_globals : register(b4)
{
  float2 gWorldBaseVS : packoffset(c0);
  float4 gFlowParams : packoffset(c1);
  float4 gFlowParams2 : packoffset(c2);
  float4 gWaterAmbientColor : packoffset(c3);
  float4 gWaterDirectionalColor : packoffset(c4);
  float4 gScaledTime : packoffset(c5);
  float4 gOceanParams0 : packoffset(c6);
  float4 gOceanParams1 : packoffset(c7);
  row_major float4x4 gReflectionWorldViewProj : packoffset(c8);
  float4 gFogLight_Debugging : packoffset(c12);
  row_major float4x4 gRefractionWorldViewProj : packoffset(c13);
  float4 gOceanParams2 : packoffset(c17);
}

cbuffer water_locals : register(b0)
{
  float4 OceanLocalParams0 : packoffset(c0);
  float4 FogParams : packoffset(c1);
  float4 QuadAlpha : packoffset(c2);
  float3 CameraPosition : packoffset(c3);
}
Texture2D<float> HeightTexture : register(t0);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  int2 v0 : TEXCOORD0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = float2(256,256) + gWorldBaseVS.xy;
  r1.z = 0;
  r1.xy = (int2)v0.xy;
  r2.xyz = gWorld._m30_m31_m32 + r1.xyz;
  r0.xy = -r2.xy + r0.xy;
  r0.xy = float2(256,256) + -abs(r0.xy);
  r0.xy = saturate(float2(0.100000001,0.100000001) * r0.xy);
  r0.x = min(r0.x, r0.y);
  r3.zw = float2(0,0);
  r4.xyzw = -gWorldBaseVS.xyxy + r2.xyxy;
  r0.yz = float2(0.5,0.5) * r4.zw;
  o1.zw = r4.xy * float2(0.001953125,0.001953125) + float2(0.001953125,0.001953125);
  r3.xy = (int2)r0.yz;
  r4.xyzw = HeightTexture.Load(r3.xyz).xyzw;
  r0.y = r4.x * r0.x;
  r4.z = r4.x * r0.x + r2.z;
  r5.zw = float2(0,0);
  r6.xyzw = (int4)r3.xyxy + int4(1,0,-1,0);
  r3.xyzw = (int4)r3.xyxy + int4(0,1,0,-1);
  r5.xy = r6.zw;
  r5.xyzw = HeightTexture.Load(r5.xyz).xyzw;
  r6.zw = float2(0,0);
  r6.xyzw = HeightTexture.Load(r6.xyz).xyzw;
  r5.y = r6.x;
  r6.zw = float2(0,0);
  r6.xy = r3.zw;
  r6.xyzw = HeightTexture.Load(r6.xyz).xyzw;
  r5.z = r6.x;
  r3.zw = float2(0,0);
  r3.xyzw = HeightTexture.Load(r3.xyz).xyzw;
  r5.w = r3.x;
  r3.xyzw = r5.xyzw * r0.xxxx + r0.yyyy;
  r3.xy = r3.xz + -r3.yw;
  r3.z = 1;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r0.zw = r3.xy * r0.xx + float2(9.99999975e-006,9.99999975e-006);
  r1.z = dot(r0.zw, r0.zw);
  r1.w = rsqrt(r1.z);
  r1.z = sqrt(r1.z);
  r1.z = r1.z * 4 + 1;
  r1.z = sqrt(r1.z);
  r1.z = -1 + r1.z;
  r0.zw = r1.ww * r0.zw;
  r0.zw = -r0.zw * r1.zz;
  r1.zw = r0.zw * gOceanParams2.xx + r1.xy;
  r4.xy = r0.zw * gOceanParams2.xx + r2.xy;
  o4.zw = gWaterAmbientColor.ww * r2.xy;
  r0.zw = float2(256,256) + r1.xy;
  r0.zw = float2(0.001953125,0.001953125) * r0.zw;
  r2.xyzw = gWorldViewProj._m10_m11_m12_m13 * r1.wwww;
  r1.xyzw = r1.zzzz * gWorldViewProj._m00_m01_m02_m03 + r2.xyzw;
  r1.xyzw = r0.yyyy * gWorldViewProj._m20_m21_m22_m23 + r1.xyzw;
  r1.xyzw = gWorldViewProj._m30_m31_m32_m33 + r1.xyzw;
  o0.xyzw = r1.xyzw;
  r2.xyz = float3(0.5,0.5,0.5) * r1.wyx;
  r0.y = r1.w * 0.5 + -r2.y;
  o1.y = r0.y;
  o5.y = r0.y;
  o1.x = r2.z + r2.x;
  r1.yz = QuadAlpha.yw + -QuadAlpha.xz;
  r0.yz = r0.zz * r1.yz + QuadAlpha.xz;
  r0.z = r0.z + -r0.y;
  o2.w = r0.w * r0.z + r0.y;
  r0.yzw = r3.xyz * r0.xxx;
  r2.yzw = -r3.xyz * r0.xxx + float3(0,0,1);
  r3.xyz = -gViewInverse._m30_m31_m32 + r4.xyz;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = sqrt(r0.x);
  r0.x = saturate(0.00390625 * r0.x);
  r0.x = r0.x * r0.x;
  r0.xyz = r0.xxx * r2.yzw + r0.yzw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  o2.xyz = r0.xyz * r0.www;
  r4.w = r1.w;
  o3.xyzw = r4.xyzw;
  r0.xy = -FogParams.xy + r4.xy;
  r0.xy = FogParams.zw * r0.xy;
  o4.xy = r0.xy * float2(1,-1) + float2(0,1);
  o5.zw = r4.ww;
  r0.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r0.y = r4.w + -r0.y;
  r0.x = r0.x * r0.y + r1.x;
  o5.x = r0.x * 0.5 + r2.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer water_globals
// {
//
//   float2 gWorldBaseVS;               // Offset:    0 Size:     8
//   float4 gFlowParams;                // Offset:   16 Size:    16 [unused]
//   float4 gFlowParams2;               // Offset:   32 Size:    16 [unused]
//   float4 gWaterAmbientColor;         // Offset:   48 Size:    16
//   float4 gWaterDirectionalColor;     // Offset:   64 Size:    16 [unused]
//   float4 gScaledTime;                // Offset:   80 Size:    16 [unused]
//   float4 gOceanParams0;              // Offset:   96 Size:    16 [unused]
//   float4 gOceanParams1;              // Offset:  112 Size:    16 [unused]
//   row_major float4x4 gReflectionWorldViewProj;// Offset:  128 Size:    64 [unused]
//   float4 gFogLight_Debugging;        // Offset:  192 Size:    16 [unused]
//   row_major float4x4 gRefractionWorldViewProj;// Offset:  208 Size:    64 [unused]
//   float4 gOceanParams2;              // Offset:  272 Size:    16
//
// }
//
// cbuffer water_locals
// {
//
//   float4 OceanLocalParams0;          // Offset:    0 Size:    16 [unused]
//   float4 FogParams;                  // Offset:   16 Size:    16
//   float4 QuadAlpha;                  // Offset:   32 Size:    16
//   float3 CameraPosition;             // Offset:   48 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// HeightTexture                     texture   float          2d    0        1
// StereoParmsTexture                texture  float4          2d   20        1
// water_locals                      cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// water_globals                     cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE     int   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb4[18], immediateIndexed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_temps 7
add r0.xy, cb4[0].xyxx, l(256.000000, 256.000000, 0.000000, 0.000000)
mov r1.z, l(0)
itof r1.xy, v0.xyxx
add r2.xyz, r1.xyzx, cb1[3].xyzx
add r0.xy, r0.xyxx, -r2.xyxx
add r0.xy, -|r0.xyxx|, l(256.000000, 256.000000, 0.000000, 0.000000)
mul_sat r0.xy, r0.xyxx, l(0.100000, 0.100000, 0.000000, 0.000000)
min r0.x, r0.y, r0.x
mov r3.zw, l(0,0,0,0)
add r4.xyzw, r2.xyxy, -cb4[0].xyxy
mul r0.yz, r4.zzwz, l(0.000000, 0.500000, 0.500000, 0.000000)
mad o1.zw, r4.xxxy, l(0.000000, 0.000000, 0.001953, 0.001953), l(0.000000, 0.000000, 0.001953, 0.001953)
ftoi r3.xy, r0.yzyy
ld r4.xyzw, r3.xyzw, t0.xyzw
mul r0.y, r0.x, r4.x
mad r4.z, r4.x, r0.x, r2.z
mov r5.zw, l(0,0,0,0)
iadd r6.xyzw, r3.xyxy, l(1, 0, -1, 0)
iadd r3.xyzw, r3.xyxy, l(0, 1, 0, -1)
mov r5.xy, r6.zwzz
ld r5.xyzw, r5.xyzw, t0.xyzw
mov r6.zw, l(0,0,0,0)
ld r6.xyzw, r6.xyzw, t0.xyzw
mov r5.y, r6.x
mov r6.zw, l(0,0,0,0)
mov r6.xy, r3.zwzz
ld r6.xyzw, r6.xyzw, t0.xyzw
mov r5.z, r6.x
mov r3.zw, l(0,0,0,0)
ld r3.xyzw, r3.xyzw, t0.xyzw
mov r5.w, r3.x
mad r3.xyzw, r5.xyzw, r0.xxxx, r0.yyyy
add r3.xy, -r3.ywyy, r3.xzxx
mov r3.z, l(1.000000)
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mad r0.zw, r3.xxxy, r0.xxxx, l(0.000000, 0.000000, 0.000010, 0.000010)
dp2 r1.z, r0.zwzz, r0.zwzz
rsq r1.w, r1.z
sqrt r1.z, r1.z
mad r1.z, r1.z, l(4.000000), l(1.000000)
sqrt r1.z, r1.z
add r1.z, r1.z, l(-1.000000)
mul r0.zw, r0.zzzw, r1.wwww
mul r0.zw, r1.zzzz, -r0.zzzw
mad r1.zw, r0.zzzw, cb4[17].xxxx, r1.xxxy
mad r4.xy, r0.zwzz, cb4[17].xxxx, r2.xyxx
mul o4.zw, r2.xxxy, cb4[3].wwww
add r0.zw, r1.xxxy, l(0.000000, 0.000000, 256.000000, 256.000000)
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.001953, 0.001953)
mul r2.xyzw, r1.wwww, cb1[9].xyzw
mad r1.xyzw, r1.zzzz, cb1[8].xyzw, r2.xyzw
mad r1.xyzw, r0.yyyy, cb1[10].xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb1[11].xyzw
mov o0.xyzw, r1.xyzw
mul r2.xyz, r1.wyxw, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r0.y, r1.w, l(0.500000), -r2.y
mov o1.y, r0.y
mov o5.y, r0.y
add o1.x, r2.x, r2.z
add r1.yz, -cb0[2].xxzx, cb0[2].yywy
mad r0.yz, r0.zzzz, r1.yyzy, cb0[2].xxzx
add r0.z, -r0.y, r0.z
mad o2.w, r0.w, r0.z, r0.y
mul r0.yzw, r0.xxxx, r3.xxyz
mad r2.yzw, -r3.xxyz, r0.xxxx, l(0.000000, 0.000000, 0.000000, 1.000000)
add r3.xyz, r4.xyzx, -cb1[15].xyzx
dp3 r0.x, r3.xyzx, r3.xyzx
sqrt r0.x, r0.x
mul_sat r0.x, r0.x, l(0.003906)
mul r0.x, r0.x, r0.x
mad r0.xyz, r0.xxxx, r2.yzwy, r0.yzwy
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul o2.xyz, r0.wwww, r0.xyzx
mov r4.w, r1.w
mov o3.xyzw, r4.xyzw
add r0.xy, r4.xyxx, -cb0[1].xyxx
mul r0.xy, r0.xyxx, cb0[1].zwzz
mad o4.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
mov o5.zw, r4.wwww
ld r0.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.y, -r0.y, r4.w
mad r0.x, r0.x, r0.y, r1.x
mad o5.x, r0.x, l(0.500000), r2.x
ret 
// Approximately 86 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
