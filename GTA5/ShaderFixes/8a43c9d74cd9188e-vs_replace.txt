
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer lighting_globals : register(b3)
{
  float4 gDirectionalLight : packoffset(c0);
  float4 gDirectionalColour : packoffset(c1);
  int gNumForwardLights : packoffset(c2);
  float4 gLightPositionAndInvDistSqr[8] : packoffset(c3);
  float4 gLightDirectionAndFalloffExponent[8] : packoffset(c11);
  float4 gLightColourAndCapsuleExtent[8] : packoffset(c19);
  float gLightConeScale[8] : packoffset(c27);
  float gLightConeOffset[8] : packoffset(c35);
  float4 gLightNaturalAmbient0 : packoffset(c43);
  float4 gLightNaturalAmbient1 : packoffset(c44);
  float4 gLightArtificialIntAmbient0 : packoffset(c45);
  float4 gLightArtificialIntAmbient1 : packoffset(c46);
  float4 gLightArtificialExtAmbient0 : packoffset(c47);
  float4 gLightArtificialExtAmbient1 : packoffset(c48);
  float4 gDirectionalAmbientColour : packoffset(c49);
  float4 globalFogParams[5] : packoffset(c50);
  float4 globalFogColor : packoffset(c55);
  float4 globalFogColorE : packoffset(c56);
  float4 globalFogColorN : packoffset(c57);
  float4 globalFogColorMoon : packoffset(c58);
  float4 gReflectionTweaks : packoffset(c59);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = deferredLightParams[2].zxy * deferredLightParams[1].yzx;
  r0.xyz = deferredLightParams[2].yzx * deferredLightParams[1].zxy + -r0.xyz;
  r0.w = 0.999899983 >= abs(v0.z);
  r1.x = dot(v0.xy, v0.xy);
  r1.x = rsqrt(r1.x);
  r1.xy = v0.xy * r1.xx;
  r1.xy = r0.ww ? r1.xy : 0;
  r0.xyz = r1.yyy * r0.xyz;
  r0.xyz = deferredLightParams[2].xyz * r1.xxx + r0.xyz;
  r0.w = 0 >= v0.z;
  r1.x = 1 + v0.z;
  r1.x = r1.x * r1.x;
  r1.y = 1 + -deferredLightParams[5].x;
  r1.x = -r1.x * r1.y + 1;
  r1.y = -r1.x * r1.x + 1;
  r1.y = min(1, abs(r1.y));
  r1.y = sqrt(r1.y);
  r1.xzw = deferredLightParams[1].xyz * r1.xxx;
  r2.xyz = r1.yyy * r0.xyz;
  r1.y = 1 + -v0.z;
  r3.xy = deferredLightParams[5].xy * r1.yy;
  r3.xzw = deferredLightParams[1].xyz * r3.xxx;
  r0.xyz = r3.yyy * r0.xyz;
  r0.xyz = r0.www ? r2.xyz : r0.xyz;
  r1.xyz = r0.www ? r1.xzw : r3.xzw;
  r0.xyz = r1.xyz + r0.xyz;
  r0.xyz = r0.xyz * deferredLightParams[4].yyy + deferredLightParams[0].xyz;
  r1.xyz = -gViewInverse._m30_m31_m32 + r0.xyz;
  r2.y = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r2.y);
  r1.w = 0 < r0.w;
  if (r1.w != 0) {
    r3.xyz = -deferredLightParams[0].xyz + gViewInverse._m30_m31_m32;
    r1.w = deferredLightParams[5].x * deferredLightParams[5].x;
    r2.z = dot(r3.xyz, r1.xyz);
    r2.w = dot(r3.xyz, r3.xyz);
    r3.w = dot(r3.xyz, deferredLightParams[1].xyz);
    r4.x = dot(r1.xyz, deferredLightParams[1].xyz);
    r4.y = r4.x * r4.x;
    r4.z = -r1.w * r2.y + r4.y;
    r4.w = r2.z * r1.w;
    r5.xy = r4.xx * r3.ww + -r4.ww;
    r4.w = r2.w * r1.w;
    r3.w = r3.w * r3.w + -r4.w;
    r3.w = r4.z * r3.w;
    r3.w = r5.y * r5.y + -r3.w;
    r2.x = -r4.z;
    r6.x = sqrt(abs(r3.w));
    r3.w = deferredLightParams[4].y * deferredLightParams[4].y;
    r2.w = -deferredLightParams[4].y * deferredLightParams[4].y + r2.w;
    r2.w = r2.w * r2.y;
    r2.w = r2.z * r2.z + -r2.w;
    r2.w = sqrt(abs(r2.w));
    r5.zw = -r2.zz;
    r6.y = -r6.x;
    r6.zw = float2(1,-1) * r2.ww;
    r5.xyzw = r6.xyzw + r5.xyzw;
    r5.xyzw = r5.xyzw / r2.xxyy;
    r2.x = max(r5.z, r5.w);
    r6.xyz = r1.xyz * r5.xxx + gViewInverse._m30_m31_m32;
    r7.xyz = r1.xyz * r5.yyy + gViewInverse._m30_m31_m32;
    r6.xyz = -deferredLightParams[0].xyz + r6.xyz;
    r6.x = dot(r6.xyz, deferredLightParams[1].xyz);
    r7.xyz = -deferredLightParams[0].xyz + r7.xyz;
    r6.y = dot(r7.xyz, deferredLightParams[1].xyz);
    r4.zw = r6.xy >= float2(0,0);
    r4.zw = r4.zw ? float2(1.06535322e+009,1.06535322e+009) : 0;
    r4.zw = r5.xy * r4.zw;
    r2.w = max(r4.z, r4.w);
    r4.y = r4.y / r2.y;
    r1.w = r4.y >= r1.w;
    r4.x = 0 < r4.x;
    r1.w = r1.w ? r4.x : 0;
    r1.w = r1.w ? 1000000.000000 : 0;
    r1.w = r2.w + r1.w;
    r1.w = min(r1.w, r2.x);
    r4.y = max(1.00999999, r1.w);
    r1.w = min(0, r2.z);
    r1.w = r1.w / r2.y;
    r2.xyz = -r1.xyz * r1.www + r3.xyz;
    r1.w = dot(r2.xyz, r2.xyz);
    r1.w = r1.w / r3.w;
    r1.w = 1 + -r1.w;
    r1.w = r1.w * r1.w;
    r2.x = 1 + -deferredLightVolumeParams[1].w;
    r2.x = r2.x * r1.w + deferredLightVolumeParams[1].w;
    r1.w = r1.w / r2.x;
    r2.xyz = -deferredLightVolumeParams[1].xyz + deferredLightParams[3].xyz;
    o4.xyz = r1.www * r2.xyz + deferredLightVolumeParams[1].xyz;
    r2.xyz = r1.xyz / r0.www;
    r4.x = 1;
  } else {
    o4.xyz = float3(0,0,0);
    r2.xyz = float3(0,0,0);
    r4.xy = float2(0,0);
  }
  r3.xyz = r1.xyz * r4.xxx + gViewInverse._m30_m31_m32;
  r1.xyz = r1.xyz * r4.yyy + gViewInverse._m30_m31_m32;
  r1.xyz = r1.xyz + -r3.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = sqrt(r0.w);
  r1.x = 0.00499999989 * r0.w;
  r1.xyz = r2.xyz * r1.xxx + r3.xyz;
  r1.w = deferredLightVolumeParams[0].x * deferredLightParams[3].w;
  r0.w = max(1, r0.w);
  r0.w = r1.w * r0.w;
  r1.xyz = -gViewInverse._m30_m31_m32 + r1.xyz;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = sqrt(r1.x);
  r1.y = -globalFogParams[0].x + r1.x;
  r1.y = max(0, r1.y);
  r1.x = r1.y / r1.x;
  r1.x = r1.z * r1.x;
  r1.z = globalFogParams[2].z * r1.x;
  r1.x = 0.00999999978 < abs(r1.x);
  r1.w = -1.44269502 * r1.z;
  r1.w = exp2(r1.w);
  r1.w = 1 + -r1.w;
  r1.z = r1.w / r1.z;
  r1.x = r1.x ? r1.z : 1;
  r1.z = globalFogParams[1].w * r1.y;
  r1.x = r1.z * r1.x;
  r1.x = min(1, r1.x);
  r1.x = 1.44269502 * r1.x;
  r1.x = exp2(r1.x);
  r1.x = min(1, r1.x);
  r1.x = 1 + -r1.x;
  r1.z = globalFogParams[2].y * r1.x;
  r1.x = -r1.x * globalFogParams[2].y + 1;
  r1.y = -globalFogParams[2].x + r1.y;
  r1.y = max(0, r1.y);
  r1.xy = globalFogParams[1].yx * r1.xy;
  r1.y = 1.44269502 * r1.y;
  r1.y = exp2(r1.y);
  r1.y = 1 + -r1.y;
  r1.x = saturate(r1.x * r1.y + r1.z);
  r1.x = 1 + -r1.x;
  r1.z = r1.x * r0.w;
  r2.xyzw = gWorldViewProj._m10_m11_m12_m13 * r0.yyyy;
  r2.xyzw = r0.xxxx * gWorldViewProj._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = r0.zzzz * gWorldViewProj._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = gWorldViewProj._m30_m31_m32_m33 + r2.xyzw;
  r3.y = r2.x + r2.w;
  r3.z = r2.w + -r2.y;
  o2.xy = float2(0.5,0.5) * r3.yz;
  r5.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r0.w = -r5.y + r2.w;
  r0.w = r5.x * r0.w + r2.x;
  r3.x = r0.w + r2.w;
  o5.xy = float2(0.5,0.5) * r3.xz;
  o0.xyzw = r2.xyzw;
  r1.w = r2.w;
  o2.zw = r1.zw;
  o5.zw = r1.zw;
  o1.xyz = r0.xyz;
  r4.z = 0;
  o3.xyz = r4.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16 [unused]
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16 [unused]
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16 [unused]
//   float4 globalFogParams[5];         // Offset:  800 Size:    80
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16 [unused]
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// lighting_globals                  cbuffer      NA          NA    3        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb3[53], immediateIndexed
dcl_constantbuffer cb13[16], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 8
mul r0.xyz, cb13[1].yzxy, cb13[2].zxyz
mad r0.xyz, cb13[2].yzxy, cb13[1].zxyz, -r0.xyzx
ge r0.w, l(0.999900), |v0.z|
dp2 r1.x, v0.xyxx, v0.xyxx
rsq r1.x, r1.x
mul r1.xy, r1.xxxx, v0.xyxx
and r1.xy, r0.wwww, r1.xyxx
mul r0.xyz, r0.xyzx, r1.yyyy
mad r0.xyz, cb13[2].xyzx, r1.xxxx, r0.xyzx
ge r0.w, l(0.000000), v0.z
add r1.x, v0.z, l(1.000000)
mul r1.x, r1.x, r1.x
add r1.y, -cb13[5].x, l(1.000000)
mad r1.x, -r1.x, r1.y, l(1.000000)
mad r1.y, -r1.x, r1.x, l(1.000000)
min r1.y, |r1.y|, l(1.000000)
sqrt r1.y, r1.y
mul r1.xzw, r1.xxxx, cb13[1].xxyz
mul r2.xyz, r0.xyzx, r1.yyyy
add r1.y, -v0.z, l(1.000000)
mul r3.xy, r1.yyyy, cb13[5].xyxx
mul r3.xzw, r3.xxxx, cb13[1].xxyz
mul r0.xyz, r0.xyzx, r3.yyyy
movc r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
movc r1.xyz, r0.wwww, r1.xzwx, r3.xzwx
add r0.xyz, r0.xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, cb13[4].yyyy, cb13[0].xyzx
add r1.xyz, r0.xyzx, -cb1[15].xyzx
dp3 r2.y, r1.xyzx, r1.xyzx
sqrt r0.w, r2.y
lt r1.w, l(0.000000), r0.w
if_nz r1.w
  add r3.xyz, cb1[15].xyzx, -cb13[0].xyzx
  mul r1.w, cb13[5].x, cb13[5].x
  dp3 r2.z, r3.xyzx, r1.xyzx
  dp3 r2.w, r3.xyzx, r3.xyzx
  dp3 r3.w, r3.xyzx, cb13[1].xyzx
  dp3 r4.x, r1.xyzx, cb13[1].xyzx
  mul r4.y, r4.x, r4.x
  mad r4.z, -r1.w, r2.y, r4.y
  mul r4.w, r1.w, r2.z
  mad r5.xy, r4.xxxx, r3.wwww, -r4.wwww
  mul r4.w, r1.w, r2.w
  mad r3.w, r3.w, r3.w, -r4.w
  mul r3.w, r3.w, r4.z
  mad r3.w, r5.y, r5.y, -r3.w
  mov r2.x, -r4.z
  sqrt r6.x, |r3.w|
  mul r3.w, cb13[4].y, cb13[4].y
  mad r2.w, -cb13[4].y, cb13[4].y, r2.w
  mul r2.w, r2.y, r2.w
  mad r2.w, r2.z, r2.z, -r2.w
  sqrt r2.w, |r2.w|
  mov r5.zw, -r2.zzzz
  mov r6.y, -r6.x
  mul r6.zw, r2.wwww, l(0.000000, 0.000000, 1.000000, -1.000000)
  add r5.xyzw, r5.xyzw, r6.xyzw
  div r5.xyzw, r5.xyzw, r2.xxyy
  max r2.x, r5.w, r5.z
  mad r6.xyz, r1.xyzx, r5.xxxx, cb1[15].xyzx
  mad r7.xyz, r1.xyzx, r5.yyyy, cb1[15].xyzx
  add r6.xyz, r6.xyzx, -cb13[0].xyzx
  dp3 r6.x, r6.xyzx, cb13[1].xyzx
  add r7.xyz, r7.xyzx, -cb13[0].xyzx
  dp3 r6.y, r7.xyzx, cb13[1].xyzx
  ge r4.zw, r6.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  and r4.zw, r4.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
  mul r4.zw, r4.zzzw, r5.xxxy
  max r2.w, r4.w, r4.z
  div r4.y, r4.y, r2.y
  ge r1.w, r4.y, r1.w
  lt r4.x, l(0.000000), r4.x
  and r1.w, r1.w, r4.x
  and r1.w, r1.w, l(0x49742400)
  add r1.w, r1.w, r2.w
  min r1.w, r2.x, r1.w
  max r4.y, r1.w, l(1.010000)
  min r1.w, r2.z, l(0.000000)
  div r1.w, r1.w, r2.y
  mad r2.xyz, -r1.xyzx, r1.wwww, r3.xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  div r1.w, r1.w, r3.w
  add r1.w, -r1.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  add r2.x, -cb13[15].w, l(1.000000)
  mad r2.x, r2.x, r1.w, cb13[15].w
  div r1.w, r1.w, r2.x
  add r2.xyz, cb13[3].xyzx, -cb13[15].xyzx
  mad o4.xyz, r1.wwww, r2.xyzx, cb13[15].xyzx
  div r2.xyz, r1.xyzx, r0.wwww
  mov r4.x, l(1.000000)
else 
  mov o4.xyz, l(0,0,0,0)
  mov r2.xyz, l(0,0,0,0)
  mov r4.xy, l(0,0,0,0)
endif 
mad r3.xyz, r1.xyzx, r4.xxxx, cb1[15].xyzx
mad r1.xyz, r1.xyzx, r4.yyyy, cb1[15].xyzx
add r1.xyz, -r3.xyzx, r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
mul r1.x, r0.w, l(0.005000)
mad r1.xyz, r2.xyzx, r1.xxxx, r3.xyzx
mul r1.w, cb13[3].w, cb13[14].x
max r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, r1.w
add r1.xyz, r1.xyzx, -cb1[15].xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x
add r1.y, r1.x, -cb3[50].x
max r1.y, r1.y, l(0.000000)
div r1.x, r1.y, r1.x
mul r1.x, r1.x, r1.z
mul r1.z, r1.x, cb3[52].z
lt r1.x, l(0.010000), |r1.x|
mul r1.w, r1.z, l(-1.442695)
exp r1.w, r1.w
add r1.w, -r1.w, l(1.000000)
div r1.z, r1.w, r1.z
movc r1.x, r1.x, r1.z, l(1.000000)
mul r1.z, r1.y, cb3[51].w
mul r1.x, r1.x, r1.z
min r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, l(1.442695)
exp r1.x, r1.x
min r1.x, r1.x, l(1.000000)
add r1.x, -r1.x, l(1.000000)
mul r1.z, r1.x, cb3[52].y
mad r1.x, -r1.x, cb3[52].y, l(1.000000)
add r1.y, r1.y, -cb3[52].x
max r1.y, r1.y, l(0.000000)
mul r1.xy, r1.xyxx, cb3[51].yxyy
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
add r1.y, -r1.y, l(1.000000)
mad_sat r1.x, r1.x, r1.y, r1.z
add r1.x, -r1.x, l(1.000000)
mul r1.z, r0.w, r1.x
mul r2.xyzw, r0.yyyy, cb1[9].xyzw
mad r2.xyzw, r0.xxxx, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, r0.zzzz, cb1[10].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[11].xyzw
add r3.y, r2.w, r2.x
add r3.z, -r2.y, r2.w
mul o2.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ld r5.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.w, r2.w, -r5.y
mad r0.w, r5.x, r0.w, r2.x
add r3.x, r2.w, r0.w
mul o5.xy, r3.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o0.xyzw, r2.xyzw
mov r1.w, r2.w
mov o2.zw, r1.zzzw
mov o5.zw, r1.zzzw
mov o1.xyz, r0.xyzx
mov r4.z, l(0)
mov o3.xyz, r4.xyzx
ret 
// Approximately 158 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:34:56 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16 [unused]
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16 [unused]
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16 [unused]
//   float4 globalFogParams[5];         // Offset:  800 Size:    80
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16 [unused]
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// lighting_globals                  cbuffer      NA          NA    3        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb3[53], immediateIndexed
dcl_constantbuffer cb13[16], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_temps 8
mul r0.xyz, cb13[1].yzxy, cb13[2].zxyz
mad r0.xyz, cb13[2].yzxy, cb13[1].zxyz, -r0.xyzx
ge r0.w, l(0.999900), |v0.z|
dp2 r1.x, v0.xyxx, v0.xyxx
rsq r1.x, r1.x
mul r1.xy, r1.xxxx, v0.xyxx
and r1.xy, r0.wwww, r1.xyxx
mul r0.xyz, r0.xyzx, r1.yyyy
mad r0.xyz, cb13[2].xyzx, r1.xxxx, r0.xyzx
ge r0.w, l(0.000000), v0.z
add r1.x, v0.z, l(1.000000)
mul r1.x, r1.x, r1.x
add r1.y, l(1.000000), -cb13[5].x
mad r1.x, -r1.x, r1.y, l(1.000000)
mad r1.y, -r1.x, r1.x, l(1.000000)
min r1.y, |r1.y|, l(1.000000)
sqrt r1.y, r1.y
mul r1.xzw, r1.xxxx, cb13[1].xxyz
mul r2.xyz, r0.xyzx, r1.yyyy
add r1.y, -v0.z, l(1.000000)
mul r3.xy, r1.yyyy, cb13[5].xyxx
mul r3.xzw, r3.xxxx, cb13[1].xxyz
mul r0.xyz, r0.xyzx, r3.yyyy
movc r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
movc r1.xyz, r0.wwww, r1.xzwx, r3.xzwx
add r0.xyz, r0.xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, cb13[4].yyyy, cb13[0].xyzx
add r1.xyz, r0.xyzx, -cb1[15].xyzx
dp3 r2.y, r1.xyzx, r1.xyzx
sqrt r0.w, r2.y
lt r1.w, l(0.000000), r0.w
if_nz r1.w
  add r3.xyz, cb1[15].xyzx, -cb13[0].xyzx
  mul r1.w, cb13[5].x, cb13[5].x
  dp3 r2.z, r3.xyzx, r1.xyzx
  dp3 r2.w, r3.xyzx, r3.xyzx
  dp3 r3.w, r3.xyzx, cb13[1].xyzx
  dp3 r4.x, r1.xyzx, cb13[1].xyzx
  mul r4.y, r4.x, r4.x
  mad r4.z, -r1.w, r2.y, r4.y
  mul r4.w, r1.w, r2.z
  mad r5.xy, r4.xxxx, r3.wwww, -r4.wwww
  mul r4.w, r1.w, r2.w
  mad r3.w, r3.w, r3.w, -r4.w
  mul r3.w, r3.w, r4.z
  mad r3.w, r5.y, r5.y, -r3.w
  mov r2.x, -r4.z
  sqrt r6.x, |r3.w|
  mul r3.w, cb13[4].y, cb13[4].y
  mad r2.w, -cb13[4].y, cb13[4].y, r2.w
  mul r2.w, r2.y, r2.w
  mad r2.w, r2.z, r2.z, -r2.w
  sqrt r2.w, |r2.w|
  mov r5.zw, -r2.zzzz
  mul r6.zw, r2.wwww, l(0.000000, 0.000000, 1.000000, -1.000000)
  mov r6.y, -r6.x
  add r5.xyzw, r5.xyzw, r6.xyzw
  div r5.xyzw, r5.xyzw, r2.xxyy
  max r2.x, r5.w, r5.z
  mad r6.xyz, r1.xyzx, r5.xxxx, cb1[15].xyzx
  mad r7.xyz, r1.xyzx, r5.yyyy, cb1[15].xyzx
  add r6.xyz, r6.xyzx, -cb13[0].xyzx
  dp3 r6.x, r6.xyzx, cb13[1].xyzx
  add r7.xyz, r7.xyzx, -cb13[0].xyzx
  dp3 r6.y, r7.xyzx, cb13[1].xyzx
  ge r4.zw, r6.xxxy, l(0.000000, 0.000000, 0.000000, 0.000000)
  and r4.zw, r4.zzzw, l(0, 0, 0x4e7e0000, 0x4e7e0000)
  mul r4.zw, r4.zzzw, r5.xxxy
  max r2.w, r4.w, r4.z
  div r4.y, r4.y, r2.y
  ge r1.w, r4.y, r1.w
  lt r4.x, l(0.000000), r4.x
  and r1.w, r1.w, r4.x
  and r1.w, r1.w, l(0x49742400)
  add r1.w, r1.w, r2.w
  min r1.w, r2.x, r1.w
  max r4.y, r1.w, l(1.010000)
  min r1.w, r2.z, l(0.000000)
  div r1.w, r1.w, r2.y
  mad r2.xyz, -r1.xyzx, r1.wwww, r3.xyzx
  dp3 r1.w, r2.xyzx, r2.xyzx
  div r1.w, r1.w, r3.w
  add r1.w, -r1.w, l(1.000000)
  mul r1.w, r1.w, r1.w
  add r2.x, l(1.000000), -cb13[15].w
  mad r2.x, r2.x, r1.w, cb13[15].w
  div r1.w, r1.w, r2.x
  add r2.xyz, cb13[3].xyzx, -cb13[15].xyzx
  mad o4.xyz, r1.wwww, r2.xyzx, cb13[15].xyzx
  div r2.xyz, r1.xyzx, r0.wwww
  mov r4.x, l(1.000000)
else 
  mov o4.xyz, l(0,0,0,0)
  mov r2.xyz, l(0,0,0,0)
  mov r4.xy, l(0,0,0,0)
endif 
mad r3.xyz, r1.xyzx, r4.xxxx, cb1[15].xyzx
mad r1.xyz, r1.xyzx, r4.yyyy, cb1[15].xyzx
add r1.xyz, -r3.xyzx, r1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
mul r1.x, r0.w, l(0.005000)
mad r1.xyz, r2.xyzx, r1.xxxx, r3.xyzx
mul r1.w, cb13[3].w, cb13[14].x
max r0.w, r0.w, l(1.000000)
mul r0.w, r0.w, r1.w
add r1.xyz, r1.xyzx, -cb1[15].xyzx
dp3 r1.x, r1.xyzx, r1.xyzx
sqrt r1.x, r1.x
add r1.y, r1.x, -cb3[50].x
max r1.y, r1.y, l(0.000000)
div r1.x, r1.y, r1.x
mul r1.x, r1.x, r1.z
mul r1.z, r1.x, cb3[52].z
lt r1.x, l(0.010000), |r1.x|
mul r1.w, r1.z, l(-1.442695)
exp r1.w, r1.w
add r1.w, -r1.w, l(1.000000)
div r1.z, r1.w, r1.z
movc r1.x, r1.x, r1.z, l(1.000000)
mul r1.z, r1.y, cb3[51].w
mul r1.x, r1.x, r1.z
min r1.x, r1.x, l(1.000000)
mul r1.x, r1.x, l(1.442695)
exp r1.x, r1.x
min r1.x, r1.x, l(1.000000)
add r1.x, -r1.x, l(1.000000)
mul r1.z, r1.x, cb3[52].y
mad r2.x, -r1.x, cb3[52].y, l(1.000000)
add r1.x, r1.y, -cb3[52].x
max r2.y, r1.x, l(0.000000)
mul r1.xy, r2.xyxx, cb3[51].yxyy
mul r1.y, r1.y, l(1.442695)
exp r1.y, r1.y
add r1.y, -r1.y, l(1.000000)
mad_sat r1.x, r1.x, r1.y, r1.z
add r1.x, -r1.x, l(1.000000)
mul r1.z, r0.w, r1.x
mul r2.xyzw, r0.yyyy, cb1[9].xyzw
mad r2.xyzw, r0.xxxx, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, r0.zzzz, cb1[10].xyzw, r2.xyzw
add r2.xyzw, r2.xyzw, cb1[11].xyzw
add r3.y, r2.w, r2.x
add r3.z, -r2.y, r2.w
mul o2.xy, r3.yzyy, l(0.500000, 0.500000, 0.000000, 0.000000)
ld r5.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.w, r2.w, -r5.y
mad r0.w, r5.x, r0.w, r2.x
add r3.x, r2.w, r0.w
mul o5.xy, r3.xzxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o0.xyzw, r2.xyzw
mov r1.w, r2.w
mov o2.zw, r1.zzzw
mov o5.zw, r1.zzzw
mov o1.xyz, r0.xyzx
mov r4.z, l(0)
mov o3.xyz, r4.xyzx
ret 
// Approximately 158 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
