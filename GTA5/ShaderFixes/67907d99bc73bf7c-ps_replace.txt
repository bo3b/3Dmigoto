
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState GBufferTextureSampler0Global_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler2Global_s : register(s9);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
SamplerComparisonState gShadowZSamplerCache_s : register(s14);
Texture2D<float4> GBufferTextureSampler0Global : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler2Global : register(t9);
Texture2D<uint2> gbufferStencilTextureGlobal : register(t11);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
TextureCube<float4> gLocalLightShadowCM0 : register(t14);
Texture2D<float4> StereoParmsTexture : register(t20);
Texture2D<float> gLocalLightShadowSpot0 : register(t24);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r1.xyz = v2.xyz / v2.www;
  r0.w = 0 != gStereoParams.z;
  r1.w = v2.w == 1.000000;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) {
    r0.w = r0.z + -r2.y;
    r0.w = r2.x * r0.w;
    r0.w = deferredProjectionParams.x * r0.w;
    r3.xyz = -gViewInverse._m00_m01_m02 * r0.www + gViewInverse._m30_m31_m32;
  } else {
    r4.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r3.xyz = gViewInverse._m30_m31_m32 + r4.xyz;
  }
  r3.xyz = r1.xyz * r0.zzz + r3.xyz;
  r4.xyz = deferredLightParams[0].xyz + -r3.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r0.w);
  r4.xyz = r4.xyz * r1.www;
  r0.w = saturate(-r0.w * deferredLightParams[4].z + 1);
  r1.w = 1 + -deferredLightParams[7].x;
  r1.w = r1.w * r0.w + deferredLightParams[7].x;
  r0.w = r0.w / r1.w;
  r1.w = dot(r4.xyz, -deferredLightParams[1].xyz);
  r1.w = saturate(r1.w * deferredLightParams[5].w + deferredLightParams[5].z);
  r0.w = r1.w * r0.w;
  r3.w = 1;
  r1.w = dot(r3.xyzw, deferredLightParams[6].xyzw);
  r1.w = r1.w >= 0;
  r1.w = r1.w ? 1.000000 : 0;
  r0.w = r1.w * r0.w;
  r1.w = r0.w < 9.99999997e-007;
  if (r1.w != 0) discard;
  r3.xy = r0.xy * float2(2,-2) + float2(-1,1);
  r1.w = r0.z + -r2.y;
  r1.w = r2.x * r1.w;
  r1.w = deferredProjectionParams.x * r1.w;
  r2.xyz = gViewInverse._m00_m01_m02 * r1.www;
  r3.z = 1;
  r5.x = dot(r3.xyz, deferredPerspectiveShearParams0.xyz);
  r5.y = dot(r3.xyz, deferredPerspectiveShearParams1.xyz);
  r5.z = dot(r3.xyz, deferredPerspectiveShearParams2.xyz);
  r2.xyz = r5.xyz * r0.zzz + -r2.xyz;
  r3.xy = globalScreenSize.xy * r0.xy;
  r3.xy = (int2)r3.xy;
  r3.zw = float2(0,0);
  r3.xyzw = gbufferStencilTextureGlobal.Load(r3.xyz).xyzw;
  r0.z = (int)r3.y & 8;
  r0.z = (uint)r0.z;
  r0.z = r0.z >= 7.9000001;
  r0.z = r0.z ? 1.000000 : 0;
  r3.xyzw = GBufferTextureSampler0Global.Sample(GBufferTextureSampler0Global_s, r0.xy).xyzw;
  r3.xyz = r3.xyz * r3.xyz;
  r5.xyzw = GBufferTextureSampler2Global.Sample(GBufferTextureSampler2Global_s, r0.xy).xyzw;
  r1.w = r5.x * r5.x;
  r6.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r5.xyw = float3(0.998046875,7.984375,63.875) * r6.www;
  r5.xyw = frac(r5.xyw);
  r5.xy = -r5.yw * float2(0.125,0.125) + r5.xy;
  r5.xyw = r6.xyz * float3(256,256,256) + r5.xyw;
  r5.xyw = float3(-128,-128,-128) + r5.xyw;
  r0.x = dot(r5.xyw, r5.xyw);
  r0.x = rsqrt(r0.x);
  r5.xyw = r5.xyw * r0.xxx;
  r0.x = min(1, r1.w);
  r0.y = dot(r1.xyz, r1.xyz);
  r0.y = rsqrt(r0.y);
  r1.xyz = r1.xyz * r0.yyy;
  r0.y = gLocalLightShadowData[0]._m03 == 2.000000;
  if (r0.y != 0) {
    r6.xyz = gLocalLightShadowData[0]._m30_m31_m32 + r2.xyz;
    r7.x = dot(r6.xyz, gLocalLightShadowData[0]._m00_m01_m02);
    r7.y = dot(r6.xyz, gLocalLightShadowData[0]._m10_m11_m12);
    r7.z = dot(r6.xyz, gLocalLightShadowData[0]._m20_m21_m22);
    r0.y = dot(-r7.xyz, -r7.xyz);
    r0.y = sqrt(r0.y);
    r6.xyz = -r7.xyz / r0.yyy;
    r0.y = gLocalLightShadowData[0]._m23 * r0.y;
    r7.xyz = float3(0,0,0) < r6.xyz;
    r8.xyz = r6.xyz < float3(0,0,0);
    r7.xyz = ((int3)r8.xyz ? -1 : 0) + ((int3)r7.xyz ? 1 : 0);
    r7.xyz = (int3)r7.zxy;
    r8.xyzw = abs(r6.zzxx) >= abs(r6.xyyz);
    r8.xy = r8.yw ? r8.xz : 0;
    r9.xy = -r7.yz;
    r9.z = 0;
    r9.w = abs(r6.x);
    r10.xy = float2(1,0);
    r10.z = abs(r6.y);
    r8.yzw = r8.yyy ? r9.zxw : r10.xyz;
    r7.y = 0;
    r7.z = abs(r6.z);
    r7.xyz = r8.xxx ? r7.xyz : r8.yzw;
    r1.w = r7.z == abs(r6.y);
    r8.yz = r1.ww ? r9.zy : float2(1,0);
    r1.w = dot(r7.zz, gShadowTexParam.zz);
    r6.xyz = r6.xyz / r1.www;
    r9.xz = float2(-0.5,-0.5) * r7.xy;
    r9.y = -0;
    r9.xyz = r9.xyz + r6.xyz;
    r8.x = 0;
    r10.xyz = float3(-0.5,-0.5,-0.5) * r8.xyz + r9.xyz;
    r1.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xyz, r0.y).x;
    r7.xz = float2(0.5,0.5) * r7.xy;
    r7.y = 0;
    r6.xyz = r7.xyz + r6.xyz;
    r7.xyz = float3(-0.5,-0.5,-0.5) * r8.xyz + r6.xyz;
    r2.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r7.xyz, r0.y).x;
    r1.w = r2.w + r1.w;
    r7.xyz = float3(0.5,0.5,0.5) * r8.xyz + r9.xyz;
    r2.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r7.xyz, r0.y).x;
    r1.w = r2.w + r1.w;
    r6.xyz = float3(0.5,0.5,0.5) * r8.xyz + r6.xyz;
    r0.y = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r6.xyz, r0.y).x;
    r0.y = r1.w + r0.y;
    r0.y = 0.25 * r0.y;
  } else {
    r2.xyz = gLocalLightShadowData[0]._m30_m31_m32 + r2.xyz;
    r6.x = dot(r2.xyz, gLocalLightShadowData[0]._m00_m01_m02);
    r6.y = dot(r2.xyz, gLocalLightShadowData[0]._m10_m11_m12);
    r1.w = dot(r2.xyz, gLocalLightShadowData[0]._m20_m21_m22);
    r6.xy = r6.xy / -r1.ww;
    r1.w = dot(r2.xyz, r2.xyz);
    r1.w = sqrt(r1.w);
    r6.z = gLocalLightShadowData[0]._m23 * r1.w;
    r2.xyz = r6.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r6.xyzw = gShadowTexParam.zwzw * float4(-0.5,-0.5,0.5,-0.5) + r2.xyxy;
    r1.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r6.xy, r2.z).x;
    r2.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r6.zw, r2.z).x;
    r1.w = r2.w + r1.w;
    r6.xyzw = gShadowTexParam.zwzw * float4(-0.5,0.5,0.5,0.5) + r2.xyxy;
    r2.x = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r6.xy, r2.z).x;
    r1.w = r2.x + r1.w;
    r2.x = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r6.zw, r2.z).x;
    r1.w = r2.x + r1.w;
    r0.y = 0.25 * r1.w;
  }
  r0.z = r0.w * r0.z;
  r2.xyz = deferredLightParams[3].xyz * deferredLightParams[3].www;
  r0.w = saturate(dot(r5.xyw, r4.xyz));
  r1.x = saturate(dot(-r1.xyz, r5.xyw));
  r1.x = 1 + -r1.x;
  r1.y = r1.x * r1.x;
  r1.y = r1.y * r1.y;
  r1.x = r1.y * r1.x;
  r1.y = 1 + -r5.z;
  r1.x = r5.z * r1.x + r1.y;
  r0.x = -r0.x * r1.x + 1;
  r0.x = r0.w * r0.x;
  r0.y = -1 + r0.y;
  r0.y = deferredLightParams[8].y * r0.y + 1;
  r1.xyz = r3.xyz * r0.xxx;
  r1.xyz = r1.xyz * r2.xyz;
  r0.xzw = r1.xyz * r0.zzz;
  r0.xyz = r0.xzw * r0.yyy;
  o0.xyz = globalScalars3.zzz * r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192 [unused]
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16 [unused]
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16 [unused]
//   float4 gCSMResolution;             // Offset:  224 Size:    16 [unused]
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512
//   float4 gShadowTexParam;            // Offset:  768 Size:    16
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GBufferTextureSampler0Global      sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler2Global      sampler      NA          NA    9        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// gShadowZSamplerCache            sampler_c      NA          NA   14        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// gbufferStencilTextureGlobal       texture   uint2          2d   11        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// gLocalLightShadowCM0              texture  float4        cube   14        1
// StereoParmsTexture                texture  float4          2d   20        1
// gLocalLightShadowSpot0            texture   float          2d   24        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// csmshader                         cbuffer      NA          NA    6        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb6[49], immediateIndexed
dcl_constantbuffer cb13[21], immediateIndexed
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s12, mode_default
dcl_sampler s14, mode_comparison
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texturecube (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 11
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  add r0.w, -r2.y, r0.z
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r3.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r4.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r3.xyz, r4.xyzx, cb1[15].xyzx
endif 
mad r3.xyz, r1.xyzx, r0.zzzz, r3.xyzx
add r4.xyz, -r3.xyzx, cb13[0].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r1.w, r0.w
mul r4.xyz, r1.wwww, r4.xyzx
mad_sat r0.w, -r0.w, cb13[4].z, l(1.000000)
add r1.w, -cb13[7].x, l(1.000000)
mad r1.w, r1.w, r0.w, cb13[7].x
div r0.w, r0.w, r1.w
dp3 r1.w, r4.xyzx, -cb13[1].xyzx
mad_sat r1.w, r1.w, cb13[5].w, cb13[5].z
mul r0.w, r0.w, r1.w
mov r3.w, l(1.000000)
dp4 r1.w, r3.xyzw, cb13[6].xyzw
ge r1.w, r1.w, l(0.000000)
and r1.w, r1.w, l(0x3f800000)
mul r0.w, r0.w, r1.w
lt r1.w, r0.w, l(0.000001)
discard_nz r1.w
mad r3.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
add r1.w, -r2.y, r0.z
mul r1.w, r1.w, r2.x
mul r1.w, r1.w, cb13[17].x
mul r2.xyz, r1.wwww, cb1[12].xyzx
mov r3.z, l(1.000000)
dp3 r5.x, r3.xyzx, cb13[18].xyzx
dp3 r5.y, r3.xyzx, cb13[19].xyzx
dp3 r5.z, r3.xyzx, cb13[20].xyzx
mad r2.xyz, r5.xyzx, r0.zzzz, -r2.xyzx
mul r3.xy, r0.xyxx, cb2[15].xyxx
ftoi r3.xy, r3.xyxx
mov r3.zw, l(0,0,0,0)
ld r3.xyzw, r3.xyzw, t11.xyzw
and r0.z, r3.y, l(8)
utof r0.z, r0.z
ge r0.z, r0.z, l(7.900000)
and r0.z, r0.z, l(0x3f800000)
sample r3.xyzw, r0.xyxx, t7.xyzw, s7
mul r3.xyz, r3.xyzx, r3.xyzx
sample r5.xyzw, r0.xyxx, t9.xyzw, s9
mul r1.w, r5.x, r5.x
sample r6.xyzw, r0.xyxx, t8.xyzw, s8
mul r5.xyw, r6.wwww, l(0.998047, 7.984375, 0.000000, 63.875000)
frc r5.xyw, r5.xyxw
mad r5.xy, -r5.ywyy, l(0.125000, 0.125000, 0.000000, 0.000000), r5.xyxx
mad r5.xyw, r6.xyxz, l(256.000000, 256.000000, 0.000000, 256.000000), r5.xyxw
add r5.xyw, r5.xyxw, l(-128.000000, -128.000000, 0.000000, -128.000000)
dp3 r0.x, r5.xywx, r5.xywx
rsq r0.x, r0.x
mul r5.xyw, r0.xxxx, r5.xyxw
min r0.x, r1.w, l(1.000000)
dp3 r0.y, r1.xyzx, r1.xyzx
rsq r0.y, r0.y
mul r1.xyz, r0.yyyy, r1.xyzx
eq r0.y, cb6[16].w, l(2.000000)
if_nz r0.y
  add r6.xyz, r2.xyzx, cb6[19].xyzx
  dp3 r7.x, r6.xyzx, cb6[16].xyzx
  dp3 r7.y, r6.xyzx, cb6[17].xyzx
  dp3 r7.z, r6.xyzx, cb6[18].xyzx
  dp3 r0.y, -r7.xyzx, -r7.xyzx
  sqrt r0.y, r0.y
  div r6.xyz, -r7.xyzx, r0.yyyy
  mul r0.y, r0.y, cb6[18].w
  lt r7.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r6.xyzx
  lt r8.xyz, r6.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r7.xyz, r8.xyzx, -r7.xyzx
  itof r7.xyz, r7.zxyz
  ge r8.xyzw, |r6.zzxx|, |r6.xyyz|
  and r8.xy, r8.ywyy, r8.xzxx
  mov r9.xy, -r7.yzyy
  mov r9.z, l(0)
  mov r9.w, |r6.x|
  mov r10.xy, l(1.000000,0,0,0)
  mov r10.z, |r6.y|
  movc r8.yzw, r8.yyyy, r9.zzxw, r10.xxyz
  mov r7.y, l(0)
  mov r7.z, |r6.z|
  movc r7.xyz, r8.xxxx, r7.xyzx, r8.yzwy
  eq r1.w, r7.z, |r6.y|
  movc r8.yz, r1.wwww, r9.zzyz, l(0,1.000000,0,0)
  dp2 r1.w, r7.zzzz, cb6[48].zzzz
  div r6.xyz, r6.xyzx, r1.wwww
  mul r9.xz, r7.xxyx, l(-0.500000, 0.000000, -0.500000, 0.000000)
  mov r9.y, l(-0.000000)
  add r9.xyz, r6.xyzx, r9.xyzx
  mov r8.x, l(0)
  mad r10.xyz, l(-0.500000, -0.500000, -0.500000, -0.000000), r8.xyzx, r9.xyzx
  sample_c_lz r1.w, r10.xyzx, t14.xxxx, s14, r0.y
  mul r7.xz, r7.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
  mov r7.y, l(0)
  add r6.xyz, r6.xyzx, r7.xyzx
  mad r7.xyz, l(-0.500000, -0.500000, -0.500000, -0.000000), r8.xyzx, r6.xyzx
  sample_c_lz r2.w, r7.xyzx, t14.xxxx, s14, r0.y
  add r1.w, r1.w, r2.w
  mad r7.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r8.xyzx, r9.xyzx
  sample_c_lz r2.w, r7.xyzx, t14.xxxx, s14, r0.y
  add r1.w, r1.w, r2.w
  mad r6.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r8.xyzx, r6.xyzx
  sample_c_lz r0.y, r6.xyzx, t14.xxxx, s14, r0.y
  add r0.y, r0.y, r1.w
  mul r0.y, r0.y, l(0.250000)
else 
  add r2.xyz, r2.xyzx, cb6[19].xyzx
  dp3 r6.x, r2.xyzx, cb6[16].xyzx
  dp3 r6.y, r2.xyzx, cb6[17].xyzx
  dp3 r1.w, r2.xyzx, cb6[18].xyzx
  div r6.xy, r6.xyxx, -r1.wwww
  dp3 r1.w, r2.xyzx, r2.xyzx
  sqrt r1.w, r1.w
  mul r6.z, r1.w, cb6[18].w
  mad r2.xyz, r6.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r6.xyzw, cb6[48].zwzw, l(-0.500000, -0.500000, 0.500000, -0.500000), r2.xyxy
  sample_c_lz r1.w, r6.xyxx, t24.xxxx, s14, r2.z
  sample_c_lz r2.w, r6.zwzz, t24.xxxx, s14, r2.z
  add r1.w, r1.w, r2.w
  mad r6.xyzw, cb6[48].zwzw, l(-0.500000, 0.500000, 0.500000, 0.500000), r2.xyxy
  sample_c_lz r2.x, r6.xyxx, t24.xxxx, s14, r2.z
  add r1.w, r1.w, r2.x
  sample_c_lz r2.x, r6.zwzz, t24.xxxx, s14, r2.z
  add r1.w, r1.w, r2.x
  mul r0.y, r1.w, l(0.250000)
endif 
mul r0.z, r0.z, r0.w
mul r2.xyz, cb13[3].wwww, cb13[3].xyzx
dp3_sat r0.w, r5.xywx, r4.xyzx
dp3_sat r1.x, -r1.xyzx, r5.xywx
add r1.x, -r1.x, l(1.000000)
mul r1.y, r1.x, r1.x
mul r1.y, r1.y, r1.y
mul r1.x, r1.x, r1.y
add r1.y, -r5.z, l(1.000000)
mad r1.x, r5.z, r1.x, r1.y
mad r0.x, -r0.x, r1.x, l(1.000000)
mul r0.x, r0.x, r0.w
add r0.y, r0.y, l(-1.000000)
mad r0.y, cb13[8].y, r0.y, l(1.000000)
mul r1.xyz, r0.xxxx, r3.xyzx
mul r1.xyz, r2.xyzx, r1.xyzx
mul r0.xzw, r0.zzzz, r1.xxyz
mul r0.xyz, r0.yyyy, r0.xzwx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 163 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
