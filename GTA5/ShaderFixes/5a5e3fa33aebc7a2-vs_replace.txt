
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer rage_clipplanes : register(b0)
{
  float4 ClipPlanes : packoffset(c0);
}

cbuffer matWheelBuffer : register(b4)
{
  row_major float4x4 matWheelWorld : packoffset(c0);
  row_major float4x4 matWheelWorldViewProj : packoffset(c4);
}
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float2 v3 : TEXCOORD1,
  float3 v4 : NORMAL0,
  float4 v5 : TANGENT0,
  out float2 o0 : TEXCOORD0,
  out float2 p0 : TEXCOORD7,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : SV_Position0,
  out float4 o8 : SV_ClipDistance0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  o0.xy = v2.xy;
  p0.xy = v3.xy;
  r0.xyz = matWheelWorld._m10_m11_m12 * v4.yyy;
  r0.xyz = v4.xxx * matWheelWorld._m00_m01_m02 + r0.xyz;
  r0.xyz = v4.zzz * matWheelWorld._m20_m21_m22 + r0.xyz;
  o1.xyz = r0.xyz;
  r1.xyz = matWheelWorld._m10_m11_m12 * v0.yyy;
  r1.xyz = v0.xxx * matWheelWorld._m00_m01_m02 + r1.xyz;
  r1.xyz = v0.zzz * matWheelWorld._m20_m21_m22 + r1.xyz;
  r1.xyz = matWheelWorld._m30_m31_m32 + r1.xyz;
  o2.xyz = r1.xyz;
  o3.xyz = gViewInverse._m30_m31_m32 + -r1.xyz;
  o2.w = 1;
  r1.xyz = matWheelWorld._m10_m11_m12 * v5.yyy;
  r1.xyz = v5.xxx * matWheelWorld._m00_m01_m02 + r1.xyz;
  r1.xyz = v5.zzz * matWheelWorld._m20_m21_m22 + r1.xyz;
  o4.xyz = r1.xyz;
  r2.xyz = r1.zxy * r0.yzx;
  r0.xyz = r1.yzx * r0.zxy + -r2.xyz;
  o5.xyz = v5.www * r0.xyz;
  o6.xyzw = v1.xyzw;
  r0.xyzw = matWheelWorldViewProj._m10_m11_m12_m13 * v0.yyyy;
  r0.xyzw = v0.xxxx * matWheelWorldViewProj._m00_m01_m02_m03 + r0.xyzw;
  r0.xyzw = v0.zzzz * matWheelWorldViewProj._m20_m21_m22_m23 + r0.xyzw;
  r0.xyzw = matWheelWorldViewProj._m30_m31_m32_m33 + r0.xyzw;
  r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r1.y = -r1.y + r0.w;
  r0.x = r1.x * r1.y + r0.x;
  o7.xyzw = r0.xyzw;
  o8.x = dot(r0.xyzw, ClipPlanes.xyzw);
  o8.yzw = float3(0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer rage_clipplanes
// {
//
//   float4 ClipPlanes;                 // Offset:    0 Size:    16
//
// }
//
// cbuffer matWheelBuffer
// {
//
//   row_major float4x4 matWheelWorld;  // Offset:    0 Size:    64
//   row_major float4x4 matWheelWorldViewProj;// Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_clipplanes                   cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// matWheelBuffer                    cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
// TEXCOORD                 1   xy          3     NONE   float   xy  
// NORMAL                   0   xyz         4     NONE   float   xyz 
// TANGENT                  0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 7     zw        0     NONE   float     zw
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// TEXCOORD                 5   xyz         5     NONE   float   xyz 
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// SV_Position              0   xyzw        7      POS   float   xyzw
// SV_ClipDistance          0   xyzw        8  CLIPDST   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xy
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_output o0.xy
dcl_output o0.zw
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output_siv o7.xyzw, position
dcl_output_siv o8.xyzw, clip_distance
dcl_temps 3
mov o0.xy, v2.xyxx
mov o0.zw, v3.xxxy
mul r0.xyz, v4.yyyy, cb4[1].xyzx
mad r0.xyz, v4.xxxx, cb4[0].xyzx, r0.xyzx
mad r0.xyz, v4.zzzz, cb4[2].xyzx, r0.xyzx
mov o1.xyz, r0.xyzx
mul r1.xyz, v0.yyyy, cb4[1].xyzx
mad r1.xyz, v0.xxxx, cb4[0].xyzx, r1.xyzx
mad r1.xyz, v0.zzzz, cb4[2].xyzx, r1.xyzx
add r1.xyz, r1.xyzx, cb4[3].xyzx
mov o2.xyz, r1.xyzx
add o3.xyz, -r1.xyzx, cb1[15].xyzx
mov o2.w, l(1.000000)
mul r1.xyz, v5.yyyy, cb4[1].xyzx
mad r1.xyz, v5.xxxx, cb4[0].xyzx, r1.xyzx
mad r1.xyz, v5.zzzz, cb4[2].xyzx, r1.xyzx
mov o4.xyz, r1.xyzx
mul r2.xyz, r0.yzxy, r1.zxyz
mad r0.xyz, r1.yzxy, r0.zxyz, -r2.xyzx
mul o5.xyz, r0.xyzx, v5.wwww
mov o6.xyzw, v1.xyzw
mul r0.xyzw, v0.yyyy, cb4[5].xyzw
mad r0.xyzw, v0.xxxx, cb4[4].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb4[6].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb4[7].xyzw
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.y, r0.w, -r1.y
mad r0.x, r1.x, r1.y, r0.x
mov o7.xyzw, r0.xyzw
dp4 o8.x, r0.xyzw, cb0[0].xyzw
mov o8.yzw, l(0,0,0,0)
ret 
// Approximately 32 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:33:10 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer rage_clipplanes
// {
//
//   float4 ClipPlanes;                 // Offset:    0 Size:    16
//
// }
//
// cbuffer matWheelBuffer
// {
//
//   row_major float4x4 matWheelWorld;  // Offset:    0 Size:    64
//   row_major float4x4 matWheelWorldViewProj;// Offset:   64 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_clipplanes                   cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// matWheelBuffer                    cbuffer      NA          NA    4        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
// TEXCOORD                 1   xy          3     NONE   float   xy  
// NORMAL                   0   xyz         4     NONE   float   xyz 
// TANGENT                  0   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// TEXCOORD                 7     zw        0     NONE   float     zw
// TEXCOORD                 1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyz 
// TEXCOORD                 4   xyzw        4     NONE   float   xyz 
// TEXCOORD                 5   xyzw        5     NONE   float   xyz 
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// SV_Position              0   xyzw        7      POS   float   xyzw
// SV_ClipDistance          0   xyzw        8  CLIPDST   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb4[8], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xy
dcl_input v4.xyz
dcl_input v5.xyzw
dcl_output o0.xy
dcl_output o0.zw
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyz
dcl_output o6.xyzw
dcl_output_siv o7.xyzw, position
dcl_output_siv o8.xyzw, clip_distance
dcl_temps 3
mov o0.xy, v2.xyxx
mov o0.zw, v3.xxxy
mul r0.xyz, v4.yyyy, cb4[1].xyzx
mad r0.xyz, v4.xxxx, cb4[0].xyzx, r0.xyzx
mad r0.xyz, v4.zzzz, cb4[2].xyzx, r0.xyzx
mov o1.xyz, r0.xyzx
mul r1.xyz, v0.yyyy, cb4[1].xyzx
mad r1.xyz, v0.xxxx, cb4[0].xyzx, r1.xyzx
mad r1.xyz, v0.zzzz, cb4[2].xyzx, r1.xyzx
add r1.xyz, r1.xyzx, cb4[3].xyzx
mov o2.xyz, r1.xyzx
add o3.xyz, -r1.xyzx, cb1[15].xyzx
mov o2.w, l(1.000000)
mul r1.xyz, v5.yyyy, cb4[1].xyzx
mad r1.xyz, v5.xxxx, cb4[0].xyzx, r1.xyzx
mad r1.xyz, v5.zzzz, cb4[2].xyzx, r1.xyzx
mov o4.xyz, r1.xyzx
mul r2.xyz, r0.yzxy, r1.zxyz
mad r0.xyz, r1.yzxy, r0.zxyz, -r2.xyzx
mul o5.xyz, r0.xyzx, v5.wwww
mov o6.xyzw, v1.xyzw
mul r0.xyzw, v0.yyyy, cb4[5].xyzw
mad r0.xyzw, v0.xxxx, cb4[4].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb4[6].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb4[7].xyzw
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.y, r0.w, -r1.y
mad r0.x, r1.x, r1.y, r0.x
mov o7.xyzw, r0.xyzw
dp4 o8.x, r0.xyzw, cb0[0].xyzw
mov o8.yzw, l(0,0,0,0)
ret 
// Approximately 32 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
