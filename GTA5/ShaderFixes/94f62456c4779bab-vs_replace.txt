
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float4 o8 : TEXCOORD7,
  out float4 o9 : TEXCOORD8,
  out float4 o10 : TEXCOORD9)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = gWorldViewProj._m10_m11_m12_m13 * v0.yyyy;
  r0.xyzw = v0.xxxx * gWorldViewProj._m00_m01_m02_m03 + r0.xyzw;
  r0.xyzw = v0.zzzz * gWorldViewProj._m20_m21_m22_m23 + r0.xyzw;
  r0.xyzw = gWorldViewProj._m30_m31_m32_m33 + r0.xyzw;
  o0.xyzw = r0.xyzw;
  o2.w = r0.w;
  o1.xyz = v1.xyz;
  o1.w = v5.w;
  r0.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
  r0.xyz = gViewInverse._m30_m31_m32 + r0.xyz;
  o2.xyz = v0.xyz + -r0.xyz;
  r0.x = dot(v2.xyz, v2.xyz);
  r0.y = sqrt(r0.x);
  r0.x = rsqrt(r0.x);
  r0.xzw = v2.zxy * r0.xxx;
  r0.y = 1 / r0.y;
  o3.xyz = v2.xyz * r0.yyy;
  o3.w = r0.y;
  r0.y = dot(v3.xyz, v3.xyz);
  r1.x = sqrt(r0.y);
  r0.y = rsqrt(r0.y);
  r1.yzw = v3.yzx * r0.yyy;
  r0.y = 1 / r1.x;
  o4.xyz = v3.xyz * r0.yyy;
  o4.w = r0.y;
  r2.xyz = r1.yzw * r0.xzw;
  o5.xyz = r0.wxz * r1.zwy + -r2.xyz;
  o5.w = v3.w;
  o6.xyz = v5.xyz;
  o6.w = globalScalars.z;
  r0.x = v4.z / v4.y;
  r0.y = r0.x >= -r0.x;
  r0.z = frac(abs(r0.x));
  r1.y = floor(r0.x);
  r0.x = r0.y ? r0.z : -r0.z;
  r0.y = -r0.x * v4.y + v4.y;
  r1.x = v4.y * r0.x;
  r0.x = r0.y < 0.00100000005;
  r2.x = 0;
  r2.y = 1 + r1.y;
  o7.xy = r0.xx ? r2.xy : r1.xy;
  o7.zw = float2(1,1) / v4.yx;
  o8.xyz = gViewInverse._m30_m31_m32 + -v0.xyz;
  o8.w = v0.w;
  r0.x = 0.5 * v4.w;
  r0.y = r0.x >= -r0.x;
  r0.z = frac(abs(r0.x));
  o9.x = floor(r0.x);
  r0.x = r0.y ? r0.z : -r0.z;
  o9.y = r0.x + r0.x;
  o9.z = v2.w;
  o9.w = v1.w;
  o10.xyz = float3(0,0,0);
  o10.w = globalScalars.y;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16 [unused]
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// TEXCOORD                 3   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[13], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb1[9].xyzw
mad r0.xyzw, v0.xxxx, cb1[8].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb1[10].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb1[11].xyzw
mov o0.xyzw, r0.xyzw
mov o2.w, r0.w
mov o1.xyz, v1.xyzx
mov o1.w, v5.w
ld r0.xyzw, l(0, 1, 0, 0), t20.xyzw
add r0.xyz, r0.xyzx, cb1[15].xyzx
add o2.xyz, -r0.xyzx, v0.xyzx
dp3 r0.x, v2.xyzx, v2.xyzx
sqrt r0.y, r0.x
rsq r0.x, r0.x
mul r0.xzw, r0.xxxx, v2.zzxy
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul o3.xyz, r0.yyyy, v2.xyzx
mov o3.w, r0.y
dp3 r0.y, v3.xyzx, v3.xyzx
sqrt r1.x, r0.y
rsq r0.y, r0.y
mul r1.yzw, r0.yyyy, v3.yyzx
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul o4.xyz, r0.yyyy, v3.xyzx
mov o4.w, r0.y
mul r2.xyz, r0.xzwx, r1.yzwy
mad o5.xyz, r0.wxzw, r1.zwyz, -r2.xyzx
mov o5.w, v3.w
mov o6.xyz, v5.xyzx
mov o6.w, cb2[12].z
div r0.x, v4.z, v4.y
ge r0.y, r0.x, -r0.x
frc r0.z, |r0.x|
round_ni r1.y, r0.x
movc r0.x, r0.y, r0.z, -r0.z
mad r0.y, -r0.x, v4.y, v4.y
mul r1.x, r0.x, v4.y
lt r0.x, r0.y, l(0.001000)
mov r2.x, l(0)
add r2.y, r1.y, l(1.000000)
movc o7.xy, r0.xxxx, r2.xyxx, r1.xyxx
div o7.zw, l(1.000000, 1.000000, 1.000000, 1.000000), v4.yyyx
add o8.xyz, -v0.xyzx, cb1[15].xyzx
mov o8.w, v0.w
mul r0.x, v4.w, l(0.500000)
ge r0.y, r0.x, -r0.x
frc r0.z, |r0.x|
round_ni o9.x, r0.x
movc r0.x, r0.y, r0.z, -r0.z
add o9.y, r0.x, r0.x
mov o9.z, v2.w
mov o9.w, v1.w
mov o10.xyz, l(0,0,0,0)
mov o10.w, cb2[12].y
ret 
// Approximately 55 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:27:58 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16 [unused]
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// TEXCOORD                 3   xyzw        5     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyzw        6     NONE   float   xyzw
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xyzw        8     NONE   float   xyzw
// TEXCOORD                 8   xyzw        9     NONE   float   xyzw
// TEXCOORD                 9   xyzw       10     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[13], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_input v5.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output o8.xyzw
dcl_output o9.xyzw
dcl_output o10.xyzw
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb1[9].xyzw
mad r0.xyzw, v0.xxxx, cb1[8].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb1[10].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb1[11].xyzw
mov o0.xyzw, r0.xyzw
mov o2.w, r0.w
mov o1.xyz, v1.xyzx
mov o1.w, v5.w
ld r0.xyzw, l(0, 1, 0, 0), t20.xyzw
add r0.xyz, r0.xyzx, cb1[15].xyzx
add o2.xyz, -r0.xyzx, v0.xyzx
dp3 r0.x, v2.xyzx, v2.xyzx
sqrt r0.y, r0.x
rsq r0.x, r0.x
mul r0.xzw, r0.xxxx, v2.yyzx
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mul o3.xyz, r0.yyyy, v2.xyzx
mov o3.w, r0.y
dp3 r0.y, v3.xyzx, v3.xyzx
sqrt r1.x, r0.y
rsq r0.y, r0.y
mul r1.yzw, r0.yyyy, v3.zzxy
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
mul o4.xyz, r0.yyyy, v3.xyzx
mov o4.w, r0.y
mul r2.xyz, r0.zwxz, r1.wyzw
mad o5.xyz, r0.xzwx, r1.yzwy, -r2.xyzx
mov o5.w, v3.w
mov o6.xyz, v5.xyzx
mov o6.w, cb2[12].z
div r0.x, v4.z, v4.y
ge r0.y, r0.x, -r0.x
frc r0.z, |r0.x|
round_ni r1.y, r0.x
movc r0.x, r0.y, r0.z, -r0.z
mad r0.y, -r0.x, v4.y, v4.y
mul r1.x, r0.x, v4.y
lt r0.x, r0.y, l(0.001000)
mov r2.x, l(0)
add r2.y, r1.y, l(1.000000)
movc o7.xy, r0.xxxx, r2.xyxx, r1.xyxx
div o7.zw, l(1.000000, 1.000000, 1.000000, 1.000000), v4.yyyx
add o8.xyz, -v0.xyzx, cb1[15].xyzx
mov o8.w, v0.w
mul r0.x, v4.w, l(0.500000)
ge r0.y, r0.x, -r0.x
frc r0.z, |r0.x|
round_ni o9.x, r0.x
movc r0.x, r0.y, r0.z, -r0.z
add o9.y, r0.x, r0.x
mov o9.z, v2.w
mov o9.w, v1.w
mov o10.xyz, l(0,0,0,0)
mov o10.w, cb2[12].y
ret 
// Approximately 55 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
