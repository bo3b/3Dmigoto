
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer cascadeshadows_recieving_locals : register(b11)
{
  float4 gCSMShaderVars_deferred : packoffset(c0);
  float4 particleShadowsParams : packoffset(c1);
}

cbuffer cascadeshadows_rendering_locals : register(b10)
{
  row_major float4x4 viewToWorldProjectionParam : packoffset(c0);
  float4 perspectiveShearParam : packoffset(c4);
  float4 shadowParams2 : packoffset(c5);
}
SamplerState gCSMParticleShadowSamp_s : register(s2);
SamplerState depthBufferSamp_s : register(s3);
SamplerComparisonState gCSMShadowTextureSamp_s : register(s15);
Texture2D<float4> gCSMParticleShadowTexture : register(t2);
Texture2D<float4> depthBufferSamp : register(t3);
Texture2D<float4> gCSMShadowTexture : register(t15);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = r0.xy * float2(1,-1) + perspectiveShearParam.xy;
  r0.x = viewToWorldProjectionParam._m03 * r0.x;
  r0.y = viewToWorldProjectionParam._m13 * r0.y;
  r0.yzw = viewToWorldProjectionParam._m10_m11_m12 * r0.yyy;
  r0.xyz = r0.xxx * viewToWorldProjectionParam._m00_m01_m02 + r0.yzw;
  r0.xyz = -viewToWorldProjectionParam._m20_m21_m22 + r0.xyz;
  r1.xyzw = depthBufferSamp.Sample(depthBufferSamp_s, v1.xy).xyzw;
  r0.w = 1 + viewToWorldProjectionParam._m33;
  r0.w = r0.w + -r1.x;
  r0.w = viewToWorldProjectionParam._m23 / r0.w;
  r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r1.z = -r1.y + r0.w;
  r1.z = r1.x * r1.z;
  r1.z = viewToWorldProjectionParam._m03 * r1.z;
  r2.xyz = -viewToWorldProjectionParam._m00_m01_m02 * r1.zzz + viewToWorldProjectionParam._m30_m31_m32;
  r0.xyz = r0.xyz * r0.www + r2.xyz;
  r1.x = dot(r1.xy, r1.xy);
  r1.x = r1.x == 0.000000;
  r1.yzw = v3.xyz * r0.www;
  r0.xyz = -gViewInverse._m30_m31_m32 + r0.xyz;
  r2.xyz = gCSMShaderVars_shared[1].xyz * r0.yyy;
  r0.xyw = r0.xxx * gCSMShaderVars_shared[0].xyz + r2.xyz;
  r0.xyz = r0.zzz * gCSMShaderVars_shared[2].xyz + r0.xyw;
  r0.xyz = r1.xxx ? r1.yzw : r0.xyz;
  r0.xyz = r0.xyz * gCSMShaderVars_shared[4].xyz + gCSMShaderVars_shared[8].xyz;
  r1.xy = float2(0.5,0.125) + r0.xy;
  r0.x = gCSMDepthBias.x != 0.000000;
  r0.y = -gCSMDepthBias.x + r0.z;
  r2.xyw = ddx(r1.xyy);
  r2.z = ddx(r0.y);
  r3.xyz = ddy(r1.yxy);
  r3.w = ddy(r0.y);
  r2.yw = r3.yw * r2.yw;
  r4.xy = r2.xz * r3.xz + -r2.yw;
  r0.w = 1 / r4.x;
  r1.w = r3.y * r2.z;
  r4.z = r2.x * r3.w + -r1.w;
  r2.xy = r4.yz * r0.ww;
  r2.xy = max(float2(0,0), r2.xy);
  r2.xy = min(float2(0.5,0.5), r2.xy);
  r0.y = -gCSMDepthSlopeBias.x * r2.x + r0.y;
  r0.y = -gCSMDepthSlopeBias.x * r2.y + r0.y;
  r1.z = r0.x ? r0.y : r0.z;
  r0.xy = float2(-0.5,-0.5) * gCSMResolution.zw;
  r0.z = 0;
  r0.xyz = r1.xyz + r0.xyz;
  r0.x = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r0.xy, r0.z).x;
  r2.xy = float2(0,-0.5) * gCSMResolution.zw;
  r2.z = 0;
  r2.xyz = r2.xyz + r1.xyz;
  r0.y = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r2.xy, r2.z).x;
  r2.xy = float2(0.5,-0.5) * gCSMResolution.zw;
  r2.z = 0;
  r2.xyz = r2.xyz + r1.xyz;
  r0.z = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r2.xy, r2.z).x;
  r2.xy = float2(-0.5,0) * gCSMResolution.zw;
  r2.z = 0;
  r2.xyz = r2.xyz + r1.xyz;
  r2.x = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r2.xy, r2.z).x;
  r2.y = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r1.xy, r1.z).x;
  r3.xy = float2(0.5,0) * gCSMResolution.zw;
  r3.z = 0;
  r3.xyz = r3.xyz + r1.xyz;
  r2.z = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r3.xy, r3.z).x;
  r3.xy = float2(-0.5,0.5) * gCSMResolution.zw;
  r3.z = 0;
  r3.xyz = r3.xyz + r1.xyz;
  r3.x = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r3.xy, r3.z).x;
  r4.xy = float2(0,0.5) * gCSMResolution.zw;
  r4.z = 0;
  r4.xyz = r4.xyz + r1.xyz;
  r3.y = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r4.xy, r4.z).x;
  r4.xy = float2(0.5,0.5) * gCSMResolution.zw;
  r4.z = 0;
  r4.xyz = r4.xyz + r1.xyz;
  r3.z = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r4.xy, r4.z).x;
  r0.xyz = r2.xyz + r0.xyz;
  r0.xyz = r0.xyz + r3.xyz;
  r0.x = dot(r0.xyz, float3(1,1,1));
  r0.x = 0.111111112 * r0.x;
  r0.z = particleShadowsParams.x != 0.000000;
  if (r0.z != 0) {
    r1.xyzw = gCSMParticleShadowTexture.Sample(gCSMParticleShadowSamp_s, r1.xy).xyzw;
    r0.y = 1 + -r1.w;
  } else {
    r0.y = 1;
  }
  r0.xy = r0.xy * r0.xy;
  r0.yz = min(float2(1,1), r0.xy);
  r0.w = 0 != particleShadowsParams.y;
  r1.x = r0.y * r0.z;
  r0.x = r0.w ? r1.x : r0.y;
  o0.xyzw = r0.xzzz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer cascadeshadows_recieving_locals
// {
//
//   float4 gCSMShaderVars_deferred;    // Offset:    0 Size:    16 [unused]
//   float4 particleShadowsParams;      // Offset:   16 Size:    16
//
// }
//
// cbuffer cascadeshadows_rendering_locals
// {
//
//   row_major float4x4 viewToWorldProjectionParam;// Offset:    0 Size:    64
//   float4 perspectiveShearParam;      // Offset:   64 Size:    16
//   float4 shadowParams2;              // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gCSMParticleShadowSamp            sampler      NA          NA    2        1
// depthBufferSamp                   sampler      NA          NA    3        1
// gCSMShadowTextureSamp           sampler_c      NA          NA   15        1
// gCSMParticleShadowTexture         texture  float4          2d    2        1
// depthBufferSamp                   texture  float4          2d    3        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// csmshader                         cbuffer      NA          NA    6        1
// cascadeshadows_rendering_locals    cbuffer      NA          NA   10        1
// cascadeshadows_recieving_locals    cbuffer      NA          NA   11        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb6[15], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb10[5], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 5
mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), cb10[4].xyxx
mul r0.x, r0.x, cb10[0].w
mul r0.y, r0.y, cb10[1].w
mul r0.yzw, r0.yyyy, cb10[1].xxyz
mad r0.xyz, r0.xxxx, cb10[0].xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb10[2].xyzx
sample r1.xyzw, v1.xyxx, t3.xyzw, s3
add r0.w, cb10[3].w, l(1.000000)
add r0.w, -r1.x, r0.w
div r0.w, cb10[2].w, r0.w
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.z, r0.w, -r1.y
mul r1.z, r1.z, r1.x
mul r1.z, r1.z, cb10[0].w
mad r2.xyz, -cb10[0].xyzx, r1.zzzz, cb10[3].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
dp2 r1.x, r1.xyxx, r1.xyxx
eq r1.x, r1.x, l(0.000000)
mul r1.yzw, r0.wwww, v3.xxyz
add r0.xyz, r0.xyzx, -cb1[15].xyzx
mul r2.xyz, r0.yyyy, cb6[1].xyzx
mad r0.xyw, r0.xxxx, cb6[0].xyxz, r2.xyxz
mad r0.xyz, r0.zzzz, cb6[2].xyzx, r0.xywx
movc r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
mad r0.xyz, r0.xyzx, cb6[4].xyzx, cb6[8].xyzx
add r1.xy, r0.xyxx, l(0.500000, 0.125000, 0.000000, 0.000000)
ne r0.x, cb6[12].x, l(0.000000)
add r0.y, r0.z, -cb6[12].x
deriv_rtx r2.xyw, r1.xyxy
deriv_rtx r2.z, r0.y
deriv_rty r3.xyz, r1.yxyy
deriv_rty r3.w, r0.y
mul r2.yw, r2.yyyw, r3.yyyw
mad r4.xy, r2.xzxx, r3.xzxx, -r2.ywyy
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
mul r1.w, r2.z, r3.y
mad r4.z, r2.x, r3.w, -r1.w
mul r2.xy, r0.wwww, r4.yzyy
max r2.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.y, -cb6[13].x, r2.x, r0.y
mad r0.y, -cb6[13].x, r2.y, r0.y
movc r1.z, r0.x, r0.y, r0.z
mul r0.xy, cb6[14].zwzz, l(-0.500000, -0.500000, 0.000000, 0.000000)
mov r0.z, l(0)
add r0.xyz, r0.xyzx, r1.xyzx
sample_c_lz r0.x, r0.xyxx, t15.xxxx, s15, r0.z
mul r2.xy, cb6[14].zwzz, l(0.000000, -0.500000, 0.000000, 0.000000)
mov r2.z, l(0)
add r2.xyz, r1.xyzx, r2.xyzx
sample_c_lz r0.y, r2.xyxx, t15.xxxx, s15, r2.z
mul r2.xy, cb6[14].zwzz, l(0.500000, -0.500000, 0.000000, 0.000000)
mov r2.z, l(0)
add r2.xyz, r1.xyzx, r2.xyzx
sample_c_lz r0.z, r2.xyxx, t15.xxxx, s15, r2.z
mul r2.xy, cb6[14].zwzz, l(-0.500000, 0.000000, 0.000000, 0.000000)
mov r2.z, l(0)
add r2.xyz, r1.xyzx, r2.xyzx
sample_c_lz r2.x, r2.xyxx, t15.xxxx, s15, r2.z
sample_c_lz r2.y, r1.xyxx, t15.xxxx, s15, r1.z
mul r3.xy, cb6[14].zwzz, l(0.500000, 0.000000, 0.000000, 0.000000)
mov r3.z, l(0)
add r3.xyz, r1.xyzx, r3.xyzx
sample_c_lz r2.z, r3.xyxx, t15.xxxx, s15, r3.z
mul r3.xy, cb6[14].zwzz, l(-0.500000, 0.500000, 0.000000, 0.000000)
mov r3.z, l(0)
add r3.xyz, r1.xyzx, r3.xyzx
sample_c_lz r3.x, r3.xyxx, t15.xxxx, s15, r3.z
mul r4.xy, cb6[14].zwzz, l(0.000000, 0.500000, 0.000000, 0.000000)
mov r4.z, l(0)
add r4.xyz, r1.xyzx, r4.xyzx
sample_c_lz r3.y, r4.xyxx, t15.xxxx, s15, r4.z
mul r4.xy, cb6[14].zwzz, l(0.500000, 0.500000, 0.000000, 0.000000)
mov r4.z, l(0)
add r4.xyz, r1.xyzx, r4.xyzx
sample_c_lz r3.z, r4.xyxx, t15.xxxx, s15, r4.z
add r0.xyz, r0.xyzx, r2.xyzx
add r0.xyz, r3.xyzx, r0.xyzx
dp3 r0.x, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.x, r0.x, l(0.111111)
ne r0.z, cb11[1].x, l(0.000000)
if_nz r0.z
  sample r1.xyzw, r1.xyxx, t2.xyzw, s2
  add r0.y, -r1.w, l(1.000000)
else 
  mov r0.y, l(1.000000)
endif 
mul r0.xy, r0.xyxx, r0.xyxx
min r0.yz, r0.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb11[1].y
mul r1.x, r0.z, r0.y
movc r0.x, r0.w, r1.x, r0.y
mov o0.xyzw, r0.xzzz
ret 
// Approximately 95 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:35:07 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer cascadeshadows_recieving_locals
// {
//
//   float4 gCSMShaderVars_deferred;    // Offset:    0 Size:    16 [unused]
//   float4 particleShadowsParams;      // Offset:   16 Size:    16
//
// }
//
// cbuffer cascadeshadows_rendering_locals
// {
//
//   row_major float4x4 viewToWorldProjectionParam;// Offset:    0 Size:    64
//   float4 perspectiveShearParam;      // Offset:   64 Size:    16
//   float4 shadowParams2;              // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// gCSMParticleShadowSamp_s          sampler      NA          NA    2        1
// depthBufferSamp_s                 sampler      NA          NA    3        1
// gCSMShadowTextureSamp_s         sampler_c      NA          NA   15        1
// gCSMParticleShadowTexture         texture  float4          2d    2        1
// depthBufferSamp                   texture  float4          2d    3        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// csmshader                         cbuffer      NA          NA    6        1
// cascadeshadows_rendering_locals    cbuffer      NA          NA   10        1
// cascadeshadows_recieving_locals    cbuffer      NA          NA   11        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb6[15], immediateIndexed
dcl_constantbuffer cb11[2], immediateIndexed
dcl_constantbuffer cb10[5], immediateIndexed
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 5
mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), cb10[4].xyxx
mul r0.x, r0.x, cb10[0].w
mul r0.y, r0.y, cb10[1].w
mul r0.yzw, r0.yyyy, cb10[1].xxyz
mad r0.xyz, r0.xxxx, cb10[0].xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb10[2].xyzx
sample r1.xyzw, v1.xyxx, t3.xyzw, s3
add r0.w, l(1.000000), cb10[3].w
add r0.w, -r1.x, r0.w
div r0.w, cb10[2].w, r0.w
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.z, r0.w, -r1.y
mul r1.z, r1.z, r1.x
mul r1.z, r1.z, cb10[0].w
mad r2.xyz, -cb10[0].xyzx, r1.zzzz, cb10[3].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r2.xyzx
dp2 r1.x, r1.xyxx, r1.xyxx
eq r1.x, r1.x, l(0.000000)
mul r1.yzw, r0.wwww, v3.xxyz
add r0.xyz, r0.xyzx, -cb1[15].xyzx
mul r2.xyz, r0.yyyy, cb6[1].xyzx
mad r0.xyw, r0.xxxx, cb6[0].xyxz, r2.xyxz
mad r0.xyz, r0.zzzz, cb6[2].xyzx, r0.xywx
movc r0.xyz, r1.xxxx, r1.yzwy, r0.xyzx
mad r0.xyz, r0.xyzx, cb6[4].xyzx, cb6[8].xyzx
add r1.xy, r0.xyxx, l(0.500000, 0.125000, 0.000000, 0.000000)
ne r0.x, l(0.000000), cb6[12].x
add r0.y, r0.z, -cb6[12].x
deriv_rtx r2.xy, r1.xyxx
deriv_rtx r2.z, r0.y
deriv_rty r3.xy, r1.yxyy
deriv_rty r3.z, r0.y
mul r2.yw, r2.yyyy, r3.yyyz
mad r4.xy, r3.xxxx, r2.xzxx, -r2.ywyy
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r4.x
mul r1.w, r2.z, r3.y
mad r4.z, r3.z, r2.x, -r1.w
mul r2.xy, r0.wwww, r4.yzyy
max r2.xy, r2.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
min r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mad r0.y, -cb6[13].x, r2.x, r0.y
mad r0.y, -cb6[13].x, r2.y, r0.y
movc r1.z, r0.x, r0.y, r0.z
mul r0.xy, l(-0.500000, -0.500000, 0.000000, 0.000000), cb6[14].zwzz
mov r0.z, l(0)
add r0.xyz, r0.xyzx, r1.xyzx
sample_c_lz r0.x, r0.xyxx, t15.xxxx, s15, r0.z
mul r2.xy, l(0.000000, -0.500000, 0.000000, 0.000000), cb6[14].zwzz
mov r2.z, l(0)
add r2.xyz, r1.xyzx, r2.xyzx
sample_c_lz r0.y, r2.xyxx, t15.xxxx, s15, r2.z
mul r2.xy, l(0.500000, -0.500000, 0.000000, 0.000000), cb6[14].zwzz
mov r2.z, l(0)
add r2.xyz, r1.xyzx, r2.xyzx
sample_c_lz r0.z, r2.xyxx, t15.xxxx, s15, r2.z
mul r2.xy, l(-0.500000, 0.000000, 0.000000, 0.000000), cb6[14].zwzz
mov r2.z, l(0)
add r2.xyz, r1.xyzx, r2.xyzx
sample_c_lz r2.x, r2.xyxx, t15.xxxx, s15, r2.z
sample_c_lz r2.y, r1.xyxx, t15.xxxx, s15, r1.z
mul r3.xy, l(0.500000, 0.000000, 0.000000, 0.000000), cb6[14].zwzz
mov r3.z, l(0)
add r3.xyz, r1.xyzx, r3.xyzx
sample_c_lz r2.z, r3.xyxx, t15.xxxx, s15, r3.z
mul r3.xy, l(-0.500000, 0.500000, 0.000000, 0.000000), cb6[14].zwzz
mov r3.z, l(0)
add r3.xyz, r1.xyzx, r3.xyzx
sample_c_lz r3.x, r3.xyxx, t15.xxxx, s15, r3.z
mul r4.xy, l(0.000000, 0.500000, 0.000000, 0.000000), cb6[14].zwzz
mov r4.z, l(0)
add r4.xyz, r1.xyzx, r4.xyzx
sample_c_lz r3.y, r4.xyxx, t15.xxxx, s15, r4.z
mul r4.xy, l(0.500000, 0.500000, 0.000000, 0.000000), cb6[14].zwzz
mov r4.z, l(0)
add r4.xyz, r1.xyzx, r4.xyzx
sample_c_lz r3.z, r4.xyxx, t15.xxxx, s15, r4.z
add r0.xyz, r0.xyzx, r2.xyzx
add r0.xyz, r3.xyzx, r0.xyzx
dp3 r0.x, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mul r0.x, r0.x, l(0.111111)
ne r0.zw, l(0.000000, 0.000000, 0.000000, 0.000000), cb11[1].xxxy
if_nz r0.z
  sample r1.xyzw, r1.xyxx, t2.xyzw, s2
  add r0.y, -r1.w, l(1.000000)
else 
  mov r0.y, l(1.000000)
endif 
mul r0.xy, r0.xyxx, r0.xyxx
min r0.yz, r0.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r1.x, r0.z, r0.y
movc r0.x, r0.w, r1.x, r0.y
mov o0.xyzw, r0.xzzz
ret 
// Approximately 94 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
