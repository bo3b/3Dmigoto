
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer rage_clipplanes : register(b0)
{
  float4 ClipPlanes : packoffset(c0);
}

cbuffer lighting_globals : register(b3)
{
  float4 gDirectionalLight : packoffset(c0);
  float4 gDirectionalColour : packoffset(c1);
  int gNumForwardLights : packoffset(c2);
  float4 gLightPositionAndInvDistSqr[8] : packoffset(c3);
  float4 gLightDirectionAndFalloffExponent[8] : packoffset(c11);
  float4 gLightColourAndCapsuleExtent[8] : packoffset(c19);
  float gLightConeScale[8] : packoffset(c27);
  float gLightConeOffset[8] : packoffset(c35);
  float4 gLightNaturalAmbient0 : packoffset(c43);
  float4 gLightNaturalAmbient1 : packoffset(c44);
  float4 gLightArtificialIntAmbient0 : packoffset(c45);
  float4 gLightArtificialIntAmbient1 : packoffset(c46);
  float4 gLightArtificialExtAmbient0 : packoffset(c47);
  float4 gLightArtificialExtAmbient1 : packoffset(c48);
  float4 gDirectionalAmbientColour : packoffset(c49);
  float4 globalFogParams[5] : packoffset(c50);
  float4 globalFogColor : packoffset(c55);
  float4 globalFogColorE : packoffset(c56);
  float4 globalFogColorN : packoffset(c57);
  float4 globalFogColorMoon : packoffset(c58);
  float4 gReflectionTweaks : packoffset(c59);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}

cbuffer vfx_fogvolume_locals : register(b11)
{
  float3 fogVolumeColor : packoffset(c0);
  float3 fogVolumePosition : packoffset(c1);
  float4 fogVolumeParams : packoffset(c2);
  row_major float4x4 fogVolumeTransform : packoffset(c3);
  row_major float4x4 fogVolumeInvTransform : packoffset(c7);
}
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float3 o4 : TEXCOORD4,
  out float4 o5 : SV_Position0,
  out float4 o6 : SV_ClipDistance0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = dot(v0.xyz, v0.xyz);
  r0.y = r0.x != 0.000000;
  r0.x = rsqrt(r0.x);
  r0.xzw = v0.xyz * r0.xxx;
  r0.xyz = r0.yyy ? r0.xzw : v0.xyz;
  r0.xyz = fogVolumeParams.zzz * r0.xyz;
  r1.xyz = fogVolumeTransform._m10_m11_m12 * r0.yyy;
  r0.xyw = r0.xxx * fogVolumeTransform._m00_m01_m02 + r1.xyz;
  r0.xyz = r0.zzz * fogVolumeTransform._m20_m21_m22 + r0.xyw;
  r0.xyz = fogVolumeTransform._m30_m31_m32 + r0.xyz;
  r0.xyz = fogVolumePosition.xyz + r0.xyz;
  r1.xyz = -gViewInverse._m30_m31_m32 + r0.xyz;
  r2.xyz = fogVolumeInvTransform._m10_m11_m12 * gViewInverse._m31_m31_m31;
  r2.xyz = gViewInverse._m30_m30_m30 * fogVolumeInvTransform._m00_m01_m02 + r2.xyz;
  r2.xyz = gViewInverse._m32_m32_m32 * fogVolumeInvTransform._m20_m21_m22 + r2.xyz;
  r2.xyz = fogVolumeInvTransform._m30_m31_m32 + r2.xyz;
  r3.xyz = fogVolumeInvTransform._m10_m11_m12 * r1.yyy;
  r3.xyz = r1.xxx * fogVolumeInvTransform._m00_m01_m02 + r3.xyz;
  r3.xyz = r1.zzz * fogVolumeInvTransform._m20_m21_m22 + r3.xyz;
  r3.xyz = fogVolumeInvTransform._m30_m31_m32 + r3.xyz;
  r4.xyz = fogVolumeInvTransform._m10_m11_m12 * fogVolumePosition.yyy;
  r4.xyz = fogVolumePosition.xxx * fogVolumeInvTransform._m00_m01_m02 + r4.xyz;
  r4.xyz = fogVolumePosition.zzz * fogVolumeInvTransform._m20_m21_m22 + r4.xyz;
  r4.xyz = fogVolumeInvTransform._m30_m31_m32 + r4.xyz;
  r2.xyz = -r4.xyz + r2.xyz;
  r0.w = dot(r3.xyz, r3.xyz);
  r1.w = dot(r2.xyz, r3.xyz);
  r2.w = dot(r2.xyz, r2.xyz);
  r3.w = fogVolumeParams.z * fogVolumeParams.z;
  r2.w = -fogVolumeParams.z * fogVolumeParams.z + r2.w;
  r2.w = r2.w * r0.w;
  r2.w = r1.w * r1.w + -r2.w;
  r2.w = sqrt(abs(r2.w));
  r4.x = r2.w + -r1.w;
  r4.x = r4.x / r0.w;
  r2.w = -r2.w + -r1.w;
  r2.w = r2.w / r0.w;
  r4.x = saturate(min(r4.x, r2.w));
  r1.w = min(0, r1.w);
  r3.xyz = r3.xyz * r1.www;
  r3.xyz = r3.xyz / r0.www;
  r2.xyz = -r3.xyz + r2.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = r0.w / r3.w;
  r0.w = 1 + -r0.w;
  r0.w = r0.w * r0.w;
  r0.w = min(1, r0.w);
  r0.w = log2(r0.w);
  r0.w = fogVolumeParams.y * r0.w;
  o3.w = exp2(r0.w);
  r2.xyzw = gWorldViewProj._m10_m11_m12_m13 * r0.yyyy;
  r2.xyzw = r0.xxxx * gWorldViewProj._m00_m01_m02_m03 + r2.xyzw;
  r0.xyzw = r0.zzzz * gWorldViewProj._m20_m21_m22_m23 + r2.xyzw;
  r0.xyzw = gWorldViewProj._m30_m31_m32_m33 + r0.xyzw;
  r0.z = max(0, r0.z);
  r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r1.w = -r2.y + r0.w;
  r1.w = r2.x * r1.w + r0.x;
  r2.x = r1.w + r0.w;
  r2.y = r0.w + -r0.y;
  r2.xy = float2(0.5,0.5) * r2.xy;
  r2.zw = r2.xy / r0.ww;
  r3.xy = r2.zw * float2(2,-2) + float2(-1,1);
  r3.z = 1;
  o3.x = dot(r3.xyz, deferredPerspectiveShearParams0.xyz);
  o3.y = dot(r3.xyz, deferredPerspectiveShearParams1.xyz);
  o3.z = dot(r3.xyz, deferredPerspectiveShearParams2.xyz);
  r3.xyz = r4.xxx * r1.xyz;
  r4.z = dot(r3.xyz, r3.xyz);
  r1.w = 9.99999975e-006 < r4.z;
  if (r1.w != 0) {
    r1.w = sqrt(r4.z);
    r2.z = -globalFogParams[0].x + r1.w;
    r2.z = max(0, r2.z);
    r1.w = r2.z / r1.w;
    r1.w = r3.z * r1.w;
    r2.w = globalFogParams[2].z * r1.w;
    r1.w = 0.00999999978 < abs(r1.w);
    r3.w = -1.44269502 * r2.w;
    r3.w = exp2(r3.w);
    r3.w = 1 + -r3.w;
    r2.w = r3.w / r2.w;
    r1.w = r1.w ? r2.w : 1;
    r2.w = globalFogParams[1].w * r2.z;
    r1.w = r2.w * r1.w;
    r1.w = min(1, r1.w);
    r1.w = 1.44269502 * r1.w;
    r1.w = exp2(r1.w);
    r1.w = min(1, r1.w);
    r1.w = 1 + -r1.w;
    r2.w = globalFogParams[2].y * r1.w;
    r3.w = rsqrt(r4.z);
    r3.xyz = r3.xyz * r3.www;
    r3.w = saturate(dot(r3.xyz, globalFogParams[4].xyz));
    r3.w = log2(r3.w);
    r3.w = globalFogParams[4].w * r3.w;
    r3.w = exp2(r3.w);
    r3.x = saturate(dot(r3.xyz, globalFogParams[3].xyz));
    r3.x = log2(r3.x);
    r3.x = globalFogParams[3].w * r3.x;
    r3.x = exp2(r3.x);
    r1.w = -r1.w * globalFogParams[2].y + 1;
    r1.w = globalFogParams[1].y * r1.w;
    r3.y = -globalFogParams[2].x + r2.z;
    r3.y = max(0, r3.y);
    r3.y = globalFogParams[1].x * r3.y;
    r3.y = 1.44269502 * r3.y;
    r3.y = exp2(r3.y);
    r3.y = 1 + -r3.y;
    r2.w = saturate(r1.w * r3.y + r2.w);
    r2.z = -globalFogParams[1].z * r2.z;
    r2.z = 1.44269502 * r2.z;
    r2.z = exp2(r2.z);
    r2.z = 1 + -r2.z;
    r5.xyz = globalFogColorMoon.xyz + -globalFogColorE.xyz;
    r3.yzw = r3.www * r5.xyz + globalFogColorE.xyz;
    r5.xyz = globalFogColor.xyz + -r3.yzw;
    r3.xyz = r3.xxx * r5.xyz + r3.yzw;
    r3.xyz = -globalFogColorN.xyz + r3.xyz;
    r3.xyz = r2.zzz * r3.xyz + globalFogColorN.xyz;
    r5.x = globalFogColor.w + -r3.x;
    r5.y = globalFogColorE.w + -r3.y;
    r5.z = globalFogColorN.w + -r3.z;
    r3.xyz = r1.www * r5.xyz + r3.xyz;
    r1.w = saturate(fogVolumeParams.w * r2.w);
    r3.xyz = -fogVolumeColor.xyz + r3.xyz;
    o4.xyz = r1.www * r3.xyz + fogVolumeColor.xyz;
  } else {
    o4.xyz = fogVolumeColor.xyz;
  }
  o2.w = dot(r1.xyz, r1.xyz);
  o6.x = dot(r0.xyzw, ClipPlanes.xyzw);
  o2.y = 1;
  o2.xz = r4.xz;
  o5.xyzw = r0.xyzw;
  o6.yzw = float3(0,0,0);
  o0.xyz = r1.xyz;
  o1.z = r0.w;
  o1.xy = r2.xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer rage_clipplanes
// {
//
//   float4 ClipPlanes;                 // Offset:    0 Size:    16
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16 [unused]
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16 [unused]
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16 [unused]
//   float4 globalFogParams[5];         // Offset:  800 Size:    80
//   float4 globalFogColor;             // Offset:  880 Size:    16
//   float4 globalFogColorE;            // Offset:  896 Size:    16
//   float4 globalFogColorN;            // Offset:  912 Size:    16
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16 [unused]
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12
//
// }
//
// cbuffer vfx_fogvolume_locals
// {
//
//   float3 fogVolumeColor;             // Offset:    0 Size:    12
//   float3 fogVolumePosition;          // Offset:   16 Size:    12
//   float4 fogVolumeParams;            // Offset:   32 Size:    16
//   row_major float4x4 fogVolumeTransform;// Offset:   48 Size:    64
//   row_major float4x4 fogVolumeInvTransform;// Offset:  112 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_clipplanes                   cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// lighting_globals                  cbuffer      NA          NA    3        1
// vfx_fogvolume_locals              cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz 
// TEXCOORD                 1   xyz         1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          0   xyzw        6  CLIPDST   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb3[59], immediateIndexed
dcl_constantbuffer cb13[21], immediateIndexed
dcl_constantbuffer cb11[11], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output_siv o5.xyzw, position
dcl_output_siv o6.xyzw, clip_distance
dcl_temps 6
dp3 r0.x, v0.xyzx, v0.xyzx
ne r0.y, r0.x, l(0.000000)
rsq r0.x, r0.x
mul r0.xzw, r0.xxxx, v0.xxyz
movc r0.xyz, r0.yyyy, r0.xzwx, v0.xyzx
mul r0.xyz, r0.xyzx, cb11[2].zzzz
mul r1.xyz, r0.yyyy, cb11[4].xyzx
mad r0.xyw, r0.xxxx, cb11[3].xyxz, r1.xyxz
mad r0.xyz, r0.zzzz, cb11[5].xyzx, r0.xywx
add r0.xyz, r0.xyzx, cb11[6].xyzx
add r0.xyz, r0.xyzx, cb11[1].xyzx
add r1.xyz, r0.xyzx, -cb1[15].xyzx
mul r2.xyz, cb1[15].yyyy, cb11[8].xyzx
mad r2.xyz, cb1[15].xxxx, cb11[7].xyzx, r2.xyzx
mad r2.xyz, cb1[15].zzzz, cb11[9].xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb11[10].xyzx
mul r3.xyz, r1.yyyy, cb11[8].xyzx
mad r3.xyz, r1.xxxx, cb11[7].xyzx, r3.xyzx
mad r3.xyz, r1.zzzz, cb11[9].xyzx, r3.xyzx
add r3.xyz, r3.xyzx, cb11[10].xyzx
mul r4.xyz, cb11[1].yyyy, cb11[8].xyzx
mad r4.xyz, cb11[1].xxxx, cb11[7].xyzx, r4.xyzx
mad r4.xyz, cb11[1].zzzz, cb11[9].xyzx, r4.xyzx
add r4.xyz, r4.xyzx, cb11[10].xyzx
add r2.xyz, r2.xyzx, -r4.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r3.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
mul r3.w, cb11[2].z, cb11[2].z
mad r2.w, -cb11[2].z, cb11[2].z, r2.w
mul r2.w, r0.w, r2.w
mad r2.w, r1.w, r1.w, -r2.w
sqrt r2.w, |r2.w|
add r4.x, -r1.w, r2.w
div r4.x, r4.x, r0.w
add r2.w, -r1.w, -r2.w
div r2.w, r2.w, r0.w
min_sat r4.x, r2.w, r4.x
min r1.w, r1.w, l(0.000000)
mul r3.xyz, r1.wwww, r3.xyzx
div r3.xyz, r3.xyzx, r0.wwww
add r2.xyz, r2.xyzx, -r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
div r0.w, r0.w, r3.w
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
min r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, cb11[2].y
exp o3.w, r0.w
mul r2.xyzw, r0.yyyy, cb1[9].xyzw
mad r2.xyzw, r0.xxxx, cb1[8].xyzw, r2.xyzw
mad r0.xyzw, r0.zzzz, cb1[10].xyzw, r2.xyzw
add r0.xyzw, r0.xyzw, cb1[11].xyzw
max r0.z, r0.z, l(0.000000)
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.w, r0.w, -r2.y
mad r1.w, r2.x, r1.w, r0.x
add r2.x, r0.w, r1.w
add r2.y, -r0.y, r0.w
mul r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r2.zw, r2.xxxy, r0.wwww
mad r3.xy, r2.zwzz, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r3.z, l(1.000000)
dp3 o3.x, r3.xyzx, cb13[18].xyzx
dp3 o3.y, r3.xyzx, cb13[19].xyzx
dp3 o3.z, r3.xyzx, cb13[20].xyzx
mul r3.xyz, r1.xyzx, r4.xxxx
dp3 r4.z, r3.xyzx, r3.xyzx
lt r1.w, l(0.000010), r4.z
if_nz r1.w
  sqrt r1.w, r4.z
  add r2.z, r1.w, -cb3[50].x
  max r2.z, r2.z, l(0.000000)
  div r1.w, r2.z, r1.w
  mul r1.w, r1.w, r3.z
  mul r2.w, r1.w, cb3[52].z
  lt r1.w, l(0.010000), |r1.w|
  mul r3.w, r2.w, l(-1.442695)
  exp r3.w, r3.w
  add r3.w, -r3.w, l(1.000000)
  div r2.w, r3.w, r2.w
  movc r1.w, r1.w, r2.w, l(1.000000)
  mul r2.w, r2.z, cb3[51].w
  mul r1.w, r1.w, r2.w
  min r1.w, r1.w, l(1.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  min r1.w, r1.w, l(1.000000)
  add r1.w, -r1.w, l(1.000000)
  mul r2.w, r1.w, cb3[52].y
  rsq r3.w, r4.z
  mul r3.xyz, r3.wwww, r3.xyzx
  dp3_sat r3.w, r3.xyzx, cb3[54].xyzx
  log r3.w, r3.w
  mul r3.w, r3.w, cb3[54].w
  exp r3.w, r3.w
  dp3_sat r3.x, r3.xyzx, cb3[53].xyzx
  log r3.x, r3.x
  mul r3.x, r3.x, cb3[53].w
  exp r3.x, r3.x
  mad r1.w, -r1.w, cb3[52].y, l(1.000000)
  mul r1.w, r1.w, cb3[51].y
  add r3.y, r2.z, -cb3[52].x
  max r3.y, r3.y, l(0.000000)
  mul r3.y, r3.y, cb3[51].x
  mul r3.y, r3.y, l(1.442695)
  exp r3.y, r3.y
  add r3.y, -r3.y, l(1.000000)
  mad_sat r2.w, r1.w, r3.y, r2.w
  mul r2.z, r2.z, -cb3[51].z
  mul r2.z, r2.z, l(1.442695)
  exp r2.z, r2.z
  add r2.z, -r2.z, l(1.000000)
  add r5.xyz, -cb3[56].xyzx, cb3[58].xyzx
  mad r3.yzw, r3.wwww, r5.xxyz, cb3[56].xxyz
  add r5.xyz, -r3.yzwy, cb3[55].xyzx
  mad r3.xyz, r3.xxxx, r5.xyzx, r3.yzwy
  add r3.xyz, r3.xyzx, -cb3[57].xyzx
  mad r3.xyz, r2.zzzz, r3.xyzx, cb3[57].xyzx
  add r5.x, -r3.x, cb3[55].w
  add r5.y, -r3.y, cb3[56].w
  add r5.z, -r3.z, cb3[57].w
  mad r3.xyz, r1.wwww, r5.xyzx, r3.xyzx
  mul_sat r1.w, r2.w, cb11[2].w
  add r3.xyz, r3.xyzx, -cb11[0].xyzx
  mad o4.xyz, r1.wwww, r3.xyzx, cb11[0].xyzx
else 
  mov o4.xyz, cb11[0].xyzx
endif 
dp3 o2.w, r1.xyzx, r1.xyzx
dp4 o6.x, r0.xyzw, cb0[0].xyzw
mov o2.y, l(1.000000)
mov o2.xz, r4.xxzx
mov o5.xyzw, r0.xyzw
mov o6.yzw, l(0,0,0,0)
mov o0.xyz, r1.xyzx
mov o1.z, r0.w
mov o1.xy, r2.xyxx
ret 
// Approximately 140 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:28:09 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer rage_clipplanes
// {
//
//   float4 ClipPlanes;                 // Offset:    0 Size:    16
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16 [unused]
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16 [unused]
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16 [unused]
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16 [unused]
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16 [unused]
//   float4 globalFogParams[5];         // Offset:  800 Size:    80
//   float4 globalFogColor;             // Offset:  880 Size:    16
//   float4 globalFogColorE;            // Offset:  896 Size:    16
//   float4 globalFogColorN;            // Offset:  912 Size:    16
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16 [unused]
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12
//
// }
//
// cbuffer vfx_fogvolume_locals
// {
//
//   float3 fogVolumeColor;             // Offset:    0 Size:    12
//   float3 fogVolumePosition;          // Offset:   16 Size:    12
//   float4 fogVolumeParams;            // Offset:   32 Size:    16
//   row_major float4x4 fogVolumeTransform;// Offset:   48 Size:    64
//   row_major float4x4 fogVolumeInvTransform;// Offset:  112 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_clipplanes                   cbuffer      NA          NA    0        1
// rage_matrices                     cbuffer      NA          NA    1        1
// lighting_globals                  cbuffer      NA          NA    3        1
// vfx_fogvolume_locals              cbuffer      NA          NA   11        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 1   xyzw        1     NONE   float   xyz 
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyz         4     NONE   float   xyz 
// SV_Position              0   xyzw        5      POS   float   xyzw
// SV_ClipDistance          0   xyzw        6  CLIPDST   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb3[59], immediateIndexed
dcl_constantbuffer cb13[21], immediateIndexed
dcl_constantbuffer cb11[11], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output_siv o5.xyzw, position
dcl_output_siv o6.xyzw, clip_distance
dcl_temps 6
dp3 r0.x, v0.xyzx, v0.xyzx
ne r0.y, r0.x, l(0.000000)
rsq r0.x, r0.x
mul r0.xzw, r0.xxxx, v0.xxyz
movc r0.xyz, r0.yyyy, r0.xzwx, v0.xyzx
mul r0.xyz, r0.xyzx, cb11[2].zzzz
mul r1.xyz, r0.yyyy, cb11[4].xyzx
mad r0.xyw, r0.xxxx, cb11[3].xyxz, r1.xyxz
mad r0.xyz, r0.zzzz, cb11[5].xyzx, r0.xywx
add r0.xyz, r0.xyzx, cb11[6].xyzx
add r0.xyz, r0.xyzx, cb11[1].xyzx
add r1.xyz, r0.xyzx, -cb1[15].xyzx
mul r2.xyz, cb1[15].yyyy, cb11[8].xyzx
mad r2.xyz, cb1[15].xxxx, cb11[7].xyzx, r2.xyzx
mad r2.xyz, cb1[15].zzzz, cb11[9].xyzx, r2.xyzx
add r2.xyz, r2.xyzx, cb11[10].xyzx
mul r3.xyz, r1.yyyy, cb11[8].xyzx
mad r3.xyz, r1.xxxx, cb11[7].xyzx, r3.xyzx
mad r3.xyz, r1.zzzz, cb11[9].xyzx, r3.xyzx
add r3.xyz, r3.xyzx, cb11[10].xyzx
mul r4.xyz, cb11[1].yyyy, cb11[8].xyzx
mad r4.xyz, cb11[1].xxxx, cb11[7].xyzx, r4.xyzx
mad r4.xyz, cb11[1].zzzz, cb11[9].xyzx, r4.xyzx
add r4.xyz, r4.xyzx, cb11[10].xyzx
add r2.xyz, r2.xyzx, -r4.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
dp3 r1.w, r2.xyzx, r3.xyzx
dp3 r2.w, r2.xyzx, r2.xyzx
mul r3.w, cb11[2].z, cb11[2].z
mad r2.w, -cb11[2].z, cb11[2].z, r2.w
mul r2.w, r0.w, r2.w
mad r2.w, r1.w, r1.w, -r2.w
sqrt r2.w, |r2.w|
add r4.x, -r1.w, r2.w
div r4.x, r4.x, r0.w
add r2.w, -r1.w, -r2.w
div r2.w, r2.w, r0.w
min_sat r4.x, r2.w, r4.x
min r1.w, r1.w, l(0.000000)
mul r3.xyz, r1.wwww, r3.xyzx
div r3.xyz, r3.xyzx, r0.wwww
add r2.xyz, r2.xyzx, -r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
div r0.w, r0.w, r3.w
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
min r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, cb11[2].y
exp o3.w, r0.w
mul r2.xyzw, r0.yyyy, cb1[9].xyzw
mad r2.xyzw, r0.xxxx, cb1[8].xyzw, r2.xyzw
mad r0.xyzw, r0.zzzz, cb1[10].xyzw, r2.xyzw
add r0.xyzw, r0.xyzw, cb1[11].xyzw
max r0.z, r0.z, l(0.000000)
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.w, r0.w, -r2.y
mad r1.w, r2.x, r1.w, r0.x
add r2.x, r0.w, r1.w
add r2.y, -r0.y, r0.w
mul r2.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
div r2.zw, r2.xxxy, r0.wwww
mad r3.xy, r2.zwzz, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
mov r3.z, l(1.000000)
dp3 o3.x, r3.xyzx, cb13[18].xyzx
dp3 o3.y, r3.xyzx, cb13[19].xyzx
dp3 o3.z, r3.xyzx, cb13[20].xyzx
mul r3.xyz, r1.xyzx, r4.xxxx
dp3 r4.z, r3.xyzx, r3.xyzx
lt r1.w, l(0.000010), r4.z
if_nz r1.w
  sqrt r1.w, r4.z
  add r2.z, r1.w, -cb3[50].x
  max r2.z, r2.z, l(0.000000)
  div r1.w, r2.z, r1.w
  mul r1.w, r1.w, r3.z
  mul r2.w, r1.w, cb3[52].z
  lt r1.w, l(0.010000), |r1.w|
  mul r3.w, r2.w, l(-1.442695)
  exp r3.w, r3.w
  add r3.w, -r3.w, l(1.000000)
  div r2.w, r3.w, r2.w
  movc r1.w, r1.w, r2.w, l(1.000000)
  mul r2.w, r2.z, cb3[51].w
  mul r1.w, r1.w, r2.w
  min r1.w, r1.w, l(1.000000)
  mul r1.w, r1.w, l(1.442695)
  exp r1.w, r1.w
  min r1.w, r1.w, l(1.000000)
  add r1.w, -r1.w, l(1.000000)
  mul r2.w, r1.w, cb3[52].y
  rsq r3.w, r4.z
  mul r3.xyz, r3.wwww, r3.xyzx
  dp3_sat r3.w, r3.xyzx, cb3[54].xyzx
  log r3.w, r3.w
  mul r3.w, r3.w, cb3[54].w
  exp r3.w, r3.w
  dp3_sat r3.x, r3.xyzx, cb3[53].xyzx
  log r3.x, r3.x
  mul r3.x, r3.x, cb3[53].w
  exp r3.x, r3.x
  mad r1.w, -r1.w, cb3[52].y, l(1.000000)
  mul r1.w, r1.w, cb3[51].y
  add r3.y, r2.z, -cb3[52].x
  max r3.y, r3.y, l(0.000000)
  mul r3.y, r3.y, cb3[51].x
  mul r3.y, r3.y, l(1.442695)
  exp r3.y, r3.y
  add r3.y, -r3.y, l(1.000000)
  mad_sat r2.w, r1.w, r3.y, r2.w
  mul r2.z, r2.z, -cb3[51].z
  mul r2.z, r2.z, l(1.442695)
  exp r2.z, r2.z
  add r2.z, -r2.z, l(1.000000)
  add r5.xyz, -cb3[56].xyzx, cb3[58].xyzx
  mad r3.yzw, r3.wwww, r5.xxyz, cb3[56].xxyz
  add r5.xyz, -r3.yzwy, cb3[55].xyzx
  mad r3.xyz, r3.xxxx, r5.xyzx, r3.yzwy
  add r3.xyz, r3.xyzx, -cb3[57].xyzx
  mad r3.xyz, r2.zzzz, r3.xyzx, cb3[57].xyzx
  add r5.x, -r3.x, cb3[55].w
  add r5.y, -r3.y, cb3[56].w
  add r5.z, -r3.z, cb3[57].w
  mad r3.xyz, r1.wwww, r5.xyzx, r3.xyzx
  mul_sat r1.w, r2.w, cb11[2].w
  add r3.xyz, r3.xyzx, -cb11[0].xyzx
  mad o4.xyz, r1.wwww, r3.xyzx, cb11[0].xyzx
else 
  mov o4.xyz, cb11[0].xyzx
endif 
dp3 o2.w, r1.xyzx, r1.xyzx
dp4 o6.x, r0.xyzw, cb0[0].xyzw
mov o2.y, l(1.000000)
mov o2.xz, r4.xxzx
mov o5.xyzw, r0.xyzw
mov o6.yzw, l(0,0,0,0)
mov o0.xyz, r1.xyzx
mov o1.z, r0.w
mov o1.xy, r2.xyxx
ret 
// Approximately 140 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
