
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : COLOR0,
  out float4 o0 : SV_Position0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : COLOR0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyz = abs(v2.xyz) < abs(v2.yzx);
  r0.xyz = r0.xyz ? 1.000000 : 0;
  r1.xyz = abs(v2.zxy) >= abs(v2.xyz);
  r1.xyz = r1.xyz ? 1.000000 : 0;
  r2.xyz = r1.xyz * r0.xyz;
  r0.y = dot(r2.xyz, float3(1,1,1));
  r0.y = r0.y == 0.000000;
  r0.y = r0.y ? 1.000000 : 0;
  r2.w = r0.x * r1.x + r0.y;
  r0.xyz = v2.yzx * r2.zwy;
  r0.xyz = r2.yzw * v2.zxy + -r0.xyz;
  r0.w = dot(v0.xy, v0.xy);
  r0.w = rsqrt(r0.w);
  r1.xy = v0.xy * r0.ww;
  r0.w = 0.999899983 >= abs(v0.z);
  r1.xy = r0.ww ? r1.xy : 0;
  r0.xyz = r1.yyy * r0.xyz;
  r0.xyz = r2.wyz * r1.xxx + r0.xyz;
  r0.w = 1 + v0.z;
  r0.w = r0.w * r0.w;
  r1.x = 1 + -v3.x;
  r0.w = -r0.w * r1.x + 1;
  r1.x = -r0.w * r0.w + 1;
  r1.yzw = v2.xyz * r0.www;
  r1.x = saturate(abs(r1.x));
  r0.w = sqrt(r1.x);
  r2.xyz = r0.xyz * r0.www;
  r0.w = 1 + -v0.z;
  r3.xy = v3.xy * r0.ww;
  r0.xyz = r3.yyy * r0.xyz;
  r3.xyz = v2.xyz * r3.xxx;
  r0.w = 0 >= v0.z;
  r0.xyz = r0.www ? r2.xyz : r0.xyz;
  r1.xyz = r0.www ? r1.yzw : r3.xyz;
  r0.xyz = r1.xyz + r0.xyz;
  r0.w = 0.0579999983 + v1.w;
  r1.xyz = -v2.xyz * float3(0.0289999992,0.0289999992,0.0289999992) + v1.xyz;
  r0.xyz = r0.xyz * r0.www + r1.xyz;
  r1.xyzw = gWorldViewProj._m10_m11_m12_m13 * r0.yyyy;
  r1.xyzw = r0.xxxx * gWorldViewProj._m00_m01_m02_m03 + r1.xyzw;
  r1.xyzw = r0.zzzz * gWorldViewProj._m20_m21_m22_m23 + r1.xyzw;
  r1.xyzw = gWorldViewProj._m30_m31_m32_m33 + r1.xyzw;
  o0.xyzw = r1.xyzw;
  r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r0.w = -r2.y + r1.w;
  r0.w = r2.x * r0.w + r1.x;
  r2.x = r0.w + r1.w;
  r2.y = r1.w + -r1.y;
  o1.xy = float2(0.5,0.5) * r2.xy;
  o1.zw = r1.zw;
  o2.w = r1.w;
  r1.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
  r1.xyz = gViewInverse._m30_m31_m32 + r1.xyz;
  o2.xyz = -r1.xyz + r0.xyz;
  o3.xyzw = v1.xyzw;
  o4.xyzw = v2.xyzw;
  o5.xyzw = v3.xyzw;
  o6.xyzw = v4.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 4
lt r0.xyz, |v2.xyzx|, |v2.yzxy|
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
ge r1.xyz, |v2.zxyz|, |v2.xyzx|
and r1.xyz, r1.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r2.xyz, r0.xyzx, r1.xyzx
dp3 r0.y, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
eq r0.y, r0.y, l(0.000000)
and r0.y, r0.y, l(0x3f800000)
mad r2.w, r0.x, r1.x, r0.y
mul r0.xyz, r2.zwyz, v2.yzxy
mad r0.xyz, r2.yzwy, v2.zxyz, -r0.xyzx
dp2 r0.w, v0.xyxx, v0.xyxx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, v0.xyxx
ge r0.w, l(0.999900), |v0.z|
and r1.xy, r1.xyxx, r0.wwww
mul r0.xyz, r0.xyzx, r1.yyyy
mad r0.xyz, r2.wyzw, r1.xxxx, r0.xyzx
add r0.w, v0.z, l(1.000000)
mul r0.w, r0.w, r0.w
add r1.x, -v3.x, l(1.000000)
mad r0.w, -r0.w, r1.x, l(1.000000)
mad r1.x, -r0.w, r0.w, l(1.000000)
mul r1.yzw, r0.wwww, v2.xxyz
mov_sat r1.x, |r1.x|
sqrt r0.w, r1.x
mul r2.xyz, r0.wwww, r0.xyzx
add r0.w, -v0.z, l(1.000000)
mul r3.xy, r0.wwww, v3.xyxx
mul r0.xyz, r0.xyzx, r3.yyyy
mul r3.xyz, r3.xxxx, v2.xyzx
ge r0.w, l(0.000000), v0.z
movc r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
movc r1.xyz, r0.wwww, r1.yzwy, r3.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
add r0.w, v1.w, l(0.058000)
mad r1.xyz, -v2.xyzx, l(0.029000, 0.029000, 0.029000, 0.000000), v1.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r1.xyzx
mul r1.xyzw, r0.yyyy, cb1[9].xyzw
mad r1.xyzw, r0.xxxx, cb1[8].xyzw, r1.xyzw
mad r1.xyzw, r0.zzzz, cb1[10].xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb1[11].xyzw
mov o0.xyzw, r1.xyzw
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.w, r1.w, -r2.y
mad r0.w, r2.x, r0.w, r1.x
add r2.x, r1.w, r0.w
add r2.y, -r1.y, r1.w
mul o1.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.zw, r1.zzzw
mov o2.w, r1.w
ld r1.xyzw, l(0, 1, 0, 0), t20.xyzw
add r1.xyz, r1.xyzx, cb1[15].xyzx
add o2.xyz, r0.xyzx, -r1.xyzx
mov o3.xyzw, v1.xyzw
mov o4.xyzw, v2.xyzw
mov o5.xyzw, v3.xyzw
mov o6.xyzw, v4.xyzw
ret 
// Approximately 59 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:34:56 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// COLOR                    0   xyzw        4     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// COLOR                    0   xyzw        6     NONE   float   xyzw
//
vs_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_temps 4
lt r0.xyz, |v2.xyzx|, |v2.yzxy|
and r0.xyz, r0.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
ge r1.xyz, |v2.zxyz|, |v2.xyzx|
and r1.xyz, r1.xyzx, l(0x3f800000, 0x3f800000, 0x3f800000, 0)
mul r2.xyz, r0.xyzx, r1.xyzx
dp3 r0.y, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
eq r0.y, r0.y, l(0.000000)
and r0.y, r0.y, l(0x3f800000)
mad r2.w, r1.x, r0.x, r0.y
mul r0.xyz, r2.zwyz, v2.yzxy
mad r0.xyz, r2.yzwy, v2.zxyz, -r0.xyzx
dp2 r0.w, v0.xyxx, v0.xyxx
rsq r0.w, r0.w
mul r1.xy, r0.wwww, v0.xyxx
ge r0.w, l(0.999900), |v0.z|
and r1.xy, r1.xyxx, r0.wwww
mul r0.xyz, r0.xyzx, r1.yyyy
mad r0.xyz, r2.wyzw, r1.xxxx, r0.xyzx
add r0.w, v0.z, l(1.000000)
mul r0.w, r0.w, r0.w
add r1.x, -v3.x, l(1.000000)
mad r0.w, -r0.w, r1.x, l(1.000000)
mad r1.x, -r0.w, r0.w, l(1.000000)
mul r1.yzw, r0.wwww, v2.xxyz
min r0.w, |r1.x|, l(1.000000)
sqrt r0.w, r0.w
mul r2.xyz, r0.wwww, r0.xyzx
add r0.w, -v0.z, l(1.000000)
mul r3.xy, r0.wwww, v3.xyxx
mul r0.xyz, r0.xyzx, r3.yyyy
mul r3.xyz, r3.xxxx, v2.xyzx
ge r0.w, l(0.000000), v0.z
movc r0.xyz, r0.wwww, r2.xyzx, r0.xyzx
movc r1.xyz, r0.wwww, r1.yzwy, r3.xyzx
add r0.xyz, r0.xyzx, r1.xyzx
add r0.w, v1.w, l(0.058000)
mad r1.xyz, v2.xyzx, l(-0.029000, -0.029000, -0.029000, 0.000000), v1.xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r1.xyzx
mul r1.xyzw, r0.yyyy, cb1[9].xyzw
mad r1.xyzw, r0.xxxx, cb1[8].xyzw, r1.xyzw
mad r1.xyzw, r0.zzzz, cb1[10].xyzw, r1.xyzw
add r1.xyzw, r1.xyzw, cb1[11].xyzw
mov o0.xyzw, r1.xyzw
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.w, r1.w, -r2.y
mad r0.w, r2.x, r0.w, r1.x
add r2.x, r1.w, r0.w
add r2.y, -r1.y, r1.w
mul o1.xy, r2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o1.zw, r1.zzzw
mov o2.w, r1.w
ld r1.xyzw, l(0, 1, 0, 0), t20.xyzw
add r1.xyz, r1.xyzx, cb1[15].xyzx
add o2.xyz, r0.xyzx, -r1.xyzx
mov o3.xyzw, v1.xyzw
mov o4.xyzw, v2.xyzw
mov o5.xyzw, v3.xyzw
mov o6.xyzw, v4.xyzw
ret 
// Approximately 59 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
