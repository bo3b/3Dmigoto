
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer scaleform_shaders_locals : register(b11)
{
  float4 UIPosMtx[2] : packoffset(c0);
  float4 UITex0Mtx[2] : packoffset(c2);
  float4 UITex1Mtx[2] : packoffset(c4);
  float4 UIColor : packoffset(c6);
  float4 UIColorXformOffset : packoffset(c7);
  float4 UIColorXformScale : packoffset(c8);
  float UIPremultiplyAlpha : packoffset(c9);
  float UIStereoFlag : packoffset(c9.y);
}
Texture2D<float4> StereoParmsTexture : register(t20);
Texture2D<float> StereoReticuleDistTexture : register(t21);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  int4 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : COLOR1,
  out float4 o0 : SV_Position0,
  out float4 o1 : COLOR0,
  out float4 o2 : COLOR1,
  out float2 o3 : TEXCOORD0,
  out float2 p3 : TEXCOORD1)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = StereoReticuleDistTexture.Load(float4(0,0,0,0)).xyzw;
  r0.y = UIStereoFlag == 1.000000;
  r1.xyzw = (int4)v0.xyzw;
  r0.z = dot(r1.xyzw, UIPosMtx[0].xyzw);
  r0.w = dot(r1.xyzw, UIPosMtx[1].xyzw);
  r2.xyzw = gWorldViewProj._m10_m11_m12_m13 * r0.wwww;
  r2.xyzw = r0.zzzz * gWorldViewProj._m00_m01_m02_m03 + r2.xyzw;
  r2.xyzw = r1.zzzz * gWorldViewProj._m20_m21_m22_m23 + r2.xyzw;
  r2.xyzw = r1.wwww * gWorldViewProj._m30_m31_m32_m33 + r2.xyzw;
  r0.z = UIStereoFlag + UIStereoFlag;
  r0.z = r0.z >= -r0.z;
  r0.zw = r0.zz ? float2(2,0.5) : float2(-2,-0.5);
  r0.w = UIStereoFlag * r0.w;
  r0.w = frac(r0.w);
  r0.z = r0.z * r0.w;
  r0.z = r0.z == 0.000000;
  r0.w = 0 < UIStereoFlag;
  r0.z = r0.w ? r0.z : 0;
  if (r0.z != 0) {
    r3.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r0.z = -r3.y + r2.w;
    r0.z = r3.x * r0.z;
    r2.x = -r0.z * gStereoParams1.x + r2.x;
  }
  r0.z = 0 != gStereoParams.w;
  r0.y = (int)r0.z | (int)r0.y;
  r0.z = r2.w != 0.000000;
  r0.y = r0.z ? r0.y : 0;
  r0.z = 0 < r0.x;
  r0.y = r0.z ? r0.y : 0;
  if (r0.y != 0) {
    r0.y = r0.x / r2.w;
    o0.xyzw = r2.xyzw * r0.yyyy;
  } else {
    r0.y = gStereoParams.x == 1.000000;
    r0.x = r0.x == 0.000000;
    r0.z = r2.w != 1.000000;
    r0.x = r0.z ? r0.x : 0;
    r0.x = r0.x ? r0.y : 0;
    if (r0.x != 0) {
      r0.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
      r0.y = r2.w + -r0.y;
      r2.x = -r0.x * r0.y + r2.x;
    } else {
      r0.x = 0 != gStereoParams.y;
      if (r0.x != 0) {
        r0.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
        r0.y = r2.w + -r0.y;
        r2.x = r0.x * r0.y + r2.x;
      }
    }
    o0.xyzw = r2.xyzw;
  }
  o3.x = dot(r1.xyzw, UITex0Mtx[0].xyzw);
  o3.y = dot(r1.xyzw, UITex0Mtx[1].xyzw);
  p3.x = dot(r1.xyzw, UITex1Mtx[0].xyzw);
  p3.y = dot(r1.xyzw, UITex1Mtx[1].xyzw);
  o1.xyzw = v1.xyzw;
  o2.xyzw = v2.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64 [unused]
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16 [unused]
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16
//
// }
//
// cbuffer scaleform_shaders_locals
// {
//
//   float4 UIPosMtx[2];                // Offset:    0 Size:    32
//   float4 UITex0Mtx[2];               // Offset:   32 Size:    32
//   float4 UITex1Mtx[2];               // Offset:   64 Size:    32
//   float4 UIColor;                    // Offset:   96 Size:    16 [unused]
//   float4 UIColorXformOffset;         // Offset:  112 Size:    16 [unused]
//   float4 UIColorXformScale;          // Offset:  128 Size:    16 [unused]
//   float UIPremultiplyAlpha;          // Offset:  144 Size:     4 [unused]
//   float UIStereoFlag;                // Offset:  148 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// StereoParmsTexture                texture  float4          2d   20        1
// StereoReticuleDistTexture         texture   float          2d   21        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// scaleform_shaders_locals          cbuffer      NA          NA   11        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE     int   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// COLOR                    1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 0   xy          3     NONE   float   xy  
// TEXCOORD                 1     zw        3     NONE   float     zw
//
vs_4_0
dcl_constantbuffer cb1[12], immediateIndexed
dcl_constantbuffer cb2[24], immediateIndexed
dcl_constantbuffer cb11[10], immediateIndexed
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t21
dcl_input v0.xyzw
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xy
dcl_output o3.zw
dcl_temps 4
ld r0.xyzw, l(0, 0, 0, 0), t21.xyzw
eq r0.y, cb11[9].y, l(1.000000)
itof r1.xyzw, v0.xyzw
dp4 r0.z, r1.xyzw, cb11[0].xyzw
dp4 r0.w, r1.xyzw, cb11[1].xyzw
mul r2.xyzw, r0.wwww, cb1[9].xyzw
mad r2.xyzw, r0.zzzz, cb1[8].xyzw, r2.xyzw
mad r2.xyzw, r1.zzzz, cb1[10].xyzw, r2.xyzw
mad r2.xyzw, r1.wwww, cb1[11].xyzw, r2.xyzw
add r0.z, cb11[9].y, cb11[9].y
ge r0.z, r0.z, -r0.z
movc r0.zw, r0.zzzz, l(0,0,2.000000,0.500000), l(0,0,-2.000000,-0.500000)
mul r0.w, r0.w, cb11[9].y
frc r0.w, r0.w
mul r0.z, r0.w, r0.z
eq r0.z, r0.z, l(0.000000)
lt r0.w, l(0.000000), cb11[9].y
and r0.z, r0.w, r0.z
if_nz r0.z
  ld r3.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.z, r2.w, -r3.y
  mul r0.z, r0.z, r3.x
  mad r2.x, -r0.z, cb2[23].x, r2.x
endif 
ne r0.z, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].w
or r0.y, r0.z, r0.y
ne r0.z, r2.w, l(0.000000)
and r0.y, r0.z, r0.y
lt r0.z, l(0.000000), r0.x
and r0.y, r0.z, r0.y
if_nz r0.y
  div r0.y, r0.x, r2.w
  mul o0.xyzw, r0.yyyy, r2.xyzw
else 
  eq r0.y, cb2[22].x, l(1.000000)
  eq r0.x, r0.x, l(0.000000)
  ne r0.z, r2.w, l(1.000000)
  and r0.x, r0.z, r0.x
  and r0.x, r0.x, r0.y
  if_nz r0.x
    ld r0.xyzw, l(0, 0, 0, 0), t20.xyzw
    add r0.y, -r0.y, r2.w
    mad r2.x, -r0.x, r0.y, r2.x
  else 
    ne r0.x, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].y
    if_nz r0.x
      ld r0.xyzw, l(0, 0, 0, 0), t20.xyzw
      add r0.y, -r0.y, r2.w
      mad r2.x, r0.x, r0.y, r2.x
    endif 
  endif 
  mov o0.xyzw, r2.xyzw
endif 
dp4 o3.x, r1.xyzw, cb11[2].xyzw
dp4 o3.y, r1.xyzw, cb11[3].xyzw
dp4 o3.z, r1.xyzw, cb11[4].xyzw
dp4 o3.w, r1.xyzw, cb11[5].xyzw
mov o1.xyzw, v1.xyzw
mov o2.xyzw, v2.xyzw
ret 
// Approximately 60 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
