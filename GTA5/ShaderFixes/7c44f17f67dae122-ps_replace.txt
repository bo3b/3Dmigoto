
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState GBufferTextureSampler0Global_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler2Global_s : register(s9);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
SamplerComparisonState gShadowZSamplerCache_s : register(s14);
Texture2D<float4> GBufferTextureSampler0Global : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler2Global : register(t9);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
TextureCube<float4> gLocalLightShadowCM0 : register(t14);
Texture2D<float4> StereoParmsTexture : register(t20);
Texture2D<float> gLocalLightShadowSpot0 : register(t24);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy / v1.ww;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r1.xyz = v2.xyz / v2.www;
  r0.w = 0 != gStereoParams.z;
  r1.w = v2.w == 1.000000;
  r0.w = r0.w ? r1.w : 0;
  if (r0.w != 0) {
    r0.w = r0.z + -r2.y;
    r0.w = r2.x * r0.w;
    r0.w = deferredProjectionParams.x * r0.w;
    r3.xyz = -gViewInverse._m00_m01_m02 * r0.www + gViewInverse._m30_m31_m32;
  } else {
    r4.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r3.xyz = gViewInverse._m30_m31_m32 + r4.xyz;
  }
  r3.xyz = r1.xyz * r0.zzz + r3.xyz;
  r4.xyz = deferredLightParams[9].xyz + -r3.xyz;
  r0.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r0.w);
  r5.xyz = r4.xyz * r1.www;
  r6.xyz = deferredLightParams[10].xyz + -r3.xyz;
  r2.z = dot(r6.xyz, r6.xyz);
  r2.w = rsqrt(r2.z);
  r7.xyz = r6.xyz * r2.www;
  r0.w = saturate(-r0.w * deferredLightParams[4].z + 1);
  r4.w = 1 + -deferredLightParams[7].x;
  r5.w = r4.w * r0.w + deferredLightParams[7].x;
  r0.w = r0.w / r5.w;
  r5.w = dot(r5.xyz, -deferredLightParams[12].xyz);
  r5.w = saturate(r5.w * deferredLightParams[5].w + deferredLightParams[5].z);
  r0.w = r5.w * r0.w;
  r3.w = 1;
  r3.x = dot(r3.xyzw, deferredLightParams[6].xyzw);
  r3.x = r3.x >= 0;
  r3.x = r3.x ? 1.000000 : 0;
  r0.w = r3.x * r0.w;
  r2.z = saturate(-r2.z * deferredLightParams[4].z + 1);
  r3.y = r4.w * r2.z + deferredLightParams[7].x;
  r2.z = r2.z / r3.y;
  r3.y = dot(r7.xyz, -deferredLightParams[13].xyz);
  r3.y = saturate(r3.y * deferredLightParams[5].w + deferredLightParams[5].z);
  r2.z = r3.y * r2.z;
  r2.z = r2.z * r3.x;
  r3.x = max(r2.z, r0.w);
  r3.x = r3.x < 9.99999997e-007;
  if (r3.x != 0) discard;
  r3.xy = r0.xy * float2(2,-2) + float2(-1,1);
  r2.y = r0.z + -r2.y;
  r2.x = r2.x * r2.y;
  r2.x = deferredProjectionParams.x * r2.x;
  r8.xyz = gViewInverse._m00_m01_m02 * r2.xxx;
  r3.z = 1;
  r9.x = dot(r3.xyz, deferredPerspectiveShearParams0.xyz);
  r9.y = dot(r3.xyz, deferredPerspectiveShearParams1.xyz);
  r9.z = dot(r3.xyz, deferredPerspectiveShearParams2.xyz);
  r3.xyz = r9.xyz * r0.zzz + -r8.xyz;
  r8.xyzw = GBufferTextureSampler0Global.Sample(GBufferTextureSampler0Global_s, r0.xy).xyzw;
  r8.xyz = r8.xyz * r8.xyz;
  r9.xyzw = GBufferTextureSampler2Global.Sample(GBufferTextureSampler2Global_s, r0.xy).xyzw;
  r2.xy = r9.xy * r9.xy;
  r10.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r0.xyz = float3(0.998046875,7.984375,63.875) * r10.www;
  r0.xyz = frac(r0.xyz);
  r0.xy = -r0.yz * float2(0.125,0.125) + r0.xy;
  r0.xyz = r10.xyz * float3(256,256,256) + r0.xyz;
  r0.xyz = float3(-128,-128,-128) + r0.xyz;
  r3.w = dot(r0.xyz, r0.xyz);
  r3.w = rsqrt(r3.w);
  r0.xyz = r3.www * r0.xyz;
  r2.x = min(1, r2.x);
  r3.w = r2.y * 512 + -500;
  r3.w = max(0, r3.w);
  r2.y = r2.y * 512 + -r3.w;
  r3.w = 558 * r3.w;
  r2.y = r2.y * 3 + r3.w;
  r3.w = dot(r1.xyz, r1.xyz);
  r3.w = rsqrt(r3.w);
  r1.xyz = r3.www * r1.xyz;
  r4.xyz = r4.xyz * r1.www + -r1.xyz;
  r1.w = dot(r4.xyz, r4.xyz);
  r1.w = rsqrt(r1.w);
  r4.xyz = r4.xyz * r1.www;
  r6.xyz = r6.xyz * r2.www + -r1.xyz;
  r1.w = dot(r6.xyz, r6.xyz);
  r1.w = rsqrt(r1.w);
  r6.xyz = r6.xyz * r1.www;
  r1.w = gLocalLightShadowData[0]._m03 == 2.000000;
  if (r1.w != 0) {
    r9.xyw = gLocalLightShadowData[0]._m30_m31_m32 + r3.xyz;
    r10.x = dot(r9.xyw, gLocalLightShadowData[0]._m00_m01_m02);
    r10.y = dot(r9.xyw, gLocalLightShadowData[0]._m10_m11_m12);
    r10.z = dot(r9.xyw, gLocalLightShadowData[0]._m20_m21_m22);
    r2.w = dot(-r10.xyz, -r10.xyz);
    r2.w = sqrt(r2.w);
    r9.xyw = -r10.xyz / r2.www;
    r2.w = gLocalLightShadowData[0]._m23 * r2.w;
    r10.xyz = float3(0,0,0) < r9.xyw;
    r11.xyz = r9.xyw < float3(0,0,0);
    r10.xyz = ((int3)r11.xyz ? -1 : 0) + ((int3)r10.xyz ? 1 : 0);
    r10.xyz = (int3)r10.zxy;
    r11.xyzw = abs(r9.wwxx) >= abs(r9.xyyw);
    r11.xy = r11.yw ? r11.xz : 0;
    r12.xy = -r10.yz;
    r12.z = 0;
    r12.w = abs(r9.x);
    r13.xy = float2(1,0);
    r13.z = abs(r9.y);
    r11.yzw = r11.yyy ? r12.zxw : r13.xyz;
    r10.y = 0;
    r10.z = abs(r9.w);
    r10.xyz = r11.xxx ? r10.xyz : r11.yzw;
    r3.w = r10.z == abs(r9.y);
    r11.yz = r3.ww ? r12.zy : float2(1,0);
    r3.w = dot(r10.zz, gShadowTexParam.zz);
    r9.xyw = r9.xyw / r3.www;
    r12.xz = float2(-0.5,-0.5) * r10.xy;
    r12.y = -0;
    r12.xyz = r12.xyz + r9.xyw;
    r11.x = 0;
    r13.xyz = float3(-0.5,-0.5,-0.5) * r11.xyz + r12.xyz;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r13.xyz, r2.w).x;
    r10.xz = float2(0.5,0.5) * r10.xy;
    r10.y = 0;
    r9.xyw = r10.xyz + r9.xyw;
    r10.xyz = float3(-0.5,-0.5,-0.5) * r11.xyz + r9.xyw;
    r4.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xyz, r2.w).x;
    r3.w = r4.w + r3.w;
    r10.xyz = float3(0.5,0.5,0.5) * r11.xyz + r12.xyz;
    r4.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xyz, r2.w).x;
    r3.w = r4.w + r3.w;
    r9.xyw = float3(0.5,0.5,0.5) * r11.xyz + r9.xyw;
    r2.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r9.xyw, r2.w).x;
    r2.w = r3.w + r2.w;
    r2.w = 0.25 * r2.w;
  } else {
    r9.xyw = gLocalLightShadowData[0]._m30_m31_m32 + r3.xyz;
    r10.x = dot(r9.xyw, gLocalLightShadowData[0]._m00_m01_m02);
    r10.y = dot(r9.xyw, gLocalLightShadowData[0]._m10_m11_m12);
    r3.w = dot(r9.xyw, gLocalLightShadowData[0]._m20_m21_m22);
    r10.xy = r10.xy / -r3.ww;
    r3.w = dot(r9.xyw, r9.xyw);
    r3.w = sqrt(r3.w);
    r10.z = gLocalLightShadowData[0]._m23 * r3.w;
    r9.xyw = r10.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r10.xyzw = gShadowTexParam.zwzw * float4(-0.5,-0.5,0.5,-0.5) + r9.xyxy;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xy, r9.w).x;
    r4.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.zw, r9.w).x;
    r3.w = r4.w + r3.w;
    r10.xyzw = gShadowTexParam.zwzw * float4(-0.5,0.5,0.5,0.5) + r9.xyxy;
    r4.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xy, r9.w).x;
    r3.w = r4.w + r3.w;
    r4.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.zw, r9.w).x;
    r3.w = r4.w + r3.w;
    r2.w = 0.25 * r3.w;
  }
  r9.xyw = deferredLightParams[3].xyz * deferredLightParams[3].www;
  if (r1.w != 0) {
    r10.xyz = gLocalLightShadowData[0]._m30_m31_m32 + r3.xyz;
    r11.x = dot(r10.xyz, gLocalLightShadowData[0]._m00_m01_m02);
    r11.y = dot(r10.xyz, gLocalLightShadowData[0]._m10_m11_m12);
    r11.z = dot(r10.xyz, gLocalLightShadowData[0]._m20_m21_m22);
    r1.w = dot(-r11.xyz, -r11.xyz);
    r1.w = sqrt(r1.w);
    r10.xyz = -r11.xyz / r1.www;
    r1.w = gLocalLightShadowData[0]._m23 * r1.w;
    r11.xyz = float3(0,0,0) < r10.xyz;
    r12.xyz = r10.xyz < float3(0,0,0);
    r11.xyz = ((int3)r12.xyz ? -1 : 0) + ((int3)r11.xyz ? 1 : 0);
    r11.xyz = (int3)r11.zxy;
    r12.xyzw = abs(r10.zzxx) >= abs(r10.xyyz);
    r12.xy = r12.yw ? r12.xz : 0;
    r13.xy = -r11.yz;
    r13.z = 0;
    r13.w = abs(r10.x);
    r14.xy = float2(1,0);
    r14.z = abs(r10.y);
    r12.yzw = r12.yyy ? r13.zxw : r14.xyz;
    r11.y = 0;
    r11.z = abs(r10.z);
    r11.xyz = r12.xxx ? r11.xyz : r12.yzw;
    r3.w = r11.z == abs(r10.y);
    r12.yz = r3.ww ? r13.zy : float2(1,0);
    r3.w = dot(r11.zz, gShadowTexParam.zz);
    r10.xyz = r10.xyz / r3.www;
    r13.xz = float2(-0.5,-0.5) * r11.xy;
    r13.y = -0;
    r13.xyz = r13.xyz + r10.xyz;
    r12.x = 0;
    r14.xyz = float3(-0.5,-0.5,-0.5) * r12.xyz + r13.xyz;
    r3.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r14.xyz, r1.w).x;
    r11.xz = float2(0.5,0.5) * r11.xy;
    r11.y = 0;
    r10.xyz = r11.xyz + r10.xyz;
    r11.xyz = float3(-0.5,-0.5,-0.5) * r12.xyz + r10.xyz;
    r4.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.xyz, r1.w).x;
    r3.w = r4.w + r3.w;
    r11.xyz = float3(0.5,0.5,0.5) * r12.xyz + r13.xyz;
    r4.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r11.xyz, r1.w).x;
    r3.w = r4.w + r3.w;
    r10.xyz = float3(0.5,0.5,0.5) * r12.xyz + r10.xyz;
    r1.w = gLocalLightShadowCM0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xyz, r1.w).x;
    r1.w = r3.w + r1.w;
    r1.w = 0.25 * r1.w;
  } else {
    r3.xyz = gLocalLightShadowData[0]._m30_m31_m32 + r3.xyz;
    r10.x = dot(r3.xyz, gLocalLightShadowData[0]._m00_m01_m02);
    r10.y = dot(r3.xyz, gLocalLightShadowData[0]._m10_m11_m12);
    r3.w = dot(r3.xyz, gLocalLightShadowData[0]._m20_m21_m22);
    r10.xy = r10.xy / -r3.ww;
    r3.x = dot(r3.xyz, r3.xyz);
    r3.x = sqrt(r3.x);
    r10.z = gLocalLightShadowData[0]._m23 * r3.x;
    r3.xyz = r10.xyz * float3(0.5,-0.5,1) + float3(0.5,0.5,0);
    r10.xyzw = gShadowTexParam.zwzw * float4(-0.5,-0.5,0.5,-0.5) + r3.xyxy;
    r3.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xy, r3.z).x;
    r4.w = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.zw, r3.z).x;
    r3.w = r4.w + r3.w;
    r10.xyzw = gShadowTexParam.zwzw * float4(-0.5,0.5,0.5,0.5) + r3.xyxy;
    r3.x = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.xy, r3.z).x;
    r3.x = r3.w + r3.x;
    r3.y = gLocalLightShadowSpot0.SampleCmpLevelZero(gShadowZSamplerCache_s, r10.zw, r3.z).x;
    r3.x = r3.x + r3.y;
    r1.w = 0.25 * r3.x;
  }
  r3.x = saturate(dot(r0.xyz, r5.xyz));
  r1.x = saturate(dot(-r1.xyz, r0.xyz));
  r1.y = saturate(dot(r4.xyz, r5.xyz));
  r3.yz = float2(1,1) + -r1.xy;
  r5.xy = r3.yz * r3.yz;
  r5.xy = r5.xy * r5.xy;
  r3.yz = r5.xy * r3.yz;
  r1.y = 1 + -r9.z;
  r3.yz = r9.zz * r3.yz + r1.yy;
  r5.xy = float2(2,9.99999994e-009) + r2.yy;
  r2.y = 0.125 * r5.x;
  r3.y = -r2.x * r3.y + 1;
  r3.w = dot(r0.xyz, r4.xyz);
  r3.w = saturate(9.99999994e-009 + r3.w);
  r3.w = log2(r3.w);
  r3.w = r5.y * r3.w;
  r3.w = exp2(r3.w);
  r3.z = r3.w * r3.z;
  r3.z = r3.z * r2.y;
  r3.z = r3.z * r2.x;
  r3.z = r3.z * r3.x;
  r3.x = r3.x * r3.y;
  r3.y = saturate(dot(r0.xyz, r7.xyz));
  r1.z = saturate(dot(r6.xyz, r7.xyz));
  r1.xz = float2(1,1) + -r1.xz;
  r4.xy = r1.xz * r1.xz;
  r4.xy = r4.xy * r4.xy;
  r1.xz = r4.xy * r1.xz;
  r1.xy = r9.zz * r1.xz + r1.yy;
  r1.x = -r2.x * r1.x + 1;
  r0.x = dot(r0.xyz, r6.xyz);
  r0.x = saturate(9.99999994e-009 + r0.x);
  r0.x = log2(r0.x);
  r0.x = r5.y * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r1.y;
  r0.x = r0.x * r2.y;
  r0.x = r0.x * r2.x;
  r0.x = r0.x * r3.y;
  r0.y = r3.y * r1.x;
  r0.z = deferredLightParams[8].z * r3.z;
  r0.x = deferredLightParams[8].z * r0.x;
  r1.x = -1 + r2.w;
  r1.x = deferredLightParams[8].y * r1.x + 1;
  r1.y = -1 + r1.w;
  r1.y = deferredLightParams[8].y * r1.y + 1;
  r2.xyw = r8.xyz * r3.xxx + r0.zzz;
  r2.xyw = r2.xyw * r9.xyw;
  r2.xyw = r2.xyw * r0.www;
  r0.xyz = r8.xyz * r0.yyy + r0.xxx;
  r0.xyz = r0.xyz * r9.xyw;
  r0.xyz = r0.xyz * r2.zzz;
  r0.xyz = r0.xyz * r1.yyy;
  r0.xyz = r2.xyw * r1.xxx + r0.xyz;
  o0.xyz = globalScalars3.zzz * r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192 [unused]
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16 [unused]
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16 [unused]
//   float4 gCSMResolution;             // Offset:  224 Size:    16 [unused]
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512
//   float4 gShadowTexParam;            // Offset:  768 Size:    16
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GBufferTextureSampler0Global      sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler2Global      sampler      NA          NA    9        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// gShadowZSamplerCache            sampler_c      NA          NA   14        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// gLocalLightShadowCM0              texture  float4        cube   14        1
// StereoParmsTexture                texture  float4          2d   20        1
// gLocalLightShadowSpot0            texture   float          2d   24        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// csmshader                         cbuffer      NA          NA    6        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb6[49], immediateIndexed
dcl_constantbuffer cb13[21], immediateIndexed
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s12, mode_default
dcl_sampler s14, mode_comparison
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texturecube (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 15
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  add r0.w, -r2.y, r0.z
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r3.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r4.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r3.xyz, r4.xyzx, cb1[15].xyzx
endif 
mad r3.xyz, r1.xyzx, r0.zzzz, r3.xyzx
add r4.xyz, -r3.xyzx, cb13[9].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r1.w, r0.w
mul r5.xyz, r1.wwww, r4.xyzx
add r6.xyz, -r3.xyzx, cb13[10].xyzx
dp3 r2.z, r6.xyzx, r6.xyzx
rsq r2.w, r2.z
mul r7.xyz, r2.wwww, r6.xyzx
mad_sat r0.w, -r0.w, cb13[4].z, l(1.000000)
add r4.w, -cb13[7].x, l(1.000000)
mad r5.w, r4.w, r0.w, cb13[7].x
div r0.w, r0.w, r5.w
dp3 r5.w, r5.xyzx, -cb13[12].xyzx
mad_sat r5.w, r5.w, cb13[5].w, cb13[5].z
mul r0.w, r0.w, r5.w
mov r3.w, l(1.000000)
dp4 r3.x, r3.xyzw, cb13[6].xyzw
ge r3.x, r3.x, l(0.000000)
and r3.x, r3.x, l(0x3f800000)
mul r0.w, r0.w, r3.x
mad_sat r2.z, -r2.z, cb13[4].z, l(1.000000)
mad r3.y, r4.w, r2.z, cb13[7].x
div r2.z, r2.z, r3.y
dp3 r3.y, r7.xyzx, -cb13[13].xyzx
mad_sat r3.y, r3.y, cb13[5].w, cb13[5].z
mul r2.z, r2.z, r3.y
mul r2.z, r3.x, r2.z
max r3.x, r0.w, r2.z
lt r3.x, r3.x, l(0.000001)
discard_nz r3.x
mad r3.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
add r2.y, -r2.y, r0.z
mul r2.x, r2.y, r2.x
mul r2.x, r2.x, cb13[17].x
mul r8.xyz, r2.xxxx, cb1[12].xyzx
mov r3.z, l(1.000000)
dp3 r9.x, r3.xyzx, cb13[18].xyzx
dp3 r9.y, r3.xyzx, cb13[19].xyzx
dp3 r9.z, r3.xyzx, cb13[20].xyzx
mad r3.xyz, r9.xyzx, r0.zzzz, -r8.xyzx
sample r8.xyzw, r0.xyxx, t7.xyzw, s7
mul r8.xyz, r8.xyzx, r8.xyzx
sample r9.xyzw, r0.xyxx, t9.xyzw, s9
mul r2.xy, r9.xyxx, r9.xyxx
sample r10.xyzw, r0.xyxx, t8.xyzw, s8
mul r0.xyz, r10.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r0.xyz, r0.xyzx
mad r0.xy, -r0.yzyy, l(0.125000, 0.125000, 0.000000, 0.000000), r0.xyxx
mad r0.xyz, r10.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r0.xyzx
add r0.xyz, r0.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r3.w, r0.xyzx, r0.xyzx
rsq r3.w, r3.w
mul r0.xyz, r0.xyzx, r3.wwww
min r2.x, r2.x, l(1.000000)
mad r3.w, r2.y, l(512.000000), l(-500.000000)
max r3.w, r3.w, l(0.000000)
mad r2.y, r2.y, l(512.000000), -r3.w
mul r3.w, r3.w, l(558.000000)
mad r2.y, r2.y, l(3.000000), r3.w
dp3 r3.w, r1.xyzx, r1.xyzx
rsq r3.w, r3.w
mul r1.xyz, r1.xyzx, r3.wwww
mad r4.xyz, r4.xyzx, r1.wwww, -r1.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
mad r6.xyz, r6.xyzx, r2.wwww, -r1.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx
eq r1.w, cb6[16].w, l(2.000000)
if_nz r1.w
  add r9.xyw, r3.xyxz, cb6[19].xyxz
  dp3 r10.x, r9.xywx, cb6[16].xyzx
  dp3 r10.y, r9.xywx, cb6[17].xyzx
  dp3 r10.z, r9.xywx, cb6[18].xyzx
  dp3 r2.w, -r10.xyzx, -r10.xyzx
  sqrt r2.w, r2.w
  div r9.xyw, -r10.xyxz, r2.wwww
  mul r2.w, r2.w, cb6[18].w
  lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r9.xywx
  lt r11.xyz, r9.xywx, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r10.xyz, r11.xyzx, -r10.xyzx
  itof r10.xyz, r10.zxyz
  ge r11.xyzw, |r9.wwxx|, |r9.xyyw|
  and r11.xy, r11.ywyy, r11.xzxx
  mov r12.xy, -r10.yzyy
  mov r12.z, l(0)
  mov r12.w, |r9.x|
  mov r13.xy, l(1.000000,0,0,0)
  mov r13.z, |r9.y|
  movc r11.yzw, r11.yyyy, r12.zzxw, r13.xxyz
  mov r10.y, l(0)
  mov r10.z, |r9.w|
  movc r10.xyz, r11.xxxx, r10.xyzx, r11.yzwy
  eq r3.w, r10.z, |r9.y|
  movc r11.yz, r3.wwww, r12.zzyz, l(0,1.000000,0,0)
  dp2 r3.w, r10.zzzz, cb6[48].zzzz
  div r9.xyw, r9.xyxw, r3.wwww
  mul r12.xz, r10.xxyx, l(-0.500000, 0.000000, -0.500000, 0.000000)
  mov r12.y, l(-0.000000)
  add r12.xyz, r9.xywx, r12.xyzx
  mov r11.x, l(0)
  mad r13.xyz, l(-0.500000, -0.500000, -0.500000, -0.000000), r11.xyzx, r12.xyzx
  sample_c_lz r3.w, r13.xyzx, t14.xxxx, s14, r2.w
  mul r10.xz, r10.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
  mov r10.y, l(0)
  add r9.xyw, r9.xyxw, r10.xyxz
  mad r10.xyz, l(-0.500000, -0.500000, -0.500000, -0.000000), r11.xyzx, r9.xywx
  sample_c_lz r4.w, r10.xyzx, t14.xxxx, s14, r2.w
  add r3.w, r3.w, r4.w
  mad r10.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r11.xyzx, r12.xyzx
  sample_c_lz r4.w, r10.xyzx, t14.xxxx, s14, r2.w
  add r3.w, r3.w, r4.w
  mad r9.xyw, l(0.500000, 0.500000, 0.000000, 0.500000), r11.xyxz, r9.xyxw
  sample_c_lz r2.w, r9.xywx, t14.xxxx, s14, r2.w
  add r2.w, r2.w, r3.w
  mul r2.w, r2.w, l(0.250000)
else 
  add r9.xyw, r3.xyxz, cb6[19].xyxz
  dp3 r10.x, r9.xywx, cb6[16].xyzx
  dp3 r10.y, r9.xywx, cb6[17].xyzx
  dp3 r3.w, r9.xywx, cb6[18].xyzx
  div r10.xy, r10.xyxx, -r3.wwww
  dp3 r3.w, r9.xywx, r9.xywx
  sqrt r3.w, r3.w
  mul r10.z, r3.w, cb6[18].w
  mad r9.xyw, r10.xyxz, l(0.500000, -0.500000, 0.000000, 1.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r10.xyzw, cb6[48].zwzw, l(-0.500000, -0.500000, 0.500000, -0.500000), r9.xyxy
  sample_c_lz r3.w, r10.xyxx, t24.xxxx, s14, r9.w
  sample_c_lz r4.w, r10.zwzz, t24.xxxx, s14, r9.w
  add r3.w, r3.w, r4.w
  mad r10.xyzw, cb6[48].zwzw, l(-0.500000, 0.500000, 0.500000, 0.500000), r9.xyxy
  sample_c_lz r4.w, r10.xyxx, t24.xxxx, s14, r9.w
  add r3.w, r3.w, r4.w
  sample_c_lz r4.w, r10.zwzz, t24.xxxx, s14, r9.w
  add r3.w, r3.w, r4.w
  mul r2.w, r3.w, l(0.250000)
endif 
mul r9.xyw, cb13[3].wwww, cb13[3].xyxz
if_nz r1.w
  add r10.xyz, r3.xyzx, cb6[19].xyzx
  dp3 r11.x, r10.xyzx, cb6[16].xyzx
  dp3 r11.y, r10.xyzx, cb6[17].xyzx
  dp3 r11.z, r10.xyzx, cb6[18].xyzx
  dp3 r1.w, -r11.xyzx, -r11.xyzx
  sqrt r1.w, r1.w
  div r10.xyz, -r11.xyzx, r1.wwww
  mul r1.w, r1.w, cb6[18].w
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.xyzx
  lt r12.xyz, r10.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
  iadd r11.xyz, r12.xyzx, -r11.xyzx
  itof r11.xyz, r11.zxyz
  ge r12.xyzw, |r10.zzxx|, |r10.xyyz|
  and r12.xy, r12.ywyy, r12.xzxx
  mov r13.xy, -r11.yzyy
  mov r13.z, l(0)
  mov r13.w, |r10.x|
  mov r14.xy, l(1.000000,0,0,0)
  mov r14.z, |r10.y|
  movc r12.yzw, r12.yyyy, r13.zzxw, r14.xxyz
  mov r11.y, l(0)
  mov r11.z, |r10.z|
  movc r11.xyz, r12.xxxx, r11.xyzx, r12.yzwy
  eq r3.w, r11.z, |r10.y|
  movc r12.yz, r3.wwww, r13.zzyz, l(0,1.000000,0,0)
  dp2 r3.w, r11.zzzz, cb6[48].zzzz
  div r10.xyz, r10.xyzx, r3.wwww
  mul r13.xz, r11.xxyx, l(-0.500000, 0.000000, -0.500000, 0.000000)
  mov r13.y, l(-0.000000)
  add r13.xyz, r10.xyzx, r13.xyzx
  mov r12.x, l(0)
  mad r14.xyz, l(-0.500000, -0.500000, -0.500000, -0.000000), r12.xyzx, r13.xyzx
  sample_c_lz r3.w, r14.xyzx, t14.xxxx, s14, r1.w
  mul r11.xz, r11.xxyx, l(0.500000, 0.000000, 0.500000, 0.000000)
  mov r11.y, l(0)
  add r10.xyz, r10.xyzx, r11.xyzx
  mad r11.xyz, l(-0.500000, -0.500000, -0.500000, -0.000000), r12.xyzx, r10.xyzx
  sample_c_lz r4.w, r11.xyzx, t14.xxxx, s14, r1.w
  add r3.w, r3.w, r4.w
  mad r11.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r12.xyzx, r13.xyzx
  sample_c_lz r4.w, r11.xyzx, t14.xxxx, s14, r1.w
  add r3.w, r3.w, r4.w
  mad r10.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r12.xyzx, r10.xyzx
  sample_c_lz r1.w, r10.xyzx, t14.xxxx, s14, r1.w
  add r1.w, r1.w, r3.w
  mul r1.w, r1.w, l(0.250000)
else 
  add r3.xyz, r3.xyzx, cb6[19].xyzx
  dp3 r10.x, r3.xyzx, cb6[16].xyzx
  dp3 r10.y, r3.xyzx, cb6[17].xyzx
  dp3 r3.w, r3.xyzx, cb6[18].xyzx
  div r10.xy, r10.xyxx, -r3.wwww
  dp3 r3.x, r3.xyzx, r3.xyzx
  sqrt r3.x, r3.x
  mul r10.z, r3.x, cb6[18].w
  mad r3.xyz, r10.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r10.xyzw, cb6[48].zwzw, l(-0.500000, -0.500000, 0.500000, -0.500000), r3.xyxy
  sample_c_lz r3.w, r10.xyxx, t24.xxxx, s14, r3.z
  sample_c_lz r4.w, r10.zwzz, t24.xxxx, s14, r3.z
  add r3.w, r3.w, r4.w
  mad r10.xyzw, cb6[48].zwzw, l(-0.500000, 0.500000, 0.500000, 0.500000), r3.xyxy
  sample_c_lz r3.x, r10.xyxx, t24.xxxx, s14, r3.z
  add r3.x, r3.x, r3.w
  sample_c_lz r3.y, r10.zwzz, t24.xxxx, s14, r3.z
  add r3.x, r3.y, r3.x
  mul r1.w, r3.x, l(0.250000)
endif 
dp3_sat r3.x, r0.xyzx, r5.xyzx
dp3_sat r1.x, -r1.xyzx, r0.xyzx
dp3_sat r1.y, r4.xyzx, r5.xyzx
add r3.yz, -r1.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r5.xy, r3.yzyy, r3.yzyy
mul r5.xy, r5.xyxx, r5.xyxx
mul r3.yz, r3.yyzy, r5.xxyx
add r1.y, -r9.z, l(1.000000)
mad r3.yz, r9.zzzz, r3.yyzy, r1.yyyy
add r5.xy, r2.yyyy, l(2.000000, 0.000000, 0.000000, 0.000000)
mul r2.y, r5.x, l(0.125000)
mad r3.y, -r2.x, r3.y, l(1.000000)
dp3 r3.w, r0.xyzx, r4.xyzx
add_sat r3.w, r3.w, l(0.000000)
log r3.w, r3.w
mul r3.w, r3.w, r5.y
exp r3.w, r3.w
mul r3.z, r3.z, r3.w
mul r3.z, r2.y, r3.z
mul r3.z, r2.x, r3.z
mul r3.z, r3.x, r3.z
mul r3.x, r3.y, r3.x
dp3_sat r3.y, r0.xyzx, r7.xyzx
dp3_sat r1.z, r6.xyzx, r7.xyzx
add r1.xz, -r1.xxzx, l(1.000000, 0.000000, 1.000000, 0.000000)
mul r4.xy, r1.xzxx, r1.xzxx
mul r4.xy, r4.xyxx, r4.xyxx
mul r1.xz, r1.xxzx, r4.xxyx
mad r1.xy, r9.zzzz, r1.xzxx, r1.yyyy
mad r1.x, -r2.x, r1.x, l(1.000000)
dp3 r0.x, r0.xyzx, r6.xyzx
add_sat r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, r5.y
exp r0.x, r0.x
mul r0.x, r1.y, r0.x
mul r0.x, r2.y, r0.x
mul r0.x, r2.x, r0.x
mul r0.x, r3.y, r0.x
mul r0.y, r1.x, r3.y
mul r0.z, r3.z, cb13[8].z
mul r0.x, r0.x, cb13[8].z
add r1.x, r2.w, l(-1.000000)
mad r1.x, cb13[8].y, r1.x, l(1.000000)
add r1.y, r1.w, l(-1.000000)
mad r1.y, cb13[8].y, r1.y, l(1.000000)
mad r2.xyw, r8.xyxz, r3.xxxx, r0.zzzz
mul r2.xyw, r9.xyxw, r2.xyxw
mul r2.xyw, r0.wwww, r2.xyxw
mad r0.xyz, r8.xyzx, r0.yyyy, r0.xxxx
mul r0.xyz, r9.xywx, r0.xyzx
mul r0.xyz, r2.zzzz, r0.xyzx
mul r0.xyz, r1.yyyy, r0.xyzx
mad r0.xyz, r2.xywx, r1.xxxx, r0.xyzx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 285 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:34:58 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192 [unused]
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16 [unused]
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16 [unused]
//   float4 gCSMResolution;             // Offset:  224 Size:    16 [unused]
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512
//   float4 gShadowTexParam;            // Offset:  768 Size:    16
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// GBufferTextureSampler0Global_s    sampler      NA          NA    7        1
// GBufferTextureSampler1Global_s    sampler      NA          NA    8        1
// GBufferTextureSampler2Global_s    sampler      NA          NA    9        1
// GBufferTextureSamplerDepthGlobal_s    sampler      NA          NA   12        1
// gShadowZSamplerCache_s          sampler_c      NA          NA   14        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// gLocalLightShadowCM0              texture  float4        cube   14        1
// StereoParmsTexture                texture  float4          2d   20        1
// gLocalLightShadowSpot0            texture   float          2d   24        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// csmshader                         cbuffer      NA          NA    6        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb6[49], immediateIndexed
dcl_constantbuffer cb13[21], immediateIndexed
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s12, mode_default
dcl_sampler s14, mode_comparison
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texturecube (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t20
dcl_resource_texture2d (float,float,float,float) t24
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 15
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
add r0.z, -r1.x, cb13[17].w
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r1.xyz, v2.xyzx, v2.wwww
ne r0.w, l(0.000000), cb2[22].z
eq r1.w, v2.w, l(1.000000)
and r0.w, r0.w, r1.w
if_nz r0.w
  add r0.w, -r2.y, r0.z
  mul r0.w, r0.w, r2.x
  mul r0.w, r0.w, cb13[17].x
  mad r3.xyz, -cb1[12].xyzx, r0.wwww, cb1[15].xyzx
else 
  ld r4.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r3.xyz, r4.xyzx, cb1[15].xyzx
endif 
mad r3.xyz, r1.xyzx, r0.zzzz, r3.xyzx
add r4.xyz, -r3.xyzx, cb13[9].xyzx
dp3 r0.w, r4.xyzx, r4.xyzx
rsq r1.w, r0.w
mul r5.xyz, r1.wwww, r4.xyzx
add r6.xyz, -r3.xyzx, cb13[10].xyzx
dp3 r2.z, r6.xyzx, r6.xyzx
rsq r2.w, r2.z
mul r7.xyz, r2.wwww, r6.xyzx
mad_sat r0.w, -r0.w, cb13[4].z, l(1.000000)
add r4.w, l(1.000000), -cb13[7].x
mad r5.w, r4.w, r0.w, cb13[7].x
div r0.w, r0.w, r5.w
dp3 r5.w, r5.xyzx, -cb13[12].xyzx
mad_sat r5.w, r5.w, cb13[5].w, cb13[5].z
mul r0.w, r0.w, r5.w
mov r3.w, l(1.000000)
dp4 r3.x, r3.xyzw, cb13[6].xyzw
ge r3.x, r3.x, l(0.000000)
and r3.x, r3.x, l(0x3f800000)
mul r0.w, r0.w, r3.x
mad_sat r2.z, -r2.z, cb13[4].z, l(1.000000)
mad r3.y, r4.w, r2.z, cb13[7].x
div r2.z, r2.z, r3.y
dp3 r3.y, r7.xyzx, -cb13[13].xyzx
mad_sat r3.y, r3.y, cb13[5].w, cb13[5].z
mul r2.z, r2.z, r3.y
mul r2.z, r3.x, r2.z
max r3.x, r0.w, r2.z
lt r3.x, r3.x, l(0.000001)
discard_nz r3.x
mad r3.xy, r0.xyxx, l(2.000000, -2.000000, 0.000000, 0.000000), l(-1.000000, 1.000000, 0.000000, 0.000000)
add r2.y, -r2.y, r0.z
mul r2.x, r2.y, r2.x
mul r2.x, r2.x, cb13[17].x
mul r8.xyz, r2.xxxx, cb1[12].xyzx
mov r3.z, l(1.000000)
dp3 r9.x, r3.xyzx, cb13[18].xyzx
dp3 r9.y, r3.xyzx, cb13[19].xyzx
dp3 r9.z, r3.xyzx, cb13[20].xyzx
mad r3.xyz, r9.xyzx, r0.zzzz, -r8.xyzx
sample r8.xyzw, r0.xyxx, t7.xyzw, s7
mul r8.xyz, r8.xyzx, r8.xyzx
sample r9.xyzw, r0.xyxx, t9.xyzw, s9
mul r2.xy, r9.xyxx, r9.xyxx
sample r10.xyzw, r0.xyxx, t8.xyzw, s8
mul r0.xyz, r10.wwww, l(0.998047, 7.984375, 63.875000, 0.000000)
frc r0.xyz, r0.xyzx
mad r0.xy, r0.yzyy, l(-0.125000, -0.125000, 0.000000, 0.000000), r0.xyxx
mad r0.xyz, r10.xyzx, l(256.000000, 256.000000, 256.000000, 0.000000), r0.xyzx
add r0.xyz, r0.xyzx, l(-128.000000, -128.000000, -128.000000, 0.000000)
dp3 r3.w, r0.xyzx, r0.xyzx
rsq r3.w, r3.w
mul r0.xyz, r0.xyzx, r3.wwww
min r2.x, r2.x, l(1.000000)
mad r3.w, r2.y, l(512.000000), l(-500.000000)
max r3.w, r3.w, l(0.000000)
mad r2.y, r2.y, l(512.000000), -r3.w
mul r3.w, r3.w, l(558.000000)
mad r2.y, r2.y, l(3.000000), r3.w
dp3 r3.w, r1.xyzx, r1.xyzx
rsq r3.w, r3.w
mul r1.xyz, r1.xyzx, r3.wwww
mad r4.xyz, r4.xyzx, r1.wwww, -r1.xyzx
dp3 r1.w, r4.xyzx, r4.xyzx
rsq r1.w, r1.w
mul r4.xyz, r1.wwww, r4.xyzx
mad r6.xyz, r6.xyzx, r2.wwww, -r1.xyzx
dp3 r1.w, r6.xyzx, r6.xyzx
rsq r1.w, r1.w
mul r6.xyz, r1.wwww, r6.xyzx
eq r1.w, l(2.000000), cb6[16].w
if_nz r1.w
  add r9.xyw, r3.xyxz, cb6[19].xyxz
  dp3 r10.x, r9.xywx, cb6[16].xyzx
  dp3 r10.y, r9.xywx, cb6[17].xyzx
  dp3 r10.z, r9.xywx, cb6[18].xyzx
  dp3 r2.w, -r10.xyzx, -r10.xyzx
  sqrt r2.w, r2.w
  div r9.xyw, -r10.xyxz, r2.wwww
  mul r2.w, r2.w, cb6[18].w
  lt r10.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r9.wxyw
  lt r11.xyz, r9.wxyw, l(0.000000, 0.000000, 0.000000, 0.000000)
  and r10.xyz, r10.xyzx, l(1, 1, 1, 0)
  iadd r10.xyz, r10.xyzx, r11.xyzx
  itof r10.xyz, r10.xyzx
  ge r11.xyzw, |r9.wwxx|, |r9.xyyw|
  and r11.xy, r11.ywyy, r11.xzxx
  mov r12.xy, -r10.yzyy
  mov r12.z, l(0)
  mov r12.w, |r9.x|
  mov r13.xy, l(1.000000,0,0,0)
  mov r13.z, |r9.y|
  movc r11.yzw, r11.yyyy, r12.zzxw, r13.xxyz
  mov r10.y, l(0)
  mov r10.z, |r9.w|
  movc r10.xyz, r11.xxxx, r10.xyzx, r11.yzwy
  eq r3.w, |r9.y|, r10.z
  movc r11.yz, r3.wwww, r12.zzyz, l(0,1.000000,0,0)
  dp2 r3.w, r10.zzzz, cb6[48].zzzz
  div r9.xyw, r9.xyxw, r3.wwww
  mul r10.xyzw, r10.xxyy, l(0.500000, -0.500000, 0.500000, -0.500000)
  mov r12.xz, r10.yywy
  mov r12.y, l(0)
  add r12.xyz, r9.xywx, r12.xyzx
  mov r11.x, l(0)
  mad r13.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r11.xyzx, r12.xyzx
  sample_c_lz r3.w, r13.xyzx, t14.xxxx, s14, r2.w
  mov r10.y, l(0)
  add r9.xyw, r9.xyxw, r10.xyxz
  mad r10.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r11.xyzx, r9.xywx
  sample_c_lz r4.w, r10.xyzx, t14.xxxx, s14, r2.w
  add r3.w, r3.w, r4.w
  mad r10.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r11.xyzx, r12.xyzx
  sample_c_lz r4.w, r10.xyzx, t14.xxxx, s14, r2.w
  add r3.w, r3.w, r4.w
  mad r9.xyw, l(0.500000, 0.500000, 0.000000, 0.500000), r11.xyxz, r9.xyxw
  sample_c_lz r2.w, r9.xywx, t14.xxxx, s14, r2.w
  add r2.w, r2.w, r3.w
  mul r2.w, r2.w, l(0.250000)
else 
  add r9.xyw, r3.xyxz, cb6[19].xyxz
  dp3 r10.x, r9.xywx, cb6[16].xyzx
  dp3 r10.y, r9.xywx, cb6[17].xyzx
  dp3 r3.w, r9.xywx, cb6[18].xyzx
  div r10.xy, r10.xyxx, -r3.wwww
  dp3 r3.w, r9.xywx, r9.xywx
  sqrt r3.w, r3.w
  mul r10.z, r3.w, cb6[18].w
  mad r9.xyw, r10.xyxz, l(0.500000, -0.500000, 0.000000, 1.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r10.xyz, cb6[48].zwzz, l(-0.500000, -0.500000, 0.500000, 0.000000), r9.xyxx
  sample_c_lz r3.w, r10.xyxx, t24.xxxx, s14, r9.w
  sample_c_lz r4.w, r10.zyzz, t24.xxxx, s14, r9.w
  add r3.w, r3.w, r4.w
  mad r10.xyz, cb6[48].zwzz, l(-0.500000, 0.500000, 0.500000, 0.000000), r9.xyxx
  sample_c_lz r4.w, r10.xyxx, t24.xxxx, s14, r9.w
  add r3.w, r3.w, r4.w
  sample_c_lz r4.w, r10.zyzz, t24.xxxx, s14, r9.w
  add r3.w, r3.w, r4.w
  mul r2.w, r3.w, l(0.250000)
endif 
mul r9.xyw, cb13[3].wwww, cb13[3].xyxz
if_nz r1.w
  add r10.xyz, r3.xyzx, cb6[19].xyzx
  dp3 r11.x, r10.xyzx, cb6[16].xyzx
  dp3 r11.y, r10.xyzx, cb6[17].xyzx
  dp3 r11.z, r10.xyzx, cb6[18].xyzx
  dp3 r1.w, -r11.xyzx, -r11.xyzx
  sqrt r1.w, r1.w
  div r10.xyz, -r11.xyzx, r1.wwww
  mul r1.w, r1.w, cb6[18].w
  lt r11.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r10.zxyz
  lt r12.xyz, r10.zxyz, l(0.000000, 0.000000, 0.000000, 0.000000)
  and r11.xyz, r11.xyzx, l(1, 1, 1, 0)
  iadd r11.xyz, r11.xyzx, r12.xyzx
  itof r11.xyz, r11.xyzx
  ge r12.xyzw, |r10.zzxx|, |r10.xyyz|
  and r12.xy, r12.ywyy, r12.xzxx
  mov r13.xy, -r11.yzyy
  mov r13.z, l(0)
  mov r13.w, |r10.x|
  mov r14.xy, l(1.000000,0,0,0)
  mov r14.z, |r10.y|
  movc r12.yzw, r12.yyyy, r13.zzxw, r14.xxyz
  mov r11.y, l(0)
  mov r11.z, |r10.z|
  movc r11.xyz, r12.xxxx, r11.xyzx, r12.yzwy
  eq r3.w, |r10.y|, r11.z
  movc r12.yz, r3.wwww, r13.zzyz, l(0,1.000000,0,0)
  dp2 r3.w, r11.zzzz, cb6[48].zzzz
  div r10.xyz, r10.xyzx, r3.wwww
  mul r11.xyzw, r11.xxyy, l(0.500000, -0.500000, 0.500000, -0.500000)
  mov r13.xz, r11.yywy
  mov r13.y, l(0)
  add r13.xyz, r10.xyzx, r13.xyzx
  mov r12.x, l(0)
  mad r14.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r12.xyzx, r13.xyzx
  sample_c_lz r3.w, r14.xyzx, t14.xxxx, s14, r1.w
  mov r11.y, l(0)
  add r10.xyz, r10.xyzx, r11.xyzx
  mad r11.xyz, l(-0.500000, -0.500000, -0.500000, 0.000000), r12.xyzx, r10.xyzx
  sample_c_lz r4.w, r11.xyzx, t14.xxxx, s14, r1.w
  add r3.w, r3.w, r4.w
  mad r11.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r12.xyzx, r13.xyzx
  sample_c_lz r4.w, r11.xyzx, t14.xxxx, s14, r1.w
  add r3.w, r3.w, r4.w
  mad r10.xyz, l(0.500000, 0.500000, 0.500000, 0.000000), r12.xyzx, r10.xyzx
  sample_c_lz r1.w, r10.xyzx, t14.xxxx, s14, r1.w
  add r1.w, r1.w, r3.w
  mul r1.w, r1.w, l(0.250000)
else 
  add r3.xyz, r3.xyzx, cb6[19].xyzx
  dp3 r10.x, r3.xyzx, cb6[16].xyzx
  dp3 r10.y, r3.xyzx, cb6[17].xyzx
  dp3 r3.w, r3.xyzx, cb6[18].xyzx
  div r10.xy, r10.xyxx, -r3.wwww
  dp3 r3.x, r3.xyzx, r3.xyzx
  sqrt r3.x, r3.x
  mul r10.z, r3.x, cb6[18].w
  mad r3.xyz, r10.xyzx, l(0.500000, -0.500000, 1.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
  mad r10.xyz, cb6[48].zwzz, l(-0.500000, -0.500000, 0.500000, 0.000000), r3.xyxx
  sample_c_lz r3.w, r10.xyxx, t24.xxxx, s14, r3.z
  sample_c_lz r4.w, r10.zyzz, t24.xxxx, s14, r3.z
  add r3.w, r3.w, r4.w
  mad r10.xyz, cb6[48].zwzz, l(-0.500000, 0.500000, 0.500000, 0.000000), r3.xyxx
  sample_c_lz r3.x, r10.xyxx, t24.xxxx, s14, r3.z
  add r3.x, r3.x, r3.w
  sample_c_lz r3.y, r10.zyzz, t24.xxxx, s14, r3.z
  add r3.x, r3.y, r3.x
  mul r1.w, r3.x, l(0.250000)
endif 
dp3_sat r3.x, r0.xyzx, r5.xyzx
dp3_sat r1.x, -r1.xyzx, r0.xyzx
dp3_sat r1.y, r4.xyzx, r5.xyzx
add r3.yz, -r1.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r5.xy, r3.yzyy, r3.yzyy
mul r5.xy, r5.xyxx, r5.xyxx
mul r3.yz, r3.yyzy, r5.xxyx
add r1.y, -r9.z, l(1.000000)
mad r3.yz, r9.zzzz, r3.yyzy, r1.yyyy
add r5.xy, r2.yyyy, l(2.000000, 0.000000, 0.000000, 0.000000)
mul r2.y, r5.x, l(0.125000)
mad r3.y, -r2.x, r3.y, l(1.000000)
dp3 r3.w, r0.xyzx, r4.xyzx
add_sat r3.w, r3.w, l(0.000000)
log r3.w, r3.w
mul r3.w, r3.w, r5.y
exp r3.w, r3.w
mul r3.z, r3.z, r3.w
mul r3.z, r2.y, r3.z
mul r3.z, r2.x, r3.z
mul r3.z, r3.x, r3.z
mul r3.x, r3.y, r3.x
dp3_sat r3.y, r0.xyzx, r7.xyzx
dp3_sat r1.z, r6.xyzx, r7.xyzx
add r1.xz, -r1.xxzx, l(1.000000, 0.000000, 1.000000, 0.000000)
mul r4.xy, r1.xzxx, r1.xzxx
mul r4.xy, r4.xyxx, r4.xyxx
mul r1.xz, r1.xxzx, r4.xxyx
mad r1.xy, r9.zzzz, r1.xzxx, r1.yyyy
mad r1.x, -r2.x, r1.x, l(1.000000)
dp3 r0.x, r0.xyzx, r6.xyzx
add_sat r0.x, r0.x, l(0.000000)
log r0.x, r0.x
mul r0.x, r0.x, r5.y
exp r0.x, r0.x
mul r0.x, r1.y, r0.x
mul r0.x, r2.y, r0.x
mul r0.x, r2.x, r0.x
mul r0.x, r3.y, r0.x
mul r0.y, r1.x, r3.y
mul r0.z, r3.z, cb13[8].z
mul r0.x, r0.x, cb13[8].z
add r1.x, r2.w, l(-1.000000)
mad r1.x, cb13[8].y, r1.x, l(1.000000)
add r1.y, r1.w, l(-1.000000)
mad r1.y, cb13[8].y, r1.y, l(1.000000)
mad r2.xyw, r8.xyxz, r3.xxxx, r0.zzzz
mul r2.xyw, r9.xyxw, r2.xyxw
mul r2.xyw, r0.wwww, r2.xyxw
mad r0.xyz, r8.xyzx, r0.yyyy, r0.xxxx
mul r0.xyz, r9.xywx, r0.xyzx
mul r0.xyz, r2.zzzz, r0.xyzx
mul r0.xyz, r1.yyyy, r0.xyzx
mad r0.xyz, r2.xywx, r1.xxxx, r0.xyzx
mul o0.xyz, r0.xyzx, cb2[14].zzzz
mov o0.w, l(1.000000)
ret 
// Approximately 287 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
