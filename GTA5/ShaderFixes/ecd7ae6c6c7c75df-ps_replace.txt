
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer lighting_globals : register(b3)
{
  float4 gDirectionalLight : packoffset(c0);
  float4 gDirectionalColour : packoffset(c1);
  int gNumForwardLights : packoffset(c2);
  float4 gLightPositionAndInvDistSqr[8] : packoffset(c3);
  float4 gLightDirectionAndFalloffExponent[8] : packoffset(c11);
  float4 gLightColourAndCapsuleExtent[8] : packoffset(c19);
  float gLightConeScale[8] : packoffset(c27);
  float gLightConeOffset[8] : packoffset(c35);
  float4 gLightNaturalAmbient0 : packoffset(c43);
  float4 gLightNaturalAmbient1 : packoffset(c44);
  float4 gLightArtificialIntAmbient0 : packoffset(c45);
  float4 gLightArtificialIntAmbient1 : packoffset(c46);
  float4 gLightArtificialExtAmbient0 : packoffset(c47);
  float4 gLightArtificialExtAmbient1 : packoffset(c48);
  float4 gDirectionalAmbientColour : packoffset(c49);
  float4 globalFogParams[5] : packoffset(c50);
  float4 globalFogColor : packoffset(c55);
  float4 globalFogColorE : packoffset(c56);
  float4 globalFogColorN : packoffset(c57);
  float4 globalFogColorMoon : packoffset(c58);
  float4 gReflectionTweaks : packoffset(c59);
}

cbuffer more_stuff : register(b5)
{
  float4 gEntitySelectColor[2] : packoffset(c0);
  float4 gAmbientOcclusionEffect : packoffset(c2);
  float4 gDynamicBakesAndWetness : packoffset(c3);
  float4 gAlphaRefVec0 : packoffset(c4);
  float4 gAlphaRefVec1 : packoffset(c5);
  float gAlphaTestRef : packoffset(c6);
  bool gTreesUseDiscard : packoffset(c6.y);
  float gReflectionMipCount : packoffset(c6.z);
  float gTransparencyAASamples : packoffset(c6.w);
  bool gUseFogRay : packoffset(c7);
}

cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}
SamplerState ReflectionSampler_s : register(s1);
SamplerState gDeferredLightSampler2_s : register(s4);
SamplerState GBufferTextureSampler0Global_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler2Global_s : register(s9);
SamplerState GBufferTextureSampler3Global_s : register(s10);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> ReflectionSampler : register(t1);
Texture2D<float4> gDeferredLightSampler2 : register(t4);
Texture2D<float4> GBufferTextureSampler0Global : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler2Global : register(t9);
Texture2D<float4> GBufferTextureSampler3Global : register(t10);
Texture2D<uint2> gbufferStencilTextureGlobal : register(t11);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> gCSMShadowTexture : register(t15);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[4];
  r0.xy = v1.xy / v1.ww;
  r1.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, r0.xy).xyzw;
  r0.z = deferredProjectionParams.w + -r1.x;
  r1.xy = globalScreenSize.xy * r0.xy;
  r1.xy = (int2)r1.xy;
  r1.zw = float2(0,0);
  r1.xyzw = gbufferStencilTextureGlobal.Load(r1.xyz).xyzw;
  r0.w = (int)r1.y & 8;
  r0.w = (uint)r0.w;
  r0.w = r0.w >= 7.9000001;
  r1.x = r0.w ? 1.000000 : 0;
  r2.xyzw = GBufferTextureSampler0Global.Sample(GBufferTextureSampler0Global_s, r0.xy).xyzw;
  r1.yzw = r2.xyz * r2.xyz;
  r0.z = 1 + r0.z;
  r0.z = deferredProjectionParams.z / r0.z;
  r3.xyz = v2.xyz / v2.www;
  r2.w = 0 != gStereoParams.z;
  r3.w = v2.w == 1.000000;
  r2.w = r2.w ? r3.w : 0;
  if (r2.w != 0) {
    r4.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r2.w = -r4.y + r0.z;
    r2.w = r4.x * r2.w;
    r2.w = deferredProjectionParams.x * r2.w;
    r4.xyz = -gViewInverse._m00_m01_m02 * r2.www + gViewInverse._m30_m31_m32;
  } else {
    r5.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r4.xyz = gViewInverse._m30_m31_m32 + r5.xyz;
  }
  r4.xyz = r3.xyz * r0.zzz + r4.xyz;
  r5.xyzw = GBufferTextureSampler2Global.Sample(GBufferTextureSampler2Global_s, r0.xy).xyzw;
  r5.xy = r5.xy * r5.xy;
  r6.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, r0.xy).xyzw;
  r6.xyz = r6.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.z = dot(r6.xyz, r6.xyz);
  r0.z = rsqrt(r0.z);
  r7.xyz = r6.xyz * r0.zzz;
  r2.w = r6.w == 1.000000;
  r8.xyzw = GBufferTextureSampler3Global.Sample(GBufferTextureSampler3Global_s, r0.xy).xyzw;
  r9.xyzw = gDeferredLightSampler2.Sample(gDeferredLightSampler2_s, r0.xy).xyzw;
  r0.xy = r9.xx * r8.xy;
  r0.xy = r0.xy * r0.xy;
  r0.xy = r0.xy + r0.xy;
  r3.w = 16 * r8.z;
  r4.w = 0.5 < r8.w;
  r6.x = -0.5 + r8.w;
  r6.x = r4.w ? r6.x : r8.w;
  r6.x = saturate(r6.x + r6.x);
  r6.y = ~(int)r2.w;
  r8.x = min(1, r5.x);
  r0.xy = r0.xy * r0.xy;
  r5.x = r5.y * 512 + -500;
  r5.x = max(0, r5.x);
  r5.y = r5.y * 512 + -r5.x;
  r5.x = 558 * r5.x;
  r8.y = r5.y * 3 + r5.x;
  r5.x = dot(r3.xyz, r3.xyz);
  r5.x = rsqrt(r5.x);
  r9.xyz = r5.xxx * r3.xyz;
  r3.xyz = -r3.xyz * r5.xxx + -deferredLightParams[1].xyz;
  r5.x = dot(r3.xyz, r3.xyz);
  r5.x = rsqrt(r5.x);
  r3.xyz = r5.xxx * r3.xyz;
  r5.x = 0 < r6.x;
  r5.x = r5.x ? r6.y : 0;
  r5.y = dot(r7.xyz, -deferredLightParams[1].xyz);
  r5.y = r5.y < 0;
  r5.y = r5.y ? -1 : 1;
  r10.xyz = r7.xyz * r5.yyy;
  r10.w = r5.x ? 1 : r5.y;
  r7.w = 1;
  r10.xyzw = r2.wwww ? r7.xyzw : r10.xyzw;
  r5.y = ~(int)r5.x;
  r5.y = (int)r6.y & (int)r5.y;
  r6.y = r10.w < 0;
  r5.y = r6.y ? r5.y : 0;
  r6.yw = r4.ww ? float2(0,0.5) : float2(1,0.25);
  r2.xyz = -r2.xyz * r2.xyz + float3(1,1,1);
  r2.xyz = r6.www * r2.xyz + r1.yzw;
  r2.xyz = deferredLightParams[3].xyz * r2.xyz;
  r11.xyz = r10.www * r10.xyz;
  r10.xyz = r5.yyy ? r11.xyz : r10.xyz;
  r2.xyz = r5.yyy ? r2.xyz : deferredLightParams[3].xyz;
  r8.zw = r8.xy * r5.ww;
  r8.xz = r5.xx ? r8.zw : r8.xy;
  r10.xyz = r10.xyz * r10.www;
  r4.w = saturate(dot(r10.xyz, -deferredLightParams[1].xyz));
  r10.xyz = r10.xyz * r10.www;
  r11.x = saturate(dot(-r9.xyz, r10.xyz));
  r11.y = saturate(dot(r3.xyz, -deferredLightParams[1].xyz));
  r11.yz = float2(1,1) + -r11.xy;
  r12.xy = r11.yz * r11.yz;
  r12.xy = r12.xy * r12.xy;
  r11.yz = r12.xy * r11.yz;
  r5.y = 1 + -r5.z;
  r5.yz = r5.zz * r11.yz + r5.yy;
  r8.zw = float2(2,9.99999994e-009) + r8.zz;
  r6.w = 0.125 * r8.z;
  r5.y = -r8.x * r5.y + 1;
  r3.x = dot(r10.xyz, r3.xyz);
  r3.x = saturate(9.99999994e-009 + r3.x);
  r3.x = log2(r3.x);
  r3.x = r8.w * r3.x;
  r3.x = exp2(r3.x);
  r3.x = r3.x * r5.z;
  r3.x = r3.x * r6.w;
  r3.x = r3.x * r8.x;
  r3.x = r3.x * r4.w;
  r3.y = r5.y * r4.w;
  r3.xyz = r1.yzw * r3.yyy + r3.xxx;
  r3.xyz = r3.xyz * r2.xyz;
  r0.z = r6.z * r0.z + gLightNaturalAmbient0.w;
  r0.z = gLightNaturalAmbient1.w * r0.z;
  r0.z = max(0, r0.z);
  r8.xzw = gLightArtificialExtAmbient0.xyz * r0.zzz + gLightArtificialExtAmbient1.xyz;
  r0.w = r0.w ? 0 : 1;
  r11.yzw = gLightArtificialIntAmbient0.xyz * r0.zzz + gLightArtificialIntAmbient1.xyz;
  r11.yzw = r11.yzw * r1.xxx;
  r8.xzw = r8.xzw * r0.www + r11.yzw;
  r8.xzw = r8.xzw * r0.yyy;
  r11.yzw = gLightNaturalAmbient0.xyz * r0.zzz + gLightNaturalAmbient1.xyz;
  r12.x = gLightArtificialIntAmbient1.w;
  r12.y = gLightArtificialExtAmbient0.w;
  r12.z = gLightArtificialExtAmbient1.w;
  r0.z = saturate(dot(r12.xyz, r7.xyz));
  r11.yzw = gDirectionalAmbientColour.xyz * r0.zzz + r11.yzw;
  r8.xzw = r11.yzw * r0.xxx + r8.xzw;
  r8.xzw = r8.xzw * r5.yyy;
  r8.xzw = r8.xzw * r1.yzw;
  r3.xyz = r3.xyz * r5.www + r8.xzw;
  r0.z = 1 + -r5.y;
  r0.w = dot(r9.xyz, r7.xyz);
  r0.w = r0.w + r0.w;
  r5.yzw = r7.xyz * -r0.www + r9.xyz;
  r6.zw = saturate(float2(0.00066666666,0.00177619897) * r8.yy);
  r0.w = 1 + -r6.z;
  r1.x = -5 + gReflectionMipCount;
  r4.w = gReflectionMipCount * r0.w;
  r4.w = r4.w < r1.x;
  r6.z = r0.w * gReflectionMipCount + -5;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * 5 + r1.x;
  r0.w = r4.w ? r6.z : r0.w;
  r7.xyz = float3(-0.25,0.5,0.25) * r5.yzy;
  r1.x = 1 + abs(r5.w);
  r7.xyz = r7.xyz / r1.xxx;
  r7.xyz = float3(0.75,0.5,0.25) + -r7.xyz;
  r1.x = 0 < r5.w;
  r5.yz = r1.xx ? r7.xy : r7.zy;
  r7.xyzw = ReflectionSampler.SampleLevel(ReflectionSampler_s, r5.yz, r0.w).xyzw;
  r0.w = r6.x * r6.x;
  r5.yzw = r7.xyz * r0.www;
  r5.yzw = r2.www ? r5.yzw : r7.xyz;
  r0.x = max(r0.x, r0.y);
  r0.xyw = r5.yzw * r0.xxx;
  r5.yzw = r0.xyw * r6.www;
  r5.yzw = float3(0.681690097,0.681690097,0.681690097) * r5.yzw;
  r0.xyw = r0.xyw * float3(0.318309903,0.318309903,0.318309903) + r5.yzw;
  r0.xyz = r0.xyw * r0.zzz + r3.xyz;
  r0.w = r11.x * r3.w;
  r0.xyz = r1.yzw * r0.www + r0.xyz;
  r3.xyz = -deferredLightParams[9].xxx * r10.xyz + r4.xyz;
  r3.xyz = -gViewInverse._m30_m31_m32 + r3.xyz;
  r4.xyz = gCSMShaderVars_shared[1].xyz * r3.yyy;
  r3.xyw = r3.xxx * gCSMShaderVars_shared[0].xyz + r4.xyz;
  r3.xyz = r3.zzz * gCSMShaderVars_shared[2].xyz + r3.xyw;
  r4.xyz = r3.xyz * gCSMShaderVars_shared[4].xyz + gCSMShaderVars_shared[8].xyz;
  x0[0].xyz = r4.xyz;
  r5.yzw = r3.xyz * gCSMShaderVars_shared[5].xyz + gCSMShaderVars_shared[9].xyz;
  x0[1].xyz = r5.yzw;
  r7.xyz = r3.xyz * gCSMShaderVars_shared[6].xyz + gCSMShaderVars_shared[10].xyz;
  x0[2].xyz = r7.xyz;
  r3.xyz = r3.xyz * gCSMShaderVars_shared[7].xyz + gCSMShaderVars_shared[11].xyz;
  x0[3].xyz = r3.xyz;
  r0.w = -gCSMResolution.z * 1.5 + 1;
  r0.w = 0.5 * r0.w;
  r1.x = max(abs(r7.x), abs(r7.y));
  r1.x = r1.x < r0.w;
  r1.x = r1.x ? 2 : 3;
  r3.x = max(abs(r5.y), abs(r5.z));
  r3.x = r3.x < r0.w;
  r1.x = r3.x ? 1 : r1.x;
  r3.x = max(abs(r4.x), abs(r4.y));
  r0.w = r3.x < r0.w;
  r0.w = r0.w ? 0 : r1.x;
  r3.xyz = x0[r0.w+0].xyz;
  r0.w = (int)r0.w;
  r1.x = 0.5 + r0.w;
  r1.x = 0.25 * r1.x;
  r4.xyzw = float4(0,1,2,3) == r0.wwww;
  r4.xyzw = r4.xyzw ? 1.000000 : 0;
  r0.w = dot(r4.xyzw, gCSMDepthBias.xyzw);
  r3.x = 0.5 + r3.x;
  r1.x = r3.y * 0.25 + r1.x;
  r3.y = r3.z + -r0.w;
  r5.yz = ddx(r1.xx);
  r7.xz = ddx(r3.xy);
  r9.xz = ddy(r1.xx);
  r9.yw = ddy(r3.xy);
  if (r5.x != 0) {
    r3.w = deferredLightParams[9].y * deferredLightParams[9].y;
    r3.w = r6.x * r3.w;
    r4.x = dot(r4.xyzw, gCSMDepthSlopeBias.xyzw);
    r0.w = r0.w != 0.000000;
    r4.yz = r9.yw * r5.yz;
    r5.xy = r7.xz * r9.xz + -r4.yz;
    r4.y = 1 / r5.x;
    r4.z = r9.y * r7.z;
    r5.z = r7.x * r9.w + -r4.z;
    r4.yz = r5.yz * r4.yy;
    r4.yz = max(float2(0,0), r4.yz);
    r4.yz = min(float2(0.5,0.5), r4.yz);
    r3.y = -r4.x * r4.y + r3.y;
    r3.y = -r4.x * r4.z + r3.y;
    r0.w = r0.w ? r3.y : r3.z;
    r1.x = gCSMResolution.y * r1.x;
    r3.x = gCSMResolution.x * r3.x;
    r3.y = 4 * r1.x;
    r3.xy = (int2)r3.xy;
    r4.xy = (int2)r3.xy + int2(-1,0);
    r4.zw = float2(0,0);
    r4.xyzw = gCSMShadowTexture.Load(r4.xyz).xyzw;
    r5.xy = (int2)r3.xy + int2(1,0);
    r5.zw = float2(0,0);
    r5.xyzw = gCSMShadowTexture.Load(r5.xyz).xyzw;
    r7.xy = (int2)r3.xy + int2(0,-1);
    r7.zw = float2(0,0);
    r7.xyzw = gCSMShadowTexture.Load(r7.xyz).xyzw;
    r9.xy = (int2)r3.xy + int2(0,1);
    r9.zw = float2(0,0);
    r9.xyzw = gCSMShadowTexture.Load(r9.xyz).xyzw;
    r4.y = r5.x;
    r4.z = r7.x;
    r4.w = r9.x;
    r1.x = dot(float4(0.25,0.25,0.25,0.25), r4.xyzw);
    r0.w = -r1.x + r0.w;
    r0.w = deferredLightParams[10].x + abs(r0.w);
    r0.w = r3.w * r0.w;
    r1.x = dot(r10.xyz, -deferredLightParams[1].xyz);
    r1.x = deferredLightParams[9].z + -r1.x;
    r1.x = max(0, r1.x);
    r0.w = -r0.w * r0.w;
    r0.w = 1.44269502 * r0.w;
    r0.w = exp2(r0.w);
    r3.xyz = r8.xzw * deferredLightParams[9].www + r0.www;
    r3.xyz = r3.xyz * r1.xxx;
    r2.xyz = r3.xyz * r2.xyz;
    r0.xyz = r2.xyz * r1.yzw + r0.xyz;
  }
  o0.w = r2.w ? r6.y : 0;
  o0.xyz = globalScalars3.zzz * r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer lighting_globals
// {
//
//   float4 gDirectionalLight;          // Offset:    0 Size:    16 [unused]
//   float4 gDirectionalColour;         // Offset:   16 Size:    16 [unused]
//   int gNumForwardLights;             // Offset:   32 Size:     4 [unused]
//   float4 gLightPositionAndInvDistSqr[8];// Offset:   48 Size:   128 [unused]
//   float4 gLightDirectionAndFalloffExponent[8];// Offset:  176 Size:   128 [unused]
//   float4 gLightColourAndCapsuleExtent[8];// Offset:  304 Size:   128 [unused]
//   float gLightConeScale[8];          // Offset:  432 Size:   116 [unused]
//   float gLightConeOffset[8];         // Offset:  560 Size:   116 [unused]
//   float4 gLightNaturalAmbient0;      // Offset:  688 Size:    16
//   float4 gLightNaturalAmbient1;      // Offset:  704 Size:    16
//   float4 gLightArtificialIntAmbient0;// Offset:  720 Size:    16
//   float4 gLightArtificialIntAmbient1;// Offset:  736 Size:    16
//   float4 gLightArtificialExtAmbient0;// Offset:  752 Size:    16
//   float4 gLightArtificialExtAmbient1;// Offset:  768 Size:    16
//   float4 gDirectionalAmbientColour;  // Offset:  784 Size:    16
//   float4 globalFogParams[5];         // Offset:  800 Size:    80 [unused]
//   float4 globalFogColor;             // Offset:  880 Size:    16 [unused]
//   float4 globalFogColorE;            // Offset:  896 Size:    16 [unused]
//   float4 globalFogColorN;            // Offset:  912 Size:    16 [unused]
//   float4 globalFogColorMoon;         // Offset:  928 Size:    16 [unused]
//   float4 gReflectionTweaks;          // Offset:  944 Size:    16 [unused]
//
// }
//
// cbuffer more_stuff
// {
//
//   float4 gEntitySelectColor[2];      // Offset:    0 Size:    32 [unused]
//   float4 gAmbientOcclusionEffect;    // Offset:   32 Size:    16 [unused]
//   float4 gDynamicBakesAndWetness;    // Offset:   48 Size:    16 [unused]
//   float4 gAlphaRefVec0;              // Offset:   64 Size:    16 [unused]
//   float4 gAlphaRefVec1;              // Offset:   80 Size:    16 [unused]
//   float gAlphaTestRef;               // Offset:   96 Size:     4 [unused]
//   bool gTreesUseDiscard;             // Offset:  100 Size:     4 [unused]
//   float gReflectionMipCount;         // Offset:  104 Size:     4
//   float gTransparencyAASamples;      // Offset:  108 Size:     4 [unused]
//   bool gUseFogRay;                   // Offset:  112 Size:     4 [unused]
//
// }
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ReflectionSampler                 sampler      NA          NA    1        1
// gDeferredLightSampler2            sampler      NA          NA    4        1
// GBufferTextureSampler0Global      sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler2Global      sampler      NA          NA    9        1
// GBufferTextureSampler3Global      sampler      NA          NA   10        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// ReflectionSampler                 texture  float4          2d    1        1
// gDeferredLightSampler2            texture  float4          2d    4        1
// GBufferTextureSampler0Global      texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler2Global      texture  float4          2d    9        1
// GBufferTextureSampler3Global      texture  float4          2d   10        1
// gbufferStencilTextureGlobal       texture   uint2          2d   11        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// lighting_globals                  cbuffer      NA          NA    3        1
// more_stuff                        cbuffer      NA          NA    5        1
// csmshader                         cbuffer      NA          NA    6        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy w
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb3[50], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb6[15], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s4, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (uint,uint,uint,uint) t11
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xyw
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 13
dcl_indexableTemp x0[4], 4
div r0.xy, v1.xyxx, v1.wwww
sample r1.xyzw, r0.xyxx, t12.xyzw, s12
add r0.z, -r1.x, cb13[17].w
mul r1.xy, r0.xyxx, cb2[15].xyxx
ftoi r1.xy, r1.xyxx
mov r1.zw, l(0,0,0,0)
ld r1.xyzw, r1.xyzw, t11.xyzw
and r0.w, r1.y, l(8)
utof r0.w, r0.w
ge r0.w, r0.w, l(7.900000)
and r1.x, r0.w, l(0x3f800000)
sample r2.xyzw, r0.xyxx, t7.xyzw, s7
mul r1.yzw, r2.xxyz, r2.xxyz
add r0.z, r0.z, l(1.000000)
div r0.z, cb13[17].z, r0.z
div r3.xyz, v2.xyzx, v2.wwww
ne r2.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r3.w, v2.w, l(1.000000)
and r2.w, r2.w, r3.w
if_nz r2.w
  ld r4.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r2.w, r0.z, -r4.y
  mul r2.w, r2.w, r4.x
  mul r2.w, r2.w, cb13[17].x
  mad r4.xyz, -cb1[12].xyzx, r2.wwww, cb1[15].xyzx
else 
  ld r5.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r4.xyz, r5.xyzx, cb1[15].xyzx
endif 
mad r4.xyz, r3.xyzx, r0.zzzz, r4.xyzx
sample r5.xyzw, r0.xyxx, t9.xyzw, s9
mul r5.xy, r5.xyxx, r5.xyxx
sample r6.xyzw, r0.xyxx, t8.xyzw, s8
mad r6.xyz, r6.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r7.xyz, r0.zzzz, r6.xyzx
eq r2.w, r6.w, l(1.000000)
sample r8.xyzw, r0.xyxx, t10.xyzw, s10
sample r9.xyzw, r0.xyxx, t4.xyzw, s4
mul r0.xy, r8.xyxx, r9.xxxx
mul r0.xy, r0.xyxx, r0.xyxx
add r0.xy, r0.xyxx, r0.xyxx
mul r3.w, r8.z, l(16.000000)
lt r4.w, l(0.500000), r8.w
add r6.x, r8.w, l(-0.500000)
movc r6.x, r4.w, r6.x, r8.w
add_sat r6.x, r6.x, r6.x
not r6.y, r2.w
min r8.x, r5.x, l(1.000000)
mul r0.xy, r0.xyxx, r0.xyxx
mad r5.x, r5.y, l(512.000000), l(-500.000000)
max r5.x, r5.x, l(0.000000)
mad r5.y, r5.y, l(512.000000), -r5.x
mul r5.x, r5.x, l(558.000000)
mad r8.y, r5.y, l(3.000000), r5.x
dp3 r5.x, r3.xyzx, r3.xyzx
rsq r5.x, r5.x
mul r9.xyz, r3.xyzx, r5.xxxx
mad r3.xyz, -r3.xyzx, r5.xxxx, -cb13[1].xyzx
dp3 r5.x, r3.xyzx, r3.xyzx
rsq r5.x, r5.x
mul r3.xyz, r3.xyzx, r5.xxxx
lt r5.x, l(0.000000), r6.x
and r5.x, r5.x, r6.y
dp3 r5.y, r7.xyzx, -cb13[1].xyzx
lt r5.y, r5.y, l(0.000000)
movc r5.y, r5.y, l(-1.000000), l(1.000000)
mul r10.xyz, r5.yyyy, r7.xyzx
movc r10.w, r5.x, l(1.000000), r5.y
mov r7.w, l(1.000000)
movc r10.xyzw, r2.wwww, r7.xyzw, r10.xyzw
not r5.y, r5.x
and r5.y, r6.y, r5.y
lt r6.y, r10.w, l(0.000000)
and r5.y, r5.y, r6.y
movc r6.yw, r4.wwww, l(0,0,0,0.500000), l(0,1.000000,0,0.250000)
mad r2.xyz, -r2.xyzx, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
mad r2.xyz, r6.wwww, r2.xyzx, r1.yzwy
mul r2.xyz, r2.xyzx, cb13[3].xyzx
mul r11.xyz, r10.xyzx, r10.wwww
movc r10.xyz, r5.yyyy, r11.xyzx, r10.xyzx
movc r2.xyz, r5.yyyy, r2.xyzx, cb13[3].xyzx
mul r8.zw, r5.wwww, r8.xxxy
movc r8.xz, r5.xxxx, r8.zzwz, r8.xxyx
mul r10.xyz, r10.wwww, r10.xyzx
dp3_sat r4.w, r10.xyzx, -cb13[1].xyzx
mul r10.xyz, r10.wwww, r10.xyzx
dp3_sat r11.x, -r9.xyzx, r10.xyzx
dp3_sat r11.y, r3.xyzx, -cb13[1].xyzx
add r11.yz, -r11.xxyx, l(0.000000, 1.000000, 1.000000, 0.000000)
mul r12.xy, r11.yzyy, r11.yzyy
mul r12.xy, r12.xyxx, r12.xyxx
mul r11.yz, r11.yyzy, r12.xxyx
add r5.y, -r5.z, l(1.000000)
mad r5.yz, r5.zzzz, r11.yyzy, r5.yyyy
add r8.zw, r8.zzzz, l(0.000000, 0.000000, 2.000000, 0.000000)
mul r6.w, r8.z, l(0.125000)
mad r5.y, -r8.x, r5.y, l(1.000000)
dp3 r3.x, r10.xyzx, r3.xyzx
add_sat r3.x, r3.x, l(0.000000)
log r3.x, r3.x
mul r3.x, r3.x, r8.w
exp r3.x, r3.x
mul r3.x, r5.z, r3.x
mul r3.x, r6.w, r3.x
mul r3.x, r8.x, r3.x
mul r3.x, r4.w, r3.x
mul r3.y, r4.w, r5.y
mad r3.xyz, r1.yzwy, r3.yyyy, r3.xxxx
mul r3.xyz, r2.xyzx, r3.xyzx
mad r0.z, r6.z, r0.z, cb3[43].w
mul r0.z, r0.z, cb3[44].w
max r0.z, r0.z, l(0.000000)
mad r8.xzw, cb3[47].xxyz, r0.zzzz, cb3[48].xxyz
movc r0.w, r0.w, l(0), l(1.000000)
mad r11.yzw, cb3[45].xxyz, r0.zzzz, cb3[46].xxyz
mul r11.yzw, r1.xxxx, r11.yyzw
mad r8.xzw, r8.xxzw, r0.wwww, r11.yyzw
mul r8.xzw, r0.yyyy, r8.xxzw
mad r11.yzw, cb3[43].xxyz, r0.zzzz, cb3[44].xxyz
mov r12.x, cb3[46].w
mov r12.y, cb3[47].w
mov r12.z, cb3[48].w
dp3_sat r0.z, r12.xyzx, r7.xyzx
mad r11.yzw, cb3[49].xxyz, r0.zzzz, r11.yyzw
mad r8.xzw, r11.yyzw, r0.xxxx, r8.xxzw
mul r8.xzw, r5.yyyy, r8.xxzw
mul r8.xzw, r1.yyzw, r8.xxzw
mad r3.xyz, r3.xyzx, r5.wwww, r8.xzwx
add r0.z, -r5.y, l(1.000000)
dp3 r0.w, r9.xyzx, r7.xyzx
add r0.w, r0.w, r0.w
mad r5.yzw, r7.xxyz, -r0.wwww, r9.xxyz
mul_sat r6.zw, r8.yyyy, l(0.000000, 0.000000, 0.000667, 0.001776)
add r0.w, -r6.z, l(1.000000)
add r1.x, cb5[6].z, l(-5.000000)
mul r4.w, r0.w, cb5[6].z
lt r4.w, r4.w, r1.x
mad r6.z, r0.w, cb5[6].z, l(-5.000000)
mul r0.w, r0.w, r0.w
mad r0.w, r0.w, l(5.000000), r1.x
movc r0.w, r4.w, r6.z, r0.w
mul r7.xyz, r5.yzyy, l(-0.250000, 0.500000, 0.250000, 0.000000)
add r1.x, |r5.w|, l(1.000000)
div r7.xyz, r7.xyzx, r1.xxxx
add r7.xyz, -r7.xyzx, l(0.750000, 0.500000, 0.250000, 0.000000)
lt r1.x, l(0.000000), r5.w
movc r5.yz, r1.xxxx, r7.xxyx, r7.zzyz
sample_l r7.xyzw, r5.yzyy, t1.xyzw, s1, r0.w
mul r0.w, r6.x, r6.x
mul r5.yzw, r0.wwww, r7.xxyz
movc r5.yzw, r2.wwww, r5.yyzw, r7.xxyz
max r0.x, r0.y, r0.x
mul r0.xyw, r0.xxxx, r5.yzyw
mul r5.yzw, r6.wwww, r0.xxyw
mul r5.yzw, r5.yyzw, l(0.000000, 0.681690, 0.681690, 0.681690)
mad r0.xyw, r0.xyxw, l(0.318310, 0.318310, 0.000000, 0.318310), r5.yzyw
mad r0.xyz, r0.xywx, r0.zzzz, r3.xyzx
mul r0.w, r3.w, r11.x
mad r0.xyz, r1.yzwy, r0.wwww, r0.xyzx
mad r3.xyz, -cb13[9].xxxx, r10.xyzx, r4.xyzx
add r3.xyz, r3.xyzx, -cb1[15].xyzx
mul r4.xyz, r3.yyyy, cb6[1].xyzx
mad r3.xyw, r3.xxxx, cb6[0].xyxz, r4.xyxz
mad r3.xyz, r3.zzzz, cb6[2].xyzx, r3.xywx
mad r4.xyz, r3.xyzx, cb6[4].xyzx, cb6[8].xyzx
mov x0[0].xyz, r4.xyzx
mad r5.yzw, r3.xxyz, cb6[5].xxyz, cb6[9].xxyz
mov x0[1].xyz, r5.yzwy
mad r7.xyz, r3.xyzx, cb6[6].xyzx, cb6[10].xyzx
mov x0[2].xyz, r7.xyzx
mad r3.xyz, r3.xyzx, cb6[7].xyzx, cb6[11].xyzx
mov x0[3].xyz, r3.xyzx
mad r0.w, -cb6[14].z, l(1.500000), l(1.000000)
mul r0.w, r0.w, l(0.500000)
max r1.x, |r7.y|, |r7.x|
lt r1.x, r1.x, r0.w
movc r1.x, r1.x, l(2), l(3)
max r3.x, |r5.z|, |r5.y|
lt r3.x, r3.x, r0.w
movc r1.x, r3.x, l(1), r1.x
max r3.x, |r4.y|, |r4.x|
lt r0.w, r3.x, r0.w
movc r0.w, r0.w, l(0), r1.x
mov r3.xyz, x0[r0.w + 0].xyzx
itof r0.w, r0.w
add r1.x, r0.w, l(0.500000)
mul r1.x, r1.x, l(0.250000)
eq r4.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000), r0.wwww
and r4.xyzw, r4.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
dp4 r0.w, r4.xyzw, cb6[12].xyzw
add r3.x, r3.x, l(0.500000)
mad r1.x, r3.y, l(0.250000), r1.x
add r3.y, -r0.w, r3.z
deriv_rtx r5.yz, r1.xxxx
deriv_rtx r7.xz, r3.xxyx
deriv_rty r9.xz, r1.xxxx
deriv_rty r9.yw, r3.xxxy
if_nz r5.x
  mul r3.w, cb13[9].y, cb13[9].y
  mul r3.w, r3.w, r6.x
  dp4 r4.x, r4.xyzw, cb6[13].xyzw
  ne r0.w, r0.w, l(0.000000)
  mul r4.yz, r5.yyzy, r9.yywy
  mad r5.xy, r7.xzxx, r9.xzxx, -r4.yzyy
  div r4.y, l(1.000000, 1.000000, 1.000000, 1.000000), r5.x
  mul r4.z, r7.z, r9.y
  mad r5.z, r7.x, r9.w, -r4.z
  mul r4.yz, r4.yyyy, r5.yyzy
  max r4.yz, r4.yyzy, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r4.yz, r4.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
  mad r3.y, -r4.x, r4.y, r3.y
  mad r3.y, -r4.x, r4.z, r3.y
  movc r0.w, r0.w, r3.y, r3.z
  mul r1.x, r1.x, cb6[14].y
  mul r3.x, r3.x, cb6[14].x
  mul r3.y, r1.x, l(4.000000)
  ftoi r3.xy, r3.xyxx
  iadd r4.xy, r3.xyxx, l(-1, 0, 0, 0)
  mov r4.zw, l(0,0,0,0)
  ld r4.xyzw, r4.xyzw, t15.xyzw
  iadd r5.xy, r3.xyxx, l(1, 0, 0, 0)
  mov r5.zw, l(0,0,0,0)
  ld r5.xyzw, r5.xyzw, t15.xyzw
  iadd r7.xy, r3.xyxx, l(0, -1, 0, 0)
  mov r7.zw, l(0,0,0,0)
  ld r7.xyzw, r7.xyzw, t15.xyzw
  iadd r9.xy, r3.xyxx, l(0, 1, 0, 0)
  mov r9.zw, l(0,0,0,0)
  ld r9.xyzw, r9.xyzw, t15.xyzw
  mov r4.y, r5.x
  mov r4.z, r7.x
  mov r4.w, r9.x
  dp4 r1.x, l(0.250000, 0.250000, 0.250000, 0.250000), r4.xyzw
  add r0.w, r0.w, -r1.x
  add r0.w, |r0.w|, cb13[10].x
  mul r0.w, r0.w, r3.w
  dp3 r1.x, r10.xyzx, -cb13[1].xyzx
  add r1.x, -r1.x, cb13[9].z
  max r1.x, r1.x, l(0.000000)
  mul r0.w, r0.w, -r0.w
  mul r0.w, r0.w, l(1.442695)
  exp r0.w, r0.w
  mad r3.xyz, r8.xzwx, cb13[9].wwww, r0.wwww
  mul r3.xyz, r1.xxxx, r3.xyzx
  mul r2.xyz, r2.xyzx, r3.xyzx
  mad r0.xyz, r2.xyzx, r1.yzwy, r0.xyzx
endif 
and o0.w, r2.w, r6.y
mul o0.xyz, r0.xyzx, cb2[14].zzzz
ret 
// Approximately 252 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
