
cbuffer csmshader : register(b6)
{
  float4 gCSMShaderVars_shared[12] : packoffset(c0);
  float4 gCSMDepthBias : packoffset(c12);
  float4 gCSMDepthSlopeBias : packoffset(c13);
  float4 gCSMResolution : packoffset(c14);
  float4 gCSMShadowParams : packoffset(c15);
  row_major float4x4 gLocalLightShadowData[8] : packoffset(c16);
  float4 gShadowTexParam : packoffset(c48);
}

cbuffer cascadeshadows_rendering_locals : register(b10)
{
  row_major float4x4 viewToWorldProjectionParam : packoffset(c0);
  float4 perspectiveShearParam : packoffset(c4);
  float4 shadowParams2 : packoffset(c5);
}
SamplerState depthBufferSamp_s : register(s3);
SamplerComparisonState gCSMShadowTextureSamp_s : register(s15);
Texture2D<float4> depthBufferSamp : register(t3);
Texture2D<float4> gCSMShadowTexture : register(t15);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xy = v1.xy * float2(2,2) + float2(-1,-1);
  r0.xy = r0.xy * float2(1,-1) + perspectiveShearParam.xy;
  r0.y = viewToWorldProjectionParam._m13 * r0.y;
  r0.x = viewToWorldProjectionParam._m03 * r0.x;
  r0.yzw = viewToWorldProjectionParam._m10_m11_m12 * r0.yyy;
  r0.xyz = r0.xxx * viewToWorldProjectionParam._m00_m01_m02 + r0.yzw;
  r0.xyz = -viewToWorldProjectionParam._m20_m21_m22 + r0.xyz;
  r1.xyzw = depthBufferSamp.Sample(depthBufferSamp_s, v1.xy).xyzw;
  r0.w = 1 + viewToWorldProjectionParam._m33;
  r0.w = r0.w + -r1.x;
  r0.w = viewToWorldProjectionParam._m23 / r0.w;
  r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
  r1.y = -r1.y + r0.w;
  r1.x = r1.x * r1.y;
  r1.x = viewToWorldProjectionParam._m03 * r1.x;
  r1.xyz = -viewToWorldProjectionParam._m00_m01_m02 * r1.xxx + viewToWorldProjectionParam._m30_m31_m32;
  r0.xyz = r0.xyz * r0.www + r1.xyz;
  r0.w = saturate(r0.w * gCSMShaderVars_shared[0].w + gCSMShaderVars_shared[1].w);
  r1.xyz = gCSMShaderVars_shared[1].xyz * r0.yyy;
  r1.xyz = r0.xxx * gCSMShaderVars_shared[0].xyz + r1.xyz;
  r0.xyz = r0.zzz * gCSMShaderVars_shared[2].xyz + r1.xyz;
  r0.xyz = r0.xyz * gCSMShaderVars_shared[7].xyz + gCSMShaderVars_shared[11].xyz;
  r1.xyz = r0.xyz * float3(1,0.25,1) + float3(0.5,0.875,0);
  r2.xy = float2(0.5,3.5) + r0.xy;
  r0.x = max(abs(r0.x), abs(r0.y));
  r0.x = -0.449999988 + r0.x;
  r0.x = saturate(15 * r0.x);
  r3.x = gCSMResolution.x * r2.x;
  r0.y = 0.25 * r2.y;
  r2.xy = float2(4,0.25) * gCSMResolution.yw;
  r3.y = r2.x * r0.y;
  r0.yz = float2(0.5,0.5) + r3.xy;
  r0.yz = frac(r0.yz);
  r2.xz = float2(3,3) * r0.yz;
  r3.xy = r2.xz * r0.yz + r2.xz;
  r3.xy = float2(1,1) + r3.xy;
  r3.zw = r2.xz * r0.yz;
  r4.xz = -r3.wz * r0.zy + r3.yx;
  r5.z = r4.x;
  r3.xy = -r0.yz * float2(3,3) + float2(1,1);
  r2.xz = r2.xz * r0.yz + r3.xy;
  r3.xy = r0.yz * r0.yz;
  r4.xy = -r3.xy * r0.yz + r2.xz;
  r5.x = r4.y;
  r2.xz = -r3.xy * float2(6,6) + float2(4,4);
  r3.xy = r3.xy * r0.yz;
  r2.xz = r3.zw * r0.yz + r2.xz;
  r5.y = r2.z;
  r4.y = r2.x;
  r5.w = r3.y;
  r4.w = r3.x;
  r3.xyzw = float4(0.166666672,0.166666672,0.166666672,0.166666672) * r4.xyzw;
  r4.xyzw = float4(0.166666672,0.166666672,0.166666672,0.166666672) * r5.xyzw;
  r2.xz = r4.xz + r4.yw;
  r4.xy = r4.yw / r2.xz;
  r4.xy = r4.xy + -r0.zz;
  r4.xy = float2(-1,1) + r4.xy;
  r5.y = r4.y * r2.y;
  r3.xz = r3.xz + r3.yw;
  r3.yw = r3.yw / r3.xz;
  r0.yz = r3.yw + -r0.yy;
  r0.yz = float2(-1,1) + r0.yz;
  r5.x = gCSMResolution.z * r0.z;
  r5.z = 0;
  r5.xyz = r5.xyz + r1.xyz;
  r1.w = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r5.xy, r5.z).x;
  r1.w = r3.z * r1.w;
  r5.y = r4.y * r2.y;
  r5.x = gCSMResolution.z * r0.y;
  r5.z = 0;
  r4.yzw = r5.xyz + r1.xyz;
  r2.w = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r4.yz, r4.w).x;
  r1.w = r3.x * r2.w + r1.w;
  r1.w = r2.z * r1.w;
  r5.y = r4.x * r2.y;
  r4.y = r4.x * r2.y;
  r5.x = gCSMResolution.z * r0.z;
  r4.x = gCSMResolution.z * r0.y;
  r5.z = 0;
  r2.yzw = r5.xyz + r1.xyz;
  r0.y = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r2.yz, r2.w).x;
  r0.y = r3.z * r0.y;
  r4.z = 0;
  r1.xyz = r4.xyz + r1.xyz;
  r0.z = gCSMShadowTexture.SampleCmpLevelZero(gCSMShadowTextureSamp_s, r1.xy, r1.z).x;
  r0.y = r3.x * r0.z + r0.y;
  r0.y = r2.x * r0.y + r1.w;
  r0.y = r0.y + r0.w;
  o0.xyzw = r0.yyyy + r0.xxxx;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16 [unused]
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16 [unused]
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer cascadeshadows_rendering_locals
// {
//
//   row_major float4x4 viewToWorldProjectionParam;// Offset:    0 Size:    64
//   float4 perspectiveShearParam;      // Offset:   64 Size:    16
//   float4 shadowParams2;              // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// depthBufferSamp                   sampler      NA          NA    3        1
// gCSMShadowTextureSamp           sampler_c      NA          NA   15        1
// depthBufferSamp                   texture  float4          2d    3        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// csmshader                         cbuffer      NA          NA    6        1
// cascadeshadows_rendering_locals    cbuffer      NA          NA   10        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyz         2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb6[15], immediateIndexed
dcl_constantbuffer cb10[5], immediateIndexed
dcl_sampler s3, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), cb10[4].xyxx
mul r0.y, r0.y, cb10[1].w
mul r0.x, r0.x, cb10[0].w
mul r0.yzw, r0.yyyy, cb10[1].xxyz
mad r0.xyz, r0.xxxx, cb10[0].xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb10[2].xyzx
sample r1.xyzw, v1.xyxx, t3.xyzw, s3
add r0.w, cb10[3].w, l(1.000000)
add r0.w, -r1.x, r0.w
div r0.w, cb10[2].w, r0.w
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.y, r0.w, -r1.y
mul r1.x, r1.y, r1.x
mul r1.x, r1.x, cb10[0].w
mad r1.xyz, -cb10[0].xyzx, r1.xxxx, cb10[3].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r1.xyzx
mad_sat r0.w, r0.w, cb6[0].w, cb6[1].w
mul r1.xyz, r0.yyyy, cb6[1].xyzx
mad r1.xyz, r0.xxxx, cb6[0].xyzx, r1.xyzx
mad r0.xyz, r0.zzzz, cb6[2].xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, cb6[7].xyzx, cb6[11].xyzx
mad r1.xyz, r0.xyzx, l(1.000000, 0.250000, 1.000000, 0.000000), l(0.500000, 0.875000, 0.000000, 0.000000)
add r2.xy, r0.xyxx, l(0.500000, 3.500000, 0.000000, 0.000000)
max r0.x, |r0.y|, |r0.x|
add r0.x, r0.x, l(-0.450000)
mul_sat r0.x, r0.x, l(15.000000)
mul r3.x, r2.x, cb6[14].x
mul r0.y, r2.y, l(0.250000)
mul r2.xy, cb6[14].ywyy, l(4.000000, 0.250000, 0.000000, 0.000000)
mul r3.y, r0.y, r2.x
add r0.yz, r3.xxyx, l(0.000000, 0.500000, 0.500000, 0.000000)
frc r0.yz, r0.yyzy
mul r2.xz, r0.yyzy, l(3.000000, 0.000000, 3.000000, 0.000000)
mad r3.xy, r2.xzxx, r0.yzyy, r2.xzxx
add r3.xy, r3.xyxx, l(1.000000, 1.000000, 0.000000, 0.000000)
mul r3.zw, r0.yyyz, r2.xxxz
mad r4.xz, -r3.wwzw, r0.zzyz, r3.yyxy
mov r5.z, r4.x
mad r3.xy, -r0.yzyy, l(3.000000, 3.000000, 0.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
mad r2.xz, r2.xxzx, r0.yyzy, r3.xxyx
mul r3.xy, r0.yzyy, r0.yzyy
mad r4.xy, -r3.xyxx, r0.yzyy, r2.xzxx
mov r5.x, r4.y
mad r2.xz, -r3.xxyx, l(6.000000, 0.000000, 6.000000, 0.000000), l(4.000000, 0.000000, 4.000000, 0.000000)
mul r3.xy, r0.yzyy, r3.xyxx
mad r2.xz, r3.zzwz, r0.yyzy, r2.xxzx
mov r5.y, r2.z
mov r4.y, r2.x
mov r5.w, r3.y
mov r4.w, r3.x
mul r3.xyzw, r4.xyzw, l(0.166667, 0.166667, 0.166667, 0.166667)
mul r4.xyzw, r5.xyzw, l(0.166667, 0.166667, 0.166667, 0.166667)
add r2.xz, r4.yywy, r4.xxzx
div r4.xy, r4.ywyy, r2.xzxx
add r4.xy, -r0.zzzz, r4.xyxx
add r4.xy, r4.xyxx, l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r5.y, r2.y, r4.y
add r3.xz, r3.yywy, r3.xxzx
div r3.yw, r3.yyyw, r3.xxxz
add r0.yz, -r0.yyyy, r3.yywy
add r0.yz, r0.yyzy, l(0.000000, -1.000000, 1.000000, 0.000000)
mul r5.x, r0.z, cb6[14].z
mov r5.z, l(0)
add r5.xyz, r1.xyzx, r5.xyzx
sample_c_lz r1.w, r5.xyxx, t15.xxxx, s15, r5.z
mul r1.w, r1.w, r3.z
mul r5.y, r2.y, r4.y
mul r5.x, r0.y, cb6[14].z
mov r5.z, l(0)
add r4.yzw, r1.xxyz, r5.xxyz
sample_c_lz r2.w, r4.yzyy, t15.xxxx, s15, r4.w
mad r1.w, r3.x, r2.w, r1.w
mul r1.w, r1.w, r2.z
mul r5.y, r2.y, r4.x
mul r4.y, r2.y, r4.x
mul r5.x, r0.z, cb6[14].z
mul r4.x, r0.y, cb6[14].z
mov r5.z, l(0)
add r2.yzw, r1.xxyz, r5.xxyz
sample_c_lz r0.y, r2.yzyy, t15.xxxx, s15, r2.w
mul r0.y, r0.y, r3.z
mov r4.z, l(0)
add r1.xyz, r1.xyzx, r4.xyzx
sample_c_lz r0.z, r1.xyxx, t15.xxxx, s15, r1.z
mad r0.y, r3.x, r0.z, r0.y
mad r0.y, r2.x, r0.y, r1.w
add r0.y, r0.w, r0.y
add o0.xyzw, r0.xxxx, r0.yyyy
ret 
// Approximately 90 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:35:12 2015
//
//
// Buffer Definitions: 
//
// cbuffer csmshader
// {
//
//   float4 gCSMShaderVars_shared[12];  // Offset:    0 Size:   192
//   float4 gCSMDepthBias;              // Offset:  192 Size:    16 [unused]
//   float4 gCSMDepthSlopeBias;         // Offset:  208 Size:    16 [unused]
//   float4 gCSMResolution;             // Offset:  224 Size:    16
//   float4 gCSMShadowParams;           // Offset:  240 Size:    16 [unused]
//   row_major float4x4 gLocalLightShadowData[8];// Offset:  256 Size:   512 [unused]
//   float4 gShadowTexParam;            // Offset:  768 Size:    16 [unused]
//
// }
//
// cbuffer cascadeshadows_rendering_locals
// {
//
//   row_major float4x4 viewToWorldProjectionParam;// Offset:    0 Size:    64
//   float4 perspectiveShearParam;      // Offset:   64 Size:    16
//   float4 shadowParams2;              // Offset:   80 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// depthBufferSamp_s                 sampler      NA          NA    3        1
// gCSMShadowTextureSamp_s         sampler_c      NA          NA   15        1
// depthBufferSamp                   texture  float4          2d    3        1
// gCSMShadowTexture                 texture  float4          2d   15        1
// StereoParmsTexture                texture  float4          2d   20        1
// csmshader                         cbuffer      NA          NA    6        1
// cascadeshadows_rendering_locals    cbuffer      NA          NA   10        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float       
// TEXCOORD                 2   xyz         3     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb6[15], immediateIndexed
dcl_constantbuffer cb10[5], immediateIndexed
dcl_sampler s3, mode_default
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t15
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
mad r0.xy, v1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mad r0.xy, r0.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000), cb10[4].xyxx
mul r0.y, r0.y, cb10[1].w
mul r0.x, r0.x, cb10[0].w
mul r0.yzw, r0.yyyy, cb10[1].xxyz
mad r0.xyz, r0.xxxx, cb10[0].xyzx, r0.yzwy
add r0.xyz, r0.xyzx, -cb10[2].xyzx
sample r1.xyzw, v1.xyxx, t3.xyzw, s3
add r0.w, l(1.000000), cb10[3].w
add r0.w, -r1.x, r0.w
div r0.w, cb10[2].w, r0.w
ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
add r1.y, r0.w, -r1.y
mul r1.x, r1.y, r1.x
mul r1.x, r1.x, cb10[0].w
mad r1.xyz, -cb10[0].xyzx, r1.xxxx, cb10[3].xyzx
mad r0.xyz, r0.xyzx, r0.wwww, r1.xyzx
mad_sat r0.w, r0.w, cb6[0].w, cb6[1].w
mul r1.xyz, r0.yyyy, cb6[1].xyzx
mad r1.xyz, r0.xxxx, cb6[0].xyzx, r1.xyzx
mad r0.xyz, r0.zzzz, cb6[2].xyzx, r1.xyzx
mad r0.xyz, r0.xyzx, cb6[7].xyzx, cb6[11].xyzx
add r1.xy, r0.xyxx, l(0.500000, 3.500000, 0.000000, 0.000000)
mad r1.xy, cb6[14].xyxx, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r1.xy, r1.xyxx
mul r2.xyzw, r1.xyxy, l(3.000000, 3.000000, -3.000000, -3.000000)
mad r3.xyzw, r2.xyxy, r1.xyxy, r2.xyzw
mul r1.zw, r1.xxxy, r2.xxxy
add r2.xyzw, r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
mad r3.xz, -r1.wwzw, r1.yyxy, r2.yyxy
mov r4.z, r3.x
mul r2.xy, r1.xyxx, r1.xyxx
mad r3.xy, -r2.xyxx, r1.xyxx, r2.zwzz
mov r4.x, r3.y
mad r2.zw, r2.xxxy, l(0.000000, 0.000000, -6.000000, -6.000000), l(0.000000, 0.000000, 4.000000, 4.000000)
mul r2.xy, r1.xyxx, r2.xyxx
mad r1.zw, r1.zzzw, r1.xxxy, r2.zzzw
mov r4.y, r1.w
mov r3.y, r1.z
mov r4.w, r2.y
mov r3.w, r2.x
mul r2.xyzw, r3.xyzw, l(0.166667, 0.166667, 0.166667, 0.166667)
mul r3.xyzw, r4.xyzw, l(0.166667, 0.166667, 0.166667, 0.166667)
add r1.zw, r3.wwwy, r3.zzzx
div r3.xy, r3.wyww, r1.zwzz
add r3.xy, -r1.yyyy, r3.xyxx
add r3.xy, r3.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mul r1.y, l(0.250000), cb6[14].w
mul r3.xy, r1.yyyy, r3.xyxx
mad r4.xyz, r0.xyzx, l(1.000000, 0.250000, 1.000000, 0.000000), l(0.500000, 0.875000, 0.000000, 0.000000)
max r0.x, |r0.y|, |r0.x|
add r0.x, r0.x, l(-0.450000)
mul_sat r0.x, r0.x, l(15.000000)
add r0.yz, r2.wwyw, r2.zzxz
div r2.xy, r2.wyww, r0.yzyy
add r1.xy, -r1.xxxx, r2.xyxx
add r1.xy, r1.xyxx, l(1.000000, -1.000000, 0.000000, 0.000000)
mul r2.xy, r1.xyxx, cb6[14].zzzz
mov r2.w, l(0)
mov r3.zw, r2.xxxw
add r5.xyz, r3.zywz, r4.xyzx
sample_c_lz r1.x, r5.xyxx, t15.xxxx, s15, r5.z
mul r1.x, r0.y, r1.x
mov r2.z, r3.x
mov r3.xz, r2.yywy
add r3.xyz, r4.xyzx, r3.xyzx
sample_c_lz r1.y, r3.xyxx, t15.xxxx, s15, r3.z
mad r1.x, r0.z, r1.y, r1.x
add r3.xyz, r4.xyzx, r2.xzwx
add r2.xyz, r4.xyzx, r2.yzwy
sample_c_lz r1.y, r2.xyxx, t15.xxxx, s15, r2.z
sample_c_lz r2.x, r3.xyxx, t15.xxxx, s15, r3.z
mul r0.y, r0.y, r2.x
mad r0.y, r0.z, r1.y, r0.y
mul r0.y, r0.y, r1.z
mad r0.y, r1.w, r1.x, r0.y
add r0.y, r0.w, r0.y
add o0.xyzw, r0.xxxx, r0.yyyy
ret 
// Approximately 79 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
