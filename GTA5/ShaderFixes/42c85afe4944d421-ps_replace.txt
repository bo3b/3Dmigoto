
cbuffer rage_matrices : register(b1)
{
  row_major float4x4 gWorld : packoffset(c0);
  row_major float4x4 gWorldView : packoffset(c4);
  row_major float4x4 gWorldViewProj : packoffset(c8);
  row_major float4x4 gViewInverse : packoffset(c12);
}

cbuffer misc_globals : register(b2)
{
  float4 globalFade : packoffset(c0);
  float globalHeightScale : packoffset(c1);
  float globalShaderQuality : packoffset(c1.y);
  float globalReuseMe00001 : packoffset(c1.z);
  float globalReuseMe00002 : packoffset(c1.w);
  float4 POMFlags : packoffset(c2);
  float4 g_Rage_Tessellation_CameraPosition : packoffset(c3);
  float4 g_Rage_Tessellation_CameraZAxis : packoffset(c4);
  float4 g_Rage_Tessellation_ScreenSpaceErrorParams : packoffset(c5);
  float4 g_Rage_Tessellation_LinearScale : packoffset(c6);
  float4 g_Rage_Tessellation_Frustum[4] : packoffset(c7);
  float4 g_Rage_Tessellation_Epsilons : packoffset(c11);
  float4 globalScalars : packoffset(c12);
  float4 globalScalars2 : packoffset(c13);
  float4 globalScalars3 : packoffset(c14);
  float4 globalScreenSize : packoffset(c15);
  uint4 gTargetAAParams : packoffset(c16);
  float4 colorize : packoffset(c17);
  float4 gGlobalParticleShadowBias : packoffset(c18);
  float gGlobalParticleDofAlphaScale : packoffset(c19);
  float gGlobalFogIntensity : packoffset(c19.y);
  float4 gPlayerLFootPos : packoffset(c20);
  float4 gPlayerRFootPos : packoffset(c21);
  float4 gStereoParams : packoffset(c22);
  float4 gStereoParams1 : packoffset(c23);
}

cbuffer more_stuff : register(b5)
{
  float4 gEntitySelectColor[2] : packoffset(c0);
  float4 gAmbientOcclusionEffect : packoffset(c2);
  float4 gDynamicBakesAndWetness : packoffset(c3);
  float4 gAlphaRefVec0 : packoffset(c4);
  float4 gAlphaRefVec1 : packoffset(c5);
  float gAlphaTestRef : packoffset(c6);
  bool gTreesUseDiscard : packoffset(c6.y);
  float gReflectionMipCount : packoffset(c6.z);
  float gTransparencyAASamples : packoffset(c6.w);
  bool gUseFogRay : packoffset(c7);
}

cbuffer lighting_locals : register(b13)
{
  float4 deferredLightParams[14] : packoffset(c0);
  float4 deferredLightVolumeParams[2] : packoffset(c14);
  float4 deferredLightScreenSize : packoffset(c16);
  float4 deferredProjectionParams : packoffset(c17);
  float3 deferredPerspectiveShearParams0 : packoffset(c18);
  float3 deferredPerspectiveShearParams1 : packoffset(c19);
  float3 deferredPerspectiveShearParams2 : packoffset(c20);
}

cbuffer puddle_locals : register(b10)
{
  float4 g_Puddle_ScaleXY_Range : packoffset(c0);
  float4 g_PuddleParams : packoffset(c1);
  float4 g_GBufferTexture3Param : packoffset(c2);
}

cbuffer ripple_locals : register(b9)
{
  float3 RippleData : packoffset(c0);
  float4 RippleScaleOffset : packoffset(c1);
}
SamplerState ReflectionSampler_s : register(s1);
SamplerState gDeferredLightSampler2_s : register(s4);
SamplerState PuddleMaskSampler_s : register(s5);
SamplerState PuddleBumpSampler_s : register(s6);
SamplerState PuddlePlayerBumpSampler_s : register(s7);
SamplerState GBufferTextureSampler1Global_s : register(s8);
SamplerState GBufferTextureSampler3Global_s : register(s10);
SamplerState GBufferTextureSamplerDepthGlobal_s : register(s12);
Texture2D<float4> ReflectionSampler : register(t1);
Texture2D<float4> gDeferredLightSampler2 : register(t4);
Texture2D<float4> PuddleMaskSampler : register(t5);
Texture2D<float4> PuddleBumpSampler : register(t6);
Texture2D<float4> PuddlePlayerBumpSampler : register(t7);
Texture2D<float4> GBufferTextureSampler1Global : register(t8);
Texture2D<float4> GBufferTextureSampler3Global : register(t10);
Texture2D<float4> GBufferTextureSamplerDepthGlobal : register(t12);
Texture2D<float4> StereoParmsTexture : register(t20);

Texture2D<float4> StereoParams : register(t125);
Texture1D<float4> IniParams : register(t120);

void main( 
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = GBufferTextureSamplerDepthGlobal.Sample(GBufferTextureSamplerDepthGlobal_s, v1.xy).xyzw;
  r0.x = deferredProjectionParams.w + -r0.x;
  r0.x = 1 + r0.x;
  r0.x = deferredProjectionParams.z / r0.x;
  r0.yz = v2.xy / v2.ww;
  r0.w = 0 != gStereoParams.z;
  r1.x = v2.w == 1.000000;
  r0.w = r0.w ? r1.x : 0;
  if (r0.w != 0) {
    r1.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r1.y = -r1.y + r0.x;
    r1.x = r1.x * r1.y;
    r1.x = deferredProjectionParams.x * r1.x;
    r1.xy = -gViewInverse._m00_m01 * r1.xx + gViewInverse._m30_m31;
  } else {
    r2.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r1.xy = gViewInverse._m30_m31 + r2.xy;
  }
  r0.yz = r0.yz * r0.xx + r1.xy;
  r1.x = -140 + r0.x;
  r1.y = 0.0125000002 * r1.x;
  r1.x = saturate(-r1.x * 0.0125000002 + 1);
  r0.yz = g_Puddle_ScaleXY_Range.xx * r0.yz;
  r2.xyzw = PuddleMaskSampler.Sample(PuddleMaskSampler_s, r0.yz).xyzw;
  r0.y = saturate(-g_PuddleParams.x + r2.x);
  r0.y = r0.y * r1.x;
  r0.y = 0 < r0.y;
  r1.xzw = v2.xyz / v2.www;
  if (r0.w != 0) {
    r2.xyzw = StereoParmsTexture.Load(float4(0,0,0,0)).xyzw;
    r0.z = -r2.y + r0.x;
    r0.z = r2.x * r0.z;
    r0.z = deferredProjectionParams.x * r0.z;
    r2.xyz = -gViewInverse._m00_m01_m02 * r0.zzz + gViewInverse._m30_m31_m32;
  } else {
    r3.xyzw = StereoParmsTexture.Load(float4(0,1,0,0)).xyzw;
    r2.xyz = gViewInverse._m30_m31_m32 + r3.xyz;
  }
  r0.xzw = r1.xzw * r0.xxx + r2.xyz;
  r1.xz = g_Puddle_ScaleXY_Range.xx * r0.xz;
  r2.xyzw = PuddleMaskSampler.Sample(PuddleMaskSampler_s, r1.xz).xyzw;
  r1.xz = float2(0.5,0.5) * r0.xz;
  r3.xyzw = PuddleBumpSampler.Sample(PuddleBumpSampler_s, r1.xz).xyzw;
  r1.xz = r0.xz * RippleScaleOffset.xy + RippleScaleOffset.zw;
  r1.xz = r1.xz * float2(1,-1) + float2(0,1);
  r4.xyzw = PuddlePlayerBumpSampler.Sample(PuddlePlayerBumpSampler_s, r1.xz).xyzw;
  if (r0.y != 0) {
    r5.xyzw = GBufferTextureSampler1Global.Sample(GBufferTextureSampler1Global_s, v1.xy).xyzw;
    r6.xyzw = GBufferTextureSampler3Global.Sample(GBufferTextureSampler3Global_s, v1.xy).xyzw;
    r7.xyzw = gDeferredLightSampler2.Sample(gDeferredLightSampler2_s, v1.xy).xyzw;
    r0.y = r7.x * r6.x;
    r0.y = dot(r0.yy, r0.yy);
    r1.y = saturate(r1.y);
    r1.x = 1 + -r1.y;
    r1.y = g_Puddle_ScaleXY_Range.y + r5.w;
    r1.y = saturate(g_Puddle_ScaleXY_Range.z * r1.y);
    r1.x = r1.y * r1.x;
    r1.y = -0.5 + r6.x;
    r1.z = saturate(r6.x + r6.x);
    r1.z = r1.z * r1.z;
    r1.z = r1.z * r1.z;
    r1.x = r1.x * r1.z;
    r1.z = saturate(-g_PuddleParams.x + r2.x);
    r1.x = r1.z * r1.x + -0.078125;
    r1.xy = saturate(float2(1.18518519,8) * r1.xy);
    r0.xzw = gViewInverse._m30_m31_m32 + -r0.xzw;
    r1.z = dot(r0.xzw, r0.xzw);
    r1.z = rsqrt(r1.z);
    r0.xzw = r1.zzz * r0.xzw;
    r1.zw = r3.xy * float2(2,2) + float2(-1,-1);
    r2.xy = float2(-0.00196078443,-0.00196078443) + r4.xy;
    r1.zw = r2.xy * float2(2,2) + r1.zw;
    r1.zw = float2(-1,-1) + r1.zw;
    r2.xy = r1.zw * r1.yy;
    r1.y = dot(r2.xy, r2.xy);
    r1.y = 1 + -r1.y;
    r2.z = sqrt(abs(r1.y));
    r1.y = saturate(dot(r0.xzw, r2.xyz));
    r1.y = 1 + -r1.y;
    r1.z = r1.y * r1.y;
    r1.z = r1.z * r1.z;
    r1.y = r1.y * r1.z;
    r1.y = r1.y * 0.979629993 + 0.0203699991;
    r1.z = dot(-r0.xzw, r2.xyz);
    r1.z = min(0, r1.z);
    r2.xyz = r2.xyz * r1.zzz;
    r2.xyz = -r2.xyz * float3(2,2,2) + -r0.xzw;
    r0.x = r2.z < 0;
    r0.x = r0.x ? r0.w : r2.z;
    r0.z = -5 + gReflectionMipCount;
    r0.w = 0 < r0.z;
    r0.z = r0.w ? -5 : r0.z;
    r2.xyz = float3(-0.25,0.5,0.25) * r2.xyx;
    r0.w = 1 + abs(r0.x);
    r2.xyz = r2.xyz / r0.www;
    r2.xyz = float3(0.75,0.5,0.25) + -r2.xyz;
    r0.x = 0 < r0.x;
    r0.xw = r0.xx ? r2.xy : r2.zy;
    r2.xyzw = ReflectionSampler.SampleLevel(ReflectionSampler_s, r0.xw, r0.z).xyzw;
    r0.xzw = r2.xyz * r1.yyy;
    r0.y = -g_PuddleParams.w + r0.y;
    r0.y = saturate(1.5 * r0.y);
    r1.z = 1 + -g_PuddleParams.z;
    r1.y = r1.z * r1.y + g_PuddleParams.z;
    r1.x = 3 * r1.x;
    r1.x = min(1, r1.x);
    r1.x = r1.y * r1.x;
    o0.w = r1.x * r0.y;
    o0.xyz = globalScalars3.zzz * r0.xzw;
  } else {
    o0.xyzw = float4(0,0,0,0);
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer more_stuff
// {
//
//   float4 gEntitySelectColor[2];      // Offset:    0 Size:    32 [unused]
//   float4 gAmbientOcclusionEffect;    // Offset:   32 Size:    16 [unused]
//   float4 gDynamicBakesAndWetness;    // Offset:   48 Size:    16 [unused]
//   float4 gAlphaRefVec0;              // Offset:   64 Size:    16 [unused]
//   float4 gAlphaRefVec1;              // Offset:   80 Size:    16 [unused]
//   float gAlphaTestRef;               // Offset:   96 Size:     4 [unused]
//   bool gTreesUseDiscard;             // Offset:  100 Size:     4 [unused]
//   float gReflectionMipCount;         // Offset:  104 Size:     4
//   float gTransparencyAASamples;      // Offset:  108 Size:     4 [unused]
//   bool gUseFogRay;                   // Offset:  112 Size:     4 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
// cbuffer puddle_locals
// {
//
//   float4 g_Puddle_ScaleXY_Range;     // Offset:    0 Size:    16
//   float4 g_PuddleParams;             // Offset:   16 Size:    16
//   float4 g_GBufferTexture3Param;     // Offset:   32 Size:    16 [unused]
//
// }
//
// cbuffer ripple_locals
// {
//
//   float3 RippleData;                 // Offset:    0 Size:    12 [unused]
//   float4 RippleScaleOffset;          // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ReflectionSampler                 sampler      NA          NA    1        1
// gDeferredLightSampler2            sampler      NA          NA    4        1
// PuddleMaskSampler                 sampler      NA          NA    5        1
// PuddleBumpSampler                 sampler      NA          NA    6        1
// PuddlePlayerBumpSampler           sampler      NA          NA    7        1
// GBufferTextureSampler1Global      sampler      NA          NA    8        1
// GBufferTextureSampler3Global      sampler      NA          NA   10        1
// GBufferTextureSamplerDepthGlobal    sampler      NA          NA   12        1
// ReflectionSampler                 texture  float4          2d    1        1
// gDeferredLightSampler2            texture  float4          2d    4        1
// PuddleMaskSampler                 texture  float4          2d    5        1
// PuddleBumpSampler                 texture  float4          2d    6        1
// PuddlePlayerBumpSampler           texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler3Global      texture  float4          2d   10        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// more_stuff                        cbuffer      NA          NA    5        1
// ripple_locals                     cbuffer      NA          NA    9        1
// puddle_locals                     cbuffer      NA          NA   10        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_constantbuffer cb10[2], immediateIndexed
dcl_constantbuffer cb9[2], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 8
sample r0.xyzw, v1.xyxx, t12.xyzw, s12
add r0.x, -r0.x, cb13[17].w
add r0.x, r0.x, l(1.000000)
div r0.x, cb13[17].z, r0.x
div r0.yz, v2.xxyx, v2.wwww
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb2[22].z
eq r1.x, v2.w, l(1.000000)
and r0.w, r0.w, r1.x
if_nz r0.w
  ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r1.y, r0.x, -r1.y
  mul r1.x, r1.y, r1.x
  mul r1.x, r1.x, cb13[17].x
  mad r1.xy, -cb1[12].xyxx, r1.xxxx, cb1[15].xyxx
else 
  ld r2.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r1.xy, r2.xyxx, cb1[15].xyxx
endif 
mad r0.yz, r0.yyzy, r0.xxxx, r1.xxyx
add r1.x, r0.x, l(-140.000000)
mul r1.y, r1.x, l(0.012500)
mad_sat r1.x, -r1.x, l(0.012500), l(1.000000)
mul r0.yz, r0.yyzy, cb10[0].xxxx
sample r2.xyzw, r0.yzyy, t5.xyzw, s5
add_sat r0.y, r2.x, -cb10[1].x
mul r0.y, r1.x, r0.y
lt r0.y, l(0.000000), r0.y
div r1.xzw, v2.xxyz, v2.wwww
if_nz r0.w
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.z, r0.x, -r2.y
  mul r0.z, r0.z, r2.x
  mul r0.z, r0.z, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r0.zzzz, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r0.xzw, r1.xxzw, r0.xxxx, r2.xxyz
mul r1.xz, r0.xxzx, cb10[0].xxxx
sample r2.xyzw, r1.xzxx, t5.xyzw, s5
mul r1.xz, r0.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
sample r3.xyzw, r1.xzxx, t6.xyzw, s6
mad r1.xz, r0.xxzx, cb9[1].xxyx, cb9[1].zzwz
mad r1.xz, r1.xxzx, l(1.000000, 0.000000, -1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
sample r4.xyzw, r1.xzxx, t7.xyzw, s7
if_nz r0.y
  sample r5.xyzw, v1.xyxx, t8.xyzw, s8
  sample r6.xyzw, v1.xyxx, t10.xyzw, s10
  sample r7.xyzw, v1.xyxx, t4.xyzw, s4
  mul r0.y, r6.x, r7.x
  dp2 r0.y, r0.yyyy, r0.yyyy
  mov_sat r1.y, r1.y
  add r1.x, -r1.y, l(1.000000)
  add r1.y, r5.w, cb10[0].y
  mul_sat r1.y, r1.y, cb10[0].z
  mul r1.x, r1.x, r1.y
  add r1.y, r6.x, l(-0.500000)
  add_sat r1.z, r6.x, r6.x
  mul r1.z, r1.z, r1.z
  mul r1.z, r1.z, r1.z
  mul r1.x, r1.z, r1.x
  add_sat r1.z, r2.x, -cb10[1].x
  mad r1.x, r1.z, r1.x, l(-0.078125)
  mul_sat r1.xy, r1.xyxx, l(1.185185, 8.000000, 0.000000, 0.000000)
  add r0.xzw, -r0.xxzw, cb1[15].xxyz
  dp3 r1.z, r0.xzwx, r0.xzwx
  rsq r1.z, r1.z
  mul r0.xzw, r0.xxzw, r1.zzzz
  mad r1.zw, r3.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)
  add r2.xy, r4.xyxx, l(-0.001961, -0.001961, 0.000000, 0.000000)
  mad r1.zw, r2.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000), r1.zzzw
  add r1.zw, r1.zzzw, l(0.000000, 0.000000, -1.000000, -1.000000)
  mul r2.xy, r1.yyyy, r1.zwzz
  dp2 r1.y, r2.xyxx, r2.xyxx
  add r1.y, -r1.y, l(1.000000)
  sqrt r2.z, |r1.y|
  dp3_sat r1.y, r0.xzwx, r2.xyzx
  add r1.y, -r1.y, l(1.000000)
  mul r1.z, r1.y, r1.y
  mul r1.z, r1.z, r1.z
  mul r1.y, r1.z, r1.y
  mad r1.y, r1.y, l(0.979630), l(0.020370)
  dp3 r1.z, -r0.xzwx, r2.xyzx
  min r1.z, r1.z, l(0.000000)
  mul r2.xyz, r1.zzzz, r2.xyzx
  mad r2.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r0.xzwx
  lt r0.x, r2.z, l(0.000000)
  movc r0.x, r0.x, r0.w, r2.z
  add r0.z, cb5[6].z, l(-5.000000)
  lt r0.w, l(0.000000), r0.z
  movc r0.z, r0.w, l(-5.000000), r0.z
  mul r2.xyz, r2.xyxx, l(-0.250000, 0.500000, 0.250000, 0.000000)
  add r0.w, |r0.x|, l(1.000000)
  div r2.xyz, r2.xyzx, r0.wwww
  add r2.xyz, -r2.xyzx, l(0.750000, 0.500000, 0.250000, 0.000000)
  lt r0.x, l(0.000000), r0.x
  movc r0.xw, r0.xxxx, r2.xxxy, r2.zzzy
  sample_l r2.xyzw, r0.xwxx, t1.xyzw, s1, r0.z
  mul r0.xzw, r1.yyyy, r2.xxyz
  add r0.y, r0.y, -cb10[1].w
  mul_sat r0.y, r0.y, l(1.500000)
  add r1.z, -cb10[1].z, l(1.000000)
  mad r1.y, r1.z, r1.y, cb10[1].z
  mul r1.x, r1.x, l(3.000000)
  min r1.x, r1.x, l(1.000000)
  mul r1.x, r1.x, r1.y
  mul o0.w, r0.y, r1.x
  mul o0.xyz, r0.xzwx, cb2[14].zzzz
else 
  mov o0.xyzw, l(0,0,0,0)
endif 
ret 
// Approximately 113 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Recompiled ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
//
//   using 3Dmigoto v1.1.36 on Fri Jul 31 21:34:56 2015
//
//
// Buffer Definitions: 
//
// cbuffer rage_matrices
// {
//
//   row_major float4x4 gWorld;         // Offset:    0 Size:    64 [unused]
//   row_major float4x4 gWorldView;     // Offset:   64 Size:    64 [unused]
//   row_major float4x4 gWorldViewProj; // Offset:  128 Size:    64 [unused]
//   row_major float4x4 gViewInverse;   // Offset:  192 Size:    64
//
// }
//
// cbuffer misc_globals
// {
//
//   float4 globalFade;                 // Offset:    0 Size:    16 [unused]
//   float globalHeightScale;           // Offset:   16 Size:     4 [unused]
//   float globalShaderQuality;         // Offset:   20 Size:     4 [unused]
//   float globalReuseMe00001;          // Offset:   24 Size:     4 [unused]
//   float globalReuseMe00002;          // Offset:   28 Size:     4 [unused]
//   float4 POMFlags;                   // Offset:   32 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraPosition;// Offset:   48 Size:    16 [unused]
//   float4 g_Rage_Tessellation_CameraZAxis;// Offset:   64 Size:    16 [unused]
//   float4 g_Rage_Tessellation_ScreenSpaceErrorParams;// Offset:   80 Size:    16 [unused]
//   float4 g_Rage_Tessellation_LinearScale;// Offset:   96 Size:    16 [unused]
//   float4 g_Rage_Tessellation_Frustum[4];// Offset:  112 Size:    64 [unused]
//   float4 g_Rage_Tessellation_Epsilons;// Offset:  176 Size:    16 [unused]
//   float4 globalScalars;              // Offset:  192 Size:    16 [unused]
//   float4 globalScalars2;             // Offset:  208 Size:    16 [unused]
//   float4 globalScalars3;             // Offset:  224 Size:    16
//   float4 globalScreenSize;           // Offset:  240 Size:    16 [unused]
//   uint4 gTargetAAParams;             // Offset:  256 Size:    16 [unused]
//   float4 colorize;                   // Offset:  272 Size:    16 [unused]
//   float4 gGlobalParticleShadowBias;  // Offset:  288 Size:    16 [unused]
//   float gGlobalParticleDofAlphaScale;// Offset:  304 Size:     4 [unused]
//   float gGlobalFogIntensity;         // Offset:  308 Size:     4 [unused]
//   float4 gPlayerLFootPos;            // Offset:  320 Size:    16 [unused]
//   float4 gPlayerRFootPos;            // Offset:  336 Size:    16 [unused]
//   float4 gStereoParams;              // Offset:  352 Size:    16
//   float4 gStereoParams1;             // Offset:  368 Size:    16 [unused]
//
// }
//
// cbuffer more_stuff
// {
//
//   float4 gEntitySelectColor[2];      // Offset:    0 Size:    32 [unused]
//   float4 gAmbientOcclusionEffect;    // Offset:   32 Size:    16 [unused]
//   float4 gDynamicBakesAndWetness;    // Offset:   48 Size:    16 [unused]
//   float4 gAlphaRefVec0;              // Offset:   64 Size:    16 [unused]
//   float4 gAlphaRefVec1;              // Offset:   80 Size:    16 [unused]
//   float gAlphaTestRef;               // Offset:   96 Size:     4 [unused]
//   bool gTreesUseDiscard;             // Offset:  100 Size:     4 [unused]
//   float gReflectionMipCount;         // Offset:  104 Size:     4
//   float gTransparencyAASamples;      // Offset:  108 Size:     4 [unused]
//   bool gUseFogRay;                   // Offset:  112 Size:     4 [unused]
//
// }
//
// cbuffer lighting_locals
// {
//
//   float4 deferredLightParams[14];    // Offset:    0 Size:   224 [unused]
//   float4 deferredLightVolumeParams[2];// Offset:  224 Size:    32 [unused]
//   float4 deferredLightScreenSize;    // Offset:  256 Size:    16 [unused]
//   float4 deferredProjectionParams;   // Offset:  272 Size:    16
//   float3 deferredPerspectiveShearParams0;// Offset:  288 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams1;// Offset:  304 Size:    12 [unused]
//   float3 deferredPerspectiveShearParams2;// Offset:  320 Size:    12 [unused]
//
// }
//
// cbuffer puddle_locals
// {
//
//   float4 g_Puddle_ScaleXY_Range;     // Offset:    0 Size:    16
//   float4 g_PuddleParams;             // Offset:   16 Size:    16
//   float4 g_GBufferTexture3Param;     // Offset:   32 Size:    16 [unused]
//
// }
//
// cbuffer ripple_locals
// {
//
//   float3 RippleData;                 // Offset:    0 Size:    12 [unused]
//   float4 RippleScaleOffset;          // Offset:   16 Size:    16
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ReflectionSampler_s               sampler      NA          NA    1        1
// gDeferredLightSampler2_s          sampler      NA          NA    4        1
// PuddleMaskSampler_s               sampler      NA          NA    5        1
// PuddleBumpSampler_s               sampler      NA          NA    6        1
// PuddlePlayerBumpSampler_s         sampler      NA          NA    7        1
// GBufferTextureSampler1Global_s    sampler      NA          NA    8        1
// GBufferTextureSampler3Global_s    sampler      NA          NA   10        1
// GBufferTextureSamplerDepthGlobal_s    sampler      NA          NA   12        1
// ReflectionSampler                 texture  float4          2d    1        1
// gDeferredLightSampler2            texture  float4          2d    4        1
// PuddleMaskSampler                 texture  float4          2d    5        1
// PuddleBumpSampler                 texture  float4          2d    6        1
// PuddlePlayerBumpSampler           texture  float4          2d    7        1
// GBufferTextureSampler1Global      texture  float4          2d    8        1
// GBufferTextureSampler3Global      texture  float4          2d   10        1
// GBufferTextureSamplerDepthGlobal    texture  float4          2d   12        1
// StereoParmsTexture                texture  float4          2d   20        1
// rage_matrices                     cbuffer      NA          NA    1        1
// misc_globals                      cbuffer      NA          NA    2        1
// more_stuff                        cbuffer      NA          NA    5        1
// ripple_locals                     cbuffer      NA          NA    9        1
// puddle_locals                     cbuffer      NA          NA   10        1
// lighting_locals                   cbuffer      NA          NA   13        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb1[16], immediateIndexed
dcl_constantbuffer cb2[23], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb13[18], immediateIndexed
dcl_constantbuffer cb10[2], immediateIndexed
dcl_constantbuffer cb9[2], immediateIndexed
dcl_sampler s1, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_sampler s8, mode_default
dcl_sampler s10, mode_default
dcl_sampler s12, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t20
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_output o0.xyzw
dcl_temps 7
sample r0.xyzw, v1.xyxx, t12.xyzw, s12
add r0.x, -r0.x, cb13[17].w
add r0.x, r0.x, l(1.000000)
div r0.x, cb13[17].z, r0.x
div r0.yz, v2.xxyx, v2.wwww
ne r0.w, l(0.000000), cb2[22].z
eq r1.x, v2.w, l(1.000000)
and r0.w, r0.w, r1.x
if_nz r0.w
  ld r1.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r1.y, r0.x, -r1.y
  mul r1.x, r1.y, r1.x
  mul r1.x, r1.x, cb13[17].x
  mad r1.xy, -cb1[12].xyxx, r1.xxxx, cb1[15].xyxx
else 
  ld r2.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r1.xy, r2.xyxx, cb1[15].xyxx
endif 
mad r0.yz, r0.yyzy, r0.xxxx, r1.xxyx
add r1.x, r0.x, l(-140.000000)
mad_sat r1.y, r1.x, l(-0.012500), l(1.000000)
mul r0.yz, r0.yyzy, cb10[0].xxxx
sample r2.xyzw, r0.yzyy, t5.xyzw, s5
add_sat r0.y, r2.x, -cb10[1].x
mul r0.y, r1.y, r0.y
lt r0.y, l(0.000000), r0.y
div r1.yzw, v2.xxyz, v2.wwww
if_nz r0.w
  ld r2.xyzw, l(0, 0, 0, 0), t20.xyzw
  add r0.z, r0.x, -r2.y
  mul r0.z, r0.z, r2.x
  mul r0.z, r0.z, cb13[17].x
  mad r2.xyz, -cb1[12].xyzx, r0.zzzz, cb1[15].xyzx
else 
  ld r3.xyzw, l(0, 1, 0, 0), t20.xyzw
  add r2.xyz, r3.xyzx, cb1[15].xyzx
endif 
mad r0.xzw, r1.yyzw, r0.xxxx, r2.xxyz
mul r1.yz, r0.xxzx, cb10[0].xxxx
sample r2.xyzw, r1.yzyy, t5.xyzw, s5
mul r1.yz, r0.xxzx, l(0.000000, 0.500000, 0.500000, 0.000000)
sample r3.xyzw, r1.yzyy, t6.xyzw, s6
mad r1.yz, r0.xxzx, cb9[1].xxyx, cb9[1].zzwz
mad r1.yz, r1.yyzy, l(0.000000, 1.000000, -1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
sample r4.xyzw, r1.yzyy, t7.xyzw, s7
if_nz r0.y
  mul_sat r0.y, r1.x, l(0.012500)
  sample r1.xyzw, v1.xyxx, t8.xyzw, s8
  sample r5.xyzw, v1.xyxx, t10.xyzw, s10
  sample r6.xyzw, v1.xyxx, t4.xyzw, s4
  mul r1.x, r5.x, r6.x
  dp2 r1.x, r1.xxxx, r1.xxxx
  add r0.y, -r0.y, l(1.000000)
  add r1.y, r1.w, cb10[0].y
  mul_sat r1.y, r1.y, cb10[0].z
  mul r0.y, r0.y, r1.y
  add r6.y, r5.x, l(-0.500000)
  add_sat r1.y, r5.x, r5.x
  mul r1.y, r1.y, r1.y
  mul r1.y, r1.y, r1.y
  mul r0.y, r0.y, r1.y
  add_sat r1.y, r2.x, -cb10[1].x
  mad r6.x, r1.y, r0.y, l(-0.078125)
  mul_sat r1.yz, r6.xxyx, l(0.000000, 1.185185, 8.000000, 0.000000)
  add r0.xyz, -r0.xzwx, cb1[15].xyzx
  dp3 r0.w, r0.xyzx, r0.xyzx
  rsq r0.w, r0.w
  mul r0.xyz, r0.xyzx, r0.wwww
  mad r2.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
  add r2.zw, r4.xxxy, l(0.000000, 0.000000, -0.001961, -0.001961)
  mad r2.xy, r2.zwzz, l(2.000000, 2.000000, 0.000000, 0.000000), r2.xyxx
  add r2.xy, r2.xyxx, l(-1.000000, -1.000000, 0.000000, 0.000000)
  mul r2.xy, r1.zzzz, r2.xyxx
  dp2 r0.w, r2.xyxx, r2.xyxx
  add r0.w, -r0.w, l(1.000000)
  sqrt r2.z, |r0.w|
  dp3_sat r0.w, r0.xyzx, r2.xyzx
  add r0.w, -r0.w, l(1.000000)
  mul r1.z, r0.w, r0.w
  mul r1.z, r1.z, r1.z
  mul r0.w, r0.w, r1.z
  mad r0.w, r0.w, l(0.979630), l(0.020370)
  dp3 r1.z, -r0.xyzx, r2.xyzx
  min r1.z, r1.z, l(0.000000)
  mul r2.xyz, r1.zzzz, r2.xyzx
  mad r2.xyz, r2.xyzx, l(-2.000000, -2.000000, -2.000000, 0.000000), -r0.xyzx
  lt r0.x, r2.z, l(0.000000)
  movc r0.x, r0.x, r0.z, r2.z
  add r0.y, l(-5.000000), cb5[6].z
  lt r0.z, l(0.000000), r0.y
  movc r0.y, r0.z, l(-5.000000), r0.y
  mul r2.xyz, r2.xyxx, l(-0.250000, 0.500000, 0.250000, 0.000000)
  add r0.z, |r0.x|, l(1.000000)
  div r2.xyz, r2.xyzx, r0.zzzz
  add r2.xyz, -r2.xyzx, l(0.750000, 0.500000, 0.250000, 0.000000)
  lt r0.x, l(0.000000), r0.x
  movc r0.xz, r0.xxxx, r2.xxyx, r2.zzyz
  sample_l r2.xyzw, r0.xzxx, t1.xyzw, s1, r0.y
  mul r0.xyz, r0.wwww, r2.xyzx
  add r1.x, r1.x, -cb10[1].w
  mul_sat r1.x, r1.x, l(1.500000)
  add r1.z, l(1.000000), -cb10[1].z
  mad r0.w, r1.z, r0.w, cb10[1].z
  mul r1.y, r1.y, l(3.000000)
  min r1.y, r1.y, l(1.000000)
  mul r0.w, r0.w, r1.y
  mul o0.w, r1.x, r0.w
  mul o0.xyz, r0.xyzx, cb2[14].zzzz
else 
  mov o0.xyzw, l(0,0,0,0)
endif 
ret 
// Approximately 112 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
